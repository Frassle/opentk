//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to 
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//



namespace OpenTK.Graphics.ES11
{
    using System;
    using System.Text;
    using System.Runtime.InteropServices;
    #pragma warning disable 3019
    #pragma warning disable 1591
    #pragma warning disable 1572
    #pragma warning disable 1573
    #pragma warning disable 626

    partial class GL
    {
        static GL()
        {
            EntryPointNames = new byte[]
            {
                103, 108, 65, 99, 99, 117, 109, 120, 79, 69, 83, 0,
                103, 108, 65, 99, 116, 105, 118, 101, 84, 101, 120, 116, 117, 114, 101, 0,
                103, 108, 65, 108, 112, 104, 97, 70, 117, 110, 99, 0,
                103, 108, 65, 108, 112, 104, 97, 70, 117, 110, 99, 120, 0,
                103, 108, 65, 108, 112, 104, 97, 70, 117, 110, 99, 120, 79, 69, 83, 0,
                103, 108, 66, 105, 110, 100, 66, 117, 102, 102, 101, 114, 0,
                103, 108, 66, 105, 110, 100, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 79, 69, 83, 0,
                103, 108, 66, 105, 110, 100, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 79, 69, 83, 0,
                103, 108, 66, 105, 110, 100, 84, 101, 120, 116, 117, 114, 101, 0,
                103, 108, 66, 105, 110, 100, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 79, 69, 83, 0,
                103, 108, 66, 105, 116, 109, 97, 112, 120, 79, 69, 83, 0,
                103, 108, 66, 108, 101, 110, 100, 67, 111, 108, 111, 114, 120, 79, 69, 83, 0,
                103, 108, 66, 108, 101, 110, 100, 69, 113, 117, 97, 116, 105, 111, 110, 69, 88, 84, 0,
                103, 108, 66, 108, 101, 110, 100, 69, 113, 117, 97, 116, 105, 111, 110, 79, 69, 83, 0,
                103, 108, 66, 108, 101, 110, 100, 69, 113, 117, 97, 116, 105, 111, 110, 83, 101, 112, 97, 114, 97, 116, 101, 79, 69, 83, 0,
                103, 108, 66, 108, 101, 110, 100, 70, 117, 110, 99, 0,
                103, 108, 66, 108, 101, 110, 100, 70, 117, 110, 99, 83, 101, 112, 97, 114, 97, 116, 101, 79, 69, 83, 0,
                103, 108, 66, 117, 102, 102, 101, 114, 68, 97, 116, 97, 0,
                103, 108, 66, 117, 102, 102, 101, 114, 83, 117, 98, 68, 97, 116, 97, 0,
                103, 108, 67, 104, 101, 99, 107, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 83, 116, 97, 116, 117, 115, 79, 69, 83, 0,
                103, 108, 67, 108, 101, 97, 114, 0,
                103, 108, 67, 108, 101, 97, 114, 65, 99, 99, 117, 109, 120, 79, 69, 83, 0,
                103, 108, 67, 108, 101, 97, 114, 67, 111, 108, 111, 114, 0,
                103, 108, 67, 108, 101, 97, 114, 67, 111, 108, 111, 114, 120, 0,
                103, 108, 67, 108, 101, 97, 114, 67, 111, 108, 111, 114, 120, 79, 69, 83, 0,
                103, 108, 67, 108, 101, 97, 114, 68, 101, 112, 116, 104, 102, 0,
                103, 108, 67, 108, 101, 97, 114, 68, 101, 112, 116, 104, 102, 79, 69, 83, 0,
                103, 108, 67, 108, 101, 97, 114, 68, 101, 112, 116, 104, 120, 0,
                103, 108, 67, 108, 101, 97, 114, 68, 101, 112, 116, 104, 120, 79, 69, 83, 0,
                103, 108, 67, 108, 101, 97, 114, 83, 116, 101, 110, 99, 105, 108, 0,
                103, 108, 67, 108, 105, 101, 110, 116, 65, 99, 116, 105, 118, 101, 84, 101, 120, 116, 117, 114, 101, 0,
                103, 108, 67, 108, 105, 101, 110, 116, 87, 97, 105, 116, 83, 121, 110, 99, 65, 80, 80, 76, 69, 0,
                103, 108, 67, 108, 105, 112, 80, 108, 97, 110, 101, 102, 0,
                103, 108, 67, 108, 105, 112, 80, 108, 97, 110, 101, 102, 73, 77, 71, 0,
                103, 108, 67, 108, 105, 112, 80, 108, 97, 110, 101, 102, 79, 69, 83, 0,
                103, 108, 67, 108, 105, 112, 80, 108, 97, 110, 101, 120, 0,
                103, 108, 67, 108, 105, 112, 80, 108, 97, 110, 101, 120, 73, 77, 71, 0,
                103, 108, 67, 108, 105, 112, 80, 108, 97, 110, 101, 120, 79, 69, 83, 0,
                103, 108, 67, 111, 108, 111, 114, 51, 120, 79, 69, 83, 0,
                103, 108, 67, 111, 108, 111, 114, 51, 120, 118, 79, 69, 83, 0,
                103, 108, 67, 111, 108, 111, 114, 52, 102, 0,
                103, 108, 67, 111, 108, 111, 114, 52, 117, 98, 0,
                103, 108, 67, 111, 108, 111, 114, 52, 120, 0,
                103, 108, 67, 111, 108, 111, 114, 52, 120, 79, 69, 83, 0,
                103, 108, 67, 111, 108, 111, 114, 52, 120, 118, 79, 69, 83, 0,
                103, 108, 67, 111, 108, 111, 114, 77, 97, 115, 107, 0,
                103, 108, 67, 111, 108, 111, 114, 80, 111, 105, 110, 116, 101, 114, 0,
                103, 108, 67, 111, 109, 112, 114, 101, 115, 115, 101, 100, 84, 101, 120, 73, 109, 97, 103, 101, 50, 68, 0,
                103, 108, 67, 111, 109, 112, 114, 101, 115, 115, 101, 100, 84, 101, 120, 83, 117, 98, 73, 109, 97, 103, 101, 50, 68, 0,
                103, 108, 67, 111, 110, 118, 111, 108, 117, 116, 105, 111, 110, 80, 97, 114, 97, 109, 101, 116, 101, 114, 120, 79, 69, 83, 0,
                103, 108, 67, 111, 110, 118, 111, 108, 117, 116, 105, 111, 110, 80, 97, 114, 97, 109, 101, 116, 101, 114, 120, 118, 79, 69, 83, 0,
                103, 108, 67, 111, 112, 121, 84, 101, 120, 73, 109, 97, 103, 101, 50, 68, 0,
                103, 108, 67, 111, 112, 121, 84, 101, 120, 83, 117, 98, 73, 109, 97, 103, 101, 50, 68, 0,
                103, 108, 67, 111, 112, 121, 84, 101, 120, 116, 117, 114, 101, 76, 101, 118, 101, 108, 115, 65, 80, 80, 76, 69, 0,
                103, 108, 67, 117, 108, 108, 70, 97, 99, 101, 0,
                103, 108, 67, 117, 114, 114, 101, 110, 116, 80, 97, 108, 101, 116, 116, 101, 77, 97, 116, 114, 105, 120, 79, 69, 83, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 66, 117, 102, 102, 101, 114, 115, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 70, 101, 110, 99, 101, 115, 78, 86, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 115, 79, 69, 83, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 115, 79, 69, 83, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 83, 121, 110, 99, 65, 80, 80, 76, 69, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 84, 101, 120, 116, 117, 114, 101, 115, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 115, 79, 69, 83, 0,
                103, 108, 68, 101, 112, 116, 104, 70, 117, 110, 99, 0,
                103, 108, 68, 101, 112, 116, 104, 77, 97, 115, 107, 0,
                103, 108, 68, 101, 112, 116, 104, 82, 97, 110, 103, 101, 102, 0,
                103, 108, 68, 101, 112, 116, 104, 82, 97, 110, 103, 101, 102, 79, 69, 83, 0,
                103, 108, 68, 101, 112, 116, 104, 82, 97, 110, 103, 101, 120, 0,
                103, 108, 68, 101, 112, 116, 104, 82, 97, 110, 103, 101, 120, 79, 69, 83, 0,
                103, 108, 68, 105, 115, 97, 98, 108, 101, 0,
                103, 108, 68, 105, 115, 97, 98, 108, 101, 67, 108, 105, 101, 110, 116, 83, 116, 97, 116, 101, 0,
                103, 108, 68, 105, 115, 97, 98, 108, 101, 68, 114, 105, 118, 101, 114, 67, 111, 110, 116, 114, 111, 108, 81, 67, 79, 77, 0,
                103, 108, 68, 105, 115, 99, 97, 114, 100, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 69, 88, 84, 0,
                103, 108, 68, 114, 97, 119, 65, 114, 114, 97, 121, 115, 0,
                103, 108, 68, 114, 97, 119, 69, 108, 101, 109, 101, 110, 116, 115, 0,
                103, 108, 68, 114, 97, 119, 84, 101, 120, 102, 79, 69, 83, 0,
                103, 108, 68, 114, 97, 119, 84, 101, 120, 102, 118, 79, 69, 83, 0,
                103, 108, 68, 114, 97, 119, 84, 101, 120, 105, 79, 69, 83, 0,
                103, 108, 68, 114, 97, 119, 84, 101, 120, 105, 118, 79, 69, 83, 0,
                103, 108, 68, 114, 97, 119, 84, 101, 120, 115, 79, 69, 83, 0,
                103, 108, 68, 114, 97, 119, 84, 101, 120, 115, 118, 79, 69, 83, 0,
                103, 108, 68, 114, 97, 119, 84, 101, 120, 120, 79, 69, 83, 0,
                103, 108, 68, 114, 97, 119, 84, 101, 120, 120, 118, 79, 69, 83, 0,
                103, 108, 69, 71, 76, 73, 109, 97, 103, 101, 84, 97, 114, 103, 101, 116, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 83, 116, 111, 114, 97, 103, 101, 79, 69, 83, 0,
                103, 108, 69, 71, 76, 73, 109, 97, 103, 101, 84, 97, 114, 103, 101, 116, 84, 101, 120, 116, 117, 114, 101, 50, 68, 79, 69, 83, 0,
                103, 108, 69, 110, 97, 98, 108, 101, 0,
                103, 108, 69, 110, 97, 98, 108, 101, 67, 108, 105, 101, 110, 116, 83, 116, 97, 116, 101, 0,
                103, 108, 69, 110, 97, 98, 108, 101, 68, 114, 105, 118, 101, 114, 67, 111, 110, 116, 114, 111, 108, 81, 67, 79, 77, 0,
                103, 108, 69, 110, 100, 84, 105, 108, 105, 110, 103, 81, 67, 79, 77, 0,
                103, 108, 69, 118, 97, 108, 67, 111, 111, 114, 100, 49, 120, 79, 69, 83, 0,
                103, 108, 69, 118, 97, 108, 67, 111, 111, 114, 100, 49, 120, 118, 79, 69, 83, 0,
                103, 108, 69, 118, 97, 108, 67, 111, 111, 114, 100, 50, 120, 79, 69, 83, 0,
                103, 108, 69, 118, 97, 108, 67, 111, 111, 114, 100, 50, 120, 118, 79, 69, 83, 0,
                103, 108, 69, 120, 116, 71, 101, 116, 66, 117, 102, 102, 101, 114, 80, 111, 105, 110, 116, 101, 114, 118, 81, 67, 79, 77, 0,
                103, 108, 69, 120, 116, 71, 101, 116, 66, 117, 102, 102, 101, 114, 115, 81, 67, 79, 77, 0,
                103, 108, 69, 120, 116, 71, 101, 116, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 115, 81, 67, 79, 77, 0,
                103, 108, 69, 120, 116, 71, 101, 116, 80, 114, 111, 103, 114, 97, 109, 66, 105, 110, 97, 114, 121, 83, 111, 117, 114, 99, 101, 81, 67, 79, 77, 0,
                103, 108, 69, 120, 116, 71, 101, 116, 80, 114, 111, 103, 114, 97, 109, 115, 81, 67, 79, 77, 0,
                103, 108, 69, 120, 116, 71, 101, 116, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 115, 81, 67, 79, 77, 0,
                103, 108, 69, 120, 116, 71, 101, 116, 83, 104, 97, 100, 101, 114, 115, 81, 67, 79, 77, 0,
                103, 108, 69, 120, 116, 71, 101, 116, 84, 101, 120, 76, 101, 118, 101, 108, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 81, 67, 79, 77, 0,
                103, 108, 69, 120, 116, 71, 101, 116, 84, 101, 120, 83, 117, 98, 73, 109, 97, 103, 101, 81, 67, 79, 77, 0,
                103, 108, 69, 120, 116, 71, 101, 116, 84, 101, 120, 116, 117, 114, 101, 115, 81, 67, 79, 77, 0,
                103, 108, 69, 120, 116, 73, 115, 80, 114, 111, 103, 114, 97, 109, 66, 105, 110, 97, 114, 121, 81, 67, 79, 77, 0,
                103, 108, 69, 120, 116, 84, 101, 120, 79, 98, 106, 101, 99, 116, 83, 116, 97, 116, 101, 79, 118, 101, 114, 114, 105, 100, 101, 105, 81, 67, 79, 77, 0,
                103, 108, 70, 101, 101, 100, 98, 97, 99, 107, 66, 117, 102, 102, 101, 114, 120, 79, 69, 83, 0,
                103, 108, 70, 101, 110, 99, 101, 83, 121, 110, 99, 65, 80, 80, 76, 69, 0,
                103, 108, 70, 105, 110, 105, 115, 104, 0,
                103, 108, 70, 105, 110, 105, 115, 104, 70, 101, 110, 99, 101, 78, 86, 0,
                103, 108, 70, 108, 117, 115, 104, 0,
                103, 108, 70, 108, 117, 115, 104, 77, 97, 112, 112, 101, 100, 66, 117, 102, 102, 101, 114, 82, 97, 110, 103, 101, 69, 88, 84, 0,
                103, 108, 70, 111, 103, 102, 0,
                103, 108, 70, 111, 103, 102, 118, 0,
                103, 108, 70, 111, 103, 120, 0,
                103, 108, 70, 111, 103, 120, 79, 69, 83, 0,
                103, 108, 70, 111, 103, 120, 118, 0,
                103, 108, 70, 111, 103, 120, 118, 79, 69, 83, 0,
                103, 108, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 79, 69, 83, 0,
                103, 108, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 84, 101, 120, 116, 117, 114, 101, 50, 68, 77, 117, 108, 116, 105, 115, 97, 109, 112, 108, 101, 69, 88, 84, 0,
                103, 108, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 84, 101, 120, 116, 117, 114, 101, 50, 68, 77, 117, 108, 116, 105, 115, 97, 109, 112, 108, 101, 73, 77, 71, 0,
                103, 108, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 84, 101, 120, 116, 117, 114, 101, 50, 68, 79, 69, 83, 0,
                103, 108, 70, 114, 111, 110, 116, 70, 97, 99, 101, 0,
                103, 108, 70, 114, 117, 115, 116, 117, 109, 102, 0,
                103, 108, 70, 114, 117, 115, 116, 117, 109, 102, 79, 69, 83, 0,
                103, 108, 70, 114, 117, 115, 116, 117, 109, 120, 0,
                103, 108, 70, 114, 117, 115, 116, 117, 109, 120, 79, 69, 83, 0,
                103, 108, 71, 101, 110, 66, 117, 102, 102, 101, 114, 115, 0,
                103, 108, 71, 101, 110, 101, 114, 97, 116, 101, 77, 105, 112, 109, 97, 112, 79, 69, 83, 0,
                103, 108, 71, 101, 110, 70, 101, 110, 99, 101, 115, 78, 86, 0,
                103, 108, 71, 101, 110, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 115, 79, 69, 83, 0,
                103, 108, 71, 101, 110, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 115, 79, 69, 83, 0,
                103, 108, 71, 101, 110, 84, 101, 120, 116, 117, 114, 101, 115, 0,
                103, 108, 71, 101, 110, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 115, 79, 69, 83, 0,
                103, 108, 71, 101, 116, 66, 111, 111, 108, 101, 97, 110, 118, 0,
                103, 108, 71, 101, 116, 66, 117, 102, 102, 101, 114, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 0,
                103, 108, 71, 101, 116, 66, 117, 102, 102, 101, 114, 80, 111, 105, 110, 116, 101, 114, 118, 79, 69, 83, 0,
                103, 108, 71, 101, 116, 67, 108, 105, 112, 80, 108, 97, 110, 101, 102, 0,
                103, 108, 71, 101, 116, 67, 108, 105, 112, 80, 108, 97, 110, 101, 102, 79, 69, 83, 0,
                103, 108, 71, 101, 116, 67, 108, 105, 112, 80, 108, 97, 110, 101, 120, 0,
                103, 108, 71, 101, 116, 67, 108, 105, 112, 80, 108, 97, 110, 101, 120, 79, 69, 83, 0,
                103, 108, 71, 101, 116, 67, 111, 110, 118, 111, 108, 117, 116, 105, 111, 110, 80, 97, 114, 97, 109, 101, 116, 101, 114, 120, 118, 79, 69, 83, 0,
                103, 108, 71, 101, 116, 68, 114, 105, 118, 101, 114, 67, 111, 110, 116, 114, 111, 108, 115, 81, 67, 79, 77, 0,
                103, 108, 71, 101, 116, 68, 114, 105, 118, 101, 114, 67, 111, 110, 116, 114, 111, 108, 83, 116, 114, 105, 110, 103, 81, 67, 79, 77, 0,
                103, 108, 71, 101, 116, 69, 114, 114, 111, 114, 0,
                103, 108, 71, 101, 116, 70, 101, 110, 99, 101, 105, 118, 78, 86, 0,
                103, 108, 71, 101, 116, 70, 105, 120, 101, 100, 118, 0,
                103, 108, 71, 101, 116, 70, 105, 120, 101, 100, 118, 79, 69, 83, 0,
                103, 108, 71, 101, 116, 70, 108, 111, 97, 116, 118, 0,
                103, 108, 71, 101, 116, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 65, 116, 116, 97, 99, 104, 109, 101, 110, 116, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 79, 69, 83, 0,
                103, 108, 71, 101, 116, 71, 114, 97, 112, 104, 105, 99, 115, 82, 101, 115, 101, 116, 83, 116, 97, 116, 117, 115, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 72, 105, 115, 116, 111, 103, 114, 97, 109, 80, 97, 114, 97, 109, 101, 116, 101, 114, 120, 118, 79, 69, 83, 0,
                103, 108, 71, 101, 116, 73, 110, 116, 101, 103, 101, 114, 54, 52, 118, 65, 80, 80, 76, 69, 0,
                103, 108, 71, 101, 116, 73, 110, 116, 101, 103, 101, 114, 118, 0,
                103, 108, 71, 101, 116, 76, 105, 103, 104, 116, 102, 118, 0,
                103, 108, 71, 101, 116, 76, 105, 103, 104, 116, 120, 79, 69, 83, 0,
                103, 108, 71, 101, 116, 76, 105, 103, 104, 116, 120, 118, 0,
                103, 108, 71, 101, 116, 76, 105, 103, 104, 116, 120, 118, 79, 69, 83, 0,
                103, 108, 71, 101, 116, 77, 97, 112, 120, 118, 79, 69, 83, 0,
                103, 108, 71, 101, 116, 77, 97, 116, 101, 114, 105, 97, 108, 102, 118, 0,
                103, 108, 71, 101, 116, 77, 97, 116, 101, 114, 105, 97, 108, 120, 79, 69, 83, 0,
                103, 108, 71, 101, 116, 77, 97, 116, 101, 114, 105, 97, 108, 120, 118, 0,
                103, 108, 71, 101, 116, 77, 97, 116, 101, 114, 105, 97, 108, 120, 118, 79, 69, 83, 0,
                103, 108, 71, 101, 116, 110, 85, 110, 105, 102, 111, 114, 109, 102, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 110, 85, 110, 105, 102, 111, 114, 109, 105, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 80, 105, 120, 101, 108, 77, 97, 112, 120, 118, 0,
                103, 108, 71, 101, 116, 80, 111, 105, 110, 116, 101, 114, 118, 0,
                103, 108, 71, 101, 116, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 79, 69, 83, 0,
                103, 108, 71, 101, 116, 83, 116, 114, 105, 110, 103, 0,
                103, 108, 71, 101, 116, 83, 121, 110, 99, 105, 118, 65, 80, 80, 76, 69, 0,
                103, 108, 71, 101, 116, 84, 101, 120, 69, 110, 118, 102, 118, 0,
                103, 108, 71, 101, 116, 84, 101, 120, 69, 110, 118, 105, 118, 0,
                103, 108, 71, 101, 116, 84, 101, 120, 69, 110, 118, 120, 118, 0,
                103, 108, 71, 101, 116, 84, 101, 120, 69, 110, 118, 120, 118, 79, 69, 83, 0,
                103, 108, 71, 101, 116, 84, 101, 120, 71, 101, 110, 102, 118, 79, 69, 83, 0,
                103, 108, 71, 101, 116, 84, 101, 120, 71, 101, 110, 105, 118, 79, 69, 83, 0,
                103, 108, 71, 101, 116, 84, 101, 120, 71, 101, 110, 120, 118, 79, 69, 83, 0,
                103, 108, 71, 101, 116, 84, 101, 120, 76, 101, 118, 101, 108, 80, 97, 114, 97, 109, 101, 116, 101, 114, 120, 118, 79, 69, 83, 0,
                103, 108, 71, 101, 116, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 102, 118, 0,
                103, 108, 71, 101, 116, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 0,
                103, 108, 71, 101, 116, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 120, 118, 0,
                103, 108, 71, 101, 116, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 120, 118, 79, 69, 83, 0,
                103, 108, 72, 105, 110, 116, 0,
                103, 108, 73, 110, 100, 101, 120, 120, 79, 69, 83, 0,
                103, 108, 73, 110, 100, 101, 120, 120, 118, 79, 69, 83, 0,
                103, 108, 73, 115, 66, 117, 102, 102, 101, 114, 0,
                103, 108, 73, 115, 69, 110, 97, 98, 108, 101, 100, 0,
                103, 108, 73, 115, 70, 101, 110, 99, 101, 78, 86, 0,
                103, 108, 73, 115, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 79, 69, 83, 0,
                103, 108, 73, 115, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 79, 69, 83, 0,
                103, 108, 73, 115, 83, 121, 110, 99, 65, 80, 80, 76, 69, 0,
                103, 108, 73, 115, 84, 101, 120, 116, 117, 114, 101, 0,
                103, 108, 73, 115, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 79, 69, 83, 0,
                103, 108, 76, 105, 103, 104, 116, 102, 0,
                103, 108, 76, 105, 103, 104, 116, 102, 118, 0,
                103, 108, 76, 105, 103, 104, 116, 77, 111, 100, 101, 108, 102, 0,
                103, 108, 76, 105, 103, 104, 116, 77, 111, 100, 101, 108, 102, 118, 0,
                103, 108, 76, 105, 103, 104, 116, 77, 111, 100, 101, 108, 120, 0,
                103, 108, 76, 105, 103, 104, 116, 77, 111, 100, 101, 108, 120, 79, 69, 83, 0,
                103, 108, 76, 105, 103, 104, 116, 77, 111, 100, 101, 108, 120, 118, 0,
                103, 108, 76, 105, 103, 104, 116, 77, 111, 100, 101, 108, 120, 118, 79, 69, 83, 0,
                103, 108, 76, 105, 103, 104, 116, 120, 0,
                103, 108, 76, 105, 103, 104, 116, 120, 79, 69, 83, 0,
                103, 108, 76, 105, 103, 104, 116, 120, 118, 0,
                103, 108, 76, 105, 103, 104, 116, 120, 118, 79, 69, 83, 0,
                103, 108, 76, 105, 110, 101, 87, 105, 100, 116, 104, 0,
                103, 108, 76, 105, 110, 101, 87, 105, 100, 116, 104, 120, 0,
                103, 108, 76, 105, 110, 101, 87, 105, 100, 116, 104, 120, 79, 69, 83, 0,
                103, 108, 76, 111, 97, 100, 73, 100, 101, 110, 116, 105, 116, 121, 0,
                103, 108, 76, 111, 97, 100, 77, 97, 116, 114, 105, 120, 102, 0,
                103, 108, 76, 111, 97, 100, 77, 97, 116, 114, 105, 120, 120, 0,
                103, 108, 76, 111, 97, 100, 77, 97, 116, 114, 105, 120, 120, 79, 69, 83, 0,
                103, 108, 76, 111, 97, 100, 80, 97, 108, 101, 116, 116, 101, 70, 114, 111, 109, 77, 111, 100, 101, 108, 86, 105, 101, 119, 77, 97, 116, 114, 105, 120, 79, 69, 83, 0,
                103, 108, 76, 111, 97, 100, 84, 114, 97, 110, 115, 112, 111, 115, 101, 77, 97, 116, 114, 105, 120, 120, 79, 69, 83, 0,
                103, 108, 76, 111, 103, 105, 99, 79, 112, 0,
                103, 108, 77, 97, 112, 49, 120, 79, 69, 83, 0,
                103, 108, 77, 97, 112, 50, 120, 79, 69, 83, 0,
                103, 108, 77, 97, 112, 66, 117, 102, 102, 101, 114, 79, 69, 83, 0,
                103, 108, 77, 97, 112, 66, 117, 102, 102, 101, 114, 82, 97, 110, 103, 101, 69, 88, 84, 0,
                103, 108, 77, 97, 112, 71, 114, 105, 100, 49, 120, 79, 69, 83, 0,
                103, 108, 77, 97, 112, 71, 114, 105, 100, 50, 120, 79, 69, 83, 0,
                103, 108, 77, 97, 116, 101, 114, 105, 97, 108, 102, 0,
                103, 108, 77, 97, 116, 101, 114, 105, 97, 108, 102, 118, 0,
                103, 108, 77, 97, 116, 101, 114, 105, 97, 108, 120, 0,
                103, 108, 77, 97, 116, 101, 114, 105, 97, 108, 120, 79, 69, 83, 0,
                103, 108, 77, 97, 116, 101, 114, 105, 97, 108, 120, 118, 0,
                103, 108, 77, 97, 116, 101, 114, 105, 97, 108, 120, 118, 79, 69, 83, 0,
                103, 108, 77, 97, 116, 114, 105, 120, 73, 110, 100, 101, 120, 80, 111, 105, 110, 116, 101, 114, 79, 69, 83, 0,
                103, 108, 77, 97, 116, 114, 105, 120, 77, 111, 100, 101, 0,
                103, 108, 77, 117, 108, 116, 105, 68, 114, 97, 119, 65, 114, 114, 97, 121, 115, 69, 88, 84, 0,
                103, 108, 77, 117, 108, 116, 105, 68, 114, 97, 119, 69, 108, 101, 109, 101, 110, 116, 115, 69, 88, 84, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 67, 111, 111, 114, 100, 49, 98, 79, 69, 83, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 67, 111, 111, 114, 100, 49, 98, 118, 79, 69, 83, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 67, 111, 111, 114, 100, 49, 120, 79, 69, 83, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 67, 111, 111, 114, 100, 49, 120, 118, 79, 69, 83, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 67, 111, 111, 114, 100, 50, 98, 79, 69, 83, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 67, 111, 111, 114, 100, 50, 98, 118, 79, 69, 83, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 67, 111, 111, 114, 100, 50, 120, 79, 69, 83, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 67, 111, 111, 114, 100, 50, 120, 118, 79, 69, 83, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 67, 111, 111, 114, 100, 51, 98, 79, 69, 83, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 67, 111, 111, 114, 100, 51, 98, 118, 79, 69, 83, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 67, 111, 111, 114, 100, 51, 120, 79, 69, 83, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 67, 111, 111, 114, 100, 51, 120, 118, 79, 69, 83, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 67, 111, 111, 114, 100, 52, 98, 79, 69, 83, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 67, 111, 111, 114, 100, 52, 98, 118, 79, 69, 83, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 67, 111, 111, 114, 100, 52, 102, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 67, 111, 111, 114, 100, 52, 120, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 67, 111, 111, 114, 100, 52, 120, 79, 69, 83, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 67, 111, 111, 114, 100, 52, 120, 118, 79, 69, 83, 0,
                103, 108, 77, 117, 108, 116, 77, 97, 116, 114, 105, 120, 102, 0,
                103, 108, 77, 117, 108, 116, 77, 97, 116, 114, 105, 120, 120, 0,
                103, 108, 77, 117, 108, 116, 77, 97, 116, 114, 105, 120, 120, 79, 69, 83, 0,
                103, 108, 77, 117, 108, 116, 84, 114, 97, 110, 115, 112, 111, 115, 101, 77, 97, 116, 114, 105, 120, 120, 79, 69, 83, 0,
                103, 108, 78, 111, 114, 109, 97, 108, 51, 102, 0,
                103, 108, 78, 111, 114, 109, 97, 108, 51, 120, 0,
                103, 108, 78, 111, 114, 109, 97, 108, 51, 120, 79, 69, 83, 0,
                103, 108, 78, 111, 114, 109, 97, 108, 51, 120, 118, 79, 69, 83, 0,
                103, 108, 78, 111, 114, 109, 97, 108, 80, 111, 105, 110, 116, 101, 114, 0,
                103, 108, 79, 114, 116, 104, 111, 102, 0,
                103, 108, 79, 114, 116, 104, 111, 102, 79, 69, 83, 0,
                103, 108, 79, 114, 116, 104, 111, 120, 0,
                103, 108, 79, 114, 116, 104, 111, 120, 79, 69, 83, 0,
                103, 108, 80, 97, 115, 115, 84, 104, 114, 111, 117, 103, 104, 120, 79, 69, 83, 0,
                103, 108, 80, 105, 120, 101, 108, 77, 97, 112, 120, 0,
                103, 108, 80, 105, 120, 101, 108, 83, 116, 111, 114, 101, 105, 0,
                103, 108, 80, 105, 120, 101, 108, 83, 116, 111, 114, 101, 120, 0,
                103, 108, 80, 105, 120, 101, 108, 84, 114, 97, 110, 115, 102, 101, 114, 120, 79, 69, 83, 0,
                103, 108, 80, 105, 120, 101, 108, 90, 111, 111, 109, 120, 79, 69, 83, 0,
                103, 108, 80, 111, 105, 110, 116, 80, 97, 114, 97, 109, 101, 116, 101, 114, 102, 0,
                103, 108, 80, 111, 105, 110, 116, 80, 97, 114, 97, 109, 101, 116, 101, 114, 102, 118, 0,
                103, 108, 80, 111, 105, 110, 116, 80, 97, 114, 97, 109, 101, 116, 101, 114, 120, 0,
                103, 108, 80, 111, 105, 110, 116, 80, 97, 114, 97, 109, 101, 116, 101, 114, 120, 79, 69, 83, 0,
                103, 108, 80, 111, 105, 110, 116, 80, 97, 114, 97, 109, 101, 116, 101, 114, 120, 118, 0,
                103, 108, 80, 111, 105, 110, 116, 80, 97, 114, 97, 109, 101, 116, 101, 114, 120, 118, 79, 69, 83, 0,
                103, 108, 80, 111, 105, 110, 116, 83, 105, 122, 101, 0,
                103, 108, 80, 111, 105, 110, 116, 83, 105, 122, 101, 80, 111, 105, 110, 116, 101, 114, 79, 69, 83, 0,
                103, 108, 80, 111, 105, 110, 116, 83, 105, 122, 101, 120, 0,
                103, 108, 80, 111, 105, 110, 116, 83, 105, 122, 101, 120, 79, 69, 83, 0,
                103, 108, 80, 111, 108, 121, 103, 111, 110, 79, 102, 102, 115, 101, 116, 0,
                103, 108, 80, 111, 108, 121, 103, 111, 110, 79, 102, 102, 115, 101, 116, 120, 0,
                103, 108, 80, 111, 108, 121, 103, 111, 110, 79, 102, 102, 115, 101, 116, 120, 79, 69, 83, 0,
                103, 108, 80, 111, 112, 77, 97, 116, 114, 105, 120, 0,
                103, 108, 80, 114, 105, 111, 114, 105, 116, 105, 122, 101, 84, 101, 120, 116, 117, 114, 101, 115, 120, 79, 69, 83, 0,
                103, 108, 80, 117, 115, 104, 77, 97, 116, 114, 105, 120, 0,
                103, 108, 81, 117, 101, 114, 121, 77, 97, 116, 114, 105, 120, 120, 79, 69, 83, 0,
                103, 108, 82, 97, 115, 116, 101, 114, 80, 111, 115, 50, 120, 79, 69, 83, 0,
                103, 108, 82, 97, 115, 116, 101, 114, 80, 111, 115, 50, 120, 118, 79, 69, 83, 0,
                103, 108, 82, 97, 115, 116, 101, 114, 80, 111, 115, 51, 120, 79, 69, 83, 0,
                103, 108, 82, 97, 115, 116, 101, 114, 80, 111, 115, 51, 120, 118, 79, 69, 83, 0,
                103, 108, 82, 97, 115, 116, 101, 114, 80, 111, 115, 52, 120, 79, 69, 83, 0,
                103, 108, 82, 97, 115, 116, 101, 114, 80, 111, 115, 52, 120, 118, 79, 69, 83, 0,
                103, 108, 82, 101, 97, 100, 110, 80, 105, 120, 101, 108, 115, 69, 88, 84, 0,
                103, 108, 82, 101, 97, 100, 80, 105, 120, 101, 108, 115, 0,
                103, 108, 82, 101, 99, 116, 120, 79, 69, 83, 0,
                103, 108, 82, 101, 99, 116, 120, 118, 79, 69, 83, 0,
                103, 108, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 83, 116, 111, 114, 97, 103, 101, 77, 117, 108, 116, 105, 115, 97, 109, 112, 108, 101, 65, 80, 80, 76, 69, 0,
                103, 108, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 83, 116, 111, 114, 97, 103, 101, 77, 117, 108, 116, 105, 115, 97, 109, 112, 108, 101, 69, 88, 84, 0,
                103, 108, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 83, 116, 111, 114, 97, 103, 101, 77, 117, 108, 116, 105, 115, 97, 109, 112, 108, 101, 73, 77, 71, 0,
                103, 108, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 83, 116, 111, 114, 97, 103, 101, 79, 69, 83, 0,
                103, 108, 82, 101, 115, 111, 108, 118, 101, 77, 117, 108, 116, 105, 115, 97, 109, 112, 108, 101, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 65, 80, 80, 76, 69, 0,
                103, 108, 82, 111, 116, 97, 116, 101, 102, 0,
                103, 108, 82, 111, 116, 97, 116, 101, 120, 0,
                103, 108, 82, 111, 116, 97, 116, 101, 120, 79, 69, 83, 0,
                103, 108, 83, 97, 109, 112, 108, 101, 67, 111, 118, 101, 114, 97, 103, 101, 0,
                103, 108, 83, 97, 109, 112, 108, 101, 67, 111, 118, 101, 114, 97, 103, 101, 79, 69, 83, 0,
                103, 108, 83, 97, 109, 112, 108, 101, 67, 111, 118, 101, 114, 97, 103, 101, 120, 0,
                103, 108, 83, 97, 109, 112, 108, 101, 67, 111, 118, 101, 114, 97, 103, 101, 120, 79, 69, 83, 0,
                103, 108, 83, 99, 97, 108, 101, 102, 0,
                103, 108, 83, 99, 97, 108, 101, 120, 0,
                103, 108, 83, 99, 97, 108, 101, 120, 79, 69, 83, 0,
                103, 108, 83, 99, 105, 115, 115, 111, 114, 0,
                103, 108, 83, 101, 116, 70, 101, 110, 99, 101, 78, 86, 0,
                103, 108, 83, 104, 97, 100, 101, 77, 111, 100, 101, 108, 0,
                103, 108, 83, 116, 97, 114, 116, 84, 105, 108, 105, 110, 103, 81, 67, 79, 77, 0,
                103, 108, 83, 116, 101, 110, 99, 105, 108, 70, 117, 110, 99, 0,
                103, 108, 83, 116, 101, 110, 99, 105, 108, 77, 97, 115, 107, 0,
                103, 108, 83, 116, 101, 110, 99, 105, 108, 79, 112, 0,
                103, 108, 84, 101, 115, 116, 70, 101, 110, 99, 101, 78, 86, 0,
                103, 108, 84, 101, 120, 67, 111, 111, 114, 100, 49, 98, 79, 69, 83, 0,
                103, 108, 84, 101, 120, 67, 111, 111, 114, 100, 49, 98, 118, 79, 69, 83, 0,
                103, 108, 84, 101, 120, 67, 111, 111, 114, 100, 49, 120, 79, 69, 83, 0,
                103, 108, 84, 101, 120, 67, 111, 111, 114, 100, 49, 120, 118, 79, 69, 83, 0,
                103, 108, 84, 101, 120, 67, 111, 111, 114, 100, 50, 98, 79, 69, 83, 0,
                103, 108, 84, 101, 120, 67, 111, 111, 114, 100, 50, 98, 118, 79, 69, 83, 0,
                103, 108, 84, 101, 120, 67, 111, 111, 114, 100, 50, 120, 79, 69, 83, 0,
                103, 108, 84, 101, 120, 67, 111, 111, 114, 100, 50, 120, 118, 79, 69, 83, 0,
                103, 108, 84, 101, 120, 67, 111, 111, 114, 100, 51, 98, 79, 69, 83, 0,
                103, 108, 84, 101, 120, 67, 111, 111, 114, 100, 51, 98, 118, 79, 69, 83, 0,
                103, 108, 84, 101, 120, 67, 111, 111, 114, 100, 51, 120, 79, 69, 83, 0,
                103, 108, 84, 101, 120, 67, 111, 111, 114, 100, 51, 120, 118, 79, 69, 83, 0,
                103, 108, 84, 101, 120, 67, 111, 111, 114, 100, 52, 98, 79, 69, 83, 0,
                103, 108, 84, 101, 120, 67, 111, 111, 114, 100, 52, 98, 118, 79, 69, 83, 0,
                103, 108, 84, 101, 120, 67, 111, 111, 114, 100, 52, 120, 79, 69, 83, 0,
                103, 108, 84, 101, 120, 67, 111, 111, 114, 100, 52, 120, 118, 79, 69, 83, 0,
                103, 108, 84, 101, 120, 67, 111, 111, 114, 100, 80, 111, 105, 110, 116, 101, 114, 0,
                103, 108, 84, 101, 120, 69, 110, 118, 102, 0,
                103, 108, 84, 101, 120, 69, 110, 118, 102, 118, 0,
                103, 108, 84, 101, 120, 69, 110, 118, 105, 0,
                103, 108, 84, 101, 120, 69, 110, 118, 105, 118, 0,
                103, 108, 84, 101, 120, 69, 110, 118, 120, 0,
                103, 108, 84, 101, 120, 69, 110, 118, 120, 79, 69, 83, 0,
                103, 108, 84, 101, 120, 69, 110, 118, 120, 118, 0,
                103, 108, 84, 101, 120, 69, 110, 118, 120, 118, 79, 69, 83, 0,
                103, 108, 84, 101, 120, 71, 101, 110, 102, 79, 69, 83, 0,
                103, 108, 84, 101, 120, 71, 101, 110, 102, 118, 79, 69, 83, 0,
                103, 108, 84, 101, 120, 71, 101, 110, 105, 79, 69, 83, 0,
                103, 108, 84, 101, 120, 71, 101, 110, 105, 118, 79, 69, 83, 0,
                103, 108, 84, 101, 120, 71, 101, 110, 120, 79, 69, 83, 0,
                103, 108, 84, 101, 120, 71, 101, 110, 120, 118, 79, 69, 83, 0,
                103, 108, 84, 101, 120, 73, 109, 97, 103, 101, 50, 68, 0,
                103, 108, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 102, 0,
                103, 108, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 102, 118, 0,
                103, 108, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 0,
                103, 108, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 0,
                103, 108, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 120, 0,
                103, 108, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 120, 79, 69, 83, 0,
                103, 108, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 120, 118, 0,
                103, 108, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 120, 118, 79, 69, 83, 0,
                103, 108, 84, 101, 120, 83, 116, 111, 114, 97, 103, 101, 49, 68, 69, 88, 84, 0,
                103, 108, 84, 101, 120, 83, 116, 111, 114, 97, 103, 101, 50, 68, 69, 88, 84, 0,
                103, 108, 84, 101, 120, 83, 116, 111, 114, 97, 103, 101, 51, 68, 69, 88, 84, 0,
                103, 108, 84, 101, 120, 83, 117, 98, 73, 109, 97, 103, 101, 50, 68, 0,
                103, 108, 84, 101, 120, 116, 117, 114, 101, 83, 116, 111, 114, 97, 103, 101, 49, 68, 69, 88, 84, 0,
                103, 108, 84, 101, 120, 116, 117, 114, 101, 83, 116, 111, 114, 97, 103, 101, 50, 68, 69, 88, 84, 0,
                103, 108, 84, 101, 120, 116, 117, 114, 101, 83, 116, 111, 114, 97, 103, 101, 51, 68, 69, 88, 84, 0,
                103, 108, 84, 114, 97, 110, 115, 108, 97, 116, 101, 102, 0,
                103, 108, 84, 114, 97, 110, 115, 108, 97, 116, 101, 120, 0,
                103, 108, 84, 114, 97, 110, 115, 108, 97, 116, 101, 120, 79, 69, 83, 0,
                103, 108, 85, 110, 109, 97, 112, 66, 117, 102, 102, 101, 114, 79, 69, 83, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 50, 98, 79, 69, 83, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 50, 98, 118, 79, 69, 83, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 50, 120, 79, 69, 83, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 50, 120, 118, 79, 69, 83, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 51, 98, 79, 69, 83, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 51, 98, 118, 79, 69, 83, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 51, 120, 79, 69, 83, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 51, 120, 118, 79, 69, 83, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 52, 98, 79, 69, 83, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 52, 98, 118, 79, 69, 83, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 52, 120, 79, 69, 83, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 52, 120, 118, 79, 69, 83, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 80, 111, 105, 110, 116, 101, 114, 0,
                103, 108, 86, 105, 101, 119, 112, 111, 114, 116, 0,
                103, 108, 87, 97, 105, 116, 83, 121, 110, 99, 65, 80, 80, 76, 69, 0,
                103, 108, 87, 101, 105, 103, 104, 116, 80, 111, 105, 110, 116, 101, 114, 79, 69, 83, 0,
            };
            EntryPointNameOffsets = new int[]
            {
                0,
                12,
                28,
                40,
                53,
                69,
                82,
                103,
                125,
                139,
                160,
                173,
                190,
                209,
                228,
                255,
                267,
                290,
                303,
                319,
                347,
                355,
                372,
                385,
                399,
                416,
                430,
                447,
                461,
                478,
                493,
                515,
                537,
                550,
                566,
                582,
                595,
                611,
                627,
                640,
                654,
                664,
                675,
                685,
                698,
                712,
                724,
                739,
                762,
                788,
                815,
                843,
                860,
                880,
                905,
                916,
                942,
                958,
                975,
                999,
                1024,
                1042,
                1059,
                1083,
                1095,
                1107,
                1121,
                1138,
                1152,
                1169,
                1179,
                1200,
                1227,
                1251,
                1264,
                1279,
                1293,
                1308,
                1322,
                1337,
                1351,
                1366,
                1380,
                1395,
                1434,
                1463,
                1472,
                1492,
                1518,
                1534,
                1551,
                1569,
                1586,
                1604,
                1631,
                1651,
                1676,
                1708,
                1729,
                1755,
                1775,
                1807,
                1831,
                1852,
                1877,
                1910,
                1931,
                1948,
                1957,
                1973,
                1981,
                2009,
                2016,
                2024,
                2031,
                2041,
                2049,
                2060,
                2089,
                2126,
                2163,
                2189,
                2201,
                2212,
                2226,
                2237,
                2251,
                2264,
                2284,
                2298,
                2319,
                2341,
                2355,
                2376,
                2390,
                2413,
                2436,
                2452,
                2471,
                2487,
                2506,
                2537,
                2561,
                2590,
                2601,
                2616,
                2628,
                2643,
                2655,
                2696,
                2724,
                2753,
                2774,
                2788,
                2801,
                2816,
                2829,
                2845,
                2859,
                2875,
                2893,
                2909,
                2928,
                2947,
                2966,
                2982,
                2996,
                3028,
                3040,
                3057,
                3071,
                3085,
                3099,
                3116,
                3133,
                3150,
                3167,
                3195,
                3215,
                3235,
                3255,
                3278,
                3285,
                3297,
                3310,
                3321,
                3333,
                3345,
                3364,
                3384,
                3398,
                3410,
                3429,
                3438,
                3448,
                3462,
                3477,
                3491,
                3508,
                3523,
                3541,
                3550,
                3562,
                3572,
                3585,
                3597,
                3610,
                3626,
                3641,
                3655,
                3669,
                3686,
                3722,
                3748,
                3758,
                3769,
                3780,
                3795,
                3815,
                3830,
                3845,
                3857,
                3870,
                3882,
                3897,
                3910,
                3926,
                3950,
                3963,
                3984,
                4007,
                4028,
                4050,
                4071,
                4093,
                4114,
                4136,
                4157,
                4179,
                4200,
                4222,
                4243,
                4265,
                4286,
                4308,
                4326,
                4344,
                4365,
                4387,
                4401,
                4415,
                4432,
                4458,
                4469,
                4480,
                4494,
                4509,
                4525,
                4534,
                4546,
                4555,
                4567,
                4585,
                4597,
                4611,
                4625,
                4645,
                4661,
                4679,
                4698,
                4716,
                4737,
                4756,
                4778,
                4790,
                4812,
                4825,
                4841,
                4857,
                4874,
                4894,
                4906,
                4931,
                4944,
                4962,
                4979,
                4997,
                5014,
                5032,
                5049,
                5067,
                5084,
                5097,
                5108,
                5120,
                5158,
                5194,
                5230,
                5255,
                5292,
                5302,
                5312,
                5325,
                5342,
                5362,
                5380,
                5401,
                5410,
                5419,
                5431,
                5441,
                5454,
                5467,
                5485,
                5499,
                5513,
                5525,
                5539,
                5555,
                5572,
                5588,
                5605,
                5621,
                5638,
                5654,
                5671,
                5687,
                5704,
                5720,
                5737,
                5753,
                5770,
                5786,
                5803,
                5821,
                5831,
                5842,
                5852,
                5863,
                5873,
                5886,
                5897,
                5911,
                5924,
                5938,
                5951,
                5965,
                5978,
                5992,
                6005,
                6021,
                6038,
                6054,
                6071,
                6087,
                6106,
                6123,
                6143,
                6161,
                6179,
                6197,
                6213,
                6235,
                6257,
                6279,
                6292,
                6305,
                6321,
                6338,
                6352,
                6367,
                6381,
                6396,
                6410,
                6425,
                6439,
                6454,
                6468,
                6483,
                6497,
                6512,
                6528,
                6539,
                6555,
            };
            EntryPoints = new IntPtr[EntryPointNameOffsets.Length];
        }

        public static partial class Apple
        {
            /// <summary>[requires: APPLE_sync]
            /// Block and wait for a sync object to become signaled
            /// </summary>
            /// <param name="sync"> 
            /// The sync object whose status to wait on.
            /// </param>
            /// <param name="flags"> 
            /// A bitfield controlling the command flushing behavior. flags may be SyncFlushCommandsBit.
            /// </param>
            /// <param name="timeout"> 
            /// The timeout, specified in nanoseconds, for which the implementation should wait for sync to become signaled.
            /// </param>
            [CLSCompliant(false)]
            public static OpenTK.Graphics.ES11.All ClientWaitSync(IntPtr sync, Int32 flags, Int64 timeout)
            {
                unsafe
                {
                    OpenTK.Graphics.ES11.All __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(31);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr), typeof(UInt32), typeof(UInt64));
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: APPLE_sync]
            /// Block and wait for a sync object to become signaled
            /// </summary>
            /// <param name="sync"> 
            /// The sync object whose status to wait on.
            /// </param>
            /// <param name="flags"> 
            /// A bitfield controlling the command flushing behavior. flags may be SyncFlushCommandsBit.
            /// </param>
            /// <param name="timeout"> 
            /// The timeout, specified in nanoseconds, for which the implementation should wait for sync to become signaled.
            /// </param>
            [CLSCompliant(false)]
            public static OpenTK.Graphics.ES11.All ClientWaitSync(IntPtr sync, UInt32 flags, UInt64 timeout)
            {
                unsafe
                {
                    OpenTK.Graphics.ES11.All __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(31);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr), typeof(UInt32), typeof(UInt64));
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: APPLE_copy_texture_levels]</summary>
            /// <param name="destinationTexture"></param>
            /// <param name="sourceTexture"></param>
            /// <param name="sourceBaseLevel"></param>
            /// <param name="sourceLevelCount"></param>
            [CLSCompliant(false)]
            public static void CopyTextureLevel(Int32 destinationTexture, Int32 sourceTexture, Int32 sourceBaseLevel, Int32 sourceLevelCount)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(53);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: APPLE_copy_texture_levels]</summary>
            /// <param name="destinationTexture"></param>
            /// <param name="sourceTexture"></param>
            /// <param name="sourceBaseLevel"></param>
            /// <param name="sourceLevelCount"></param>
            [CLSCompliant(false)]
            public static void CopyTextureLevel(UInt32 destinationTexture, UInt32 sourceTexture, Int32 sourceBaseLevel, Int32 sourceLevelCount)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(53);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: APPLE_sync]
            /// Delete a sync object
            /// </summary>
            /// <param name="sync"> 
            /// The sync object to be deleted.
            /// </param>
            public static void DeleteSync(IntPtr sync)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(60);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: APPLE_sync]
            /// Create a new sync object and insert it into the GL command stream
            /// </summary>
            /// <param name="condition"> 
            /// Specifies the condition that must be met to set the sync object's state to signaled. condition must be SyncGpuCommandsComplete.
            /// </param>
            /// <param name="flags"> 
            /// Specifies a bitwise combination of flags controlling the behavior of the sync object. No flags are presently defined for this operation and flags must be zero.flags is a placeholder for anticipated future extensions of fence sync object capabilities.
            /// </param>
            [CLSCompliant(false)]
            public static IntPtr FenceSync(OpenTK.Graphics.ES11.All condition, Int32 flags)
            {
                unsafe
                {
                    IntPtr __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(106);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(IntPtr), typeof(OpenTK.Graphics.ES11.All), typeof(UInt32));
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: APPLE_sync]
            /// Create a new sync object and insert it into the GL command stream
            /// </summary>
            /// <param name="condition"> 
            /// Specifies the condition that must be met to set the sync object's state to signaled. condition must be SyncGpuCommandsComplete.
            /// </param>
            /// <param name="flags"> 
            /// Specifies a bitwise combination of flags controlling the behavior of the sync object. No flags are presently defined for this operation and flags must be zero.flags is a placeholder for anticipated future extensions of fence sync object capabilities.
            /// </param>
            [CLSCompliant(false)]
            public static IntPtr FenceSync(OpenTK.Graphics.ES11.All condition, UInt32 flags)
            {
                unsafe
                {
                    IntPtr __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(106);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(IntPtr), typeof(OpenTK.Graphics.ES11.All), typeof(UInt32));
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: APPLE_sync]</summary>
            /// <param name="pname"></param>
            [CLSCompliant(false)]
            public static Int64 GetInteger64(OpenTK.Graphics.ES11.All pname)
            {
                unsafe
                {
                    Int64 __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Int64 __result = default(Int64);
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadAddress(__result);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(151);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int64*));
                        Silk.Cil.Load(__result);
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: APPLE_sync]</summary>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [CLSCompliant(false)]
            public static void GetInteger64(OpenTK.Graphics.ES11.All pname, [OutAttribute] Int64[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int64& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int64");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(151);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int64*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: APPLE_sync]</summary>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [CLSCompliant(false)]
            public static void GetInteger64(OpenTK.Graphics.ES11.All pname, [OutAttribute] out Int64 @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int64& pinned", "params_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(151);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int64*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: APPLE_sync]</summary>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [CLSCompliant(false)]
            public static unsafe void GetInteger64(OpenTK.Graphics.ES11.All pname, [OutAttribute] Int64* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(151);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int64*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: APPLE_sync]
            /// Query the properties of a sync object
            /// </summary>
            /// <param name="sync"> 
            /// Specifies the sync object whose properties to query.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the parameter whose value to retrieve from the sync object specified in sync.
            /// </param>
            /// <param name="bufSize"> 
            /// Specifies the size of the buffer whose address is given in values.
            /// </param>
            /// <param name="length"> 
            /// Specifies the address of an variable to receive the number of integers placed in values.
            /// </param>
            /// <param name="values">[length: bufSize] 
            /// Specifies the address of an array to receive the values of the queried parameter.
            /// </param>
            [CLSCompliant(false)]
            public static void GetSync(IntPtr sync, OpenTK.Graphics.ES11.All pname, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] Int32[] values)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        if(length != null && length.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "values_pinned");
                        if(values != null && values.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("values_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("values_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("length_pinned");
                        Silk.Cil.LoadByName("values_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(168);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(IntPtr), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(Int32*), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: APPLE_sync]
            /// Query the properties of a sync object
            /// </summary>
            /// <param name="sync"> 
            /// Specifies the sync object whose properties to query.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the parameter whose value to retrieve from the sync object specified in sync.
            /// </param>
            /// <param name="bufSize"> 
            /// Specifies the size of the buffer whose address is given in values.
            /// </param>
            /// <param name="length"> 
            /// Specifies the address of an variable to receive the number of integers placed in values.
            /// </param>
            /// <param name="values">[length: bufSize] 
            /// Specifies the address of an array to receive the values of the queried parameter.
            /// </param>
            [CLSCompliant(false)]
            public static void GetSync(IntPtr sync, OpenTK.Graphics.ES11.All pname, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 values)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("length_pinned");
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "values_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.StoreByName("values_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("length_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("values_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(168);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(IntPtr), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(Int32*), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: APPLE_sync]
            /// Query the properties of a sync object
            /// </summary>
            /// <param name="sync"> 
            /// Specifies the sync object whose properties to query.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the parameter whose value to retrieve from the sync object specified in sync.
            /// </param>
            /// <param name="bufSize"> 
            /// Specifies the size of the buffer whose address is given in values.
            /// </param>
            /// <param name="length"> 
            /// Specifies the address of an variable to receive the number of integers placed in values.
            /// </param>
            /// <param name="values">[length: bufSize] 
            /// Specifies the address of an array to receive the values of the queried parameter.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void GetSync(IntPtr sync, OpenTK.Graphics.ES11.All pname, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* values)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(168);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(IntPtr), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(Int32*), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: APPLE_sync]
            /// Determine if a name corresponds to a sync object
            /// </summary>
            /// <param name="sync"> 
            /// Specifies a value that may be the name of a sync object.
            /// </param>
            public static bool IsSync(IntPtr sync)
            {
                unsafe
                {
                    bool __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(189);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(byte), typeof(IntPtr));
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: APPLE_framebuffer_multisample]
            /// Establish data storage, format, dimensions and sample count of a renderbuffer object's image
            /// </summary>
            /// <param name="target"> 
            /// Specifies a binding to which the target of the allocation and must be Renderbuffer.
            /// </param>
            /// <param name="samples"> 
            /// Specifies the number of samples to be used for the renderbuffer object's storage.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the internal format to use for the renderbuffer object's image.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the renderbuffer, in pixels.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the renderbuffer, in pixels.
            /// </param>
            public static void RenderbufferStorageMultisample(OpenTK.Graphics.ES11.All target, Int32 samples, OpenTK.Graphics.ES11.All internalformat, Int32 width, Int32 height)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(294);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: APPLE_framebuffer_multisample]</summary>
            public static void ResolveMultisampleFramebuffer()
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(298);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: APPLE_sync]
            /// Instruct the GL server to block until the specified sync object becomes signaled
            /// </summary>
            /// <param name="sync"> 
            /// Specifies the sync object whose status to wait on.
            /// </param>
            /// <param name="flags"> 
            /// A bitfield controlling the command flushing behavior. flags may be zero.
            /// </param>
            /// <param name="timeout"> 
            /// Specifies the timeout that the server should wait before continuing. timeout must be TimeoutIgnored.
            /// </param>
            [CLSCompliant(false)]
            public static void WaitSync(IntPtr sync, Int32 flags, Int64 timeout)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(382);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(IntPtr), typeof(UInt32), typeof(UInt64));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: APPLE_sync]
            /// Instruct the GL server to block until the specified sync object becomes signaled
            /// </summary>
            /// <param name="sync"> 
            /// Specifies the sync object whose status to wait on.
            /// </param>
            /// <param name="flags"> 
            /// A bitfield controlling the command flushing behavior. flags may be zero.
            /// </param>
            /// <param name="timeout"> 
            /// Specifies the timeout that the server should wait before continuing. timeout must be TimeoutIgnored.
            /// </param>
            [CLSCompliant(false)]
            public static void WaitSync(IntPtr sync, UInt32 flags, UInt64 timeout)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(382);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(IntPtr), typeof(UInt32), typeof(UInt64));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

        }

        /// <summary>[requires: v1.0]
        /// Select active texture unit
        /// </summary>
        /// <param name="texture"> 
        /// Specifies which texture unit to make active. The number of texture units is implementation dependent, but must be at least 8. texture must be one of Texture, where i ranges from 0 to (MaxCombinedTextureImageUnits - 1). The initial value is Texture0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void ActiveTexture(OpenTK.Graphics.ES11.All texture)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(1);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureUnit));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Select active texture unit
        /// </summary>
        /// <param name="texture"> 
        /// Specifies which texture unit to make active. The number of texture units is implementation dependent, but must be at least 8. texture must be one of Texture, where i ranges from 0 to (MaxCombinedTextureImageUnits - 1). The initial value is Texture0.
        /// </param>
        public static void ActiveTexture(OpenTK.Graphics.ES11.TextureUnit texture)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(1);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureUnit));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify the alpha test function
        /// </summary>
        /// <param name="func"> 
        /// Specifies the alpha comparison function. Symbolic constants Never, Less, Equal, Lequal, Greater, Notequal, Gequal, and Always are accepted. The initial value is Always.
        /// </param>
        /// <param name="@ref"> 
        /// Specifies the reference value that incoming alpha values are compared to. This value is clamped to the range [0,1], where 0 represents the lowest possible alpha value and 1 the highest possible value. The initial reference value is 0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void AlphaFunc(OpenTK.Graphics.ES11.All func, Single @ref)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(2);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.AlphaFunction), typeof(Single));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify the alpha test function
        /// </summary>
        /// <param name="func"> 
        /// Specifies the alpha comparison function. Symbolic constants Never, Less, Equal, Lequal, Greater, Notequal, Gequal, and Always are accepted. The initial value is Always.
        /// </param>
        /// <param name="@ref"> 
        /// Specifies the reference value that incoming alpha values are compared to. This value is clamped to the range [0,1], where 0 represents the lowest possible alpha value and 1 the highest possible value. The initial reference value is 0.
        /// </param>
        public static void AlphaFunc(OpenTK.Graphics.ES11.AlphaFunction func, Single @ref)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(2);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.AlphaFunction), typeof(Single));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="func"></param>
        /// <param name="@ref"></param>
        public static void AlphaFuncx(OpenTK.Graphics.ES11.All func, Int32 @ref)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(3);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Bind a named buffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target to which the buffer object is bound. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="buffer"> 
        /// Specifies the name of a buffer object.
        /// </param>
        [CLSCompliant(false)]
        public static void BindBuffer(OpenTK.Graphics.ES11.All target, Int32 buffer)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(5);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Bind a named buffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target to which the buffer object is bound. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="buffer"> 
        /// Specifies the name of a buffer object.
        /// </param>
        [CLSCompliant(false)]
        public static void BindBuffer(OpenTK.Graphics.ES11.All target, UInt32 buffer)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(5);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Bind a named texture to a texturing target
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target of the active texture unit to which the texture is bound. Must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="texture"> 
        /// Specifies the name of a texture.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void BindTexture(OpenTK.Graphics.ES11.All target, Int32 texture)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(8);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Bind a named texture to a texturing target
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target of the active texture unit to which the texture is bound. Must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="texture"> 
        /// Specifies the name of a texture.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void BindTexture(OpenTK.Graphics.ES11.All target, UInt32 texture)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(8);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Bind a named texture to a texturing target
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target of the active texture unit to which the texture is bound. Must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="texture"> 
        /// Specifies the name of a texture.
        /// </param>
        [CLSCompliant(false)]
        public static void BindTexture(OpenTK.Graphics.ES11.TextureTarget target, Int32 texture)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(8);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Bind a named texture to a texturing target
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target of the active texture unit to which the texture is bound. Must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="texture"> 
        /// Specifies the name of a texture.
        /// </param>
        [CLSCompliant(false)]
        public static void BindTexture(OpenTK.Graphics.ES11.TextureTarget target, UInt32 texture)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(8);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify pixel arithmetic
        /// </summary>
        /// <param name="sfactor"> 
        /// Specifies how the red, green, blue, and alpha source blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha, ConstantColor, OneMinusConstantColor, ConstantAlpha, OneMinusConstantAlpha, and SrcAlphaSaturate. The initial value is One.
        /// </param>
        /// <param name="dfactor"> 
        /// Specifies how the red, green, blue, and alpha destination blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha. ConstantColor, OneMinusConstantColor, ConstantAlpha, and OneMinusConstantAlpha. The initial value is Zero.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void BlendFunc(OpenTK.Graphics.ES11.All sfactor, OpenTK.Graphics.ES11.All dfactor)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(15);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.BlendingFactorSrc), typeof(OpenTK.Graphics.ES11.BlendingFactorDest));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify pixel arithmetic
        /// </summary>
        /// <param name="sfactor"> 
        /// Specifies how the red, green, blue, and alpha source blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha, ConstantColor, OneMinusConstantColor, ConstantAlpha, OneMinusConstantAlpha, and SrcAlphaSaturate. The initial value is One.
        /// </param>
        /// <param name="dfactor"> 
        /// Specifies how the red, green, blue, and alpha destination blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha. ConstantColor, OneMinusConstantColor, ConstantAlpha, and OneMinusConstantAlpha. The initial value is Zero.
        /// </param>
        public static void BlendFunc(OpenTK.Graphics.ES11.BlendingFactorSrc sfactor, OpenTK.Graphics.ES11.BlendingFactorDest dfactor)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(15);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.BlendingFactorSrc), typeof(OpenTK.Graphics.ES11.BlendingFactorDest));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage"> 
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        public static void BufferData(OpenTK.Graphics.ES11.All target, Int32 size, IntPtr data, OpenTK.Graphics.ES11.All usage)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(17);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr), typeof(IntPtr), typeof(OpenTK.Graphics.ES11.All));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage"> 
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [CLSCompliant(false)]
        public static void BufferData<T2>(OpenTK.Graphics.ES11.All target, Int32 size, [InAttribute, OutAttribute] T2[] data, OpenTK.Graphics.ES11.All usage)
            where T2 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T2& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T2");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(17);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr), typeof(IntPtr), typeof(OpenTK.Graphics.ES11.All));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage"> 
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [CLSCompliant(false)]
        public static void BufferData<T2>(OpenTK.Graphics.ES11.All target, Int32 size, [InAttribute, OutAttribute] T2[,] data, OpenTK.Graphics.ES11.All usage)
            where T2 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T2& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T2[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(17);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr), typeof(IntPtr), typeof(OpenTK.Graphics.ES11.All));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage"> 
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [CLSCompliant(false)]
        public static void BufferData<T2>(OpenTK.Graphics.ES11.All target, Int32 size, [InAttribute, OutAttribute] T2[,,] data, OpenTK.Graphics.ES11.All usage)
            where T2 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T2& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T2[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(17);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr), typeof(IntPtr), typeof(OpenTK.Graphics.ES11.All));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage"> 
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        public static void BufferData<T2>(OpenTK.Graphics.ES11.All target, Int32 size, [InAttribute, OutAttribute] ref T2 data, OpenTK.Graphics.ES11.All usage)
            where T2 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T2& pinned", "data_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("data_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(17);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr), typeof(IntPtr), typeof(OpenTK.Graphics.ES11.All));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage"> 
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        public static void BufferData(OpenTK.Graphics.ES11.All target, IntPtr size, IntPtr data, OpenTK.Graphics.ES11.All usage)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(17);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr), typeof(IntPtr), typeof(OpenTK.Graphics.ES11.All));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage"> 
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [CLSCompliant(false)]
        public static void BufferData<T2>(OpenTK.Graphics.ES11.All target, IntPtr size, [InAttribute, OutAttribute] T2[] data, OpenTK.Graphics.ES11.All usage)
            where T2 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T2& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T2");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(17);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr), typeof(IntPtr), typeof(OpenTK.Graphics.ES11.All));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage"> 
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [CLSCompliant(false)]
        public static void BufferData<T2>(OpenTK.Graphics.ES11.All target, IntPtr size, [InAttribute, OutAttribute] T2[,] data, OpenTK.Graphics.ES11.All usage)
            where T2 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T2& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T2[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(17);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr), typeof(IntPtr), typeof(OpenTK.Graphics.ES11.All));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage"> 
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [CLSCompliant(false)]
        public static void BufferData<T2>(OpenTK.Graphics.ES11.All target, IntPtr size, [InAttribute, OutAttribute] T2[,,] data, OpenTK.Graphics.ES11.All usage)
            where T2 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T2& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T2[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(17);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr), typeof(IntPtr), typeof(OpenTK.Graphics.ES11.All));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage"> 
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        public static void BufferData<T2>(OpenTK.Graphics.ES11.All target, IntPtr size, [InAttribute, OutAttribute] ref T2 data, OpenTK.Graphics.ES11.All usage)
            where T2 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T2& pinned", "data_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("data_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(17);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr), typeof(IntPtr), typeof(OpenTK.Graphics.ES11.All));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset"> 
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        public static void BufferSubData(OpenTK.Graphics.ES11.All target, IntPtr offset, Int32 size, IntPtr data)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(18);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr), typeof(IntPtr), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset"> 
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [CLSCompliant(false)]
        public static void BufferSubData<T3>(OpenTK.Graphics.ES11.All target, IntPtr offset, Int32 size, [InAttribute, OutAttribute] T3[] data)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T3");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(18);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr), typeof(IntPtr), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset"> 
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [CLSCompliant(false)]
        public static void BufferSubData<T3>(OpenTK.Graphics.ES11.All target, IntPtr offset, Int32 size, [InAttribute, OutAttribute] T3[,] data)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T3[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(18);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr), typeof(IntPtr), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset"> 
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [CLSCompliant(false)]
        public static void BufferSubData<T3>(OpenTK.Graphics.ES11.All target, IntPtr offset, Int32 size, [InAttribute, OutAttribute] T3[,,] data)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T3[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(18);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr), typeof(IntPtr), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset"> 
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        public static void BufferSubData<T3>(OpenTK.Graphics.ES11.All target, IntPtr offset, Int32 size, [InAttribute, OutAttribute] ref T3 data)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "data_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.StoreByName("data_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(18);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr), typeof(IntPtr), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset"> 
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        public static void BufferSubData(OpenTK.Graphics.ES11.All target, IntPtr offset, IntPtr size, IntPtr data)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(18);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr), typeof(IntPtr), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset"> 
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [CLSCompliant(false)]
        public static void BufferSubData<T3>(OpenTK.Graphics.ES11.All target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[] data)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T3");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(18);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr), typeof(IntPtr), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset"> 
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [CLSCompliant(false)]
        public static void BufferSubData<T3>(OpenTK.Graphics.ES11.All target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[,] data)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T3[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(18);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr), typeof(IntPtr), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset"> 
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [CLSCompliant(false)]
        public static void BufferSubData<T3>(OpenTK.Graphics.ES11.All target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[,,] data)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T3[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(18);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr), typeof(IntPtr), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset"> 
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        public static void BufferSubData<T3>(OpenTK.Graphics.ES11.All target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] ref T3 data)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "data_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.StoreByName("data_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(18);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr), typeof(IntPtr), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Clear buffers to preset values
        /// </summary>
        /// <param name="mask"> 
        /// Bitwise OR of masks that indicate the buffers to be cleared. The three masks are ColorBufferBit, DepthBufferBit, and StencilBufferBit.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void Clear(OpenTK.Graphics.ES11.All mask)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(20);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.ClearBufferMask));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Clear buffers to preset values
        /// </summary>
        /// <param name="mask"> 
        /// Bitwise OR of masks that indicate the buffers to be cleared. The three masks are ColorBufferBit, DepthBufferBit, and StencilBufferBit.
        /// </param>
        public static void Clear(OpenTK.Graphics.ES11.ClearBufferMask mask)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(20);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.ClearBufferMask));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Clear buffers to preset values
        /// </summary>
        /// <param name="mask"> 
        /// Bitwise OR of masks that indicate the buffers to be cleared. The three masks are ColorBufferBit, DepthBufferBit, and StencilBufferBit.
        /// </param>
        [Obsolete("Use ClearMask overload instead")]
        [CLSCompliant(false)]
        public static void Clear(Int32 mask)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(20);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.ClearBufferMask));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Clear buffers to preset values
        /// </summary>
        /// <param name="mask"> 
        /// Bitwise OR of masks that indicate the buffers to be cleared. The three masks are ColorBufferBit, DepthBufferBit, and StencilBufferBit.
        /// </param>
        [Obsolete("Use ClearMask overload instead")]
        [CLSCompliant(false)]
        public static void Clear(UInt32 mask)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(20);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.ClearBufferMask));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify clear values for the color buffers
        /// </summary>
        /// <param name="red"> 
        /// Specify the red, green, blue, and alpha values used when the color buffers are cleared. The initial values are all 0.
        /// </param>
        /// <param name="green"> 
        /// Specify the red, green, blue, and alpha values used when the color buffers are cleared. The initial values are all 0.
        /// </param>
        /// <param name="blue"> 
        /// Specify the red, green, blue, and alpha values used when the color buffers are cleared. The initial values are all 0.
        /// </param>
        /// <param name="alpha"> 
        /// Specify the red, green, blue, and alpha values used when the color buffers are cleared. The initial values are all 0.
        /// </param>
        public static void ClearColor(Single red, Single green, Single blue, Single alpha)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(22);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Single), typeof(Single), typeof(Single), typeof(Single));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="red"></param>
        /// <param name="green"></param>
        /// <param name="blue"></param>
        /// <param name="alpha"></param>
        public static void ClearColorx(Int32 red, Int32 green, Int32 blue, Int32 alpha)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(23);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify the clear value for the depth buffer
        /// </summary>
        /// <param name="d"> 
        /// Specifies the depth value used when the depth buffer is cleared. The initial value is 1.
        /// </param>
        public static void ClearDepth(Single d)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(25);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Single));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="depth"></param>
        public static void ClearDepthx(Int32 depth)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(27);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify the clear value for the stencil buffer
        /// </summary>
        /// <param name="s"> 
        /// Specifies the index used when the stencil buffer is cleared. The initial value is 0.
        /// </param>
        public static void ClearStencil(Int32 s)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(29);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Select active texture unit
        /// </summary>
        /// <param name="texture"> 
        /// Specifies which texture unit to make active. The number of texture units is implementation dependent, but must be at least two. texture must be one of Texture, where i ranges from 0 to the value of MaxTextureCoords - 1, which is an implementation-dependent value.  The initial value is Texture0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void ClientActiveTexture(OpenTK.Graphics.ES11.All texture)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(30);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureUnit));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Select active texture unit
        /// </summary>
        /// <param name="texture"> 
        /// Specifies which texture unit to make active. The number of texture units is implementation dependent, but must be at least two. texture must be one of Texture, where i ranges from 0 to the value of MaxTextureCoords - 1, which is an implementation-dependent value.  The initial value is Texture0.
        /// </param>
        public static void ClientActiveTexture(OpenTK.Graphics.ES11.TextureUnit texture)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(30);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureUnit));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify a plane against which all geometry is clipped
        /// </summary>
        /// <param name="p"> 
        /// Specifies which clipping plane is being positioned. Symbolic names of the form ClipPlanei, where i is an integer between 0 and MaxClipPlanes - 1, are accepted.
        /// </param>
        /// <param name="eqn">[length: 4] 
        /// Specifies the address of an array of four double-precision floating-point values. These values are interpreted as a plane equation.
        /// </param>
        [CLSCompliant(false)]
        public static void ClipPlane(OpenTK.Graphics.ES11.All p, Single[] eqn)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "eqn_pinned");
                    if(eqn != null && eqn.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Single");
                        Silk.Cil.StoreByName("eqn_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("eqn_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("eqn_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(32);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify a plane against which all geometry is clipped
        /// </summary>
        /// <param name="p"> 
        /// Specifies which clipping plane is being positioned. Symbolic names of the form ClipPlanei, where i is an integer between 0 and MaxClipPlanes - 1, are accepted.
        /// </param>
        /// <param name="eqn">[length: 4] 
        /// Specifies the address of an array of four double-precision floating-point values. These values are interpreted as a plane equation.
        /// </param>
        [CLSCompliant(false)]
        public static void ClipPlane(OpenTK.Graphics.ES11.All p, ref Single eqn)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "eqn_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("eqn_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("eqn_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(32);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify a plane against which all geometry is clipped
        /// </summary>
        /// <param name="p"> 
        /// Specifies which clipping plane is being positioned. Symbolic names of the form ClipPlanei, where i is an integer between 0 and MaxClipPlanes - 1, are accepted.
        /// </param>
        /// <param name="eqn">[length: 4] 
        /// Specifies the address of an array of four double-precision floating-point values. These values are interpreted as a plane equation.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void ClipPlane(OpenTK.Graphics.ES11.All p, Single* eqn)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(32);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="plane"></param>
        /// <param name="equation">[length: 4]</param>
        [CLSCompliant(false)]
        public static void ClipPlanex(OpenTK.Graphics.ES11.All plane, Int32[] equation)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "equation_pinned");
                    if(equation != null && equation.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("equation_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("equation_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("equation_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(35);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="plane"></param>
        /// <param name="equation">[length: 4]</param>
        [CLSCompliant(false)]
        public static void ClipPlanex(OpenTK.Graphics.ES11.All plane, ref Int32 equation)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "equation_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("equation_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("equation_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(35);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="plane"></param>
        /// <param name="equation">[length: 4]</param>
        [CLSCompliant(false)]
        public static unsafe void ClipPlanex(OpenTK.Graphics.ES11.All plane, Int32* equation)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(35);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Set the current color
        /// </summary>
        /// <param name="red"> 
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="green"> 
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="blue"> 
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="alpha"> 
        /// Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
        /// </param>
        public static void Color4(Single red, Single green, Single blue, Single alpha)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(40);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Single), typeof(Single), typeof(Single), typeof(Single));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Set the current color
        /// </summary>
        /// <param name="red"> 
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="green"> 
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="blue"> 
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="alpha"> 
        /// Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
        /// </param>
        public static void Color4(Byte red, Byte green, Byte blue, Byte alpha)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(41);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Byte), typeof(Byte), typeof(Byte), typeof(Byte));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="red"></param>
        /// <param name="green"></param>
        /// <param name="blue"></param>
        /// <param name="alpha"></param>
        public static void Color4x(Int32 red, Int32 green, Int32 blue, Int32 alpha)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(42);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Enable and disable writing of frame buffer color components
        /// </summary>
        /// <param name="red"> 
        /// Specify whether red, green, blue, and alpha can or cannot be written into the frame buffer. The initial values are all True, indicating that the color components can be written.
        /// </param>
        /// <param name="green"> 
        /// Specify whether red, green, blue, and alpha can or cannot be written into the frame buffer. The initial values are all True, indicating that the color components can be written.
        /// </param>
        /// <param name="blue"> 
        /// Specify whether red, green, blue, and alpha can or cannot be written into the frame buffer. The initial values are all True, indicating that the color components can be written.
        /// </param>
        /// <param name="alpha"> 
        /// Specify whether red, green, blue, and alpha can or cannot be written into the frame buffer. The initial values are all True, indicating that the color components can be written.
        /// </param>
        public static void ColorMask(bool red, bool green, bool blue, bool alpha)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(45);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(bool), typeof(bool), typeof(bool), typeof(bool));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Define an array of colors
        /// </summary>
        /// <param name="size"> 
        /// Specifies the number of components per color. Must be 3 or 4. The initial value is 4.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of each color component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, UnsignedInt, Float, and Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: size,type,stride] 
        /// Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void ColorPointer(Int32 size, OpenTK.Graphics.ES11.All type, Int32 stride, IntPtr pointer)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(46);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(OpenTK.Graphics.ES11.ColorPointerType), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Define an array of colors
        /// </summary>
        /// <param name="size"> 
        /// Specifies the number of components per color. Must be 3 or 4. The initial value is 4.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of each color component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, UnsignedInt, Float, and Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: size,type,stride] 
        /// Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void ColorPointer<T3>(Int32 size, OpenTK.Graphics.ES11.All type, Int32 stride, [InAttribute, OutAttribute] T3[] pointer)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "pointer_pinned");
                    if(pointer != null && pointer.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T3");
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("pointer_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(46);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(OpenTK.Graphics.ES11.ColorPointerType), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Define an array of colors
        /// </summary>
        /// <param name="size"> 
        /// Specifies the number of components per color. Must be 3 or 4. The initial value is 4.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of each color component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, UnsignedInt, Float, and Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: size,type,stride] 
        /// Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void ColorPointer<T3>(Int32 size, OpenTK.Graphics.ES11.All type, Int32 stride, [InAttribute, OutAttribute] T3[,] pointer)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "pointer_pinned");
                    if(pointer != null && pointer.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T3[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("pointer_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(46);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(OpenTK.Graphics.ES11.ColorPointerType), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Define an array of colors
        /// </summary>
        /// <param name="size"> 
        /// Specifies the number of components per color. Must be 3 or 4. The initial value is 4.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of each color component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, UnsignedInt, Float, and Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: size,type,stride] 
        /// Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void ColorPointer<T3>(Int32 size, OpenTK.Graphics.ES11.All type, Int32 stride, [InAttribute, OutAttribute] T3[,,] pointer)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "pointer_pinned");
                    if(pointer != null && pointer.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T3[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("pointer_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(46);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(OpenTK.Graphics.ES11.ColorPointerType), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Define an array of colors
        /// </summary>
        /// <param name="size"> 
        /// Specifies the number of components per color. Must be 3 or 4. The initial value is 4.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of each color component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, UnsignedInt, Float, and Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: size,type,stride] 
        /// Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void ColorPointer<T3>(Int32 size, OpenTK.Graphics.ES11.All type, Int32 stride, [InAttribute, OutAttribute] ref T3 pointer)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "pointer_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.StoreByName("pointer_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("pointer_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(46);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(OpenTK.Graphics.ES11.ColorPointerType), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Define an array of colors
        /// </summary>
        /// <param name="size"> 
        /// Specifies the number of components per color. Must be 3 or 4. The initial value is 4.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of each color component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, UnsignedInt, Float, and Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: size,type,stride] 
        /// Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
        /// </param>
        public static void ColorPointer(Int32 size, OpenTK.Graphics.ES11.ColorPointerType type, Int32 stride, IntPtr pointer)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(46);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(OpenTK.Graphics.ES11.ColorPointerType), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Define an array of colors
        /// </summary>
        /// <param name="size"> 
        /// Specifies the number of components per color. Must be 3 or 4. The initial value is 4.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of each color component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, UnsignedInt, Float, and Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: size,type,stride] 
        /// Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
        /// </param>
        [CLSCompliant(false)]
        public static void ColorPointer<T3>(Int32 size, OpenTK.Graphics.ES11.ColorPointerType type, Int32 stride, [InAttribute, OutAttribute] T3[] pointer)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "pointer_pinned");
                    if(pointer != null && pointer.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T3");
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("pointer_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(46);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(OpenTK.Graphics.ES11.ColorPointerType), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Define an array of colors
        /// </summary>
        /// <param name="size"> 
        /// Specifies the number of components per color. Must be 3 or 4. The initial value is 4.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of each color component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, UnsignedInt, Float, and Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: size,type,stride] 
        /// Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
        /// </param>
        [CLSCompliant(false)]
        public static void ColorPointer<T3>(Int32 size, OpenTK.Graphics.ES11.ColorPointerType type, Int32 stride, [InAttribute, OutAttribute] T3[,] pointer)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "pointer_pinned");
                    if(pointer != null && pointer.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T3[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("pointer_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(46);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(OpenTK.Graphics.ES11.ColorPointerType), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Define an array of colors
        /// </summary>
        /// <param name="size"> 
        /// Specifies the number of components per color. Must be 3 or 4. The initial value is 4.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of each color component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, UnsignedInt, Float, and Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: size,type,stride] 
        /// Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
        /// </param>
        [CLSCompliant(false)]
        public static void ColorPointer<T3>(Int32 size, OpenTK.Graphics.ES11.ColorPointerType type, Int32 stride, [InAttribute, OutAttribute] T3[,,] pointer)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "pointer_pinned");
                    if(pointer != null && pointer.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T3[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("pointer_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(46);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(OpenTK.Graphics.ES11.ColorPointerType), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Define an array of colors
        /// </summary>
        /// <param name="size"> 
        /// Specifies the number of components per color. Must be 3 or 4. The initial value is 4.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of each color component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, UnsignedInt, Float, and Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: size,type,stride] 
        /// Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
        /// </param>
        public static void ColorPointer<T3>(Int32 size, OpenTK.Graphics.ES11.ColorPointerType type, Int32 stride, [InAttribute, OutAttribute] ref T3 pointer)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "pointer_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.StoreByName("pointer_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("pointer_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(46);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(OpenTK.Graphics.ES11.ColorPointerType), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="imageSize"> 
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize] 
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void CompressedTexImage2D(OpenTK.Graphics.ES11.All target, Int32 level, OpenTK.Graphics.ES11.All internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, IntPtr data)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(47);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="imageSize"> 
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize] 
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void CompressedTexImage2D<T7>(OpenTK.Graphics.ES11.All target, Int32 level, OpenTK.Graphics.ES11.All internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[] data)
            where T7 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T7& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T7");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(47);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="imageSize"> 
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize] 
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void CompressedTexImage2D<T7>(OpenTK.Graphics.ES11.All target, Int32 level, OpenTK.Graphics.ES11.All internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[,] data)
            where T7 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T7& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T7[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(47);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="imageSize"> 
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize] 
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void CompressedTexImage2D<T7>(OpenTK.Graphics.ES11.All target, Int32 level, OpenTK.Graphics.ES11.All internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[,,] data)
            where T7 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T7& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T7[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(47);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="imageSize"> 
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize] 
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void CompressedTexImage2D<T7>(OpenTK.Graphics.ES11.All target, Int32 level, OpenTK.Graphics.ES11.All internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] ref T7 data)
            where T7 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T7& pinned", "data_pinned");
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.StoreByName("data_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(47);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="imageSize"> 
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize] 
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        public static void CompressedTexImage2D(OpenTK.Graphics.ES11.TextureTarget target, Int32 level, OpenTK.Graphics.ES11.All internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, IntPtr data)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(47);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="imageSize"> 
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize] 
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [CLSCompliant(false)]
        public static void CompressedTexImage2D<T7>(OpenTK.Graphics.ES11.TextureTarget target, Int32 level, OpenTK.Graphics.ES11.All internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[] data)
            where T7 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T7& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T7");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(47);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="imageSize"> 
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize] 
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [CLSCompliant(false)]
        public static void CompressedTexImage2D<T7>(OpenTK.Graphics.ES11.TextureTarget target, Int32 level, OpenTK.Graphics.ES11.All internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[,] data)
            where T7 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T7& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T7[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(47);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="imageSize"> 
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize] 
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [CLSCompliant(false)]
        public static void CompressedTexImage2D<T7>(OpenTK.Graphics.ES11.TextureTarget target, Int32 level, OpenTK.Graphics.ES11.All internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[,,] data)
            where T7 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T7& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T7[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(47);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="imageSize"> 
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize] 
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        public static void CompressedTexImage2D<T7>(OpenTK.Graphics.ES11.TextureTarget target, Int32 level, OpenTK.Graphics.ES11.All internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] ref T7 data)
            where T7 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T7& pinned", "data_pinned");
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.StoreByName("data_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(47);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize"> 
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize] 
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void CompressedTexSubImage2D(OpenTK.Graphics.ES11.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES11.All format, Int32 imageSize, IntPtr data)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.Ldarg(8);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(48);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES11.PixelFormat), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize"> 
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize] 
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void CompressedTexSubImage2D<T8>(OpenTK.Graphics.ES11.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES11.All format, Int32 imageSize, [InAttribute, OutAttribute] T8[] data)
            where T8 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T8& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T8");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(48);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES11.PixelFormat), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize"> 
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize] 
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void CompressedTexSubImage2D<T8>(OpenTK.Graphics.ES11.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES11.All format, Int32 imageSize, [InAttribute, OutAttribute] T8[,] data)
            where T8 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T8& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T8[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(48);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES11.PixelFormat), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize"> 
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize] 
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void CompressedTexSubImage2D<T8>(OpenTK.Graphics.ES11.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES11.All format, Int32 imageSize, [InAttribute, OutAttribute] T8[,,] data)
            where T8 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T8& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T8[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(48);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES11.PixelFormat), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize"> 
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize] 
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void CompressedTexSubImage2D<T8>(OpenTK.Graphics.ES11.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES11.All format, Int32 imageSize, [InAttribute, OutAttribute] ref T8 data)
            where T8 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T8& pinned", "data_pinned");
                    Silk.Cil.Ldarg(8);
                    Silk.Cil.StoreByName("data_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(48);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES11.PixelFormat), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize"> 
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize] 
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        public static void CompressedTexSubImage2D(OpenTK.Graphics.ES11.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES11.PixelFormat format, Int32 imageSize, IntPtr data)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.Ldarg(8);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(48);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES11.PixelFormat), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize"> 
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize] 
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [CLSCompliant(false)]
        public static void CompressedTexSubImage2D<T8>(OpenTK.Graphics.ES11.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES11.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T8[] data)
            where T8 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T8& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T8");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(48);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES11.PixelFormat), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize"> 
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize] 
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [CLSCompliant(false)]
        public static void CompressedTexSubImage2D<T8>(OpenTK.Graphics.ES11.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES11.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T8[,] data)
            where T8 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T8& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T8[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(48);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES11.PixelFormat), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize"> 
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize] 
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [CLSCompliant(false)]
        public static void CompressedTexSubImage2D<T8>(OpenTK.Graphics.ES11.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES11.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T8[,,] data)
            where T8 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T8& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T8[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(48);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES11.PixelFormat), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize"> 
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize] 
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        public static void CompressedTexSubImage2D<T8>(OpenTK.Graphics.ES11.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES11.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] ref T8 data)
            where T8 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T8& pinned", "data_pinned");
                    Silk.Cil.Ldarg(8);
                    Silk.Cil.StoreByName("data_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(48);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES11.PixelFormat), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Copy pixels into a 2D texture image
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, or Rgba.
        /// </param>
        /// <param name="x"> 
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="y"> 
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void CopyTexImage2D(OpenTK.Graphics.ES11.All target, Int32 level, OpenTK.Graphics.ES11.All internalformat, Int32 x, Int32 y, Int32 width, Int32 height, Int32 border)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(51);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Copy pixels into a 2D texture image
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, or Rgba.
        /// </param>
        /// <param name="x"> 
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="y"> 
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        public static void CopyTexImage2D(OpenTK.Graphics.ES11.TextureTarget target, Int32 level, OpenTK.Graphics.ES11.All internalformat, Int32 x, Int32 y, Int32 width, Int32 height, Int32 border)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(51);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Copy a two-dimensional texture subimage
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="x"> 
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="y"> 
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void CopyTexSubImage2D(OpenTK.Graphics.ES11.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 x, Int32 y, Int32 width, Int32 height)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(52);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Copy a two-dimensional texture subimage
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="x"> 
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="y"> 
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        public static void CopyTexSubImage2D(OpenTK.Graphics.ES11.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 x, Int32 y, Int32 width, Int32 height)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(52);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify whether front- or back-facing polygons can be culled
        /// </summary>
        /// <param name="mode"> 
        /// Specifies whether front- or back-facing polygons are candidates for culling. Symbolic constants Front, Back, and FrontAndBack are accepted. The initial value is Back.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void CullFace(OpenTK.Graphics.ES11.All mode)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(54);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.CullFaceMode));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify whether front- or back-facing polygons can be culled
        /// </summary>
        /// <param name="mode"> 
        /// Specifies whether front- or back-facing polygons are candidates for culling. Symbolic constants Front, Back, and FrontAndBack are accepted. The initial value is Back.
        /// </param>
        public static void CullFace(OpenTK.Graphics.ES11.CullFaceMode mode)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(54);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.CullFaceMode));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="buffers">[length: n] 
        /// Specifies an array of buffer objects to be deleted.
        /// </param>
        [CLSCompliant(false)]
        public static void DeleteBuffer(Int32 buffers)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldc_I4(1);
                    Silk.Cil.LoadAddress(buffers);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(56);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="buffers">[length: n] 
        /// Specifies an array of buffer objects to be deleted.
        /// </param>
        [CLSCompliant(false)]
        public static void DeleteBuffer(UInt32 buffers)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldc_I4(1);
                    Silk.Cil.LoadAddress(buffers);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(56);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of buffer objects to be deleted.
        /// </param>
        /// <param name="buffers">[length: n] 
        /// Specifies an array of buffer objects to be deleted.
        /// </param>
        [CLSCompliant(false)]
        public static void DeleteBuffers(Int32 n, Int32[] buffers)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "buffers_pinned");
                    if(buffers != null && buffers.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("buffers_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("buffers_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("buffers_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(56);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of buffer objects to be deleted.
        /// </param>
        /// <param name="buffers">[length: n] 
        /// Specifies an array of buffer objects to be deleted.
        /// </param>
        [CLSCompliant(false)]
        public static void DeleteBuffers(Int32 n, ref Int32 buffers)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "buffers_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("buffers_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("buffers_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(56);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of buffer objects to be deleted.
        /// </param>
        /// <param name="buffers">[length: n] 
        /// Specifies an array of buffer objects to be deleted.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void DeleteBuffers(Int32 n, Int32* buffers)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(56);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of buffer objects to be deleted.
        /// </param>
        /// <param name="buffers">[length: n] 
        /// Specifies an array of buffer objects to be deleted.
        /// </param>
        [CLSCompliant(false)]
        public static void DeleteBuffers(Int32 n, UInt32[] buffers)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.UInt32& pinned", "buffers_pinned");
                    if(buffers != null && buffers.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.UInt32");
                        Silk.Cil.StoreByName("buffers_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("buffers_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("buffers_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(56);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of buffer objects to be deleted.
        /// </param>
        /// <param name="buffers">[length: n] 
        /// Specifies an array of buffer objects to be deleted.
        /// </param>
        [CLSCompliant(false)]
        public static void DeleteBuffers(Int32 n, ref UInt32 buffers)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.UInt32& pinned", "buffers_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("buffers_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("buffers_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(56);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of buffer objects to be deleted.
        /// </param>
        /// <param name="buffers">[length: n] 
        /// Specifies an array of buffer objects to be deleted.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void DeleteBuffers(Int32 n, UInt32* buffers)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(56);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Delete named textures
        /// </summary>
        /// <param name="textures">[length: n] 
        /// Specifies an array of textures to be deleted.
        /// </param>
        [CLSCompliant(false)]
        public static void DeleteTexture(Int32 textures)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldc_I4(1);
                    Silk.Cil.LoadAddress(textures);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(61);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Delete named textures
        /// </summary>
        /// <param name="textures">[length: n] 
        /// Specifies an array of textures to be deleted.
        /// </param>
        [CLSCompliant(false)]
        public static void DeleteTexture(UInt32 textures)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldc_I4(1);
                    Silk.Cil.LoadAddress(textures);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(61);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Delete named textures
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of textures to be deleted.
        /// </param>
        /// <param name="textures">[length: n] 
        /// Specifies an array of textures to be deleted.
        /// </param>
        [CLSCompliant(false)]
        public static void DeleteTextures(Int32 n, Int32[] textures)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "textures_pinned");
                    if(textures != null && textures.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("textures_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("textures_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("textures_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(61);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Delete named textures
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of textures to be deleted.
        /// </param>
        /// <param name="textures">[length: n] 
        /// Specifies an array of textures to be deleted.
        /// </param>
        [CLSCompliant(false)]
        public static void DeleteTextures(Int32 n, ref Int32 textures)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "textures_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("textures_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("textures_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(61);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Delete named textures
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of textures to be deleted.
        /// </param>
        /// <param name="textures">[length: n] 
        /// Specifies an array of textures to be deleted.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void DeleteTextures(Int32 n, Int32* textures)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(61);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Delete named textures
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of textures to be deleted.
        /// </param>
        /// <param name="textures">[length: n] 
        /// Specifies an array of textures to be deleted.
        /// </param>
        [CLSCompliant(false)]
        public static void DeleteTextures(Int32 n, UInt32[] textures)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.UInt32& pinned", "textures_pinned");
                    if(textures != null && textures.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.UInt32");
                        Silk.Cil.StoreByName("textures_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("textures_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("textures_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(61);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Delete named textures
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of textures to be deleted.
        /// </param>
        /// <param name="textures">[length: n] 
        /// Specifies an array of textures to be deleted.
        /// </param>
        [CLSCompliant(false)]
        public static void DeleteTextures(Int32 n, ref UInt32 textures)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.UInt32& pinned", "textures_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("textures_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("textures_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(61);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Delete named textures
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of textures to be deleted.
        /// </param>
        /// <param name="textures">[length: n] 
        /// Specifies an array of textures to be deleted.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void DeleteTextures(Int32 n, UInt32* textures)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(61);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify the value used for depth buffer comparisons
        /// </summary>
        /// <param name="func"> 
        /// Specifies the depth comparison function. Symbolic constants Never, Less, Equal, Lequal, Greater, Notequal, Gequal, and Always are accepted. The initial value is Less.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void DepthFunc(OpenTK.Graphics.ES11.All func)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(63);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.DepthFunction));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify the value used for depth buffer comparisons
        /// </summary>
        /// <param name="func"> 
        /// Specifies the depth comparison function. Symbolic constants Never, Less, Equal, Lequal, Greater, Notequal, Gequal, and Always are accepted. The initial value is Less.
        /// </param>
        public static void DepthFunc(OpenTK.Graphics.ES11.DepthFunction func)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(63);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.DepthFunction));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Enable or disable writing into the depth buffer
        /// </summary>
        /// <param name="flag"> 
        /// Specifies whether the depth buffer is enabled for writing. If flag is False, depth buffer writing is disabled. Otherwise, it is enabled. Initially, depth buffer writing is enabled.
        /// </param>
        public static void DepthMask(bool flag)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(64);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(bool));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify mapping of depth values from normalized device coordinates to window coordinates
        /// </summary>
        /// <param name="n"> 
        /// Specifies the mapping of the near clipping plane to window coordinates. The initial value is 0.
        /// </param>
        /// <param name="f"> 
        /// Specifies the mapping of the far clipping plane to window coordinates. The initial value is 1.
        /// </param>
        public static void DepthRange(Single n, Single f)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(65);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Single), typeof(Single));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="n"></param>
        /// <param name="f"></param>
        public static void DepthRangex(Int32 n, Int32 f)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(67);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="cap"></param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void Disable(OpenTK.Graphics.ES11.All cap)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(69);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.EnableCap));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="cap"></param>
        public static void Disable(OpenTK.Graphics.ES11.EnableCap cap)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(69);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.EnableCap));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="array"></param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void DisableClientState(OpenTK.Graphics.ES11.All array)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(70);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.EnableCap));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="array"></param>
        public static void DisableClientState(OpenTK.Graphics.ES11.EnableCap array)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(70);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.EnableCap));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode"> 
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="first"> 
        /// Specifies the starting index in the enabled arrays.
        /// </param>
        /// <param name="count"> 
        /// Specifies the number of indices to be rendered.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void DrawArrays(OpenTK.Graphics.ES11.All mode, Int32 first, Int32 count)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(73);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.PrimitiveType), typeof(Int32), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode"> 
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="first"> 
        /// Specifies the starting index in the enabled arrays.
        /// </param>
        /// <param name="count"> 
        /// Specifies the number of indices to be rendered.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        public static void DrawArrays(OpenTK.Graphics.ES11.BeginMode mode, Int32 first, Int32 count)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(73);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.PrimitiveType), typeof(Int32), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode"> 
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="first"> 
        /// Specifies the starting index in the enabled arrays.
        /// </param>
        /// <param name="count"> 
        /// Specifies the number of indices to be rendered.
        /// </param>
        public static void DrawArrays(OpenTK.Graphics.ES11.PrimitiveType mode, Int32 first, Int32 count)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(73);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.PrimitiveType), typeof(Int32), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode"> 
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="count"> 
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type"> 
        /// Specifies the type of the values in indices. Must be UnsignedByte or UnsignedShort.
        /// </param>
        /// <param name="indices">[length: count,type] 
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void DrawElements(OpenTK.Graphics.ES11.All mode, Int32 count, OpenTK.Graphics.ES11.All type, IntPtr indices)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(74);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.PrimitiveType), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode"> 
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="count"> 
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type"> 
        /// Specifies the type of the values in indices. Must be UnsignedByte or UnsignedShort.
        /// </param>
        /// <param name="indices">[length: count,type] 
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void DrawElements<T3>(OpenTK.Graphics.ES11.All mode, Int32 count, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute] T3[] indices)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                    if(indices != null && indices.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T3");
                        Silk.Cil.StoreByName("indices_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("indices_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("indices_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(74);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.PrimitiveType), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode"> 
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="count"> 
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type"> 
        /// Specifies the type of the values in indices. Must be UnsignedByte or UnsignedShort.
        /// </param>
        /// <param name="indices">[length: count,type] 
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void DrawElements<T3>(OpenTK.Graphics.ES11.All mode, Int32 count, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute] T3[,] indices)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                    if(indices != null && indices.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T3[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("indices_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("indices_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("indices_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(74);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.PrimitiveType), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode"> 
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="count"> 
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type"> 
        /// Specifies the type of the values in indices. Must be UnsignedByte or UnsignedShort.
        /// </param>
        /// <param name="indices">[length: count,type] 
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void DrawElements<T3>(OpenTK.Graphics.ES11.All mode, Int32 count, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute] T3[,,] indices)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                    if(indices != null && indices.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T3[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("indices_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("indices_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("indices_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(74);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.PrimitiveType), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode"> 
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="count"> 
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type"> 
        /// Specifies the type of the values in indices. Must be UnsignedByte or UnsignedShort.
        /// </param>
        /// <param name="indices">[length: count,type] 
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void DrawElements<T3>(OpenTK.Graphics.ES11.All mode, Int32 count, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute] ref T3 indices)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.StoreByName("indices_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("indices_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(74);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.PrimitiveType), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode"> 
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="count"> 
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type"> 
        /// Specifies the type of the values in indices. Must be UnsignedByte or UnsignedShort.
        /// </param>
        /// <param name="indices">[length: count,type] 
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        public static void DrawElements(OpenTK.Graphics.ES11.BeginMode mode, Int32 count, OpenTK.Graphics.ES11.All type, IntPtr indices)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(74);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.PrimitiveType), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode"> 
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="count"> 
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type"> 
        /// Specifies the type of the values in indices. Must be UnsignedByte or UnsignedShort.
        /// </param>
        /// <param name="indices">[length: count,type] 
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [CLSCompliant(false)]
        public static void DrawElements<T3>(OpenTK.Graphics.ES11.BeginMode mode, Int32 count, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute] T3[] indices)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                    if(indices != null && indices.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T3");
                        Silk.Cil.StoreByName("indices_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("indices_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("indices_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(74);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.PrimitiveType), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode"> 
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="count"> 
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type"> 
        /// Specifies the type of the values in indices. Must be UnsignedByte or UnsignedShort.
        /// </param>
        /// <param name="indices">[length: count,type] 
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [CLSCompliant(false)]
        public static void DrawElements<T3>(OpenTK.Graphics.ES11.BeginMode mode, Int32 count, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute] T3[,] indices)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                    if(indices != null && indices.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T3[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("indices_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("indices_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("indices_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(74);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.PrimitiveType), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode"> 
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="count"> 
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type"> 
        /// Specifies the type of the values in indices. Must be UnsignedByte or UnsignedShort.
        /// </param>
        /// <param name="indices">[length: count,type] 
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [CLSCompliant(false)]
        public static void DrawElements<T3>(OpenTK.Graphics.ES11.BeginMode mode, Int32 count, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute] T3[,,] indices)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                    if(indices != null && indices.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T3[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("indices_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("indices_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("indices_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(74);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.PrimitiveType), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode"> 
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="count"> 
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type"> 
        /// Specifies the type of the values in indices. Must be UnsignedByte or UnsignedShort.
        /// </param>
        /// <param name="indices">[length: count,type] 
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        public static void DrawElements<T3>(OpenTK.Graphics.ES11.BeginMode mode, Int32 count, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute] ref T3 indices)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.StoreByName("indices_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("indices_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(74);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.PrimitiveType), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode"> 
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="count"> 
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type"> 
        /// Specifies the type of the values in indices. Must be UnsignedByte or UnsignedShort.
        /// </param>
        /// <param name="indices">[length: count,type] 
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        public static void DrawElements(OpenTK.Graphics.ES11.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES11.All type, IntPtr indices)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(74);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.PrimitiveType), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode"> 
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="count"> 
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type"> 
        /// Specifies the type of the values in indices. Must be UnsignedByte or UnsignedShort.
        /// </param>
        /// <param name="indices">[length: count,type] 
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [CLSCompliant(false)]
        public static void DrawElements<T3>(OpenTK.Graphics.ES11.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute] T3[] indices)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                    if(indices != null && indices.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T3");
                        Silk.Cil.StoreByName("indices_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("indices_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("indices_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(74);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.PrimitiveType), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode"> 
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="count"> 
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type"> 
        /// Specifies the type of the values in indices. Must be UnsignedByte or UnsignedShort.
        /// </param>
        /// <param name="indices">[length: count,type] 
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [CLSCompliant(false)]
        public static void DrawElements<T3>(OpenTK.Graphics.ES11.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute] T3[,] indices)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                    if(indices != null && indices.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T3[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("indices_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("indices_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("indices_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(74);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.PrimitiveType), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode"> 
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="count"> 
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type"> 
        /// Specifies the type of the values in indices. Must be UnsignedByte or UnsignedShort.
        /// </param>
        /// <param name="indices">[length: count,type] 
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [CLSCompliant(false)]
        public static void DrawElements<T3>(OpenTK.Graphics.ES11.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute] T3[,,] indices)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                    if(indices != null && indices.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T3[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("indices_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("indices_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("indices_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(74);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.PrimitiveType), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode"> 
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="count"> 
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type"> 
        /// Specifies the type of the values in indices. Must be UnsignedByte or UnsignedShort.
        /// </param>
        /// <param name="indices">[length: count,type] 
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        public static void DrawElements<T3>(OpenTK.Graphics.ES11.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute] ref T3 indices)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.StoreByName("indices_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("indices_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(74);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.PrimitiveType), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Enable or disable server-side GL capabilities
        /// </summary>
        /// <param name="cap"> 
        /// Specifies a symbolic constant indicating a GL capability.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void Enable(OpenTK.Graphics.ES11.All cap)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(85);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.EnableCap));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Enable or disable server-side GL capabilities
        /// </summary>
        /// <param name="cap"> 
        /// Specifies a symbolic constant indicating a GL capability.
        /// </param>
        public static void Enable(OpenTK.Graphics.ES11.EnableCap cap)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(85);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.EnableCap));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Enable or disable client-side capability
        /// </summary>
        /// <param name="array"> 
        /// Specifies the capability to enable. Symbolic constants ColorArray, EdgeFlagArray, FogCoordArray, IndexArray, NormalArray, SecondaryColorArray, TextureCoordArray, and VertexArray are accepted.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void EnableClientState(OpenTK.Graphics.ES11.All array)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(86);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.EnableCap));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Enable or disable client-side capability
        /// </summary>
        /// <param name="array"> 
        /// Specifies the capability to enable. Symbolic constants ColorArray, EdgeFlagArray, FogCoordArray, IndexArray, NormalArray, SecondaryColorArray, TextureCoordArray, and VertexArray are accepted.
        /// </param>
        public static void EnableClientState(OpenTK.Graphics.ES11.EnableCap array)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(86);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.EnableCap));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Block until all GL execution is complete
        /// </summary>
        public static void Finish()
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(107);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Force execution of GL commands in finite time
        /// </summary>
        public static void Flush()
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(109);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify fog parameters
        /// </summary>
        /// <param name="pname"> 
        /// Specifies a single-valued fog parameter. FogMode, FogDensity, FogStart, FogEnd, FogIndex, and FogCoordSrc are accepted.
        /// </param>
        /// <param name="param"> 
        /// Specifies the value that pname will be set to.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void Fog(OpenTK.Graphics.ES11.All pname, Single param)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(111);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.FogParameter), typeof(Single));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify fog parameters
        /// </summary>
        /// <param name="pname"> 
        /// Specifies a single-valued fog parameter. FogMode, FogDensity, FogStart, FogEnd, FogIndex, and FogCoordSrc are accepted.
        /// </param>
        /// <param name="param"> 
        /// Specifies the value that pname will be set to.
        /// </param>
        public static void Fog(OpenTK.Graphics.ES11.FogParameter pname, Single param)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(111);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.FogParameter), typeof(Single));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify fog parameters
        /// </summary>
        /// <param name="pname"> 
        /// Specifies a single-valued fog parameter. FogMode, FogDensity, FogStart, FogEnd, FogIndex, and FogCoordSrc are accepted.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Specifies the value that pname will be set to.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void Fog(OpenTK.Graphics.ES11.All pname, Single[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Single");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(112);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.FogParameter), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify fog parameters
        /// </summary>
        /// <param name="pname"> 
        /// Specifies a single-valued fog parameter. FogMode, FogDensity, FogStart, FogEnd, FogIndex, and FogCoordSrc are accepted.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Specifies the value that pname will be set to.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static unsafe void Fog(OpenTK.Graphics.ES11.All pname, Single* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(112);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.FogParameter), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify fog parameters
        /// </summary>
        /// <param name="pname"> 
        /// Specifies a single-valued fog parameter. FogMode, FogDensity, FogStart, FogEnd, FogIndex, and FogCoordSrc are accepted.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Specifies the value that pname will be set to.
        /// </param>
        [CLSCompliant(false)]
        public static void Fog(OpenTK.Graphics.ES11.FogParameter pname, Single[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Single");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(112);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.FogParameter), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify fog parameters
        /// </summary>
        /// <param name="pname"> 
        /// Specifies a single-valued fog parameter. FogMode, FogDensity, FogStart, FogEnd, FogIndex, and FogCoordSrc are accepted.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Specifies the value that pname will be set to.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void Fog(OpenTK.Graphics.ES11.FogParameter pname, Single* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(112);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.FogParameter), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="pname"></param>
        /// <param name="param"></param>
        public static void Fogx(OpenTK.Graphics.ES11.All pname, Int32 param)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(113);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="pname"></param>
        /// <param name="param">[length: pname]</param>
        [CLSCompliant(false)]
        public static void Fogx(OpenTK.Graphics.ES11.All pname, Int32[] param)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "param_pinned");
                    if(param != null && param.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("param_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("param_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("param_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(115);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="pname"></param>
        /// <param name="param">[length: pname]</param>
        [CLSCompliant(false)]
        public static unsafe void Fogx(OpenTK.Graphics.ES11.All pname, Int32* param)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(115);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Define front- and back-facing polygons
        /// </summary>
        /// <param name="mode"> 
        /// Specifies the orientation of front-facing polygons. Cw and Ccw are accepted. The initial value is Ccw.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void FrontFace(OpenTK.Graphics.ES11.All mode)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(121);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.FrontFaceDirection));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Define front- and back-facing polygons
        /// </summary>
        /// <param name="mode"> 
        /// Specifies the orientation of front-facing polygons. Cw and Ccw are accepted. The initial value is Ccw.
        /// </param>
        public static void FrontFace(OpenTK.Graphics.ES11.FrontFaceDirection mode)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(121);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.FrontFaceDirection));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Multiply the current matrix by a perspective matrix
        /// </summary>
        /// <param name="l"> 
        /// Specify the coordinates for the left and right vertical clipping planes.
        /// </param>
        /// <param name="r"> 
        /// Specify the coordinates for the left and right vertical clipping planes.
        /// </param>
        /// <param name="b"> 
        /// Specify the coordinates for the bottom and top horizontal clipping planes.
        /// </param>
        /// <param name="t"> 
        /// Specify the coordinates for the bottom and top horizontal clipping planes.
        /// </param>
        /// <param name="n"> 
        /// Specify the distances to the near and far depth clipping planes. Both distances must be positive.
        /// </param>
        /// <param name="f"> 
        /// Specify the distances to the near and far depth clipping planes. Both distances must be positive.
        /// </param>
        public static void Frustum(Single l, Single r, Single b, Single t, Single n, Single f)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(122);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Single), typeof(Single), typeof(Single), typeof(Single), typeof(Single), typeof(Single));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="l"></param>
        /// <param name="r"></param>
        /// <param name="b"></param>
        /// <param name="t"></param>
        /// <param name="n"></param>
        /// <param name="f"></param>
        public static void Frustumx(Int32 l, Int32 r, Int32 b, Int32 t, Int32 n, Int32 f)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(124);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Generate buffer object names
        /// </summary>
        [CLSCompliant(false)]
        public static Int32 GenBuffer()
        {
            unsafe
            {
                Int32 __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Int32 __result = default(Int32);
                    Silk.Cil.Ldc_I4(1);
                    Silk.Cil.LoadAddress(__result);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(126);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    Silk.Cil.Load(__result);
                    Silk.Cil.Store(out __return_result);
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Generate buffer object names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of buffer object names to be generated.
        /// </param>
        /// <param name="buffers">[length: n] 
        /// Specifies an array in which the generated buffer object names are stored.
        /// </param>
        [CLSCompliant(false)]
        public static void GenBuffers(Int32 n, [OutAttribute] Int32[] buffers)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "buffers_pinned");
                    if(buffers != null && buffers.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("buffers_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("buffers_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("buffers_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(126);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Generate buffer object names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of buffer object names to be generated.
        /// </param>
        /// <param name="buffers">[length: n] 
        /// Specifies an array in which the generated buffer object names are stored.
        /// </param>
        [CLSCompliant(false)]
        public static void GenBuffers(Int32 n, [OutAttribute] out Int32 buffers)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "buffers_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("buffers_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("buffers_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(126);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Generate buffer object names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of buffer object names to be generated.
        /// </param>
        /// <param name="buffers">[length: n] 
        /// Specifies an array in which the generated buffer object names are stored.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void GenBuffers(Int32 n, [OutAttribute] Int32* buffers)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(126);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Generate buffer object names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of buffer object names to be generated.
        /// </param>
        /// <param name="buffers">[length: n] 
        /// Specifies an array in which the generated buffer object names are stored.
        /// </param>
        [CLSCompliant(false)]
        public static void GenBuffers(Int32 n, [OutAttribute] UInt32[] buffers)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.UInt32& pinned", "buffers_pinned");
                    if(buffers != null && buffers.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.UInt32");
                        Silk.Cil.StoreByName("buffers_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("buffers_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("buffers_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(126);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Generate buffer object names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of buffer object names to be generated.
        /// </param>
        /// <param name="buffers">[length: n] 
        /// Specifies an array in which the generated buffer object names are stored.
        /// </param>
        [CLSCompliant(false)]
        public static void GenBuffers(Int32 n, [OutAttribute] out UInt32 buffers)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.UInt32& pinned", "buffers_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("buffers_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("buffers_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(126);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Generate buffer object names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of buffer object names to be generated.
        /// </param>
        /// <param name="buffers">[length: n] 
        /// Specifies an array in which the generated buffer object names are stored.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void GenBuffers(Int32 n, [OutAttribute] UInt32* buffers)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(126);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Generate texture names
        /// </summary>
        [CLSCompliant(false)]
        public static Int32 GenTexture()
        {
            unsafe
            {
                Int32 __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Int32 __result = default(Int32);
                    Silk.Cil.Ldc_I4(1);
                    Silk.Cil.LoadAddress(__result);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(131);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    Silk.Cil.Load(__result);
                    Silk.Cil.Store(out __return_result);
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Generate texture names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of texture names to be generated.
        /// </param>
        /// <param name="textures">[length: n] 
        /// Specifies an array in which the generated texture names are stored.
        /// </param>
        [CLSCompliant(false)]
        public static void GenTextures(Int32 n, [OutAttribute] Int32[] textures)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "textures_pinned");
                    if(textures != null && textures.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("textures_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("textures_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("textures_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(131);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Generate texture names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of texture names to be generated.
        /// </param>
        /// <param name="textures">[length: n] 
        /// Specifies an array in which the generated texture names are stored.
        /// </param>
        [CLSCompliant(false)]
        public static void GenTextures(Int32 n, [OutAttribute] out Int32 textures)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "textures_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("textures_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("textures_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(131);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Generate texture names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of texture names to be generated.
        /// </param>
        /// <param name="textures">[length: n] 
        /// Specifies an array in which the generated texture names are stored.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void GenTextures(Int32 n, [OutAttribute] Int32* textures)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(131);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Generate texture names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of texture names to be generated.
        /// </param>
        /// <param name="textures">[length: n] 
        /// Specifies an array in which the generated texture names are stored.
        /// </param>
        [CLSCompliant(false)]
        public static void GenTextures(Int32 n, [OutAttribute] UInt32[] textures)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.UInt32& pinned", "textures_pinned");
                    if(textures != null && textures.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.UInt32");
                        Silk.Cil.StoreByName("textures_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("textures_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("textures_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(131);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Generate texture names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of texture names to be generated.
        /// </param>
        /// <param name="textures">[length: n] 
        /// Specifies an array in which the generated texture names are stored.
        /// </param>
        [CLSCompliant(false)]
        public static void GenTextures(Int32 n, [OutAttribute] out UInt32 textures)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.UInt32& pinned", "textures_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("textures_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("textures_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(131);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Generate texture names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of texture names to be generated.
        /// </param>
        /// <param name="textures">[length: n] 
        /// Specifies an array in which the generated texture names are stored.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void GenTextures(Int32 n, [OutAttribute] UInt32* textures)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(131);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="pname"></param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static bool GetBoolean(OpenTK.Graphics.ES11.All pname)
        {
            unsafe
            {
                bool __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    bool __result = default(bool);
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadAddress(__result);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(133);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.GetPName), typeof(bool*));
                    Silk.Cil.Load(__result);
                    Silk.Cil.Store(out __return_result);
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="pname"></param>
        [CLSCompliant(false)]
        public static bool GetBoolean(OpenTK.Graphics.ES11.GetPName pname)
        {
            unsafe
            {
                bool __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    bool __result = default(bool);
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadAddress(__result);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(133);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.GetPName), typeof(bool*));
                    Silk.Cil.Load(__result);
                    Silk.Cil.Store(out __return_result);
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: pname]</param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetBoolean(OpenTK.Graphics.ES11.All pname, [OutAttribute] bool[] data)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Boolean& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Boolean");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(133);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.GetPName), typeof(bool*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: pname]</param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetBoolean(OpenTK.Graphics.ES11.All pname, [OutAttribute] out bool data)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Boolean& pinned", "data_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("data_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(133);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.GetPName), typeof(bool*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: pname]</param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static unsafe void GetBoolean(OpenTK.Graphics.ES11.All pname, [OutAttribute] bool* data)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(133);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.GetPName), typeof(bool*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: pname]</param>
        [CLSCompliant(false)]
        public static void GetBoolean(OpenTK.Graphics.ES11.GetPName pname, [OutAttribute] bool[] data)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Boolean& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Boolean");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(133);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.GetPName), typeof(bool*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: pname]</param>
        [CLSCompliant(false)]
        public static void GetBoolean(OpenTK.Graphics.ES11.GetPName pname, [OutAttribute] out bool data)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Boolean& pinned", "data_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("data_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(133);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.GetPName), typeof(bool*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: pname]</param>
        [CLSCompliant(false)]
        public static unsafe void GetBoolean(OpenTK.Graphics.ES11.GetPName pname, [OutAttribute] bool* data)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(133);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.GetPName), typeof(bool*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferSize or BufferUsage.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested parameter.
        /// </param>
        [CLSCompliant(false)]
        public static void GetBufferParameter(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(134);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferSize or BufferUsage.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested parameter.
        /// </param>
        [CLSCompliant(false)]
        public static void GetBufferParameter(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("params_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(134);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferSize or BufferUsage.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested parameter.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void GetBufferParameter(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute] Int32* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(134);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Return the coefficients of the specified clipping plane
        /// </summary>
        /// <param name="plane"> 
        /// Specifies a clipping plane. The number of clipping planes depends on the implementation, but at least six clipping planes are supported. They are identified by symbolic names of the form ClipPlane  where i ranges from 0 to the value of MaxClipPlanes - 1.
        /// </param>
        /// <param name="equation">[length: 4] 
        /// Returns four double-precision values that are the coefficients of the plane equation of plane in eye coordinates. The initial value is (0, 0, 0, 0).
        /// </param>
        [CLSCompliant(false)]
        public static void GetClipPlane(OpenTK.Graphics.ES11.All plane, [OutAttribute] Single[] equation)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "equation_pinned");
                    if(equation != null && equation.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Single");
                        Silk.Cil.StoreByName("equation_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("equation_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("equation_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(136);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Return the coefficients of the specified clipping plane
        /// </summary>
        /// <param name="plane"> 
        /// Specifies a clipping plane. The number of clipping planes depends on the implementation, but at least six clipping planes are supported. They are identified by symbolic names of the form ClipPlane  where i ranges from 0 to the value of MaxClipPlanes - 1.
        /// </param>
        /// <param name="equation">[length: 4] 
        /// Returns four double-precision values that are the coefficients of the plane equation of plane in eye coordinates. The initial value is (0, 0, 0, 0).
        /// </param>
        [CLSCompliant(false)]
        public static void GetClipPlane(OpenTK.Graphics.ES11.All plane, [OutAttribute] out Single equation)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "equation_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("equation_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("equation_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(136);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Return the coefficients of the specified clipping plane
        /// </summary>
        /// <param name="plane"> 
        /// Specifies a clipping plane. The number of clipping planes depends on the implementation, but at least six clipping planes are supported. They are identified by symbolic names of the form ClipPlane  where i ranges from 0 to the value of MaxClipPlanes - 1.
        /// </param>
        /// <param name="equation">[length: 4] 
        /// Returns four double-precision values that are the coefficients of the plane equation of plane in eye coordinates. The initial value is (0, 0, 0, 0).
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void GetClipPlane(OpenTK.Graphics.ES11.All plane, [OutAttribute] Single* equation)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(136);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="plane"></param>
        /// <param name="equation">[length: 4]</param>
        [CLSCompliant(false)]
        public static void GetClipPlanex(OpenTK.Graphics.ES11.All plane, [OutAttribute] Int32[] equation)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "equation_pinned");
                    if(equation != null && equation.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("equation_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("equation_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("equation_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(138);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="plane"></param>
        /// <param name="equation">[length: 4]</param>
        [CLSCompliant(false)]
        public static void GetClipPlanex(OpenTK.Graphics.ES11.All plane, [OutAttribute] out Int32 equation)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "equation_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("equation_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("equation_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(138);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="plane"></param>
        /// <param name="equation">[length: 4]</param>
        [CLSCompliant(false)]
        public static unsafe void GetClipPlanex(OpenTK.Graphics.ES11.All plane, [OutAttribute] Int32* equation)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(138);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Return error information
        /// </summary>
        public static OpenTK.Graphics.ES11.ErrorCode GetError()
        {
            unsafe
            {
                OpenTK.Graphics.ES11.ErrorCode __return_result;
                Silk.Cil.Load(EntryPoints);
                Silk.Cil.Ldc_I4(143);
                Silk.Cil.Ldelem_I();
                Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(OpenTK.Graphics.ES11.ErrorCode));
                Silk.Cil.Store(out __return_result);
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="pname"></param>
        [CLSCompliant(false)]
        public static Int32 GetFixed(OpenTK.Graphics.ES11.All pname)
        {
            unsafe
            {
                Int32 __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Int32 __result = default(Int32);
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadAddress(__result);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(145);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    Silk.Cil.Load(__result);
                    Silk.Cil.Store(out __return_result);
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [CLSCompliant(false)]
        public static void GetFixed(OpenTK.Graphics.ES11.All pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(145);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [CLSCompliant(false)]
        public static void GetFixed(OpenTK.Graphics.ES11.All pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("params_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(145);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [CLSCompliant(false)]
        public static unsafe void GetFixed(OpenTK.Graphics.ES11.All pname, [OutAttribute] Int32* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(145);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="pname"></param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static Single GetFloat(OpenTK.Graphics.ES11.All pname)
        {
            unsafe
            {
                Single __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Single __result = default(Single);
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadAddress(__result);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(147);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.GetPName), typeof(Single*));
                    Silk.Cil.Load(__result);
                    Silk.Cil.Store(out __return_result);
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="pname"></param>
        [CLSCompliant(false)]
        public static Single GetFloat(OpenTK.Graphics.ES11.GetPName pname)
        {
            unsafe
            {
                Single __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Single __result = default(Single);
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadAddress(__result);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(147);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.GetPName), typeof(Single*));
                    Silk.Cil.Load(__result);
                    Silk.Cil.Store(out __return_result);
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: pname]</param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetFloat(OpenTK.Graphics.ES11.All pname, [OutAttribute] Single[] data)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Single");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(147);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.GetPName), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: pname]</param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetFloat(OpenTK.Graphics.ES11.All pname, [OutAttribute] out Single data)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "data_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("data_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(147);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.GetPName), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: pname]</param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static unsafe void GetFloat(OpenTK.Graphics.ES11.All pname, [OutAttribute] Single* data)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(147);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.GetPName), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: pname]</param>
        [CLSCompliant(false)]
        public static void GetFloat(OpenTK.Graphics.ES11.GetPName pname, [OutAttribute] Single[] data)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Single");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(147);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.GetPName), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: pname]</param>
        [CLSCompliant(false)]
        public static void GetFloat(OpenTK.Graphics.ES11.GetPName pname, [OutAttribute] out Single data)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "data_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("data_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(147);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.GetPName), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: pname]</param>
        [CLSCompliant(false)]
        public static unsafe void GetFloat(OpenTK.Graphics.ES11.GetPName pname, [OutAttribute] Single* data)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(147);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.GetPName), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="pname"></param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static Int32 GetInteger(OpenTK.Graphics.ES11.All pname)
        {
            unsafe
            {
                Int32 __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Int32 __result = default(Int32);
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadAddress(__result);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(152);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.GetPName), typeof(Int32*));
                    Silk.Cil.Load(__result);
                    Silk.Cil.Store(out __return_result);
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="pname"></param>
        [CLSCompliant(false)]
        public static Int32 GetInteger(OpenTK.Graphics.ES11.GetPName pname)
        {
            unsafe
            {
                Int32 __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Int32 __result = default(Int32);
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadAddress(__result);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(152);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.GetPName), typeof(Int32*));
                    Silk.Cil.Load(__result);
                    Silk.Cil.Store(out __return_result);
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: pname]</param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetInteger(OpenTK.Graphics.ES11.All pname, [OutAttribute] Int32[] data)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(152);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.GetPName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: pname]</param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetInteger(OpenTK.Graphics.ES11.All pname, [OutAttribute] out Int32 data)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "data_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("data_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(152);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.GetPName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: pname]</param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static unsafe void GetInteger(OpenTK.Graphics.ES11.All pname, [OutAttribute] Int32* data)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(152);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.GetPName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: pname]</param>
        [CLSCompliant(false)]
        public static void GetInteger(OpenTK.Graphics.ES11.GetPName pname, [OutAttribute] Int32[] data)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(152);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.GetPName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: pname]</param>
        [CLSCompliant(false)]
        public static void GetInteger(OpenTK.Graphics.ES11.GetPName pname, [OutAttribute] out Int32 data)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "data_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("data_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(152);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.GetPName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: pname]</param>
        [CLSCompliant(false)]
        public static unsafe void GetInteger(OpenTK.Graphics.ES11.GetPName pname, [OutAttribute] Int32* data)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(152);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.GetPName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Return light source parameter values
        /// </summary>
        /// <param name="light"> 
        /// Specifies a light source. The number of possible lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form Light  where  ranges from 0 to the value of MaxLights - 1.
        /// </param>
        /// <param name="pname"> 
        /// Specifies a light source parameter for light. Accepted symbolic names are Ambient, Diffuse, Specular, Position, SpotDirection, SpotExponent, SpotCutoff, ConstantAttenuation, LinearAttenuation, and QuadraticAttenuation.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetLight(OpenTK.Graphics.ES11.All light, OpenTK.Graphics.ES11.All pname, [OutAttribute] Single[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Single");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(153);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.LightName), typeof(OpenTK.Graphics.ES11.LightParameter), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Return light source parameter values
        /// </summary>
        /// <param name="light"> 
        /// Specifies a light source. The number of possible lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form Light  where  ranges from 0 to the value of MaxLights - 1.
        /// </param>
        /// <param name="pname"> 
        /// Specifies a light source parameter for light. Accepted symbolic names are Ambient, Diffuse, Specular, Position, SpotDirection, SpotExponent, SpotCutoff, ConstantAttenuation, LinearAttenuation, and QuadraticAttenuation.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetLight(OpenTK.Graphics.ES11.All light, OpenTK.Graphics.ES11.All pname, [OutAttribute] out Single @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("params_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(153);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.LightName), typeof(OpenTK.Graphics.ES11.LightParameter), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Return light source parameter values
        /// </summary>
        /// <param name="light"> 
        /// Specifies a light source. The number of possible lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form Light  where  ranges from 0 to the value of MaxLights - 1.
        /// </param>
        /// <param name="pname"> 
        /// Specifies a light source parameter for light. Accepted symbolic names are Ambient, Diffuse, Specular, Position, SpotDirection, SpotExponent, SpotCutoff, ConstantAttenuation, LinearAttenuation, and QuadraticAttenuation.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static unsafe void GetLight(OpenTK.Graphics.ES11.All light, OpenTK.Graphics.ES11.All pname, [OutAttribute] Single* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(153);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.LightName), typeof(OpenTK.Graphics.ES11.LightParameter), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Return light source parameter values
        /// </summary>
        /// <param name="light"> 
        /// Specifies a light source. The number of possible lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form Light  where  ranges from 0 to the value of MaxLights - 1.
        /// </param>
        /// <param name="pname"> 
        /// Specifies a light source parameter for light. Accepted symbolic names are Ambient, Diffuse, Specular, Position, SpotDirection, SpotExponent, SpotCutoff, ConstantAttenuation, LinearAttenuation, and QuadraticAttenuation.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested data.
        /// </param>
        [CLSCompliant(false)]
        public static void GetLight(OpenTK.Graphics.ES11.LightName light, OpenTK.Graphics.ES11.LightParameter pname, [OutAttribute] Single[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Single");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(153);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.LightName), typeof(OpenTK.Graphics.ES11.LightParameter), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Return light source parameter values
        /// </summary>
        /// <param name="light"> 
        /// Specifies a light source. The number of possible lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form Light  where  ranges from 0 to the value of MaxLights - 1.
        /// </param>
        /// <param name="pname"> 
        /// Specifies a light source parameter for light. Accepted symbolic names are Ambient, Diffuse, Specular, Position, SpotDirection, SpotExponent, SpotCutoff, ConstantAttenuation, LinearAttenuation, and QuadraticAttenuation.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested data.
        /// </param>
        [CLSCompliant(false)]
        public static void GetLight(OpenTK.Graphics.ES11.LightName light, OpenTK.Graphics.ES11.LightParameter pname, [OutAttribute] out Single @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("params_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(153);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.LightName), typeof(OpenTK.Graphics.ES11.LightParameter), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Return light source parameter values
        /// </summary>
        /// <param name="light"> 
        /// Specifies a light source. The number of possible lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form Light  where  ranges from 0 to the value of MaxLights - 1.
        /// </param>
        /// <param name="pname"> 
        /// Specifies a light source parameter for light. Accepted symbolic names are Ambient, Diffuse, Specular, Position, SpotDirection, SpotExponent, SpotCutoff, ConstantAttenuation, LinearAttenuation, and QuadraticAttenuation.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested data.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void GetLight(OpenTK.Graphics.ES11.LightName light, OpenTK.Graphics.ES11.LightParameter pname, [OutAttribute] Single* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(153);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.LightName), typeof(OpenTK.Graphics.ES11.LightParameter), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="light"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: pname]</param>
        [CLSCompliant(false)]
        public static void GetLightx(OpenTK.Graphics.ES11.All light, OpenTK.Graphics.ES11.All pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(155);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="light"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: pname]</param>
        [CLSCompliant(false)]
        public static void GetLightx(OpenTK.Graphics.ES11.All light, OpenTK.Graphics.ES11.All pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("params_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(155);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="light"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: pname]</param>
        [CLSCompliant(false)]
        public static unsafe void GetLightx(OpenTK.Graphics.ES11.All light, OpenTK.Graphics.ES11.All pname, [OutAttribute] Int32* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(155);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Return material parameters
        /// </summary>
        /// <param name="face"> 
        /// Specifies which of the two materials is being queried. Front or Back are accepted, representing the front and back materials, respectively.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the material parameter to return. Ambient, Diffuse, Specular, Emission, Shininess, and ColorIndexes are accepted.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetMaterial(OpenTK.Graphics.ES11.All face, OpenTK.Graphics.ES11.All pname, [OutAttribute] Single[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Single");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(158);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.MaterialFace), typeof(OpenTK.Graphics.ES11.MaterialParameter), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Return material parameters
        /// </summary>
        /// <param name="face"> 
        /// Specifies which of the two materials is being queried. Front or Back are accepted, representing the front and back materials, respectively.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the material parameter to return. Ambient, Diffuse, Specular, Emission, Shininess, and ColorIndexes are accepted.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetMaterial(OpenTK.Graphics.ES11.All face, OpenTK.Graphics.ES11.All pname, [OutAttribute] out Single @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("params_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(158);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.MaterialFace), typeof(OpenTK.Graphics.ES11.MaterialParameter), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Return material parameters
        /// </summary>
        /// <param name="face"> 
        /// Specifies which of the two materials is being queried. Front or Back are accepted, representing the front and back materials, respectively.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the material parameter to return. Ambient, Diffuse, Specular, Emission, Shininess, and ColorIndexes are accepted.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static unsafe void GetMaterial(OpenTK.Graphics.ES11.All face, OpenTK.Graphics.ES11.All pname, [OutAttribute] Single* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(158);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.MaterialFace), typeof(OpenTK.Graphics.ES11.MaterialParameter), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Return material parameters
        /// </summary>
        /// <param name="face"> 
        /// Specifies which of the two materials is being queried. Front or Back are accepted, representing the front and back materials, respectively.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the material parameter to return. Ambient, Diffuse, Specular, Emission, Shininess, and ColorIndexes are accepted.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested data.
        /// </param>
        [CLSCompliant(false)]
        public static void GetMaterial(OpenTK.Graphics.ES11.MaterialFace face, OpenTK.Graphics.ES11.MaterialParameter pname, [OutAttribute] Single[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Single");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(158);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.MaterialFace), typeof(OpenTK.Graphics.ES11.MaterialParameter), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Return material parameters
        /// </summary>
        /// <param name="face"> 
        /// Specifies which of the two materials is being queried. Front or Back are accepted, representing the front and back materials, respectively.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the material parameter to return. Ambient, Diffuse, Specular, Emission, Shininess, and ColorIndexes are accepted.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested data.
        /// </param>
        [CLSCompliant(false)]
        public static void GetMaterial(OpenTK.Graphics.ES11.MaterialFace face, OpenTK.Graphics.ES11.MaterialParameter pname, [OutAttribute] out Single @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("params_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(158);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.MaterialFace), typeof(OpenTK.Graphics.ES11.MaterialParameter), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Return material parameters
        /// </summary>
        /// <param name="face"> 
        /// Specifies which of the two materials is being queried. Front or Back are accepted, representing the front and back materials, respectively.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the material parameter to return. Ambient, Diffuse, Specular, Emission, Shininess, and ColorIndexes are accepted.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested data.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void GetMaterial(OpenTK.Graphics.ES11.MaterialFace face, OpenTK.Graphics.ES11.MaterialParameter pname, [OutAttribute] Single* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(158);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.MaterialFace), typeof(OpenTK.Graphics.ES11.MaterialParameter), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="face"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: pname]</param>
        [CLSCompliant(false)]
        public static void GetMaterialx(OpenTK.Graphics.ES11.All face, OpenTK.Graphics.ES11.All pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(160);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="face"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: pname]</param>
        [CLSCompliant(false)]
        public static void GetMaterialx(OpenTK.Graphics.ES11.All face, OpenTK.Graphics.ES11.All pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("params_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(160);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="face"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: pname]</param>
        [CLSCompliant(false)]
        public static unsafe void GetMaterialx(OpenTK.Graphics.ES11.All face, OpenTK.Graphics.ES11.All pname, [OutAttribute] Int32* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(160);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary></summary>
        /// <param name="map"></param>
        /// <param name="size"></param>
        /// <param name="values">[length: size]</param>
        [CLSCompliant(false)]
        public static void GetPixelMapx(OpenTK.Graphics.ES11.All map, Int32 size, [OutAttribute] Int32[] values)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "values_pinned");
                    if(values != null && values.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("values_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("values_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("values_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(164);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary></summary>
        /// <param name="map"></param>
        /// <param name="size"></param>
        /// <param name="values">[length: size]</param>
        [CLSCompliant(false)]
        public static void GetPixelMapx(OpenTK.Graphics.ES11.All map, Int32 size, [OutAttribute] out Int32 values)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "values_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("values_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("values_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(164);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary></summary>
        /// <param name="map"></param>
        /// <param name="size"></param>
        /// <param name="values">[length: size]</param>
        [CLSCompliant(false)]
        public static unsafe void GetPixelMapx(OpenTK.Graphics.ES11.All map, Int32 size, [OutAttribute] Int32* values)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(164);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Return the address of the specified pointer
        /// </summary>
        /// <param name="pname"> 
        /// Specifies the array or buffer pointer to be returned. Symbolic constants ColorArrayPointer, EdgeFlagArrayPointer, FogCoordArrayPointer, FeedbackBufferPointer, IndexArrayPointer, NormalArrayPointer, SecondaryColorArrayPointer, SelectionBufferPointer, TextureCoordArrayPointer, or VertexArrayPointer are accepted.
        /// </param>
        /// <param name="@params">[length: 1] 
        /// Returns the pointer value specified by pname.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void GetPointer(OpenTK.Graphics.ES11.All pname, [OutAttribute] IntPtr @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(165);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.GetPointervPName), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Return the address of the specified pointer
        /// </summary>
        /// <param name="pname"> 
        /// Specifies the array or buffer pointer to be returned. Symbolic constants ColorArrayPointer, EdgeFlagArrayPointer, FogCoordArrayPointer, FeedbackBufferPointer, IndexArrayPointer, NormalArrayPointer, SecondaryColorArrayPointer, SelectionBufferPointer, TextureCoordArrayPointer, or VertexArrayPointer are accepted.
        /// </param>
        /// <param name="@params">[length: 1] 
        /// Returns the pointer value specified by pname.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetPointer<T1>(OpenTK.Graphics.ES11.All pname, [InAttribute, OutAttribute] T1[] @params)
            where T1 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T1& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T1");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(165);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.GetPointervPName), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Return the address of the specified pointer
        /// </summary>
        /// <param name="pname"> 
        /// Specifies the array or buffer pointer to be returned. Symbolic constants ColorArrayPointer, EdgeFlagArrayPointer, FogCoordArrayPointer, FeedbackBufferPointer, IndexArrayPointer, NormalArrayPointer, SecondaryColorArrayPointer, SelectionBufferPointer, TextureCoordArrayPointer, or VertexArrayPointer are accepted.
        /// </param>
        /// <param name="@params">[length: 1] 
        /// Returns the pointer value specified by pname.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetPointer<T1>(OpenTK.Graphics.ES11.All pname, [InAttribute, OutAttribute] T1[,] @params)
            where T1 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T1& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T1[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(165);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.GetPointervPName), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Return the address of the specified pointer
        /// </summary>
        /// <param name="pname"> 
        /// Specifies the array or buffer pointer to be returned. Symbolic constants ColorArrayPointer, EdgeFlagArrayPointer, FogCoordArrayPointer, FeedbackBufferPointer, IndexArrayPointer, NormalArrayPointer, SecondaryColorArrayPointer, SelectionBufferPointer, TextureCoordArrayPointer, or VertexArrayPointer are accepted.
        /// </param>
        /// <param name="@params">[length: 1] 
        /// Returns the pointer value specified by pname.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetPointer<T1>(OpenTK.Graphics.ES11.All pname, [InAttribute, OutAttribute] T1[,,] @params)
            where T1 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T1& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T1[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(165);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.GetPointervPName), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Return the address of the specified pointer
        /// </summary>
        /// <param name="pname"> 
        /// Specifies the array or buffer pointer to be returned. Symbolic constants ColorArrayPointer, EdgeFlagArrayPointer, FogCoordArrayPointer, FeedbackBufferPointer, IndexArrayPointer, NormalArrayPointer, SecondaryColorArrayPointer, SelectionBufferPointer, TextureCoordArrayPointer, or VertexArrayPointer are accepted.
        /// </param>
        /// <param name="@params">[length: 1] 
        /// Returns the pointer value specified by pname.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void GetPointer<T1>(OpenTK.Graphics.ES11.All pname, [InAttribute, OutAttribute] ref T1 @params)
            where T1 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T1& pinned", "params_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("params_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(165);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.GetPointervPName), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Return the address of the specified pointer
        /// </summary>
        /// <param name="pname"> 
        /// Specifies the array or buffer pointer to be returned. Symbolic constants ColorArrayPointer, EdgeFlagArrayPointer, FogCoordArrayPointer, FeedbackBufferPointer, IndexArrayPointer, NormalArrayPointer, SecondaryColorArrayPointer, SelectionBufferPointer, TextureCoordArrayPointer, or VertexArrayPointer are accepted.
        /// </param>
        /// <param name="@params">[length: 1] 
        /// Returns the pointer value specified by pname.
        /// </param>
        public static void GetPointer(OpenTK.Graphics.ES11.GetPointervPName pname, [OutAttribute] IntPtr @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(165);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.GetPointervPName), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Return the address of the specified pointer
        /// </summary>
        /// <param name="pname"> 
        /// Specifies the array or buffer pointer to be returned. Symbolic constants ColorArrayPointer, EdgeFlagArrayPointer, FogCoordArrayPointer, FeedbackBufferPointer, IndexArrayPointer, NormalArrayPointer, SecondaryColorArrayPointer, SelectionBufferPointer, TextureCoordArrayPointer, or VertexArrayPointer are accepted.
        /// </param>
        /// <param name="@params">[length: 1] 
        /// Returns the pointer value specified by pname.
        /// </param>
        [CLSCompliant(false)]
        public static void GetPointer<T1>(OpenTK.Graphics.ES11.GetPointervPName pname, [InAttribute, OutAttribute] T1[] @params)
            where T1 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T1& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T1");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(165);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.GetPointervPName), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Return the address of the specified pointer
        /// </summary>
        /// <param name="pname"> 
        /// Specifies the array or buffer pointer to be returned. Symbolic constants ColorArrayPointer, EdgeFlagArrayPointer, FogCoordArrayPointer, FeedbackBufferPointer, IndexArrayPointer, NormalArrayPointer, SecondaryColorArrayPointer, SelectionBufferPointer, TextureCoordArrayPointer, or VertexArrayPointer are accepted.
        /// </param>
        /// <param name="@params">[length: 1] 
        /// Returns the pointer value specified by pname.
        /// </param>
        [CLSCompliant(false)]
        public static void GetPointer<T1>(OpenTK.Graphics.ES11.GetPointervPName pname, [InAttribute, OutAttribute] T1[,] @params)
            where T1 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T1& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T1[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(165);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.GetPointervPName), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Return the address of the specified pointer
        /// </summary>
        /// <param name="pname"> 
        /// Specifies the array or buffer pointer to be returned. Symbolic constants ColorArrayPointer, EdgeFlagArrayPointer, FogCoordArrayPointer, FeedbackBufferPointer, IndexArrayPointer, NormalArrayPointer, SecondaryColorArrayPointer, SelectionBufferPointer, TextureCoordArrayPointer, or VertexArrayPointer are accepted.
        /// </param>
        /// <param name="@params">[length: 1] 
        /// Returns the pointer value specified by pname.
        /// </param>
        [CLSCompliant(false)]
        public static void GetPointer<T1>(OpenTK.Graphics.ES11.GetPointervPName pname, [InAttribute, OutAttribute] T1[,,] @params)
            where T1 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T1& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T1[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(165);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.GetPointervPName), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Return the address of the specified pointer
        /// </summary>
        /// <param name="pname"> 
        /// Specifies the array or buffer pointer to be returned. Symbolic constants ColorArrayPointer, EdgeFlagArrayPointer, FogCoordArrayPointer, FeedbackBufferPointer, IndexArrayPointer, NormalArrayPointer, SecondaryColorArrayPointer, SelectionBufferPointer, TextureCoordArrayPointer, or VertexArrayPointer are accepted.
        /// </param>
        /// <param name="@params">[length: 1] 
        /// Returns the pointer value specified by pname.
        /// </param>
        public static void GetPointer<T1>(OpenTK.Graphics.ES11.GetPointervPName pname, [InAttribute, OutAttribute] ref T1 @params)
            where T1 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T1& pinned", "params_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("params_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(165);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.GetPointervPName), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Return a string describing the current GL connection
        /// </summary>
        /// <param name="name"> 
        /// Specifies a symbolic constant, one of Vendor, Renderer, Version, ShadingLanguageVersion, or Extensions.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static String GetString(OpenTK.Graphics.ES11.All name)
        {
            unsafe
            {
                String __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(167);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(IntPtr), typeof(OpenTK.Graphics.ES11.StringName));
                    Silk.Cil.Load(new string((sbyte*)((void*)Silk.Cil.Peek<IntPtr>())));
                    Silk.Cil.Store(out __return_result);
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Return a string describing the current GL connection
        /// </summary>
        /// <param name="name"> 
        /// Specifies a symbolic constant, one of Vendor, Renderer, Version, ShadingLanguageVersion, or Extensions.
        /// </param>
        public static String GetString(OpenTK.Graphics.ES11.StringName name)
        {
            unsafe
            {
                String __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(167);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(IntPtr), typeof(OpenTK.Graphics.ES11.StringName));
                    Silk.Cil.Load(new string((sbyte*)((void*)Silk.Cil.Peek<IntPtr>())));
                    Silk.Cil.Store(out __return_result);
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Return texture environment parameters
        /// </summary>
        /// <param name="target"> 
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl, or PointSprite.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a texture environment parameter. Accepted values are TextureEnvMode, TextureEnvColor, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetTexEnv(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute] Single[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Single");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(169);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureEnvTarget), typeof(OpenTK.Graphics.ES11.TextureEnvParameter), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Return texture environment parameters
        /// </summary>
        /// <param name="target"> 
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl, or PointSprite.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a texture environment parameter. Accepted values are TextureEnvMode, TextureEnvColor, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetTexEnv(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute] out Single @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("params_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(169);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureEnvTarget), typeof(OpenTK.Graphics.ES11.TextureEnvParameter), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Return texture environment parameters
        /// </summary>
        /// <param name="target"> 
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl, or PointSprite.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a texture environment parameter. Accepted values are TextureEnvMode, TextureEnvColor, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static unsafe void GetTexEnv(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute] Single* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(169);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureEnvTarget), typeof(OpenTK.Graphics.ES11.TextureEnvParameter), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Return texture environment parameters
        /// </summary>
        /// <param name="target"> 
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl, or PointSprite.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a texture environment parameter. Accepted values are TextureEnvMode, TextureEnvColor, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested data.
        /// </param>
        [CLSCompliant(false)]
        public static void GetTexEnv(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, [OutAttribute] Single[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Single");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(169);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureEnvTarget), typeof(OpenTK.Graphics.ES11.TextureEnvParameter), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Return texture environment parameters
        /// </summary>
        /// <param name="target"> 
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl, or PointSprite.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a texture environment parameter. Accepted values are TextureEnvMode, TextureEnvColor, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested data.
        /// </param>
        [CLSCompliant(false)]
        public static void GetTexEnv(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, [OutAttribute] out Single @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("params_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(169);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureEnvTarget), typeof(OpenTK.Graphics.ES11.TextureEnvParameter), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Return texture environment parameters
        /// </summary>
        /// <param name="target"> 
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl, or PointSprite.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a texture environment parameter. Accepted values are TextureEnvMode, TextureEnvColor, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested data.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void GetTexEnv(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, [OutAttribute] Single* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(169);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureEnvTarget), typeof(OpenTK.Graphics.ES11.TextureEnvParameter), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Return texture environment parameters
        /// </summary>
        /// <param name="target"> 
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl, or PointSprite.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a texture environment parameter. Accepted values are TextureEnvMode, TextureEnvColor, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetTexEnv(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(170);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureEnvTarget), typeof(OpenTK.Graphics.ES11.TextureEnvParameter), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Return texture environment parameters
        /// </summary>
        /// <param name="target"> 
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl, or PointSprite.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a texture environment parameter. Accepted values are TextureEnvMode, TextureEnvColor, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetTexEnv(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("params_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(170);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureEnvTarget), typeof(OpenTK.Graphics.ES11.TextureEnvParameter), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Return texture environment parameters
        /// </summary>
        /// <param name="target"> 
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl, or PointSprite.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a texture environment parameter. Accepted values are TextureEnvMode, TextureEnvColor, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static unsafe void GetTexEnv(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute] Int32* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(170);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureEnvTarget), typeof(OpenTK.Graphics.ES11.TextureEnvParameter), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Return texture environment parameters
        /// </summary>
        /// <param name="target"> 
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl, or PointSprite.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a texture environment parameter. Accepted values are TextureEnvMode, TextureEnvColor, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested data.
        /// </param>
        [CLSCompliant(false)]
        public static void GetTexEnv(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(170);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureEnvTarget), typeof(OpenTK.Graphics.ES11.TextureEnvParameter), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Return texture environment parameters
        /// </summary>
        /// <param name="target"> 
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl, or PointSprite.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a texture environment parameter. Accepted values are TextureEnvMode, TextureEnvColor, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested data.
        /// </param>
        [CLSCompliant(false)]
        public static void GetTexEnv(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("params_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(170);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureEnvTarget), typeof(OpenTK.Graphics.ES11.TextureEnvParameter), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Return texture environment parameters
        /// </summary>
        /// <param name="target"> 
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl, or PointSprite.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a texture environment parameter. Accepted values are TextureEnvMode, TextureEnvColor, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested data.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void GetTexEnv(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, [OutAttribute] Int32* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(170);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureEnvTarget), typeof(OpenTK.Graphics.ES11.TextureEnvParameter), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="target"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: pname]</param>
        [CLSCompliant(false)]
        public static void GetTexEnvx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(171);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="target"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: pname]</param>
        [CLSCompliant(false)]
        public static void GetTexEnvx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("params_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(171);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="target"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: pname]</param>
        [CLSCompliant(false)]
        public static unsafe void GetTexEnvx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute] Int32* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(171);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target"> 
        /// Specifies the symbolic name of the target texture of the active texture unit. Texture2D and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a texture parameter. TextureMagFilter, TextureMinFilter, TextureWrapS, and TextureWrapT are accepted.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the texture parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetTexParameter(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute] Single[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Single");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(177);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(OpenTK.Graphics.ES11.GetTextureParameter), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target"> 
        /// Specifies the symbolic name of the target texture of the active texture unit. Texture2D and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a texture parameter. TextureMagFilter, TextureMinFilter, TextureWrapS, and TextureWrapT are accepted.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the texture parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetTexParameter(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute] out Single @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("params_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(177);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(OpenTK.Graphics.ES11.GetTextureParameter), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target"> 
        /// Specifies the symbolic name of the target texture of the active texture unit. Texture2D and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a texture parameter. TextureMagFilter, TextureMinFilter, TextureWrapS, and TextureWrapT are accepted.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the texture parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static unsafe void GetTexParameter(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute] Single* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(177);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(OpenTK.Graphics.ES11.GetTextureParameter), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target"> 
        /// Specifies the symbolic name of the target texture of the active texture unit. Texture2D and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a texture parameter. TextureMagFilter, TextureMinFilter, TextureWrapS, and TextureWrapT are accepted.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the texture parameter.
        /// </param>
        [CLSCompliant(false)]
        public static void GetTexParameter(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.GetTextureParameter pname, [OutAttribute] Single[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Single");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(177);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(OpenTK.Graphics.ES11.GetTextureParameter), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target"> 
        /// Specifies the symbolic name of the target texture of the active texture unit. Texture2D and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a texture parameter. TextureMagFilter, TextureMinFilter, TextureWrapS, and TextureWrapT are accepted.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the texture parameter.
        /// </param>
        [CLSCompliant(false)]
        public static void GetTexParameter(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.GetTextureParameter pname, [OutAttribute] out Single @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("params_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(177);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(OpenTK.Graphics.ES11.GetTextureParameter), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target"> 
        /// Specifies the symbolic name of the target texture of the active texture unit. Texture2D and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a texture parameter. TextureMagFilter, TextureMinFilter, TextureWrapS, and TextureWrapT are accepted.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the texture parameter.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void GetTexParameter(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.GetTextureParameter pname, [OutAttribute] Single* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(177);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(OpenTK.Graphics.ES11.GetTextureParameter), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target"> 
        /// Specifies the symbolic name of the target texture of the active texture unit. Texture2D and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a texture parameter. TextureMagFilter, TextureMinFilter, TextureWrapS, and TextureWrapT are accepted.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the texture parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetTexParameter(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(178);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(OpenTK.Graphics.ES11.GetTextureParameter), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target"> 
        /// Specifies the symbolic name of the target texture of the active texture unit. Texture2D and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a texture parameter. TextureMagFilter, TextureMinFilter, TextureWrapS, and TextureWrapT are accepted.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the texture parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetTexParameter(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("params_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(178);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(OpenTK.Graphics.ES11.GetTextureParameter), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target"> 
        /// Specifies the symbolic name of the target texture of the active texture unit. Texture2D and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a texture parameter. TextureMagFilter, TextureMinFilter, TextureWrapS, and TextureWrapT are accepted.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the texture parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static unsafe void GetTexParameter(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute] Int32* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(178);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(OpenTK.Graphics.ES11.GetTextureParameter), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target"> 
        /// Specifies the symbolic name of the target texture of the active texture unit. Texture2D and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a texture parameter. TextureMagFilter, TextureMinFilter, TextureWrapS, and TextureWrapT are accepted.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the texture parameter.
        /// </param>
        [CLSCompliant(false)]
        public static void GetTexParameter(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.GetTextureParameter pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(178);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(OpenTK.Graphics.ES11.GetTextureParameter), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target"> 
        /// Specifies the symbolic name of the target texture of the active texture unit. Texture2D and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a texture parameter. TextureMagFilter, TextureMinFilter, TextureWrapS, and TextureWrapT are accepted.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the texture parameter.
        /// </param>
        [CLSCompliant(false)]
        public static void GetTexParameter(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.GetTextureParameter pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("params_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(178);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(OpenTK.Graphics.ES11.GetTextureParameter), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target"> 
        /// Specifies the symbolic name of the target texture of the active texture unit. Texture2D and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a texture parameter. TextureMagFilter, TextureMinFilter, TextureWrapS, and TextureWrapT are accepted.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the texture parameter.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void GetTexParameter(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.GetTextureParameter pname, [OutAttribute] Int32* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(178);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(OpenTK.Graphics.ES11.GetTextureParameter), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="target"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: pname]</param>
        [CLSCompliant(false)]
        public static void GetTexParameterx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(179);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="target"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: pname]</param>
        [CLSCompliant(false)]
        public static void GetTexParameterx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("params_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(179);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="target"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: pname]</param>
        [CLSCompliant(false)]
        public static unsafe void GetTexParameterx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute] Int32* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(179);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify implementation-specific hints
        /// </summary>
        /// <param name="target"> 
        /// Specifies a symbolic constant indicating the behavior to be controlled. GenerateMipmapHint is accepted.
        /// </param>
        /// <param name="mode"> 
        /// Specifies a symbolic constant indicating the desired behavior. Fastest, Nicest, and DontCare are accepted.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void Hint(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All mode)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(181);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.HintTarget), typeof(OpenTK.Graphics.ES11.HintMode));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify implementation-specific hints
        /// </summary>
        /// <param name="target"> 
        /// Specifies a symbolic constant indicating the behavior to be controlled. GenerateMipmapHint is accepted.
        /// </param>
        /// <param name="mode"> 
        /// Specifies a symbolic constant indicating the desired behavior. Fastest, Nicest, and DontCare are accepted.
        /// </param>
        public static void Hint(OpenTK.Graphics.ES11.HintTarget target, OpenTK.Graphics.ES11.HintMode mode)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(181);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.HintTarget), typeof(OpenTK.Graphics.ES11.HintMode));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Determine if a name corresponds to a buffer object
        /// </summary>
        /// <param name="buffer"> 
        /// Specifies a value that may be the name of a buffer object.
        /// </param>
        [CLSCompliant(false)]
        public static bool IsBuffer(Int32 buffer)
        {
            unsafe
            {
                bool __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(184);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(byte), typeof(UInt32));
                    Silk.Cil.Store(out __return_result);
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Determine if a name corresponds to a buffer object
        /// </summary>
        /// <param name="buffer"> 
        /// Specifies a value that may be the name of a buffer object.
        /// </param>
        [CLSCompliant(false)]
        public static bool IsBuffer(UInt32 buffer)
        {
            unsafe
            {
                bool __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(184);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(byte), typeof(UInt32));
                    Silk.Cil.Store(out __return_result);
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Test whether a capability is enabled
        /// </summary>
        /// <param name="cap"> 
        /// Specifies a symbolic constant indicating a GL capability.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static bool IsEnabled(OpenTK.Graphics.ES11.All cap)
        {
            unsafe
            {
                bool __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(185);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(byte), typeof(OpenTK.Graphics.ES11.EnableCap));
                    Silk.Cil.Store(out __return_result);
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Test whether a capability is enabled
        /// </summary>
        /// <param name="cap"> 
        /// Specifies a symbolic constant indicating a GL capability.
        /// </param>
        public static bool IsEnabled(OpenTK.Graphics.ES11.EnableCap cap)
        {
            unsafe
            {
                bool __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(185);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(byte), typeof(OpenTK.Graphics.ES11.EnableCap));
                    Silk.Cil.Store(out __return_result);
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Determine if a name corresponds to a texture
        /// </summary>
        /// <param name="texture"> 
        /// Specifies a value that may be the name of a texture.
        /// </param>
        [CLSCompliant(false)]
        public static bool IsTexture(Int32 texture)
        {
            unsafe
            {
                bool __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(190);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(byte), typeof(UInt32));
                    Silk.Cil.Store(out __return_result);
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Determine if a name corresponds to a texture
        /// </summary>
        /// <param name="texture"> 
        /// Specifies a value that may be the name of a texture.
        /// </param>
        [CLSCompliant(false)]
        public static bool IsTexture(UInt32 texture)
        {
            unsafe
            {
                bool __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(190);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(byte), typeof(UInt32));
                    Silk.Cil.Store(out __return_result);
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Set light source parameters
        /// </summary>
        /// <param name="light"> 
        /// Specifies a light. The number of lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form Light , where i ranges from 0 to the value of MaxLights - 1.
        /// </param>
        /// <param name="pname"> 
        /// Specifies a single-valued light source parameter for light. SpotExponent, SpotCutoff, ConstantAttenuation, LinearAttenuation, and QuadraticAttenuation are accepted.
        /// </param>
        /// <param name="param"> 
        /// Specifies the value that parameter pname of light source light will be set to.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void Light(OpenTK.Graphics.ES11.All light, OpenTK.Graphics.ES11.All pname, Single param)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(192);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.LightName), typeof(OpenTK.Graphics.ES11.LightParameter), typeof(Single));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Set light source parameters
        /// </summary>
        /// <param name="light"> 
        /// Specifies a light. The number of lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form Light , where i ranges from 0 to the value of MaxLights - 1.
        /// </param>
        /// <param name="pname"> 
        /// Specifies a single-valued light source parameter for light. SpotExponent, SpotCutoff, ConstantAttenuation, LinearAttenuation, and QuadraticAttenuation are accepted.
        /// </param>
        /// <param name="param"> 
        /// Specifies the value that parameter pname of light source light will be set to.
        /// </param>
        public static void Light(OpenTK.Graphics.ES11.LightName light, OpenTK.Graphics.ES11.LightParameter pname, Single param)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(192);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.LightName), typeof(OpenTK.Graphics.ES11.LightParameter), typeof(Single));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Set light source parameters
        /// </summary>
        /// <param name="light"> 
        /// Specifies a light. The number of lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form Light , where i ranges from 0 to the value of MaxLights - 1.
        /// </param>
        /// <param name="pname"> 
        /// Specifies a single-valued light source parameter for light. SpotExponent, SpotCutoff, ConstantAttenuation, LinearAttenuation, and QuadraticAttenuation are accepted.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Specifies the value that parameter pname of light source light will be set to.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void Light(OpenTK.Graphics.ES11.All light, OpenTK.Graphics.ES11.All pname, Single[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Single");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(193);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.LightName), typeof(OpenTK.Graphics.ES11.LightParameter), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Set light source parameters
        /// </summary>
        /// <param name="light"> 
        /// Specifies a light. The number of lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form Light , where i ranges from 0 to the value of MaxLights - 1.
        /// </param>
        /// <param name="pname"> 
        /// Specifies a single-valued light source parameter for light. SpotExponent, SpotCutoff, ConstantAttenuation, LinearAttenuation, and QuadraticAttenuation are accepted.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Specifies the value that parameter pname of light source light will be set to.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static unsafe void Light(OpenTK.Graphics.ES11.All light, OpenTK.Graphics.ES11.All pname, Single* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(193);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.LightName), typeof(OpenTK.Graphics.ES11.LightParameter), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Set light source parameters
        /// </summary>
        /// <param name="light"> 
        /// Specifies a light. The number of lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form Light , where i ranges from 0 to the value of MaxLights - 1.
        /// </param>
        /// <param name="pname"> 
        /// Specifies a single-valued light source parameter for light. SpotExponent, SpotCutoff, ConstantAttenuation, LinearAttenuation, and QuadraticAttenuation are accepted.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Specifies the value that parameter pname of light source light will be set to.
        /// </param>
        [CLSCompliant(false)]
        public static void Light(OpenTK.Graphics.ES11.LightName light, OpenTK.Graphics.ES11.LightParameter pname, Single[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Single");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(193);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.LightName), typeof(OpenTK.Graphics.ES11.LightParameter), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Set light source parameters
        /// </summary>
        /// <param name="light"> 
        /// Specifies a light. The number of lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form Light , where i ranges from 0 to the value of MaxLights - 1.
        /// </param>
        /// <param name="pname"> 
        /// Specifies a single-valued light source parameter for light. SpotExponent, SpotCutoff, ConstantAttenuation, LinearAttenuation, and QuadraticAttenuation are accepted.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Specifies the value that parameter pname of light source light will be set to.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void Light(OpenTK.Graphics.ES11.LightName light, OpenTK.Graphics.ES11.LightParameter pname, Single* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(193);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.LightName), typeof(OpenTK.Graphics.ES11.LightParameter), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Set the lighting model parameters
        /// </summary>
        /// <param name="pname"> 
        /// Specifies a single-valued lighting model parameter. LightModelLocalViewer, LightModelColorControl, and LightModelTwoSide are accepted.
        /// </param>
        /// <param name="param"> 
        /// Specifies the value that param will be set to.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void LightModel(OpenTK.Graphics.ES11.All pname, Single param)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(194);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.LightModelParameter), typeof(Single));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Set the lighting model parameters
        /// </summary>
        /// <param name="pname"> 
        /// Specifies a single-valued lighting model parameter. LightModelLocalViewer, LightModelColorControl, and LightModelTwoSide are accepted.
        /// </param>
        /// <param name="param"> 
        /// Specifies the value that param will be set to.
        /// </param>
        public static void LightModel(OpenTK.Graphics.ES11.LightModelParameter pname, Single param)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(194);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.LightModelParameter), typeof(Single));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Set the lighting model parameters
        /// </summary>
        /// <param name="pname"> 
        /// Specifies a single-valued lighting model parameter. LightModelLocalViewer, LightModelColorControl, and LightModelTwoSide are accepted.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Specifies the value that param will be set to.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void LightModel(OpenTK.Graphics.ES11.All pname, Single[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Single");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(195);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.LightModelParameter), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Set the lighting model parameters
        /// </summary>
        /// <param name="pname"> 
        /// Specifies a single-valued lighting model parameter. LightModelLocalViewer, LightModelColorControl, and LightModelTwoSide are accepted.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Specifies the value that param will be set to.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static unsafe void LightModel(OpenTK.Graphics.ES11.All pname, Single* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(195);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.LightModelParameter), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Set the lighting model parameters
        /// </summary>
        /// <param name="pname"> 
        /// Specifies a single-valued lighting model parameter. LightModelLocalViewer, LightModelColorControl, and LightModelTwoSide are accepted.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Specifies the value that param will be set to.
        /// </param>
        [CLSCompliant(false)]
        public static void LightModel(OpenTK.Graphics.ES11.LightModelParameter pname, Single[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Single");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(195);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.LightModelParameter), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Set the lighting model parameters
        /// </summary>
        /// <param name="pname"> 
        /// Specifies a single-valued lighting model parameter. LightModelLocalViewer, LightModelColorControl, and LightModelTwoSide are accepted.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Specifies the value that param will be set to.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void LightModel(OpenTK.Graphics.ES11.LightModelParameter pname, Single* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(195);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.LightModelParameter), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="pname"></param>
        /// <param name="param"></param>
        public static void LightModelx(OpenTK.Graphics.ES11.All pname, Int32 param)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(196);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="pname"></param>
        /// <param name="param">[length: pname]</param>
        [CLSCompliant(false)]
        public static void LightModelx(OpenTK.Graphics.ES11.All pname, Int32[] param)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "param_pinned");
                    if(param != null && param.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("param_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("param_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("param_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(198);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="pname"></param>
        /// <param name="param">[length: pname]</param>
        [CLSCompliant(false)]
        public static unsafe void LightModelx(OpenTK.Graphics.ES11.All pname, Int32* param)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(198);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="light"></param>
        /// <param name="pname"></param>
        /// <param name="param"></param>
        public static void Lightx(OpenTK.Graphics.ES11.All light, OpenTK.Graphics.ES11.All pname, Int32 param)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(200);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="light"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: pname]</param>
        [CLSCompliant(false)]
        public static void Lightx(OpenTK.Graphics.ES11.All light, OpenTK.Graphics.ES11.All pname, Int32[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(202);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="light"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: pname]</param>
        [CLSCompliant(false)]
        public static unsafe void Lightx(OpenTK.Graphics.ES11.All light, OpenTK.Graphics.ES11.All pname, Int32* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(202);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify the width of rasterized lines
        /// </summary>
        /// <param name="width"> 
        /// Specifies the width of rasterized lines. The initial value is 1.
        /// </param>
        public static void LineWidth(Single width)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(204);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Single));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="width"></param>
        public static void LineWidthx(Int32 width)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(205);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Replace the current matrix with the identity matrix
        /// </summary>
        public static void LoadIdentity()
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(207);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Replace the current matrix with the specified matrix
        /// </summary>
        /// <param name="m">[length: 16] 
        /// Specifies a pointer to 16 consecutive values, which are used as the elements of a 4  times  4 column-major matrix.
        /// </param>
        [CLSCompliant(false)]
        public static void LoadMatrix(Single[] m)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "m_pinned");
                    if(m != null && m.Length != 0)
                    {
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Single");
                        Silk.Cil.StoreByName("m_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("m_pinned");
                    }
                    Silk.Cil.LoadByName("m_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(208);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Replace the current matrix with the specified matrix
        /// </summary>
        /// <param name="m">[length: 16] 
        /// Specifies a pointer to 16 consecutive values, which are used as the elements of a 4  times  4 column-major matrix.
        /// </param>
        [CLSCompliant(false)]
        public static void LoadMatrix(ref Single m)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "m_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.StoreByName("m_pinned");
                    Silk.Cil.LoadByName("m_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(208);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Replace the current matrix with the specified matrix
        /// </summary>
        /// <param name="m">[length: 16] 
        /// Specifies a pointer to 16 consecutive values, which are used as the elements of a 4  times  4 column-major matrix.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void LoadMatrix(Single* m)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(208);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="m">[length: 16]</param>
        [CLSCompliant(false)]
        public static void LoadMatrixx(Int32[] m)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "m_pinned");
                    if(m != null && m.Length != 0)
                    {
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("m_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("m_pinned");
                    }
                    Silk.Cil.LoadByName("m_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(209);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="m">[length: 16]</param>
        [CLSCompliant(false)]
        public static void LoadMatrixx(ref Int32 m)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "m_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.StoreByName("m_pinned");
                    Silk.Cil.LoadByName("m_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(209);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="m">[length: 16]</param>
        [CLSCompliant(false)]
        public static unsafe void LoadMatrixx(Int32* m)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(209);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify a logical pixel operation for rendering
        /// </summary>
        /// <param name="opcode"> 
        /// Specifies a symbolic constant that selects a logical operation. The following symbols are accepted: Clear, Set, Copy, CopyInverted, Noop, Invert, And, Nand, Or, Nor, Xor, Equiv, AndReverse, AndInverted, OrReverse, and OrInverted. The initial value is Copy.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void LogicOp(OpenTK.Graphics.ES11.All opcode)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(213);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.LogicOp));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify a logical pixel operation for rendering
        /// </summary>
        /// <param name="opcode"> 
        /// Specifies a symbolic constant that selects a logical operation. The following symbols are accepted: Clear, Set, Copy, CopyInverted, Noop, Invert, And, Nand, Or, Nor, Xor, Equiv, AndReverse, AndInverted, OrReverse, and OrInverted. The initial value is Copy.
        /// </param>
        public static void LogicOp(OpenTK.Graphics.ES11.LogicOp opcode)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(213);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.LogicOp));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify material parameters for the lighting model
        /// </summary>
        /// <param name="face"> 
        /// Specifies which face or faces are being updated. Must be one of Front, Back, or FrontAndBack.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the single-valued material parameter of the face or faces that is being updated. Must be Shininess.
        /// </param>
        /// <param name="param"> 
        /// Specifies the value that parameter Shininess will be set to.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void Material(OpenTK.Graphics.ES11.All face, OpenTK.Graphics.ES11.All pname, Single param)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(220);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.MaterialFace), typeof(OpenTK.Graphics.ES11.MaterialParameter), typeof(Single));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify material parameters for the lighting model
        /// </summary>
        /// <param name="face"> 
        /// Specifies which face or faces are being updated. Must be one of Front, Back, or FrontAndBack.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the single-valued material parameter of the face or faces that is being updated. Must be Shininess.
        /// </param>
        /// <param name="param"> 
        /// Specifies the value that parameter Shininess will be set to.
        /// </param>
        public static void Material(OpenTK.Graphics.ES11.MaterialFace face, OpenTK.Graphics.ES11.MaterialParameter pname, Single param)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(220);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.MaterialFace), typeof(OpenTK.Graphics.ES11.MaterialParameter), typeof(Single));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify material parameters for the lighting model
        /// </summary>
        /// <param name="face"> 
        /// Specifies which face or faces are being updated. Must be one of Front, Back, or FrontAndBack.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the single-valued material parameter of the face or faces that is being updated. Must be Shininess.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Specifies the value that parameter Shininess will be set to.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void Material(OpenTK.Graphics.ES11.All face, OpenTK.Graphics.ES11.All pname, Single[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Single");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(221);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.MaterialFace), typeof(OpenTK.Graphics.ES11.MaterialParameter), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify material parameters for the lighting model
        /// </summary>
        /// <param name="face"> 
        /// Specifies which face or faces are being updated. Must be one of Front, Back, or FrontAndBack.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the single-valued material parameter of the face or faces that is being updated. Must be Shininess.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Specifies the value that parameter Shininess will be set to.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static unsafe void Material(OpenTK.Graphics.ES11.All face, OpenTK.Graphics.ES11.All pname, Single* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(221);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.MaterialFace), typeof(OpenTK.Graphics.ES11.MaterialParameter), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify material parameters for the lighting model
        /// </summary>
        /// <param name="face"> 
        /// Specifies which face or faces are being updated. Must be one of Front, Back, or FrontAndBack.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the single-valued material parameter of the face or faces that is being updated. Must be Shininess.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Specifies the value that parameter Shininess will be set to.
        /// </param>
        [CLSCompliant(false)]
        public static void Material(OpenTK.Graphics.ES11.MaterialFace face, OpenTK.Graphics.ES11.MaterialParameter pname, Single[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Single");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(221);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.MaterialFace), typeof(OpenTK.Graphics.ES11.MaterialParameter), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify material parameters for the lighting model
        /// </summary>
        /// <param name="face"> 
        /// Specifies which face or faces are being updated. Must be one of Front, Back, or FrontAndBack.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the single-valued material parameter of the face or faces that is being updated. Must be Shininess.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Specifies the value that parameter Shininess will be set to.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void Material(OpenTK.Graphics.ES11.MaterialFace face, OpenTK.Graphics.ES11.MaterialParameter pname, Single* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(221);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.MaterialFace), typeof(OpenTK.Graphics.ES11.MaterialParameter), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="face"></param>
        /// <param name="pname"></param>
        /// <param name="param"></param>
        public static void Materialx(OpenTK.Graphics.ES11.All face, OpenTK.Graphics.ES11.All pname, Int32 param)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(222);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="face"></param>
        /// <param name="pname"></param>
        /// <param name="param">[length: pname]</param>
        [CLSCompliant(false)]
        public static void Materialx(OpenTK.Graphics.ES11.All face, OpenTK.Graphics.ES11.All pname, Int32[] param)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "param_pinned");
                    if(param != null && param.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("param_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("param_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("param_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(224);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="face"></param>
        /// <param name="pname"></param>
        /// <param name="param">[length: pname]</param>
        [CLSCompliant(false)]
        public static unsafe void Materialx(OpenTK.Graphics.ES11.All face, OpenTK.Graphics.ES11.All pname, Int32* param)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(224);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify which matrix is the current matrix
        /// </summary>
        /// <param name="mode"> 
        /// Specifies which matrix stack is the target for subsequent matrix operations. Three values are accepted: Modelview, Projection, and Texture. The initial value is Modelview. Additionally, if the ARB_imaging extension is supported, Color is also accepted.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void MatrixMode(OpenTK.Graphics.ES11.All mode)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(227);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.MatrixMode));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify which matrix is the current matrix
        /// </summary>
        /// <param name="mode"> 
        /// Specifies which matrix stack is the target for subsequent matrix operations. Three values are accepted: Modelview, Projection, and Texture. The initial value is Modelview. Additionally, if the ARB_imaging extension is supported, Color is also accepted.
        /// </param>
        public static void MatrixMode(OpenTK.Graphics.ES11.MatrixMode mode)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(227);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.MatrixMode));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target"> 
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="s"> 
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="t"> 
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="r"> 
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="q"> 
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void MultiTexCoord4(OpenTK.Graphics.ES11.All target, Single s, Single t, Single r, Single q)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(244);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureUnit), typeof(Single), typeof(Single), typeof(Single), typeof(Single));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target"> 
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="s"> 
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="t"> 
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="r"> 
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="q"> 
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        public static void MultiTexCoord4(OpenTK.Graphics.ES11.TextureUnit target, Single s, Single t, Single r, Single q)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(244);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureUnit), typeof(Single), typeof(Single), typeof(Single), typeof(Single));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="texture"></param>
        /// <param name="s"></param>
        /// <param name="t"></param>
        /// <param name="r"></param>
        /// <param name="q"></param>
        public static void MultiTexCoord4x(OpenTK.Graphics.ES11.All texture, Int32 s, Int32 t, Int32 r, Int32 q)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(245);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Multiply the current matrix with the specified matrix
        /// </summary>
        /// <param name="m">[length: 16] 
        /// Points to 16 consecutive values that are used as the elements of a 4  times  4 column-major matrix.
        /// </param>
        [CLSCompliant(false)]
        public static void MultMatrix(Single[] m)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "m_pinned");
                    if(m != null && m.Length != 0)
                    {
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Single");
                        Silk.Cil.StoreByName("m_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("m_pinned");
                    }
                    Silk.Cil.LoadByName("m_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(248);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Multiply the current matrix with the specified matrix
        /// </summary>
        /// <param name="m">[length: 16] 
        /// Points to 16 consecutive values that are used as the elements of a 4  times  4 column-major matrix.
        /// </param>
        [CLSCompliant(false)]
        public static void MultMatrix(ref Single m)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "m_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.StoreByName("m_pinned");
                    Silk.Cil.LoadByName("m_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(248);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Multiply the current matrix with the specified matrix
        /// </summary>
        /// <param name="m">[length: 16] 
        /// Points to 16 consecutive values that are used as the elements of a 4  times  4 column-major matrix.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void MultMatrix(Single* m)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(248);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="m">[length: 16]</param>
        [CLSCompliant(false)]
        public static void MultMatrixx(Int32[] m)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "m_pinned");
                    if(m != null && m.Length != 0)
                    {
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("m_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("m_pinned");
                    }
                    Silk.Cil.LoadByName("m_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(249);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="m">[length: 16]</param>
        [CLSCompliant(false)]
        public static void MultMatrixx(ref Int32 m)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "m_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.StoreByName("m_pinned");
                    Silk.Cil.LoadByName("m_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(249);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="m">[length: 16]</param>
        [CLSCompliant(false)]
        public static unsafe void MultMatrixx(Int32* m)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(249);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Set the current normal vector
        /// </summary>
        /// <param name="nx"> 
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        /// <param name="ny"> 
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        /// <param name="nz"> 
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        public static void Normal3(Single nx, Single ny, Single nz)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(252);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Single), typeof(Single), typeof(Single));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="nx"></param>
        /// <param name="ny"></param>
        /// <param name="nz"></param>
        public static void Normal3x(Int32 nx, Int32 ny, Int32 nz)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(253);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Define an array of normals
        /// </summary>
        /// <param name="type"> 
        /// Specifies the data type of each coordinate in the array. Symbolic constants Byte, Short, Int, Float, and Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive normals. If stride is 0, the normals are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: type,stride] 
        /// Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void NormalPointer(OpenTK.Graphics.ES11.All type, Int32 stride, IntPtr pointer)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(256);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.NormalPointerType), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Define an array of normals
        /// </summary>
        /// <param name="type"> 
        /// Specifies the data type of each coordinate in the array. Symbolic constants Byte, Short, Int, Float, and Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive normals. If stride is 0, the normals are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: type,stride] 
        /// Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void NormalPointer<T2>(OpenTK.Graphics.ES11.All type, Int32 stride, [InAttribute, OutAttribute] T2[] pointer)
            where T2 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T2& pinned", "pointer_pinned");
                    if(pointer != null && pointer.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T2");
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("pointer_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(256);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.NormalPointerType), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Define an array of normals
        /// </summary>
        /// <param name="type"> 
        /// Specifies the data type of each coordinate in the array. Symbolic constants Byte, Short, Int, Float, and Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive normals. If stride is 0, the normals are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: type,stride] 
        /// Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void NormalPointer<T2>(OpenTK.Graphics.ES11.All type, Int32 stride, [InAttribute, OutAttribute] T2[,] pointer)
            where T2 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T2& pinned", "pointer_pinned");
                    if(pointer != null && pointer.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T2[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("pointer_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(256);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.NormalPointerType), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Define an array of normals
        /// </summary>
        /// <param name="type"> 
        /// Specifies the data type of each coordinate in the array. Symbolic constants Byte, Short, Int, Float, and Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive normals. If stride is 0, the normals are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: type,stride] 
        /// Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void NormalPointer<T2>(OpenTK.Graphics.ES11.All type, Int32 stride, [InAttribute, OutAttribute] T2[,,] pointer)
            where T2 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T2& pinned", "pointer_pinned");
                    if(pointer != null && pointer.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T2[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("pointer_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(256);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.NormalPointerType), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Define an array of normals
        /// </summary>
        /// <param name="type"> 
        /// Specifies the data type of each coordinate in the array. Symbolic constants Byte, Short, Int, Float, and Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive normals. If stride is 0, the normals are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: type,stride] 
        /// Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void NormalPointer<T2>(OpenTK.Graphics.ES11.All type, Int32 stride, [InAttribute, OutAttribute] ref T2 pointer)
            where T2 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T2& pinned", "pointer_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("pointer_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("pointer_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(256);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.NormalPointerType), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Define an array of normals
        /// </summary>
        /// <param name="type"> 
        /// Specifies the data type of each coordinate in the array. Symbolic constants Byte, Short, Int, Float, and Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive normals. If stride is 0, the normals are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: type,stride] 
        /// Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0.
        /// </param>
        public static void NormalPointer(OpenTK.Graphics.ES11.NormalPointerType type, Int32 stride, IntPtr pointer)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(256);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.NormalPointerType), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Define an array of normals
        /// </summary>
        /// <param name="type"> 
        /// Specifies the data type of each coordinate in the array. Symbolic constants Byte, Short, Int, Float, and Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive normals. If stride is 0, the normals are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: type,stride] 
        /// Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0.
        /// </param>
        [CLSCompliant(false)]
        public static void NormalPointer<T2>(OpenTK.Graphics.ES11.NormalPointerType type, Int32 stride, [InAttribute, OutAttribute] T2[] pointer)
            where T2 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T2& pinned", "pointer_pinned");
                    if(pointer != null && pointer.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T2");
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("pointer_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(256);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.NormalPointerType), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Define an array of normals
        /// </summary>
        /// <param name="type"> 
        /// Specifies the data type of each coordinate in the array. Symbolic constants Byte, Short, Int, Float, and Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive normals. If stride is 0, the normals are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: type,stride] 
        /// Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0.
        /// </param>
        [CLSCompliant(false)]
        public static void NormalPointer<T2>(OpenTK.Graphics.ES11.NormalPointerType type, Int32 stride, [InAttribute, OutAttribute] T2[,] pointer)
            where T2 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T2& pinned", "pointer_pinned");
                    if(pointer != null && pointer.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T2[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("pointer_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(256);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.NormalPointerType), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Define an array of normals
        /// </summary>
        /// <param name="type"> 
        /// Specifies the data type of each coordinate in the array. Symbolic constants Byte, Short, Int, Float, and Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive normals. If stride is 0, the normals are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: type,stride] 
        /// Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0.
        /// </param>
        [CLSCompliant(false)]
        public static void NormalPointer<T2>(OpenTK.Graphics.ES11.NormalPointerType type, Int32 stride, [InAttribute, OutAttribute] T2[,,] pointer)
            where T2 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T2& pinned", "pointer_pinned");
                    if(pointer != null && pointer.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T2[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("pointer_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(256);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.NormalPointerType), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Define an array of normals
        /// </summary>
        /// <param name="type"> 
        /// Specifies the data type of each coordinate in the array. Symbolic constants Byte, Short, Int, Float, and Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive normals. If stride is 0, the normals are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: type,stride] 
        /// Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0.
        /// </param>
        public static void NormalPointer<T2>(OpenTK.Graphics.ES11.NormalPointerType type, Int32 stride, [InAttribute, OutAttribute] ref T2 pointer)
            where T2 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T2& pinned", "pointer_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("pointer_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("pointer_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(256);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.NormalPointerType), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Multiply the current matrix with an orthographic matrix
        /// </summary>
        /// <param name="l"> 
        /// Specify the coordinates for the left and right vertical clipping planes.
        /// </param>
        /// <param name="r"> 
        /// Specify the coordinates for the left and right vertical clipping planes.
        /// </param>
        /// <param name="b"> 
        /// Specify the coordinates for the bottom and top horizontal clipping planes.
        /// </param>
        /// <param name="t"> 
        /// Specify the coordinates for the bottom and top horizontal clipping planes.
        /// </param>
        /// <param name="n"> 
        /// Specify the distances to the nearer and farther depth clipping planes. These values are negative if the plane is to be behind the viewer.
        /// </param>
        /// <param name="f"> 
        /// Specify the distances to the nearer and farther depth clipping planes. These values are negative if the plane is to be behind the viewer.
        /// </param>
        public static void Ortho(Single l, Single r, Single b, Single t, Single n, Single f)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(257);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Single), typeof(Single), typeof(Single), typeof(Single), typeof(Single), typeof(Single));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="l"></param>
        /// <param name="r"></param>
        /// <param name="b"></param>
        /// <param name="t"></param>
        /// <param name="n"></param>
        /// <param name="f"></param>
        public static void Orthox(Int32 l, Int32 r, Int32 b, Int32 t, Int32 n, Int32 f)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(259);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary></summary>
        /// <param name="map"></param>
        /// <param name="size"></param>
        /// <param name="values">[length: size]</param>
        [CLSCompliant(false)]
        public static void PixelMapx(OpenTK.Graphics.ES11.All map, Int32 size, Int32[] values)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "values_pinned");
                    if(values != null && values.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("values_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("values_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("values_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(262);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary></summary>
        /// <param name="map"></param>
        /// <param name="size"></param>
        /// <param name="values">[length: size]</param>
        [CLSCompliant(false)]
        public static void PixelMapx(OpenTK.Graphics.ES11.All map, Int32 size, ref Int32 values)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "values_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("values_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("values_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(262);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary></summary>
        /// <param name="map"></param>
        /// <param name="size"></param>
        /// <param name="values">[length: size]</param>
        [CLSCompliant(false)]
        public static unsafe void PixelMapx(OpenTK.Graphics.ES11.All map, Int32 size, Int32* values)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(262);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Set pixel storage modes
        /// </summary>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the parameter to be set. One value affects the packing of pixel data into memory: PackAlignment. The other affects the unpacking of pixel data from memory: UnpackAlignment.
        /// </param>
        /// <param name="param"> 
        /// Specifies the value that pname is set to.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void PixelStore(OpenTK.Graphics.ES11.All pname, Int32 param)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(263);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.PixelStoreParameter), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Set pixel storage modes
        /// </summary>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the parameter to be set. One value affects the packing of pixel data into memory: PackAlignment. The other affects the unpacking of pixel data from memory: UnpackAlignment.
        /// </param>
        /// <param name="param"> 
        /// Specifies the value that pname is set to.
        /// </param>
        public static void PixelStore(OpenTK.Graphics.ES11.PixelStoreParameter pname, Int32 param)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(263);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.PixelStoreParameter), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary></summary>
        /// <param name="pname"></param>
        /// <param name="param"></param>
        public static void PixelStorex(OpenTK.Graphics.ES11.All pname, Int32 param)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(264);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify point parameters
        /// </summary>
        /// <param name="pname"> 
        /// Specifies a single-valued point parameter. PointFadeThresholdSize, and PointSpriteCoordOrigin are accepted.
        /// </param>
        /// <param name="param"> 
        /// For glPointParameterf and glPointParameteri, specifies the value that pname will be set to.
        /// </param>
        public static void PointParameter(OpenTK.Graphics.ES11.All pname, Single param)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(267);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Single));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify point parameters
        /// </summary>
        /// <param name="pname"> 
        /// Specifies a single-valued point parameter. PointFadeThresholdSize, and PointSpriteCoordOrigin are accepted.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// For glPointParameterf and glPointParameteri, specifies the value that pname will be set to.
        /// </param>
        [CLSCompliant(false)]
        public static void PointParameter(OpenTK.Graphics.ES11.All pname, Single[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Single");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(268);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify point parameters
        /// </summary>
        /// <param name="pname"> 
        /// Specifies a single-valued point parameter. PointFadeThresholdSize, and PointSpriteCoordOrigin are accepted.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// For glPointParameterf and glPointParameteri, specifies the value that pname will be set to.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void PointParameter(OpenTK.Graphics.ES11.All pname, Single* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(268);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="pname"></param>
        /// <param name="param"></param>
        public static void PointParameterx(OpenTK.Graphics.ES11.All pname, Int32 param)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(269);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="pname"></param>
        /// <param name="@params">[length: pname]</param>
        [CLSCompliant(false)]
        public static void PointParameterx(OpenTK.Graphics.ES11.All pname, Int32[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(271);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="pname"></param>
        /// <param name="@params">[length: pname]</param>
        [CLSCompliant(false)]
        public static unsafe void PointParameterx(OpenTK.Graphics.ES11.All pname, Int32* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(271);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify the diameter of rasterized points
        /// </summary>
        /// <param name="size"> 
        /// Specifies the diameter of rasterized points. The initial value is 1.
        /// </param>
        public static void PointSize(Single size)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(273);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Single));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="size"></param>
        public static void PointSizex(Int32 size)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(275);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Set the scale and units used to calculate depth values
        /// </summary>
        /// <param name="factor"> 
        /// Specifies a scale factor that is used to create a variable depth offset for each polygon. The initial value is 0.
        /// </param>
        /// <param name="units"> 
        /// Is multiplied by an implementation-specific value to create a constant depth offset. The initial value is 0.
        /// </param>
        public static void PolygonOffset(Single factor, Single units)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(277);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Single), typeof(Single));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="factor"></param>
        /// <param name="units"></param>
        public static void PolygonOffsetx(Int32 factor, Int32 units)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(278);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        public static void PopMatrix()
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(280);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Push and pop the current matrix stack
        /// </summary>
        public static void PushMatrix()
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(282);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x"> 
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="y"> 
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="width"> 
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="height"> 
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, and Rgba.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the pixel data. Must be one of UnsignedByte, UnsignedShort565, UnsignedShort4444, or UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Returns the pixel data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void ReadPixels(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES11.All format, OpenTK.Graphics.ES11.All type, [OutAttribute] IntPtr pixels)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(291);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES11.PixelFormat), typeof(OpenTK.Graphics.ES11.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x"> 
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="y"> 
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="width"> 
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="height"> 
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, and Rgba.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the pixel data. Must be one of UnsignedByte, UnsignedShort565, UnsignedShort4444, or UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Returns the pixel data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void ReadPixels<T6>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES11.All format, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute] T6[] pixels)
            where T6 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T6& pinned", "pixels_pinned");
                    if(pixels != null && pixels.Length != 0)
                    {
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T6");
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.LoadByName("pixels_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(291);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES11.PixelFormat), typeof(OpenTK.Graphics.ES11.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x"> 
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="y"> 
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="width"> 
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="height"> 
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, and Rgba.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the pixel data. Must be one of UnsignedByte, UnsignedShort565, UnsignedShort4444, or UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Returns the pixel data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void ReadPixels<T6>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES11.All format, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute] T6[,] pixels)
            where T6 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T6& pinned", "pixels_pinned");
                    if(pixels != null && pixels.Length != 0)
                    {
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T6[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.LoadByName("pixels_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(291);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES11.PixelFormat), typeof(OpenTK.Graphics.ES11.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x"> 
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="y"> 
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="width"> 
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="height"> 
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, and Rgba.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the pixel data. Must be one of UnsignedByte, UnsignedShort565, UnsignedShort4444, or UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Returns the pixel data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void ReadPixels<T6>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES11.All format, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute] T6[,,] pixels)
            where T6 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T6& pinned", "pixels_pinned");
                    if(pixels != null && pixels.Length != 0)
                    {
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T6[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.LoadByName("pixels_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(291);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES11.PixelFormat), typeof(OpenTK.Graphics.ES11.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x"> 
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="y"> 
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="width"> 
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="height"> 
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, and Rgba.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the pixel data. Must be one of UnsignedByte, UnsignedShort565, UnsignedShort4444, or UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Returns the pixel data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void ReadPixels<T6>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES11.All format, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute] ref T6 pixels)
            where T6 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T6& pinned", "pixels_pinned");
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.StoreByName("pixels_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.LoadByName("pixels_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(291);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES11.PixelFormat), typeof(OpenTK.Graphics.ES11.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x"> 
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="y"> 
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="width"> 
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="height"> 
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, and Rgba.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the pixel data. Must be one of UnsignedByte, UnsignedShort565, UnsignedShort4444, or UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Returns the pixel data.
        /// </param>
        public static void ReadPixels(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES11.PixelFormat format, OpenTK.Graphics.ES11.PixelType type, [OutAttribute] IntPtr pixels)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(291);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES11.PixelFormat), typeof(OpenTK.Graphics.ES11.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x"> 
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="y"> 
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="width"> 
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="height"> 
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, and Rgba.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the pixel data. Must be one of UnsignedByte, UnsignedShort565, UnsignedShort4444, or UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Returns the pixel data.
        /// </param>
        [CLSCompliant(false)]
        public static void ReadPixels<T6>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES11.PixelFormat format, OpenTK.Graphics.ES11.PixelType type, [InAttribute, OutAttribute] T6[] pixels)
            where T6 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T6& pinned", "pixels_pinned");
                    if(pixels != null && pixels.Length != 0)
                    {
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T6");
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.LoadByName("pixels_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(291);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES11.PixelFormat), typeof(OpenTK.Graphics.ES11.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x"> 
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="y"> 
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="width"> 
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="height"> 
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, and Rgba.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the pixel data. Must be one of UnsignedByte, UnsignedShort565, UnsignedShort4444, or UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Returns the pixel data.
        /// </param>
        [CLSCompliant(false)]
        public static void ReadPixels<T6>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES11.PixelFormat format, OpenTK.Graphics.ES11.PixelType type, [InAttribute, OutAttribute] T6[,] pixels)
            where T6 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T6& pinned", "pixels_pinned");
                    if(pixels != null && pixels.Length != 0)
                    {
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T6[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.LoadByName("pixels_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(291);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES11.PixelFormat), typeof(OpenTK.Graphics.ES11.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x"> 
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="y"> 
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="width"> 
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="height"> 
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, and Rgba.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the pixel data. Must be one of UnsignedByte, UnsignedShort565, UnsignedShort4444, or UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Returns the pixel data.
        /// </param>
        [CLSCompliant(false)]
        public static void ReadPixels<T6>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES11.PixelFormat format, OpenTK.Graphics.ES11.PixelType type, [InAttribute, OutAttribute] T6[,,] pixels)
            where T6 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T6& pinned", "pixels_pinned");
                    if(pixels != null && pixels.Length != 0)
                    {
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T6[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.LoadByName("pixels_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(291);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES11.PixelFormat), typeof(OpenTK.Graphics.ES11.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x"> 
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="y"> 
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="width"> 
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="height"> 
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, and Rgba.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the pixel data. Must be one of UnsignedByte, UnsignedShort565, UnsignedShort4444, or UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Returns the pixel data.
        /// </param>
        public static void ReadPixels<T6>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES11.PixelFormat format, OpenTK.Graphics.ES11.PixelType type, [InAttribute, OutAttribute] ref T6 pixels)
            where T6 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T6& pinned", "pixels_pinned");
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.StoreByName("pixels_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.LoadByName("pixels_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(291);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES11.PixelFormat), typeof(OpenTK.Graphics.ES11.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Multiply the current matrix by a rotation matrix
        /// </summary>
        /// <param name="angle"> 
        /// Specifies the angle of rotation, in degrees.
        /// </param>
        /// <param name="x"> 
        /// Specify the x, y, and z coordinates of a vector, respectively.
        /// </param>
        /// <param name="y"> 
        /// Specify the x, y, and z coordinates of a vector, respectively.
        /// </param>
        /// <param name="z"> 
        /// Specify the x, y, and z coordinates of a vector, respectively.
        /// </param>
        public static void Rotate(Single angle, Single x, Single y, Single z)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(299);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Single), typeof(Single), typeof(Single), typeof(Single));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="angle"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="z"></param>
        public static void Rotatex(Int32 angle, Int32 x, Int32 y, Int32 z)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(300);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify multisample coverage parameters
        /// </summary>
        /// <param name="value"> 
        /// Specify a single floating-point sample coverage value.  The value is clamped to the range [0 ,1]. The initial value is 1.0.
        /// </param>
        /// <param name="invert"> 
        /// Specify a single boolean value representing if the coverage masks should be inverted.  True and False are accepted.  The initial value is False.
        /// </param>
        public static void SampleCoverage(Single value, bool invert)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(302);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Single), typeof(bool));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="value"></param>
        /// <param name="invert"></param>
        public static void SampleCoveragex(Int32 value, bool invert)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(304);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(bool));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Multiply the current matrix by a general scaling matrix
        /// </summary>
        /// <param name="x"> 
        /// Specify scale factors along the x, y, and z axes, respectively.
        /// </param>
        /// <param name="y"> 
        /// Specify scale factors along the x, y, and z axes, respectively.
        /// </param>
        /// <param name="z"> 
        /// Specify scale factors along the x, y, and z axes, respectively.
        /// </param>
        public static void Scale(Single x, Single y, Single z)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(306);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Single), typeof(Single), typeof(Single));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="z"></param>
        public static void Scalex(Int32 x, Int32 y, Int32 z)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(307);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Define the scissor box
        /// </summary>
        /// <param name="x"> 
        /// Specify the lower left corner of the scissor box. Initially (0, 0).
        /// </param>
        /// <param name="y"> 
        /// Specify the lower left corner of the scissor box. Initially (0, 0).
        /// </param>
        /// <param name="width"> 
        /// Specify the width and height of the scissor box. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
        /// </param>
        /// <param name="height"> 
        /// Specify the width and height of the scissor box. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
        /// </param>
        public static void Scissor(Int32 x, Int32 y, Int32 width, Int32 height)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(309);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Select flat or smooth shading
        /// </summary>
        /// <param name="mode"> 
        /// Specifies a symbolic value representing a shading technique. Accepted values are Flat and Smooth. The initial value is Smooth.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void ShadeModel(OpenTK.Graphics.ES11.All mode)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(311);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.ShadingModel));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Select flat or smooth shading
        /// </summary>
        /// <param name="mode"> 
        /// Specifies a symbolic value representing a shading technique. Accepted values are Flat and Smooth. The initial value is Smooth.
        /// </param>
        public static void ShadeModel(OpenTK.Graphics.ES11.ShadingModel mode)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(311);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.ShadingModel));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Set front and back function and reference value for stencil testing
        /// </summary>
        /// <param name="func"> 
        /// Specifies the test function. Eight symbolic constants are valid: Never, Less, Lequal, Greater, Gequal, Equal, Notequal, and Always. The initial value is Always.
        /// </param>
        /// <param name="@ref"> 
        /// Specifies the reference value for the stencil test. ref is clamped to the range [0, 2 sup n - 1], where  is the number of bitplanes in the stencil buffer. The initial value is 0.
        /// </param>
        /// <param name="mask"> 
        /// Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void StencilFunc(OpenTK.Graphics.ES11.All func, Int32 @ref, Int32 mask)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(313);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.StencilFunction), typeof(Int32), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Set front and back function and reference value for stencil testing
        /// </summary>
        /// <param name="func"> 
        /// Specifies the test function. Eight symbolic constants are valid: Never, Less, Lequal, Greater, Gequal, Equal, Notequal, and Always. The initial value is Always.
        /// </param>
        /// <param name="@ref"> 
        /// Specifies the reference value for the stencil test. ref is clamped to the range [0, 2 sup n - 1], where  is the number of bitplanes in the stencil buffer. The initial value is 0.
        /// </param>
        /// <param name="mask"> 
        /// Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void StencilFunc(OpenTK.Graphics.ES11.All func, Int32 @ref, UInt32 mask)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(313);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.StencilFunction), typeof(Int32), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Set front and back function and reference value for stencil testing
        /// </summary>
        /// <param name="func"> 
        /// Specifies the test function. Eight symbolic constants are valid: Never, Less, Lequal, Greater, Gequal, Equal, Notequal, and Always. The initial value is Always.
        /// </param>
        /// <param name="@ref"> 
        /// Specifies the reference value for the stencil test. ref is clamped to the range [0, 2 sup n - 1], where  is the number of bitplanes in the stencil buffer. The initial value is 0.
        /// </param>
        /// <param name="mask"> 
        /// Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
        /// </param>
        [CLSCompliant(false)]
        public static void StencilFunc(OpenTK.Graphics.ES11.StencilFunction func, Int32 @ref, Int32 mask)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(313);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.StencilFunction), typeof(Int32), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Set front and back function and reference value for stencil testing
        /// </summary>
        /// <param name="func"> 
        /// Specifies the test function. Eight symbolic constants are valid: Never, Less, Lequal, Greater, Gequal, Equal, Notequal, and Always. The initial value is Always.
        /// </param>
        /// <param name="@ref"> 
        /// Specifies the reference value for the stencil test. ref is clamped to the range [0, 2 sup n - 1], where  is the number of bitplanes in the stencil buffer. The initial value is 0.
        /// </param>
        /// <param name="mask"> 
        /// Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
        /// </param>
        [CLSCompliant(false)]
        public static void StencilFunc(OpenTK.Graphics.ES11.StencilFunction func, Int32 @ref, UInt32 mask)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(313);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.StencilFunction), typeof(Int32), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Control the front and back writing of individual bits in the stencil planes
        /// </summary>
        /// <param name="mask"> 
        /// Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all 1's.
        /// </param>
        [CLSCompliant(false)]
        public static void StencilMask(Int32 mask)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(314);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Control the front and back writing of individual bits in the stencil planes
        /// </summary>
        /// <param name="mask"> 
        /// Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all 1's.
        /// </param>
        [CLSCompliant(false)]
        public static void StencilMask(UInt32 mask)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(314);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Set front and back stencil test actions
        /// </summary>
        /// <param name="fail"> 
        /// Specifies the action to take when the stencil test fails. Eight symbolic constants are accepted: Keep, Zero, Replace, Incr, IncrWrap, Decr, DecrWrap, and Invert. The initial value is Keep.
        /// </param>
        /// <param name="zfail"> 
        /// Specifies the stencil action when the stencil test passes, but the depth test fails. dpfail accepts the same symbolic constants as sfail. The initial value is Keep.
        /// </param>
        /// <param name="zpass"> 
        /// Specifies the stencil action when both the stencil test and the depth test pass, or when the stencil test passes and either there is no depth buffer or depth testing is not enabled. dppass accepts the same symbolic constants as sfail. The initial value is Keep.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void StencilOp(OpenTK.Graphics.ES11.All fail, OpenTK.Graphics.ES11.All zfail, OpenTK.Graphics.ES11.All zpass)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(315);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.StencilOp), typeof(OpenTK.Graphics.ES11.StencilOp), typeof(OpenTK.Graphics.ES11.StencilOp));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Set front and back stencil test actions
        /// </summary>
        /// <param name="fail"> 
        /// Specifies the action to take when the stencil test fails. Eight symbolic constants are accepted: Keep, Zero, Replace, Incr, IncrWrap, Decr, DecrWrap, and Invert. The initial value is Keep.
        /// </param>
        /// <param name="zfail"> 
        /// Specifies the stencil action when the stencil test passes, but the depth test fails. dpfail accepts the same symbolic constants as sfail. The initial value is Keep.
        /// </param>
        /// <param name="zpass"> 
        /// Specifies the stencil action when both the stencil test and the depth test pass, or when the stencil test passes and either there is no depth buffer or depth testing is not enabled. dppass accepts the same symbolic constants as sfail. The initial value is Keep.
        /// </param>
        public static void StencilOp(OpenTK.Graphics.ES11.StencilOp fail, OpenTK.Graphics.ES11.StencilOp zfail, OpenTK.Graphics.ES11.StencilOp zpass)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(315);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.StencilOp), typeof(OpenTK.Graphics.ES11.StencilOp), typeof(OpenTK.Graphics.ES11.StencilOp));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Define an array of texture coordinates
        /// </summary>
        /// <param name="size"> 
        /// Specifies the number of coordinates per array element. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of each texture coordinate. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive texture coordinate sets. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: size,type,stride] 
        /// Specifies a pointer to the first coordinate of the first texture coordinate set in the array. The initial value is 0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void TexCoordPointer(Int32 size, OpenTK.Graphics.ES11.All type, Int32 stride, IntPtr pointer)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(333);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(OpenTK.Graphics.ES11.TexCoordPointerType), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Define an array of texture coordinates
        /// </summary>
        /// <param name="size"> 
        /// Specifies the number of coordinates per array element. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of each texture coordinate. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive texture coordinate sets. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: size,type,stride] 
        /// Specifies a pointer to the first coordinate of the first texture coordinate set in the array. The initial value is 0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void TexCoordPointer<T3>(Int32 size, OpenTK.Graphics.ES11.All type, Int32 stride, [InAttribute, OutAttribute] T3[] pointer)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "pointer_pinned");
                    if(pointer != null && pointer.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T3");
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("pointer_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(333);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(OpenTK.Graphics.ES11.TexCoordPointerType), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Define an array of texture coordinates
        /// </summary>
        /// <param name="size"> 
        /// Specifies the number of coordinates per array element. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of each texture coordinate. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive texture coordinate sets. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: size,type,stride] 
        /// Specifies a pointer to the first coordinate of the first texture coordinate set in the array. The initial value is 0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void TexCoordPointer<T3>(Int32 size, OpenTK.Graphics.ES11.All type, Int32 stride, [InAttribute, OutAttribute] T3[,] pointer)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "pointer_pinned");
                    if(pointer != null && pointer.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T3[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("pointer_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(333);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(OpenTK.Graphics.ES11.TexCoordPointerType), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Define an array of texture coordinates
        /// </summary>
        /// <param name="size"> 
        /// Specifies the number of coordinates per array element. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of each texture coordinate. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive texture coordinate sets. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: size,type,stride] 
        /// Specifies a pointer to the first coordinate of the first texture coordinate set in the array. The initial value is 0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void TexCoordPointer<T3>(Int32 size, OpenTK.Graphics.ES11.All type, Int32 stride, [InAttribute, OutAttribute] T3[,,] pointer)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "pointer_pinned");
                    if(pointer != null && pointer.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T3[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("pointer_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(333);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(OpenTK.Graphics.ES11.TexCoordPointerType), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Define an array of texture coordinates
        /// </summary>
        /// <param name="size"> 
        /// Specifies the number of coordinates per array element. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of each texture coordinate. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive texture coordinate sets. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: size,type,stride] 
        /// Specifies a pointer to the first coordinate of the first texture coordinate set in the array. The initial value is 0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void TexCoordPointer<T3>(Int32 size, OpenTK.Graphics.ES11.All type, Int32 stride, [InAttribute, OutAttribute] ref T3 pointer)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "pointer_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.StoreByName("pointer_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("pointer_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(333);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(OpenTK.Graphics.ES11.TexCoordPointerType), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Define an array of texture coordinates
        /// </summary>
        /// <param name="size"> 
        /// Specifies the number of coordinates per array element. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of each texture coordinate. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive texture coordinate sets. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: size,type,stride] 
        /// Specifies a pointer to the first coordinate of the first texture coordinate set in the array. The initial value is 0.
        /// </param>
        public static void TexCoordPointer(Int32 size, OpenTK.Graphics.ES11.TexCoordPointerType type, Int32 stride, IntPtr pointer)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(333);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(OpenTK.Graphics.ES11.TexCoordPointerType), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Define an array of texture coordinates
        /// </summary>
        /// <param name="size"> 
        /// Specifies the number of coordinates per array element. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of each texture coordinate. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive texture coordinate sets. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: size,type,stride] 
        /// Specifies a pointer to the first coordinate of the first texture coordinate set in the array. The initial value is 0.
        /// </param>
        [CLSCompliant(false)]
        public static void TexCoordPointer<T3>(Int32 size, OpenTK.Graphics.ES11.TexCoordPointerType type, Int32 stride, [InAttribute, OutAttribute] T3[] pointer)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "pointer_pinned");
                    if(pointer != null && pointer.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T3");
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("pointer_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(333);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(OpenTK.Graphics.ES11.TexCoordPointerType), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Define an array of texture coordinates
        /// </summary>
        /// <param name="size"> 
        /// Specifies the number of coordinates per array element. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of each texture coordinate. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive texture coordinate sets. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: size,type,stride] 
        /// Specifies a pointer to the first coordinate of the first texture coordinate set in the array. The initial value is 0.
        /// </param>
        [CLSCompliant(false)]
        public static void TexCoordPointer<T3>(Int32 size, OpenTK.Graphics.ES11.TexCoordPointerType type, Int32 stride, [InAttribute, OutAttribute] T3[,] pointer)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "pointer_pinned");
                    if(pointer != null && pointer.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T3[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("pointer_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(333);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(OpenTK.Graphics.ES11.TexCoordPointerType), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Define an array of texture coordinates
        /// </summary>
        /// <param name="size"> 
        /// Specifies the number of coordinates per array element. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of each texture coordinate. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive texture coordinate sets. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: size,type,stride] 
        /// Specifies a pointer to the first coordinate of the first texture coordinate set in the array. The initial value is 0.
        /// </param>
        [CLSCompliant(false)]
        public static void TexCoordPointer<T3>(Int32 size, OpenTK.Graphics.ES11.TexCoordPointerType type, Int32 stride, [InAttribute, OutAttribute] T3[,,] pointer)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "pointer_pinned");
                    if(pointer != null && pointer.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T3[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("pointer_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(333);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(OpenTK.Graphics.ES11.TexCoordPointerType), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Define an array of texture coordinates
        /// </summary>
        /// <param name="size"> 
        /// Specifies the number of coordinates per array element. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of each texture coordinate. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive texture coordinate sets. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: size,type,stride] 
        /// Specifies a pointer to the first coordinate of the first texture coordinate set in the array. The initial value is 0.
        /// </param>
        public static void TexCoordPointer<T3>(Int32 size, OpenTK.Graphics.ES11.TexCoordPointerType type, Int32 stride, [InAttribute, OutAttribute] ref T3 pointer)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "pointer_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.StoreByName("pointer_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("pointer_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(333);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(OpenTK.Graphics.ES11.TexCoordPointerType), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Set texture environment parameters
        /// </summary>
        /// <param name="target"> 
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl or PointSprite.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a single-valued texture environment parameter. May be either TextureEnvMode, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="param"> 
        /// Specifies a single symbolic constant, one of Add, AddSigned, Interpolate, Modulate, Decal, Blend, Replace, Subtract, Combine, Texture, Constant, PrimaryColor, Previous, SrcColor, OneMinusSrcColor, SrcAlpha, OneMinusSrcAlpha, a single boolean value for the point sprite texture coordinate replacement, a single floating-point value for the texture level-of-detail bias, or 1.0, 2.0, or 4.0 when specifying the RgbScale or AlphaScale.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void TexEnv(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, Single param)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(334);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureEnvTarget), typeof(OpenTK.Graphics.ES11.TextureEnvParameter), typeof(Single));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Set texture environment parameters
        /// </summary>
        /// <param name="target"> 
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl or PointSprite.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a single-valued texture environment parameter. May be either TextureEnvMode, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="param"> 
        /// Specifies a single symbolic constant, one of Add, AddSigned, Interpolate, Modulate, Decal, Blend, Replace, Subtract, Combine, Texture, Constant, PrimaryColor, Previous, SrcColor, OneMinusSrcColor, SrcAlpha, OneMinusSrcAlpha, a single boolean value for the point sprite texture coordinate replacement, a single floating-point value for the texture level-of-detail bias, or 1.0, 2.0, or 4.0 when specifying the RgbScale or AlphaScale.
        /// </param>
        public static void TexEnv(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, Single param)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(334);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureEnvTarget), typeof(OpenTK.Graphics.ES11.TextureEnvParameter), typeof(Single));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Set texture environment parameters
        /// </summary>
        /// <param name="target"> 
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl or PointSprite.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a single-valued texture environment parameter. May be either TextureEnvMode, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Specifies a single symbolic constant, one of Add, AddSigned, Interpolate, Modulate, Decal, Blend, Replace, Subtract, Combine, Texture, Constant, PrimaryColor, Previous, SrcColor, OneMinusSrcColor, SrcAlpha, OneMinusSrcAlpha, a single boolean value for the point sprite texture coordinate replacement, a single floating-point value for the texture level-of-detail bias, or 1.0, 2.0, or 4.0 when specifying the RgbScale or AlphaScale.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void TexEnv(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, Single[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Single");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(335);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureEnvTarget), typeof(OpenTK.Graphics.ES11.TextureEnvParameter), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Set texture environment parameters
        /// </summary>
        /// <param name="target"> 
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl or PointSprite.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a single-valued texture environment parameter. May be either TextureEnvMode, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Specifies a single symbolic constant, one of Add, AddSigned, Interpolate, Modulate, Decal, Blend, Replace, Subtract, Combine, Texture, Constant, PrimaryColor, Previous, SrcColor, OneMinusSrcColor, SrcAlpha, OneMinusSrcAlpha, a single boolean value for the point sprite texture coordinate replacement, a single floating-point value for the texture level-of-detail bias, or 1.0, 2.0, or 4.0 when specifying the RgbScale or AlphaScale.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static unsafe void TexEnv(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, Single* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(335);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureEnvTarget), typeof(OpenTK.Graphics.ES11.TextureEnvParameter), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Set texture environment parameters
        /// </summary>
        /// <param name="target"> 
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl or PointSprite.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a single-valued texture environment parameter. May be either TextureEnvMode, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Specifies a single symbolic constant, one of Add, AddSigned, Interpolate, Modulate, Decal, Blend, Replace, Subtract, Combine, Texture, Constant, PrimaryColor, Previous, SrcColor, OneMinusSrcColor, SrcAlpha, OneMinusSrcAlpha, a single boolean value for the point sprite texture coordinate replacement, a single floating-point value for the texture level-of-detail bias, or 1.0, 2.0, or 4.0 when specifying the RgbScale or AlphaScale.
        /// </param>
        [CLSCompliant(false)]
        public static void TexEnv(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, Single[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Single");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(335);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureEnvTarget), typeof(OpenTK.Graphics.ES11.TextureEnvParameter), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Set texture environment parameters
        /// </summary>
        /// <param name="target"> 
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl or PointSprite.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a single-valued texture environment parameter. May be either TextureEnvMode, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Specifies a single symbolic constant, one of Add, AddSigned, Interpolate, Modulate, Decal, Blend, Replace, Subtract, Combine, Texture, Constant, PrimaryColor, Previous, SrcColor, OneMinusSrcColor, SrcAlpha, OneMinusSrcAlpha, a single boolean value for the point sprite texture coordinate replacement, a single floating-point value for the texture level-of-detail bias, or 1.0, 2.0, or 4.0 when specifying the RgbScale or AlphaScale.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void TexEnv(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, Single* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(335);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureEnvTarget), typeof(OpenTK.Graphics.ES11.TextureEnvParameter), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Set texture environment parameters
        /// </summary>
        /// <param name="target"> 
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl or PointSprite.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a single-valued texture environment parameter. May be either TextureEnvMode, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="param"> 
        /// Specifies a single symbolic constant, one of Add, AddSigned, Interpolate, Modulate, Decal, Blend, Replace, Subtract, Combine, Texture, Constant, PrimaryColor, Previous, SrcColor, OneMinusSrcColor, SrcAlpha, OneMinusSrcAlpha, a single boolean value for the point sprite texture coordinate replacement, a single floating-point value for the texture level-of-detail bias, or 1.0, 2.0, or 4.0 when specifying the RgbScale or AlphaScale.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void TexEnv(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, Int32 param)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(336);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureEnvTarget), typeof(OpenTK.Graphics.ES11.TextureEnvParameter), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Set texture environment parameters
        /// </summary>
        /// <param name="target"> 
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl or PointSprite.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a single-valued texture environment parameter. May be either TextureEnvMode, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="param"> 
        /// Specifies a single symbolic constant, one of Add, AddSigned, Interpolate, Modulate, Decal, Blend, Replace, Subtract, Combine, Texture, Constant, PrimaryColor, Previous, SrcColor, OneMinusSrcColor, SrcAlpha, OneMinusSrcAlpha, a single boolean value for the point sprite texture coordinate replacement, a single floating-point value for the texture level-of-detail bias, or 1.0, 2.0, or 4.0 when specifying the RgbScale or AlphaScale.
        /// </param>
        public static void TexEnv(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, Int32 param)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(336);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureEnvTarget), typeof(OpenTK.Graphics.ES11.TextureEnvParameter), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Set texture environment parameters
        /// </summary>
        /// <param name="target"> 
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl or PointSprite.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a single-valued texture environment parameter. May be either TextureEnvMode, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Specifies a single symbolic constant, one of Add, AddSigned, Interpolate, Modulate, Decal, Blend, Replace, Subtract, Combine, Texture, Constant, PrimaryColor, Previous, SrcColor, OneMinusSrcColor, SrcAlpha, OneMinusSrcAlpha, a single boolean value for the point sprite texture coordinate replacement, a single floating-point value for the texture level-of-detail bias, or 1.0, 2.0, or 4.0 when specifying the RgbScale or AlphaScale.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void TexEnv(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, Int32[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(337);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureEnvTarget), typeof(OpenTK.Graphics.ES11.TextureEnvParameter), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Set texture environment parameters
        /// </summary>
        /// <param name="target"> 
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl or PointSprite.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a single-valued texture environment parameter. May be either TextureEnvMode, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Specifies a single symbolic constant, one of Add, AddSigned, Interpolate, Modulate, Decal, Blend, Replace, Subtract, Combine, Texture, Constant, PrimaryColor, Previous, SrcColor, OneMinusSrcColor, SrcAlpha, OneMinusSrcAlpha, a single boolean value for the point sprite texture coordinate replacement, a single floating-point value for the texture level-of-detail bias, or 1.0, 2.0, or 4.0 when specifying the RgbScale or AlphaScale.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static unsafe void TexEnv(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, Int32* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(337);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureEnvTarget), typeof(OpenTK.Graphics.ES11.TextureEnvParameter), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Set texture environment parameters
        /// </summary>
        /// <param name="target"> 
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl or PointSprite.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a single-valued texture environment parameter. May be either TextureEnvMode, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Specifies a single symbolic constant, one of Add, AddSigned, Interpolate, Modulate, Decal, Blend, Replace, Subtract, Combine, Texture, Constant, PrimaryColor, Previous, SrcColor, OneMinusSrcColor, SrcAlpha, OneMinusSrcAlpha, a single boolean value for the point sprite texture coordinate replacement, a single floating-point value for the texture level-of-detail bias, or 1.0, 2.0, or 4.0 when specifying the RgbScale or AlphaScale.
        /// </param>
        [CLSCompliant(false)]
        public static void TexEnv(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, Int32[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(337);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureEnvTarget), typeof(OpenTK.Graphics.ES11.TextureEnvParameter), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Set texture environment parameters
        /// </summary>
        /// <param name="target"> 
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl or PointSprite.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a single-valued texture environment parameter. May be either TextureEnvMode, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Specifies a single symbolic constant, one of Add, AddSigned, Interpolate, Modulate, Decal, Blend, Replace, Subtract, Combine, Texture, Constant, PrimaryColor, Previous, SrcColor, OneMinusSrcColor, SrcAlpha, OneMinusSrcAlpha, a single boolean value for the point sprite texture coordinate replacement, a single floating-point value for the texture level-of-detail bias, or 1.0, 2.0, or 4.0 when specifying the RgbScale or AlphaScale.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void TexEnv(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, Int32* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(337);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureEnvTarget), typeof(OpenTK.Graphics.ES11.TextureEnvParameter), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="target"></param>
        /// <param name="pname"></param>
        /// <param name="param"></param>
        public static void TexEnvx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, Int32 param)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(338);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="target"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: pname]</param>
        [CLSCompliant(false)]
        public static void TexEnvx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, Int32[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(340);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="target"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: pname]</param>
        [CLSCompliant(false)]
        public static unsafe void TexEnvx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, Int32* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(340);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, Rgba.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the texel data.  Must match internalformat. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the texel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void TexImage2D(OpenTK.Graphics.ES11.All target, Int32 level, Int32 internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.ES11.All format, OpenTK.Graphics.ES11.All type, IntPtr pixels)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.Ldarg(8);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(348);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES11.PixelFormat), typeof(OpenTK.Graphics.ES11.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, Rgba.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the texel data.  Must match internalformat. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the texel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void TexImage2D<T8>(OpenTK.Graphics.ES11.All target, Int32 level, Int32 internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.ES11.All format, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute] T8[] pixels)
            where T8 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T8& pinned", "pixels_pinned");
                    if(pixels != null && pixels.Length != 0)
                    {
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T8");
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.LoadByName("pixels_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(348);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES11.PixelFormat), typeof(OpenTK.Graphics.ES11.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, Rgba.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the texel data.  Must match internalformat. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the texel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void TexImage2D<T8>(OpenTK.Graphics.ES11.All target, Int32 level, Int32 internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.ES11.All format, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute] T8[,] pixels)
            where T8 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T8& pinned", "pixels_pinned");
                    if(pixels != null && pixels.Length != 0)
                    {
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T8[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.LoadByName("pixels_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(348);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES11.PixelFormat), typeof(OpenTK.Graphics.ES11.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, Rgba.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the texel data.  Must match internalformat. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the texel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void TexImage2D<T8>(OpenTK.Graphics.ES11.All target, Int32 level, Int32 internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.ES11.All format, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute] T8[,,] pixels)
            where T8 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T8& pinned", "pixels_pinned");
                    if(pixels != null && pixels.Length != 0)
                    {
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T8[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.LoadByName("pixels_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(348);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES11.PixelFormat), typeof(OpenTK.Graphics.ES11.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, Rgba.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the texel data.  Must match internalformat. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the texel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void TexImage2D<T8>(OpenTK.Graphics.ES11.All target, Int32 level, Int32 internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.ES11.All format, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute] ref T8 pixels)
            where T8 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T8& pinned", "pixels_pinned");
                    Silk.Cil.Ldarg(8);
                    Silk.Cil.StoreByName("pixels_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.LoadByName("pixels_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(348);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES11.PixelFormat), typeof(OpenTK.Graphics.ES11.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, Rgba.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the texel data.  Must match internalformat. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the texel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        public static void TexImage2D(OpenTK.Graphics.ES11.TextureTarget target, Int32 level, Int32 internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.ES11.PixelFormat format, OpenTK.Graphics.ES11.PixelType type, IntPtr pixels)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.Ldarg(8);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(348);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES11.PixelFormat), typeof(OpenTK.Graphics.ES11.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, Rgba.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the texel data.  Must match internalformat. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the texel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [CLSCompliant(false)]
        public static void TexImage2D<T8>(OpenTK.Graphics.ES11.TextureTarget target, Int32 level, Int32 internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.ES11.PixelFormat format, OpenTK.Graphics.ES11.PixelType type, [InAttribute, OutAttribute] T8[] pixels)
            where T8 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T8& pinned", "pixels_pinned");
                    if(pixels != null && pixels.Length != 0)
                    {
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T8");
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.LoadByName("pixels_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(348);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES11.PixelFormat), typeof(OpenTK.Graphics.ES11.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, Rgba.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the texel data.  Must match internalformat. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the texel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [CLSCompliant(false)]
        public static void TexImage2D<T8>(OpenTK.Graphics.ES11.TextureTarget target, Int32 level, Int32 internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.ES11.PixelFormat format, OpenTK.Graphics.ES11.PixelType type, [InAttribute, OutAttribute] T8[,] pixels)
            where T8 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T8& pinned", "pixels_pinned");
                    if(pixels != null && pixels.Length != 0)
                    {
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T8[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.LoadByName("pixels_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(348);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES11.PixelFormat), typeof(OpenTK.Graphics.ES11.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, Rgba.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the texel data.  Must match internalformat. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the texel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [CLSCompliant(false)]
        public static void TexImage2D<T8>(OpenTK.Graphics.ES11.TextureTarget target, Int32 level, Int32 internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.ES11.PixelFormat format, OpenTK.Graphics.ES11.PixelType type, [InAttribute, OutAttribute] T8[,,] pixels)
            where T8 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T8& pinned", "pixels_pinned");
                    if(pixels != null && pixels.Length != 0)
                    {
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T8[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.LoadByName("pixels_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(348);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES11.PixelFormat), typeof(OpenTK.Graphics.ES11.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, Rgba.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the texel data.  Must match internalformat. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the texel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        public static void TexImage2D<T8>(OpenTK.Graphics.ES11.TextureTarget target, Int32 level, Int32 internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.ES11.PixelFormat format, OpenTK.Graphics.ES11.PixelType type, [InAttribute, OutAttribute] ref T8 pixels)
            where T8 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T8& pinned", "pixels_pinned");
                    Silk.Cil.Ldarg(8);
                    Silk.Cil.StoreByName("pixels_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.LoadByName("pixels_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(348);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES11.PixelFormat), typeof(OpenTK.Graphics.ES11.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit, which must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureMinFilter, TextureMagFilter, TextureWrapS, or TextureWrapT.
        /// </param>
        /// <param name="param"> 
        /// Specifies the value of pname.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void TexParameter(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, Single param)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(349);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(OpenTK.Graphics.ES11.TextureParameterName), typeof(Single));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit, which must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureMinFilter, TextureMagFilter, TextureWrapS, or TextureWrapT.
        /// </param>
        /// <param name="param"> 
        /// Specifies the value of pname.
        /// </param>
        public static void TexParameter(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.TextureParameterName pname, Single param)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(349);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(OpenTK.Graphics.ES11.TextureParameterName), typeof(Single));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit, which must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureMinFilter, TextureMagFilter, TextureWrapS, or TextureWrapT.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Specifies the value of pname.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void TexParameter(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, Single[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Single");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(350);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(OpenTK.Graphics.ES11.TextureParameterName), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit, which must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureMinFilter, TextureMagFilter, TextureWrapS, or TextureWrapT.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Specifies the value of pname.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static unsafe void TexParameter(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, Single* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(350);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(OpenTK.Graphics.ES11.TextureParameterName), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit, which must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureMinFilter, TextureMagFilter, TextureWrapS, or TextureWrapT.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Specifies the value of pname.
        /// </param>
        [CLSCompliant(false)]
        public static void TexParameter(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.TextureParameterName pname, Single[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Single");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(350);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(OpenTK.Graphics.ES11.TextureParameterName), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit, which must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureMinFilter, TextureMagFilter, TextureWrapS, or TextureWrapT.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Specifies the value of pname.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void TexParameter(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.TextureParameterName pname, Single* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(350);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(OpenTK.Graphics.ES11.TextureParameterName), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit, which must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureMinFilter, TextureMagFilter, TextureWrapS, or TextureWrapT.
        /// </param>
        /// <param name="param"> 
        /// Specifies the value of pname.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void TexParameter(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, Int32 param)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(351);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(OpenTK.Graphics.ES11.TextureParameterName), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit, which must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureMinFilter, TextureMagFilter, TextureWrapS, or TextureWrapT.
        /// </param>
        /// <param name="param"> 
        /// Specifies the value of pname.
        /// </param>
        public static void TexParameter(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.TextureParameterName pname, Int32 param)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(351);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(OpenTK.Graphics.ES11.TextureParameterName), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit, which must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureMinFilter, TextureMagFilter, TextureWrapS, or TextureWrapT.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Specifies the value of pname.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void TexParameter(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, Int32[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(352);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(OpenTK.Graphics.ES11.TextureParameterName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit, which must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureMinFilter, TextureMagFilter, TextureWrapS, or TextureWrapT.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Specifies the value of pname.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static unsafe void TexParameter(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, Int32* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(352);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(OpenTK.Graphics.ES11.TextureParameterName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit, which must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureMinFilter, TextureMagFilter, TextureWrapS, or TextureWrapT.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Specifies the value of pname.
        /// </param>
        [CLSCompliant(false)]
        public static void TexParameter(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.TextureParameterName pname, Int32[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(352);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(OpenTK.Graphics.ES11.TextureParameterName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit, which must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureMinFilter, TextureMagFilter, TextureWrapS, or TextureWrapT.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Specifies the value of pname.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void TexParameter(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.TextureParameterName pname, Int32* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(352);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(OpenTK.Graphics.ES11.TextureParameterName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="target"></param>
        /// <param name="pname"></param>
        /// <param name="param"></param>
        public static void TexParameterx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, Int32 param)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(353);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="target"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: pname]</param>
        [CLSCompliant(false)]
        public static void TexParameterx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, Int32[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(355);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="target"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: pname]</param>
        [CLSCompliant(false)]
        public static unsafe void TexParameterx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, Int32* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(355);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void TexSubImage2D(OpenTK.Graphics.ES11.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES11.All format, OpenTK.Graphics.ES11.All type, IntPtr pixels)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.Ldarg(8);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(360);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES11.PixelFormat), typeof(OpenTK.Graphics.ES11.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void TexSubImage2D<T8>(OpenTK.Graphics.ES11.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES11.All format, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute] T8[] pixels)
            where T8 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T8& pinned", "pixels_pinned");
                    if(pixels != null && pixels.Length != 0)
                    {
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T8");
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.LoadByName("pixels_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(360);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES11.PixelFormat), typeof(OpenTK.Graphics.ES11.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void TexSubImage2D<T8>(OpenTK.Graphics.ES11.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES11.All format, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute] T8[,] pixels)
            where T8 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T8& pinned", "pixels_pinned");
                    if(pixels != null && pixels.Length != 0)
                    {
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T8[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.LoadByName("pixels_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(360);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES11.PixelFormat), typeof(OpenTK.Graphics.ES11.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void TexSubImage2D<T8>(OpenTK.Graphics.ES11.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES11.All format, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute] T8[,,] pixels)
            where T8 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T8& pinned", "pixels_pinned");
                    if(pixels != null && pixels.Length != 0)
                    {
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T8[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.LoadByName("pixels_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(360);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES11.PixelFormat), typeof(OpenTK.Graphics.ES11.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void TexSubImage2D<T8>(OpenTK.Graphics.ES11.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES11.All format, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute] ref T8 pixels)
            where T8 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T8& pinned", "pixels_pinned");
                    Silk.Cil.Ldarg(8);
                    Silk.Cil.StoreByName("pixels_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.LoadByName("pixels_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(360);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES11.PixelFormat), typeof(OpenTK.Graphics.ES11.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        public static void TexSubImage2D(OpenTK.Graphics.ES11.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES11.PixelFormat format, OpenTK.Graphics.ES11.PixelType type, IntPtr pixels)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.Ldarg(8);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(360);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES11.PixelFormat), typeof(OpenTK.Graphics.ES11.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [CLSCompliant(false)]
        public static void TexSubImage2D<T8>(OpenTK.Graphics.ES11.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES11.PixelFormat format, OpenTK.Graphics.ES11.PixelType type, [InAttribute, OutAttribute] T8[] pixels)
            where T8 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T8& pinned", "pixels_pinned");
                    if(pixels != null && pixels.Length != 0)
                    {
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T8");
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.LoadByName("pixels_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(360);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES11.PixelFormat), typeof(OpenTK.Graphics.ES11.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [CLSCompliant(false)]
        public static void TexSubImage2D<T8>(OpenTK.Graphics.ES11.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES11.PixelFormat format, OpenTK.Graphics.ES11.PixelType type, [InAttribute, OutAttribute] T8[,] pixels)
            where T8 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T8& pinned", "pixels_pinned");
                    if(pixels != null && pixels.Length != 0)
                    {
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T8[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.LoadByName("pixels_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(360);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES11.PixelFormat), typeof(OpenTK.Graphics.ES11.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [CLSCompliant(false)]
        public static void TexSubImage2D<T8>(OpenTK.Graphics.ES11.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES11.PixelFormat format, OpenTK.Graphics.ES11.PixelType type, [InAttribute, OutAttribute] T8[,,] pixels)
            where T8 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T8& pinned", "pixels_pinned");
                    if(pixels != null && pixels.Length != 0)
                    {
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T8[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.LoadByName("pixels_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(360);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES11.PixelFormat), typeof(OpenTK.Graphics.ES11.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        public static void TexSubImage2D<T8>(OpenTK.Graphics.ES11.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES11.PixelFormat format, OpenTK.Graphics.ES11.PixelType type, [InAttribute, OutAttribute] ref T8 pixels)
            where T8 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T8& pinned", "pixels_pinned");
                    Silk.Cil.Ldarg(8);
                    Silk.Cil.StoreByName("pixels_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.LoadByName("pixels_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(360);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.TextureTarget), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES11.PixelFormat), typeof(OpenTK.Graphics.ES11.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Multiply the current matrix by a translation matrix
        /// </summary>
        /// <param name="x"> 
        /// Specify the x, y, and z coordinates of a translation vector.
        /// </param>
        /// <param name="y"> 
        /// Specify the x, y, and z coordinates of a translation vector.
        /// </param>
        /// <param name="z"> 
        /// Specify the x, y, and z coordinates of a translation vector.
        /// </param>
        public static void Translate(Single x, Single y, Single z)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(364);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Single), typeof(Single), typeof(Single));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="z"></param>
        public static void Translatex(Int32 x, Int32 y, Int32 z)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(365);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Define an array of vertex data
        /// </summary>
        /// <param name="size"> 
        /// Specifies the number of coordinates per vertex. Must be 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of each coordinate in the array. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive vertices. If stride is 0, the vertices are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: size,type,stride] 
        /// Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void VertexPointer(Int32 size, OpenTK.Graphics.ES11.All type, Int32 stride, IntPtr pointer)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(380);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(OpenTK.Graphics.ES11.VertexPointerType), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Define an array of vertex data
        /// </summary>
        /// <param name="size"> 
        /// Specifies the number of coordinates per vertex. Must be 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of each coordinate in the array. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive vertices. If stride is 0, the vertices are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: size,type,stride] 
        /// Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void VertexPointer<T3>(Int32 size, OpenTK.Graphics.ES11.All type, Int32 stride, [InAttribute, OutAttribute] T3[] pointer)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "pointer_pinned");
                    if(pointer != null && pointer.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T3");
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("pointer_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(380);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(OpenTK.Graphics.ES11.VertexPointerType), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Define an array of vertex data
        /// </summary>
        /// <param name="size"> 
        /// Specifies the number of coordinates per vertex. Must be 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of each coordinate in the array. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive vertices. If stride is 0, the vertices are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: size,type,stride] 
        /// Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void VertexPointer<T3>(Int32 size, OpenTK.Graphics.ES11.All type, Int32 stride, [InAttribute, OutAttribute] T3[,] pointer)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "pointer_pinned");
                    if(pointer != null && pointer.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T3[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("pointer_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(380);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(OpenTK.Graphics.ES11.VertexPointerType), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Define an array of vertex data
        /// </summary>
        /// <param name="size"> 
        /// Specifies the number of coordinates per vertex. Must be 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of each coordinate in the array. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive vertices. If stride is 0, the vertices are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: size,type,stride] 
        /// Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void VertexPointer<T3>(Int32 size, OpenTK.Graphics.ES11.All type, Int32 stride, [InAttribute, OutAttribute] T3[,,] pointer)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "pointer_pinned");
                    if(pointer != null && pointer.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T3[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("pointer_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(380);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(OpenTK.Graphics.ES11.VertexPointerType), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Define an array of vertex data
        /// </summary>
        /// <param name="size"> 
        /// Specifies the number of coordinates per vertex. Must be 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of each coordinate in the array. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive vertices. If stride is 0, the vertices are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: size,type,stride] 
        /// Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void VertexPointer<T3>(Int32 size, OpenTK.Graphics.ES11.All type, Int32 stride, [InAttribute, OutAttribute] ref T3 pointer)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "pointer_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.StoreByName("pointer_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("pointer_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(380);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(OpenTK.Graphics.ES11.VertexPointerType), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Define an array of vertex data
        /// </summary>
        /// <param name="size"> 
        /// Specifies the number of coordinates per vertex. Must be 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of each coordinate in the array. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive vertices. If stride is 0, the vertices are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: size,type,stride] 
        /// Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0.
        /// </param>
        public static void VertexPointer(Int32 size, OpenTK.Graphics.ES11.VertexPointerType type, Int32 stride, IntPtr pointer)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(380);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(OpenTK.Graphics.ES11.VertexPointerType), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Define an array of vertex data
        /// </summary>
        /// <param name="size"> 
        /// Specifies the number of coordinates per vertex. Must be 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of each coordinate in the array. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive vertices. If stride is 0, the vertices are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: size,type,stride] 
        /// Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0.
        /// </param>
        [CLSCompliant(false)]
        public static void VertexPointer<T3>(Int32 size, OpenTK.Graphics.ES11.VertexPointerType type, Int32 stride, [InAttribute, OutAttribute] T3[] pointer)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "pointer_pinned");
                    if(pointer != null && pointer.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T3");
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("pointer_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(380);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(OpenTK.Graphics.ES11.VertexPointerType), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Define an array of vertex data
        /// </summary>
        /// <param name="size"> 
        /// Specifies the number of coordinates per vertex. Must be 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of each coordinate in the array. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive vertices. If stride is 0, the vertices are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: size,type,stride] 
        /// Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0.
        /// </param>
        [CLSCompliant(false)]
        public static void VertexPointer<T3>(Int32 size, OpenTK.Graphics.ES11.VertexPointerType type, Int32 stride, [InAttribute, OutAttribute] T3[,] pointer)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "pointer_pinned");
                    if(pointer != null && pointer.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T3[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("pointer_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(380);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(OpenTK.Graphics.ES11.VertexPointerType), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Define an array of vertex data
        /// </summary>
        /// <param name="size"> 
        /// Specifies the number of coordinates per vertex. Must be 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of each coordinate in the array. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive vertices. If stride is 0, the vertices are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: size,type,stride] 
        /// Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0.
        /// </param>
        [CLSCompliant(false)]
        public static void VertexPointer<T3>(Int32 size, OpenTK.Graphics.ES11.VertexPointerType type, Int32 stride, [InAttribute, OutAttribute] T3[,,] pointer)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "pointer_pinned");
                    if(pointer != null && pointer.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T3[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("pointer_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(380);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(OpenTK.Graphics.ES11.VertexPointerType), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Define an array of vertex data
        /// </summary>
        /// <param name="size"> 
        /// Specifies the number of coordinates per vertex. Must be 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of each coordinate in the array. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive vertices. If stride is 0, the vertices are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: size,type,stride] 
        /// Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0.
        /// </param>
        public static void VertexPointer<T3>(Int32 size, OpenTK.Graphics.ES11.VertexPointerType type, Int32 stride, [InAttribute, OutAttribute] ref T3 pointer)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "pointer_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.StoreByName("pointer_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("pointer_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(380);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(OpenTK.Graphics.ES11.VertexPointerType), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v1.0]
        /// Set the viewport
        /// </summary>
        /// <param name="x"> 
        /// Specify the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0).
        /// </param>
        /// <param name="y"> 
        /// Specify the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0).
        /// </param>
        /// <param name="width"> 
        /// Specify the width and height of the viewport. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
        /// </param>
        /// <param name="height"> 
        /// Specify the width and height of the viewport. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
        /// </param>
        public static void Viewport(Int32 x, Int32 y, Int32 width, Int32 height)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(381);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        public static partial class Ext
        {
            /// <summary>[requires: EXT_blend_minmax]
            /// Specify the equation used for both the RGB blend equation and the Alpha blend equation
            /// </summary>
            /// <param name="mode"> 
            /// specifies how source and destination colors are combined. It must be FuncAdd, FuncSubtract, or FuncReverseSubtract.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            public static void BlendEquation(OpenTK.Graphics.ES11.All mode)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(12);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.BlendEquationModeExt));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_blend_minmax]
            /// Specify the equation used for both the RGB blend equation and the Alpha blend equation
            /// </summary>
            /// <param name="mode"> 
            /// specifies how source and destination colors are combined. It must be FuncAdd, FuncSubtract, or FuncReverseSubtract.
            /// </param>
            public static void BlendEquation(OpenTK.Graphics.ES11.BlendEquationModeExt mode)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(12);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.BlendEquationModeExt));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_discard_framebuffer]</summary>
            /// <param name="target"></param>
            /// <param name="numAttachments"></param>
            /// <param name="attachments">[length: numAttachments]</param>
            [CLSCompliant(false)]
            public static void DiscardFramebuffer(OpenTK.Graphics.ES11.All target, Int32 numAttachments, OpenTK.Graphics.ES11.All[] attachments)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("OpenTK.Graphics.ES11.All& pinned", "attachments_pinned");
                        if(attachments != null && attachments.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("OpenTK.Graphics.ES11.All");
                            Silk.Cil.StoreByName("attachments_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("attachments_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("attachments_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(72);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(OpenTK.Graphics.ES11.All*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_discard_framebuffer]</summary>
            /// <param name="target"></param>
            /// <param name="numAttachments"></param>
            /// <param name="attachments">[length: numAttachments]</param>
            [CLSCompliant(false)]
            public static void DiscardFramebuffer(OpenTK.Graphics.ES11.All target, Int32 numAttachments, ref OpenTK.Graphics.ES11.All attachments)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("OpenTK.Graphics.ES11.All& pinned", "attachments_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("attachments_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("attachments_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(72);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(OpenTK.Graphics.ES11.All*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_discard_framebuffer]</summary>
            /// <param name="target"></param>
            /// <param name="numAttachments"></param>
            /// <param name="attachments">[length: numAttachments]</param>
            [CLSCompliant(false)]
            public static unsafe void DiscardFramebuffer(OpenTK.Graphics.ES11.All target, Int32 numAttachments, OpenTK.Graphics.ES11.All* attachments)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(72);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(OpenTK.Graphics.ES11.All*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_map_buffer_range]
            /// Indicate modifications to a range of a mapped buffer
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target of the flush operation. target must be ArrayBuffer, CopyReadBuffer, CopyWriteBuffer, DispatchIndirectBuffer, DrawIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
            /// </param>
            /// <param name="offset"> 
            /// Specifies the start of the buffer subrange, in basic machine units.
            /// </param>
            /// <param name="length"> 
            /// Specifies the length of the buffer subrange, in basic machine units.
            /// </param>
            public static void FlushMappedBufferRange(OpenTK.Graphics.ES11.All target, IntPtr offset, Int32 length)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(110);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_map_buffer_range]
            /// Indicate modifications to a range of a mapped buffer
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target of the flush operation. target must be ArrayBuffer, CopyReadBuffer, CopyWriteBuffer, DispatchIndirectBuffer, DrawIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
            /// </param>
            /// <param name="offset"> 
            /// Specifies the start of the buffer subrange, in basic machine units.
            /// </param>
            /// <param name="length"> 
            /// Specifies the length of the buffer subrange, in basic machine units.
            /// </param>
            public static void FlushMappedBufferRange(OpenTK.Graphics.ES11.All target, IntPtr offset, IntPtr length)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(110);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multisampled_render_to_texture]</summary>
            /// <param name="target"></param>
            /// <param name="attachment"></param>
            /// <param name="textarget"></param>
            /// <param name="texture"></param>
            /// <param name="level"></param>
            /// <param name="samples"></param>
            [CLSCompliant(false)]
            public static void FramebufferTexture2DMultisample(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All attachment, OpenTK.Graphics.ES11.All textarget, Int32 texture, Int32 level, Int32 samples)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(118);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(UInt32), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multisampled_render_to_texture]</summary>
            /// <param name="target"></param>
            /// <param name="attachment"></param>
            /// <param name="textarget"></param>
            /// <param name="texture"></param>
            /// <param name="level"></param>
            /// <param name="samples"></param>
            [CLSCompliant(false)]
            public static void FramebufferTexture2DMultisample(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All attachment, OpenTK.Graphics.ES11.All textarget, UInt32 texture, Int32 level, Int32 samples)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(118);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(UInt32), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_robustness]</summary>
            public static OpenTK.Graphics.ES11.All GetGraphicsResetStatus()
            {
                unsafe
                {
                    OpenTK.Graphics.ES11.All __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(149);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(OpenTK.Graphics.ES11.All));
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params">[length: bufSize]</param>
            [CLSCompliant(false)]
            public static void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] Single[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Single");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(162);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params">[length: bufSize]</param>
            [CLSCompliant(false)]
            public static void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] out Single @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(162);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params">[length: bufSize]</param>
            [CLSCompliant(false)]
            public static unsafe void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] Single* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(162);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params">[length: bufSize]</param>
            [CLSCompliant(false)]
            public static void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] Single[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Single");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(162);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params">[length: bufSize]</param>
            [CLSCompliant(false)]
            public static void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] out Single @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(162);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params">[length: bufSize]</param>
            [CLSCompliant(false)]
            public static unsafe void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] Single* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(162);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params">[length: bufSize]</param>
            [CLSCompliant(false)]
            public static void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(163);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params">[length: bufSize]</param>
            [CLSCompliant(false)]
            public static void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(163);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params">[length: bufSize]</param>
            [CLSCompliant(false)]
            public static unsafe void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] Int32* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(163);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params">[length: bufSize]</param>
            [CLSCompliant(false)]
            public static void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(163);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params">[length: bufSize]</param>
            [CLSCompliant(false)]
            public static void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(163);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params">[length: bufSize]</param>
            [CLSCompliant(false)]
            public static unsafe void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] Int32* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(163);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_map_buffer_range]
            /// Map a section of a buffer object's data store
            /// </summary>
            /// <param name="target"> 
            /// Specifies a binding to which the target buffer is bound.
            /// </param>
            /// <param name="offset"> 
            /// Specifies a the starting offset within the buffer of the range to be mapped.
            /// </param>
            /// <param name="length"> 
            /// Specifies a length of the range to be mapped.
            /// </param>
            /// <param name="access"> 
            /// Specifies a combination of access flags indicating the desired access to the range.
            /// </param>
            [CLSCompliant(false)]
            public static IntPtr MapBufferRange(OpenTK.Graphics.ES11.All target, IntPtr offset, Int32 length, Int32 access)
            {
                unsafe
                {
                    IntPtr __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(217);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(IntPtr), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr), typeof(IntPtr), typeof(UInt32));
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_map_buffer_range]
            /// Map a section of a buffer object's data store
            /// </summary>
            /// <param name="target"> 
            /// Specifies a binding to which the target buffer is bound.
            /// </param>
            /// <param name="offset"> 
            /// Specifies a the starting offset within the buffer of the range to be mapped.
            /// </param>
            /// <param name="length"> 
            /// Specifies a length of the range to be mapped.
            /// </param>
            /// <param name="access"> 
            /// Specifies a combination of access flags indicating the desired access to the range.
            /// </param>
            [CLSCompliant(false)]
            public static IntPtr MapBufferRange(OpenTK.Graphics.ES11.All target, IntPtr offset, Int32 length, UInt32 access)
            {
                unsafe
                {
                    IntPtr __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(217);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(IntPtr), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr), typeof(IntPtr), typeof(UInt32));
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_map_buffer_range]
            /// Map a section of a buffer object's data store
            /// </summary>
            /// <param name="target"> 
            /// Specifies a binding to which the target buffer is bound.
            /// </param>
            /// <param name="offset"> 
            /// Specifies a the starting offset within the buffer of the range to be mapped.
            /// </param>
            /// <param name="length"> 
            /// Specifies a length of the range to be mapped.
            /// </param>
            /// <param name="access"> 
            /// Specifies a combination of access flags indicating the desired access to the range.
            /// </param>
            [CLSCompliant(false)]
            public static IntPtr MapBufferRange(OpenTK.Graphics.ES11.All target, IntPtr offset, IntPtr length, Int32 access)
            {
                unsafe
                {
                    IntPtr __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(217);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(IntPtr), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr), typeof(IntPtr), typeof(UInt32));
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_map_buffer_range]
            /// Map a section of a buffer object's data store
            /// </summary>
            /// <param name="target"> 
            /// Specifies a binding to which the target buffer is bound.
            /// </param>
            /// <param name="offset"> 
            /// Specifies a the starting offset within the buffer of the range to be mapped.
            /// </param>
            /// <param name="length"> 
            /// Specifies a length of the range to be mapped.
            /// </param>
            /// <param name="access"> 
            /// Specifies a combination of access flags indicating the desired access to the range.
            /// </param>
            [CLSCompliant(false)]
            public static IntPtr MapBufferRange(OpenTK.Graphics.ES11.All target, IntPtr offset, IntPtr length, UInt32 access)
            {
                unsafe
                {
                    IntPtr __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(217);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(IntPtr), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr), typeof(IntPtr), typeof(UInt32));
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives from array data
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="first">[length: primcount] 
            /// Points to an array of starting indices in the enabled arrays.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the number of indices to be rendered.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the first and count
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void MultiDrawArrays(OpenTK.Graphics.ES11.All mode, Int32[] first, Int32[] count, Int32 primcount)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "first_pinned");
                        if(first != null && first.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("first_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("first_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "count_pinned");
                        if(count != null && count.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("count_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("count_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("first_pinned");
                        Silk.Cil.LoadByName("count_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(228);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.PrimitiveType), typeof(Int32*), typeof(Int32*), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives from array data
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="first">[length: primcount] 
            /// Points to an array of starting indices in the enabled arrays.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the number of indices to be rendered.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the first and count
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void MultiDrawArrays(OpenTK.Graphics.ES11.All mode, ref Int32 first, ref Int32 count, Int32 primcount)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "first_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("first_pinned");
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "count_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("count_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("first_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("count_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(228);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.PrimitiveType), typeof(Int32*), typeof(Int32*), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives from array data
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="first">[length: primcount] 
            /// Points to an array of starting indices in the enabled arrays.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the number of indices to be rendered.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the first and count
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static unsafe void MultiDrawArrays(OpenTK.Graphics.ES11.All mode, Int32* first, Int32* count, Int32 primcount)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(228);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.PrimitiveType), typeof(Int32*), typeof(Int32*), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives from array data
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="first">[length: primcount] 
            /// Points to an array of starting indices in the enabled arrays.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the number of indices to be rendered.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the first and count
            /// </param>
            [CLSCompliant(false)]
            public static void MultiDrawArrays(OpenTK.Graphics.ES11.PrimitiveType mode, Int32[] first, Int32[] count, Int32 primcount)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "first_pinned");
                        if(first != null && first.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("first_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("first_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "count_pinned");
                        if(count != null && count.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("count_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("count_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("first_pinned");
                        Silk.Cil.LoadByName("count_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(228);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.PrimitiveType), typeof(Int32*), typeof(Int32*), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives from array data
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="first">[length: primcount] 
            /// Points to an array of starting indices in the enabled arrays.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the number of indices to be rendered.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the first and count
            /// </param>
            [CLSCompliant(false)]
            public static void MultiDrawArrays(OpenTK.Graphics.ES11.PrimitiveType mode, ref Int32 first, ref Int32 count, Int32 primcount)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "first_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("first_pinned");
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "count_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("count_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("first_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("count_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(228);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.PrimitiveType), typeof(Int32*), typeof(Int32*), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives from array data
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="first">[length: primcount] 
            /// Points to an array of starting indices in the enabled arrays.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the number of indices to be rendered.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the first and count
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void MultiDrawArrays(OpenTK.Graphics.ES11.PrimitiveType mode, Int32* first, Int32* count, Int32 primcount)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(228);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.PrimitiveType), typeof(Int32*), typeof(Int32*), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void MultiDrawElements(OpenTK.Graphics.ES11.All mode, Int32[] count, OpenTK.Graphics.ES11.All type, IntPtr indices, Int32 primcount)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "count_pinned");
                        if(count != null && count.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("count_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("count_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("count_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(229);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.PrimitiveType), typeof(Int32*), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES11.All mode, Int32[] count, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "count_pinned");
                        if(count != null && count.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("count_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("count_pinned");
                        }
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        if(indices != null && indices.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T3");
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("count_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(229);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.PrimitiveType), typeof(Int32*), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES11.All mode, Int32[] count, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "count_pinned");
                        if(count != null && count.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("count_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("count_pinned");
                        }
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        if(indices != null && indices.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T3[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("count_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(229);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.PrimitiveType), typeof(Int32*), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES11.All mode, Int32[] count, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "count_pinned");
                        if(count != null && count.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("count_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("count_pinned");
                        }
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        if(indices != null && indices.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T3[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("count_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(229);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.PrimitiveType), typeof(Int32*), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES11.All mode, Int32[] count, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "count_pinned");
                        if(count != null && count.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("count_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("count_pinned");
                        }
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("indices_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("count_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(229);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.PrimitiveType), typeof(Int32*), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void MultiDrawElements(OpenTK.Graphics.ES11.All mode, ref Int32 count, OpenTK.Graphics.ES11.All type, IntPtr indices, Int32 primcount)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "count_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("count_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("count_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(229);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.PrimitiveType), typeof(Int32*), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES11.All mode, ref Int32 count, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "count_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("count_pinned");
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        if(indices != null && indices.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T3");
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("count_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(229);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.PrimitiveType), typeof(Int32*), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES11.All mode, ref Int32 count, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "count_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("count_pinned");
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        if(indices != null && indices.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T3[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("count_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(229);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.PrimitiveType), typeof(Int32*), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES11.All mode, ref Int32 count, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "count_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("count_pinned");
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        if(indices != null && indices.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T3[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("count_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(229);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.PrimitiveType), typeof(Int32*), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES11.All mode, ref Int32 count, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "count_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("count_pinned");
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("indices_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("count_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(229);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.PrimitiveType), typeof(Int32*), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static unsafe void MultiDrawElements(OpenTK.Graphics.ES11.All mode, Int32* count, OpenTK.Graphics.ES11.All type, IntPtr indices, Int32 primcount)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(229);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.PrimitiveType), typeof(Int32*), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static unsafe void MultiDrawElements<T3>(OpenTK.Graphics.ES11.All mode, Int32* count, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        if(indices != null && indices.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T3");
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(229);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.PrimitiveType), typeof(Int32*), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static unsafe void MultiDrawElements<T3>(OpenTK.Graphics.ES11.All mode, Int32* count, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        if(indices != null && indices.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T3[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(229);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.PrimitiveType), typeof(Int32*), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static unsafe void MultiDrawElements<T3>(OpenTK.Graphics.ES11.All mode, Int32* count, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        if(indices != null && indices.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T3[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(229);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.PrimitiveType), typeof(Int32*), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static unsafe void MultiDrawElements<T3>(OpenTK.Graphics.ES11.All mode, Int32* count, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("indices_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(229);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.PrimitiveType), typeof(Int32*), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [CLSCompliant(false)]
            public static void MultiDrawElements(OpenTK.Graphics.ES11.PrimitiveType mode, Int32[] count, OpenTK.Graphics.ES11.All type, IntPtr indices, Int32 primcount)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "count_pinned");
                        if(count != null && count.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("count_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("count_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("count_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(229);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.PrimitiveType), typeof(Int32*), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [CLSCompliant(false)]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES11.PrimitiveType mode, Int32[] count, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "count_pinned");
                        if(count != null && count.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("count_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("count_pinned");
                        }
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        if(indices != null && indices.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T3");
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("count_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(229);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.PrimitiveType), typeof(Int32*), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [CLSCompliant(false)]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES11.PrimitiveType mode, Int32[] count, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "count_pinned");
                        if(count != null && count.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("count_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("count_pinned");
                        }
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        if(indices != null && indices.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T3[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("count_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(229);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.PrimitiveType), typeof(Int32*), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [CLSCompliant(false)]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES11.PrimitiveType mode, Int32[] count, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "count_pinned");
                        if(count != null && count.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("count_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("count_pinned");
                        }
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        if(indices != null && indices.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T3[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("count_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(229);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.PrimitiveType), typeof(Int32*), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [CLSCompliant(false)]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES11.PrimitiveType mode, Int32[] count, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "count_pinned");
                        if(count != null && count.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("count_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("count_pinned");
                        }
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("indices_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("count_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(229);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.PrimitiveType), typeof(Int32*), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [CLSCompliant(false)]
            public static void MultiDrawElements(OpenTK.Graphics.ES11.PrimitiveType mode, ref Int32 count, OpenTK.Graphics.ES11.All type, IntPtr indices, Int32 primcount)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "count_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("count_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("count_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(229);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.PrimitiveType), typeof(Int32*), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [CLSCompliant(false)]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES11.PrimitiveType mode, ref Int32 count, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "count_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("count_pinned");
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        if(indices != null && indices.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T3");
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("count_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(229);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.PrimitiveType), typeof(Int32*), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [CLSCompliant(false)]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES11.PrimitiveType mode, ref Int32 count, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "count_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("count_pinned");
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        if(indices != null && indices.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T3[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("count_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(229);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.PrimitiveType), typeof(Int32*), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [CLSCompliant(false)]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES11.PrimitiveType mode, ref Int32 count, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "count_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("count_pinned");
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        if(indices != null && indices.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T3[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("count_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(229);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.PrimitiveType), typeof(Int32*), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [CLSCompliant(false)]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES11.PrimitiveType mode, ref Int32 count, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "count_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("count_pinned");
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("indices_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("count_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(229);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.PrimitiveType), typeof(Int32*), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void MultiDrawElements(OpenTK.Graphics.ES11.PrimitiveType mode, Int32* count, OpenTK.Graphics.ES11.All type, IntPtr indices, Int32 primcount)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(229);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.PrimitiveType), typeof(Int32*), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void MultiDrawElements<T3>(OpenTK.Graphics.ES11.PrimitiveType mode, Int32* count, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        if(indices != null && indices.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T3");
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(229);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.PrimitiveType), typeof(Int32*), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void MultiDrawElements<T3>(OpenTK.Graphics.ES11.PrimitiveType mode, Int32* count, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        if(indices != null && indices.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T3[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(229);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.PrimitiveType), typeof(Int32*), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void MultiDrawElements<T3>(OpenTK.Graphics.ES11.PrimitiveType mode, Int32* count, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        if(indices != null && indices.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T3[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(229);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.PrimitiveType), typeof(Int32*), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void MultiDrawElements<T3>(OpenTK.Graphics.ES11.PrimitiveType mode, Int32* count, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("indices_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(229);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.PrimitiveType), typeof(Int32*), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="format"></param>
            /// <param name="type"></param>
            /// <param name="bufSize"></param>
            /// <param name="data">[length: bufSize]</param>
            public static void ReadnPixels(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES11.All format, OpenTK.Graphics.ES11.All type, Int32 bufSize, [OutAttribute] IntPtr data)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(290);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="format"></param>
            /// <param name="type"></param>
            /// <param name="bufSize"></param>
            /// <param name="data">[length: bufSize]</param>
            [CLSCompliant(false)]
            public static void ReadnPixels<T7>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES11.All format, OpenTK.Graphics.ES11.All type, Int32 bufSize, [InAttribute, OutAttribute] T7[] data)
                where T7 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T7& pinned", "data_pinned");
                        if(data != null && data.Length != 0)
                        {
                            Silk.Cil.Ldarg(7);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T7");
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(290);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="format"></param>
            /// <param name="type"></param>
            /// <param name="bufSize"></param>
            /// <param name="data">[length: bufSize]</param>
            [CLSCompliant(false)]
            public static void ReadnPixels<T7>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES11.All format, OpenTK.Graphics.ES11.All type, Int32 bufSize, [InAttribute, OutAttribute] T7[,] data)
                where T7 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T7& pinned", "data_pinned");
                        if(data != null && data.Length != 0)
                        {
                            Silk.Cil.Ldarg(7);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T7[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(290);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="format"></param>
            /// <param name="type"></param>
            /// <param name="bufSize"></param>
            /// <param name="data">[length: bufSize]</param>
            [CLSCompliant(false)]
            public static void ReadnPixels<T7>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES11.All format, OpenTK.Graphics.ES11.All type, Int32 bufSize, [InAttribute, OutAttribute] T7[,,] data)
                where T7 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T7& pinned", "data_pinned");
                        if(data != null && data.Length != 0)
                        {
                            Silk.Cil.Ldarg(7);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T7[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(290);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="format"></param>
            /// <param name="type"></param>
            /// <param name="bufSize"></param>
            /// <param name="data">[length: bufSize]</param>
            public static void ReadnPixels<T7>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES11.All format, OpenTK.Graphics.ES11.All type, Int32 bufSize, [InAttribute, OutAttribute] ref T7 data)
                where T7 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T7& pinned", "data_pinned");
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.StoreByName("data_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(290);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multisampled_render_to_texture]
            /// Establish data storage, format, dimensions and sample count of a renderbuffer object's image
            /// </summary>
            /// <param name="target"> 
            /// Specifies a binding to which the target of the allocation and must be Renderbuffer.
            /// </param>
            /// <param name="samples"> 
            /// Specifies the number of samples to be used for the renderbuffer object's storage.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the internal format to use for the renderbuffer object's image.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the renderbuffer, in pixels.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the renderbuffer, in pixels.
            /// </param>
            public static void RenderbufferStorageMultisample(OpenTK.Graphics.ES11.All target, Int32 samples, OpenTK.Graphics.ES11.All internalformat, Int32 width, Int32 height)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(295);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_storage]
            /// Simultaneously specify storage for all levels of a one-dimensional texture
            /// </summary>
            /// <param name="target"> 
            /// Specify the target of the operation. target must be either Texture1D or ProxyTexture1D.
            /// </param>
            /// <param name="levels"> 
            /// Specify the number of texture levels.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the sized internal format to be used to store texture image data.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture, in texels.
            /// </param>
            public static void TexStorage1D(OpenTK.Graphics.ES11.All target, Int32 levels, OpenTK.Graphics.ES11.All internalformat, Int32 width)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(357);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_storage]
            /// Simultaneously specify storage for all levels of a two-dimensional or one-dimensional array texture
            /// </summary>
            /// <param name="target"> 
            /// Specify the target of the operation. target must be one of Texture2D, ProxyTexture2D, Texture1DArray, ProxyTexture1DArray, TextureRectangle, ProxyTextureRectangle, or ProxyTextureCubeMap.
            /// </param>
            /// <param name="levels"> 
            /// Specify the number of texture levels.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the sized internal format to be used to store texture image data.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture, in texels.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture, in texels.
            /// </param>
            public static void TexStorage2D(OpenTK.Graphics.ES11.All target, Int32 levels, OpenTK.Graphics.ES11.All internalformat, Int32 width, Int32 height)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(358);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_storage]
            /// Simultaneously specify storage for all levels of a three-dimensional, two-dimensional array or cube-map array texture
            /// </summary>
            /// <param name="target"> 
            /// Specify the target of the operation. target must be one of Texture3D, ProxyTexture3D, Texture2DArray, ProxyTexture2DArray, TextureCubeArray, or ProxyTextureCubeArray.
            /// </param>
            /// <param name="levels"> 
            /// Specify the number of texture levels.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the sized internal format to be used to store texture image data.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture, in texels.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture, in texels.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture, in texels.
            /// </param>
            public static void TexStorage3D(OpenTK.Graphics.ES11.All target, Int32 levels, OpenTK.Graphics.ES11.All internalformat, Int32 width, Int32 height, Int32 depth)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(359);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_storage]</summary>
            /// <param name="texture"></param>
            /// <param name="target"></param>
            /// <param name="levels"></param>
            /// <param name="internalformat"></param>
            /// <param name="width"></param>
            [CLSCompliant(false)]
            public static void TextureStorage1D(Int32 texture, OpenTK.Graphics.ES11.All target, Int32 levels, OpenTK.Graphics.ES11.All internalformat, Int32 width)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(361);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_storage]</summary>
            /// <param name="texture"></param>
            /// <param name="target"></param>
            /// <param name="levels"></param>
            /// <param name="internalformat"></param>
            /// <param name="width"></param>
            [CLSCompliant(false)]
            public static void TextureStorage1D(UInt32 texture, OpenTK.Graphics.ES11.All target, Int32 levels, OpenTK.Graphics.ES11.All internalformat, Int32 width)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(361);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_storage]</summary>
            /// <param name="texture"></param>
            /// <param name="target"></param>
            /// <param name="levels"></param>
            /// <param name="internalformat"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            [CLSCompliant(false)]
            public static void TextureStorage2D(Int32 texture, OpenTK.Graphics.ES11.All target, Int32 levels, OpenTK.Graphics.ES11.All internalformat, Int32 width, Int32 height)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(362);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_storage]</summary>
            /// <param name="texture"></param>
            /// <param name="target"></param>
            /// <param name="levels"></param>
            /// <param name="internalformat"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            [CLSCompliant(false)]
            public static void TextureStorage2D(UInt32 texture, OpenTK.Graphics.ES11.All target, Int32 levels, OpenTK.Graphics.ES11.All internalformat, Int32 width, Int32 height)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(362);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_storage]</summary>
            /// <param name="texture"></param>
            /// <param name="target"></param>
            /// <param name="levels"></param>
            /// <param name="internalformat"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="depth"></param>
            [CLSCompliant(false)]
            public static void TextureStorage3D(Int32 texture, OpenTK.Graphics.ES11.All target, Int32 levels, OpenTK.Graphics.ES11.All internalformat, Int32 width, Int32 height, Int32 depth)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(363);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_storage]</summary>
            /// <param name="texture"></param>
            /// <param name="target"></param>
            /// <param name="levels"></param>
            /// <param name="internalformat"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="depth"></param>
            [CLSCompliant(false)]
            public static void TextureStorage3D(UInt32 texture, OpenTK.Graphics.ES11.All target, Int32 levels, OpenTK.Graphics.ES11.All internalformat, Int32 width, Int32 height, Int32 depth)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(363);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

        }

        public static partial class Img
        {
            /// <summary>[requires: IMG_user_clip_plane]
            /// Specify a plane against which all geometry is clipped
            /// </summary>
            /// <param name="p"> 
            /// Specifies which clipping plane is being positioned. Symbolic names of the form ClipPlanei, where i is an integer between 0 and MaxClipPlanes - 1, are accepted.
            /// </param>
            /// <param name="eqn">[length: 4] 
            /// Specifies the address of an array of four double-precision floating-point values. These values are interpreted as a plane equation.
            /// </param>
            [CLSCompliant(false)]
            public static void ClipPlane(OpenTK.Graphics.ES11.All p, Single[] eqn)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "eqn_pinned");
                        if(eqn != null && eqn.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Single");
                            Silk.Cil.StoreByName("eqn_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("eqn_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("eqn_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(33);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: IMG_user_clip_plane]
            /// Specify a plane against which all geometry is clipped
            /// </summary>
            /// <param name="p"> 
            /// Specifies which clipping plane is being positioned. Symbolic names of the form ClipPlanei, where i is an integer between 0 and MaxClipPlanes - 1, are accepted.
            /// </param>
            /// <param name="eqn">[length: 4] 
            /// Specifies the address of an array of four double-precision floating-point values. These values are interpreted as a plane equation.
            /// </param>
            [CLSCompliant(false)]
            public static void ClipPlane(OpenTK.Graphics.ES11.All p, ref Single eqn)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "eqn_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("eqn_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("eqn_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(33);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: IMG_user_clip_plane]
            /// Specify a plane against which all geometry is clipped
            /// </summary>
            /// <param name="p"> 
            /// Specifies which clipping plane is being positioned. Symbolic names of the form ClipPlanei, where i is an integer between 0 and MaxClipPlanes - 1, are accepted.
            /// </param>
            /// <param name="eqn">[length: 4] 
            /// Specifies the address of an array of four double-precision floating-point values. These values are interpreted as a plane equation.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void ClipPlane(OpenTK.Graphics.ES11.All p, Single* eqn)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(33);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: IMG_user_clip_plane]</summary>
            /// <param name="p"></param>
            /// <param name="eqn">[length: 4]</param>
            [CLSCompliant(false)]
            public static void ClipPlanex(OpenTK.Graphics.ES11.All p, Int32[] eqn)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "eqn_pinned");
                        if(eqn != null && eqn.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("eqn_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("eqn_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("eqn_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(36);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: IMG_user_clip_plane]</summary>
            /// <param name="p"></param>
            /// <param name="eqn">[length: 4]</param>
            [CLSCompliant(false)]
            public static void ClipPlanex(OpenTK.Graphics.ES11.All p, ref Int32 eqn)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "eqn_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("eqn_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("eqn_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(36);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: IMG_user_clip_plane]</summary>
            /// <param name="p"></param>
            /// <param name="eqn">[length: 4]</param>
            [CLSCompliant(false)]
            public static unsafe void ClipPlanex(OpenTK.Graphics.ES11.All p, Int32* eqn)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(36);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: IMG_multisampled_render_to_texture]</summary>
            /// <param name="target"></param>
            /// <param name="attachment"></param>
            /// <param name="textarget"></param>
            /// <param name="texture"></param>
            /// <param name="level"></param>
            /// <param name="samples"></param>
            [CLSCompliant(false)]
            public static void FramebufferTexture2DMultisample(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All attachment, OpenTK.Graphics.ES11.All textarget, Int32 texture, Int32 level, Int32 samples)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(119);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(UInt32), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: IMG_multisampled_render_to_texture]</summary>
            /// <param name="target"></param>
            /// <param name="attachment"></param>
            /// <param name="textarget"></param>
            /// <param name="texture"></param>
            /// <param name="level"></param>
            /// <param name="samples"></param>
            [CLSCompliant(false)]
            public static void FramebufferTexture2DMultisample(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All attachment, OpenTK.Graphics.ES11.All textarget, UInt32 texture, Int32 level, Int32 samples)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(119);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(UInt32), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: IMG_multisampled_render_to_texture]
            /// Establish data storage, format, dimensions and sample count of a renderbuffer object's image
            /// </summary>
            /// <param name="target"> 
            /// Specifies a binding to which the target of the allocation and must be Renderbuffer.
            /// </param>
            /// <param name="samples"> 
            /// Specifies the number of samples to be used for the renderbuffer object's storage.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the internal format to use for the renderbuffer object's image.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the renderbuffer, in pixels.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the renderbuffer, in pixels.
            /// </param>
            public static void RenderbufferStorageMultisample(OpenTK.Graphics.ES11.All target, Int32 samples, OpenTK.Graphics.ES11.All internalformat, Int32 width, Int32 height)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(296);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

        }

        public static partial class NV
        {
            /// <summary>[requires: NV_fence]</summary>
            /// <param name="fences">[length: n]</param>
            [CLSCompliant(false)]
            public static void DeleteFence(Int32 fences)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldc_I4(1);
                        Silk.Cil.LoadAddress(fences);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(57);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="fences">[length: n]</param>
            [CLSCompliant(false)]
            public static void DeleteFence(UInt32 fences)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldc_I4(1);
                        Silk.Cil.LoadAddress(fences);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(57);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="n"></param>
            /// <param name="fences">[length: n]</param>
            [CLSCompliant(false)]
            public static void DeleteFences(Int32 n, Int32[] fences)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "fences_pinned");
                        if(fences != null && fences.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("fences_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("fences_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("fences_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(57);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="n"></param>
            /// <param name="fences">[length: n]</param>
            [CLSCompliant(false)]
            public static void DeleteFences(Int32 n, ref Int32 fences)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "fences_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("fences_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("fences_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(57);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="n"></param>
            /// <param name="fences">[length: n]</param>
            [CLSCompliant(false)]
            public static unsafe void DeleteFences(Int32 n, Int32* fences)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(57);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="n"></param>
            /// <param name="fences">[length: n]</param>
            [CLSCompliant(false)]
            public static void DeleteFences(Int32 n, UInt32[] fences)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "fences_pinned");
                        if(fences != null && fences.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("fences_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("fences_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("fences_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(57);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="n"></param>
            /// <param name="fences">[length: n]</param>
            [CLSCompliant(false)]
            public static void DeleteFences(Int32 n, ref UInt32 fences)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "fences_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("fences_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("fences_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(57);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="n"></param>
            /// <param name="fences">[length: n]</param>
            [CLSCompliant(false)]
            public static unsafe void DeleteFences(Int32 n, UInt32* fences)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(57);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="fence"></param>
            [CLSCompliant(false)]
            public static void FinishFence(Int32 fence)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(108);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="fence"></param>
            [CLSCompliant(false)]
            public static void FinishFence(UInt32 fence)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(108);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_fence]</summary>
            [CLSCompliant(false)]
            public static Int32 GenFence()
            {
                unsafe
                {
                    Int32 __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Int32 __result = default(Int32);
                        Silk.Cil.Ldc_I4(1);
                        Silk.Cil.LoadAddress(__result);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(128);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                        Silk.Cil.Load(__result);
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="n"></param>
            /// <param name="fences">[length: n]</param>
            [CLSCompliant(false)]
            public static void GenFences(Int32 n, [OutAttribute] Int32[] fences)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "fences_pinned");
                        if(fences != null && fences.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("fences_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("fences_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("fences_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(128);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="n"></param>
            /// <param name="fences">[length: n]</param>
            [CLSCompliant(false)]
            public static void GenFences(Int32 n, [OutAttribute] out Int32 fences)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "fences_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("fences_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("fences_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(128);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="n"></param>
            /// <param name="fences">[length: n]</param>
            [CLSCompliant(false)]
            public static unsafe void GenFences(Int32 n, [OutAttribute] Int32* fences)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(128);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="n"></param>
            /// <param name="fences">[length: n]</param>
            [CLSCompliant(false)]
            public static void GenFences(Int32 n, [OutAttribute] UInt32[] fences)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "fences_pinned");
                        if(fences != null && fences.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("fences_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("fences_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("fences_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(128);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="n"></param>
            /// <param name="fences">[length: n]</param>
            [CLSCompliant(false)]
            public static void GenFences(Int32 n, [OutAttribute] out UInt32 fences)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "fences_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("fences_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("fences_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(128);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="n"></param>
            /// <param name="fences">[length: n]</param>
            [CLSCompliant(false)]
            public static unsafe void GenFences(Int32 n, [OutAttribute] UInt32* fences)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(128);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="fence"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static void GetFence(Int32 fence, OpenTK.Graphics.ES11.All pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(144);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="fence"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static void GetFence(Int32 fence, OpenTK.Graphics.ES11.All pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(144);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="fence"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static unsafe void GetFence(Int32 fence, OpenTK.Graphics.ES11.All pname, [OutAttribute] Int32* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(144);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="fence"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static void GetFence(UInt32 fence, OpenTK.Graphics.ES11.All pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(144);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="fence"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static void GetFence(UInt32 fence, OpenTK.Graphics.ES11.All pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(144);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="fence"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static unsafe void GetFence(UInt32 fence, OpenTK.Graphics.ES11.All pname, [OutAttribute] Int32* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(144);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="fence"></param>
            [CLSCompliant(false)]
            public static bool IsFence(Int32 fence)
            {
                unsafe
                {
                    bool __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(186);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(byte), typeof(UInt32));
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="fence"></param>
            [CLSCompliant(false)]
            public static bool IsFence(UInt32 fence)
            {
                unsafe
                {
                    bool __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(186);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(byte), typeof(UInt32));
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="fence"></param>
            /// <param name="condition"></param>
            [CLSCompliant(false)]
            public static void SetFence(Int32 fence, OpenTK.Graphics.ES11.All condition)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(310);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES11.All));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="fence"></param>
            /// <param name="condition"></param>
            [CLSCompliant(false)]
            public static void SetFence(UInt32 fence, OpenTK.Graphics.ES11.All condition)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(310);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES11.All));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="fence"></param>
            [CLSCompliant(false)]
            public static bool TestFence(Int32 fence)
            {
                unsafe
                {
                    bool __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(316);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(byte), typeof(UInt32));
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="fence"></param>
            [CLSCompliant(false)]
            public static bool TestFence(UInt32 fence)
            {
                unsafe
                {
                    bool __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(316);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(byte), typeof(UInt32));
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

        }

        public static partial class Oes
        {
            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="op"></param>
            /// <param name="value"></param>
            public static void Accumx(OpenTK.Graphics.ES11.All op, Int32 value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="func"></param>
            /// <param name="@ref"></param>
            public static void AlphaFuncx(OpenTK.Graphics.ES11.All func, Int32 @ref)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(4);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_framebuffer_object]
            /// Bind a named framebuffer object
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target to which the framebuffer object is bound. The symbolic constant must be Framebuffer.
            /// </param>
            /// <param name="framebuffer"> 
            /// Specifies the name of a framebuffer object.
            /// </param>
            [CLSCompliant(false)]
            public static void BindFramebuffer(OpenTK.Graphics.ES11.All target, Int32 framebuffer)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(6);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_framebuffer_object]
            /// Bind a named framebuffer object
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target to which the framebuffer object is bound. The symbolic constant must be Framebuffer.
            /// </param>
            /// <param name="framebuffer"> 
            /// Specifies the name of a framebuffer object.
            /// </param>
            [CLSCompliant(false)]
            public static void BindFramebuffer(OpenTK.Graphics.ES11.All target, UInt32 framebuffer)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(6);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_framebuffer_object]
            /// Bind a named renderbuffer object
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target to which the renderbuffer object is bound. The symbolic constant must be Renderbuffer.
            /// </param>
            /// <param name="renderbuffer"> 
            /// Specifies the name of a renderbuffer object.
            /// </param>
            [CLSCompliant(false)]
            public static void BindRenderbuffer(OpenTK.Graphics.ES11.All target, Int32 renderbuffer)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(7);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_framebuffer_object]
            /// Bind a named renderbuffer object
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target to which the renderbuffer object is bound. The symbolic constant must be Renderbuffer.
            /// </param>
            /// <param name="renderbuffer"> 
            /// Specifies the name of a renderbuffer object.
            /// </param>
            [CLSCompliant(false)]
            public static void BindRenderbuffer(OpenTK.Graphics.ES11.All target, UInt32 renderbuffer)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(7);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_vertex_array_object]
            /// Bind a vertex array object
            /// </summary>
            /// <param name="array"> 
            /// Specifies the name of the vertex array to bind.
            /// </param>
            [CLSCompliant(false)]
            public static void BindVertexArray(Int32 array)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(9);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_vertex_array_object]
            /// Bind a vertex array object
            /// </summary>
            /// <param name="array"> 
            /// Specifies the name of the vertex array to bind.
            /// </param>
            [CLSCompliant(false)]
            public static void BindVertexArray(UInt32 array)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(9);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="xorig"></param>
            /// <param name="yorig"></param>
            /// <param name="xmove"></param>
            /// <param name="ymove"></param>
            /// <param name="bitmap">[length: width,height]</param>
            [CLSCompliant(false)]
            public static void Bitmapx(Int32 width, Int32 height, Int32 xorig, Int32 yorig, Int32 xmove, Int32 ymove, Byte[] bitmap)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Byte& pinned", "bitmap_pinned");
                        if(bitmap != null && bitmap.Length != 0)
                        {
                            Silk.Cil.Ldarg(6);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Byte");
                            Silk.Cil.StoreByName("bitmap_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("bitmap_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.LoadByName("bitmap_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(10);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Byte*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="xorig"></param>
            /// <param name="yorig"></param>
            /// <param name="xmove"></param>
            /// <param name="ymove"></param>
            /// <param name="bitmap">[length: width,height]</param>
            [CLSCompliant(false)]
            public static void Bitmapx(Int32 width, Int32 height, Int32 xorig, Int32 yorig, Int32 xmove, Int32 ymove, ref Byte bitmap)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Byte& pinned", "bitmap_pinned");
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.StoreByName("bitmap_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.LoadByName("bitmap_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(10);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Byte*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="xorig"></param>
            /// <param name="yorig"></param>
            /// <param name="xmove"></param>
            /// <param name="ymove"></param>
            /// <param name="bitmap">[length: width,height]</param>
            [CLSCompliant(false)]
            public static unsafe void Bitmapx(Int32 width, Int32 height, Int32 xorig, Int32 yorig, Int32 xmove, Int32 ymove, Byte* bitmap)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(10);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Byte*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="red"></param>
            /// <param name="green"></param>
            /// <param name="blue"></param>
            /// <param name="alpha"></param>
            public static void BlendColorx(Int32 red, Int32 green, Int32 blue, Int32 alpha)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(11);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_blend_subtract]
            /// Specify the equation used for both the RGB blend equation and the Alpha blend equation
            /// </summary>
            /// <param name="mode"> 
            /// specifies how source and destination colors are combined. It must be FuncAdd, FuncSubtract, or FuncReverseSubtract.
            /// </param>
            public static void BlendEquation(OpenTK.Graphics.ES11.All mode)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(13);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_blend_equation_separate]
            /// Set the RGB blend equation and the alpha blend equation separately
            /// </summary>
            /// <param name="modeRGB"> 
            /// specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, or FuncReverseSubtract.
            /// </param>
            /// <param name="modeAlpha"> 
            /// specifies the alpha blend equation, how the alpha component of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, or FuncReverseSubtract.
            /// </param>
            public static void BlendEquationSeparate(OpenTK.Graphics.ES11.All modeRGB, OpenTK.Graphics.ES11.All modeAlpha)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(14);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_blend_func_separate]
            /// Specify pixel arithmetic for RGB and alpha components separately
            /// </summary>
            /// <param name="srcRGB"> 
            /// Specifies how the red, green, and blue blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha, ConstantColor, OneMinusConstantColor, ConstantAlpha, OneMinusConstantAlpha, and SrcAlphaSaturate. The initial value is One.
            /// </param>
            /// <param name="dstRGB"> 
            /// Specifies how the red, green, and blue destination blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha. ConstantColor, OneMinusConstantColor, ConstantAlpha, and OneMinusConstantAlpha. The initial value is Zero.
            /// </param>
            /// <param name="srcAlpha"> 
            /// Specified how the alpha source blending factor is computed.  The same symbolic constants are accepted as for srcRGB. The initial value is One.
            /// </param>
            /// <param name="dstAlpha"> 
            /// Specified how the alpha destination blending factor is computed.  The same symbolic constants are accepted as for dstRGB. The initial value is Zero.
            /// </param>
            public static void BlendFuncSeparate(OpenTK.Graphics.ES11.All srcRGB, OpenTK.Graphics.ES11.All dstRGB, OpenTK.Graphics.ES11.All srcAlpha, OpenTK.Graphics.ES11.All dstAlpha)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(16);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_framebuffer_object]
            /// Return the framebuffer completeness status of a framebuffer object
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target framebuffer object. The symbolic constant must be Framebuffer.
            /// </param>
            public static OpenTK.Graphics.ES11.All CheckFramebufferStatus(OpenTK.Graphics.ES11.All target)
            {
                unsafe
                {
                    OpenTK.Graphics.ES11.All __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(19);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All));
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="red"></param>
            /// <param name="green"></param>
            /// <param name="blue"></param>
            /// <param name="alpha"></param>
            public static void ClearAccumx(Int32 red, Int32 green, Int32 blue, Int32 alpha)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(21);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="red"></param>
            /// <param name="green"></param>
            /// <param name="blue"></param>
            /// <param name="alpha"></param>
            public static void ClearColorx(Int32 red, Int32 green, Int32 blue, Int32 alpha)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(24);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_single_precision]
            /// Specify the clear value for the depth buffer
            /// </summary>
            /// <param name="depth"> 
            /// Specifies the depth value used when the depth buffer is cleared. The initial value is 1.
            /// </param>
            public static void ClearDepth(Single depth)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(26);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Single));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="depth"></param>
            public static void ClearDepthx(Int32 depth)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(28);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_single_precision]
            /// Specify a plane against which all geometry is clipped
            /// </summary>
            /// <param name="plane"> 
            /// Specifies which clipping plane is being positioned. Symbolic names of the form ClipPlanei, where i is an integer between 0 and MaxClipPlanes - 1, are accepted.
            /// </param>
            /// <param name="equation">[length: 4] 
            /// Specifies the address of an array of four double-precision floating-point values. These values are interpreted as a plane equation.
            /// </param>
            [CLSCompliant(false)]
            public static void ClipPlane(OpenTK.Graphics.ES11.All plane, Single[] equation)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "equation_pinned");
                        if(equation != null && equation.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Single");
                            Silk.Cil.StoreByName("equation_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("equation_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("equation_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(34);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_single_precision]
            /// Specify a plane against which all geometry is clipped
            /// </summary>
            /// <param name="plane"> 
            /// Specifies which clipping plane is being positioned. Symbolic names of the form ClipPlanei, where i is an integer between 0 and MaxClipPlanes - 1, are accepted.
            /// </param>
            /// <param name="equation">[length: 4] 
            /// Specifies the address of an array of four double-precision floating-point values. These values are interpreted as a plane equation.
            /// </param>
            [CLSCompliant(false)]
            public static void ClipPlane(OpenTK.Graphics.ES11.All plane, ref Single equation)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "equation_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("equation_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("equation_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(34);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_single_precision]
            /// Specify a plane against which all geometry is clipped
            /// </summary>
            /// <param name="plane"> 
            /// Specifies which clipping plane is being positioned. Symbolic names of the form ClipPlanei, where i is an integer between 0 and MaxClipPlanes - 1, are accepted.
            /// </param>
            /// <param name="equation">[length: 4] 
            /// Specifies the address of an array of four double-precision floating-point values. These values are interpreted as a plane equation.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void ClipPlane(OpenTK.Graphics.ES11.All plane, Single* equation)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(34);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="plane"></param>
            /// <param name="equation">[length: 4]</param>
            [CLSCompliant(false)]
            public static void ClipPlanex(OpenTK.Graphics.ES11.All plane, Int32[] equation)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "equation_pinned");
                        if(equation != null && equation.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("equation_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("equation_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("equation_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(37);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="plane"></param>
            /// <param name="equation">[length: 4]</param>
            [CLSCompliant(false)]
            public static void ClipPlanex(OpenTK.Graphics.ES11.All plane, ref Int32 equation)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "equation_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("equation_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("equation_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(37);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="plane"></param>
            /// <param name="equation">[length: 4]</param>
            [CLSCompliant(false)]
            public static unsafe void ClipPlanex(OpenTK.Graphics.ES11.All plane, Int32* equation)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(37);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="red"></param>
            /// <param name="green"></param>
            /// <param name="blue"></param>
            public static void Color3x(Int32 red, Int32 green, Int32 blue)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(38);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="components">[length: 3]</param>
            [CLSCompliant(false)]
            public static void Color3x(Int32[] components)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "components_pinned");
                        if(components != null && components.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("components_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("components_pinned");
                        }
                        Silk.Cil.LoadByName("components_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(39);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="components">[length: 3]</param>
            [CLSCompliant(false)]
            public static void Color3x(ref Int32 components)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "components_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("components_pinned");
                        Silk.Cil.LoadByName("components_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(39);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="components">[length: 3]</param>
            [CLSCompliant(false)]
            public static unsafe void Color3x(Int32* components)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(39);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="red"></param>
            /// <param name="green"></param>
            /// <param name="blue"></param>
            /// <param name="alpha"></param>
            public static void Color4x(Int32 red, Int32 green, Int32 blue, Int32 alpha)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(43);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="components">[length: 4]</param>
            [CLSCompliant(false)]
            public static void Color4x(Int32[] components)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "components_pinned");
                        if(components != null && components.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("components_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("components_pinned");
                        }
                        Silk.Cil.LoadByName("components_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(44);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="components">[length: 4]</param>
            [CLSCompliant(false)]
            public static void Color4x(ref Int32 components)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "components_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("components_pinned");
                        Silk.Cil.LoadByName("components_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(44);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="components">[length: 4]</param>
            [CLSCompliant(false)]
            public static unsafe void Color4x(Int32* components)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(44);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="param"></param>
            public static void ConvolutionParameterx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, Int32 param)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(49);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static void ConvolutionParameterx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, Int32[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(50);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static unsafe void ConvolutionParameterx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, Int32* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(50);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_matrix_palette]</summary>
            /// <param name="matrixpaletteindex"></param>
            [CLSCompliant(false)]
            public static void CurrentPaletteMatrix(Int32 matrixpaletteindex)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(55);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_matrix_palette]</summary>
            /// <param name="matrixpaletteindex"></param>
            [CLSCompliant(false)]
            public static void CurrentPaletteMatrix(UInt32 matrixpaletteindex)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(55);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_framebuffer_object]
            /// Delete named framebuffer objects
            /// </summary>
            /// <param name="framebuffers">[length: n] 
            /// Specifies an array of framebuffer objects to be deleted.
            /// </param>
            [CLSCompliant(false)]
            public static void DeleteFramebuffer(Int32 framebuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldc_I4(1);
                        Silk.Cil.LoadAddress(framebuffers);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(58);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_framebuffer_object]
            /// Delete named framebuffer objects
            /// </summary>
            /// <param name="framebuffers">[length: n] 
            /// Specifies an array of framebuffer objects to be deleted.
            /// </param>
            [CLSCompliant(false)]
            public static void DeleteFramebuffer(UInt32 framebuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldc_I4(1);
                        Silk.Cil.LoadAddress(framebuffers);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(58);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_framebuffer_object]
            /// Delete named framebuffer objects
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of framebuffer objects to be deleted.
            /// </param>
            /// <param name="framebuffers">[length: n] 
            /// Specifies an array of framebuffer objects to be deleted.
            /// </param>
            [CLSCompliant(false)]
            public static void DeleteFramebuffers(Int32 n, Int32[] framebuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "framebuffers_pinned");
                        if(framebuffers != null && framebuffers.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("framebuffers_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("framebuffers_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("framebuffers_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(58);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_framebuffer_object]
            /// Delete named framebuffer objects
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of framebuffer objects to be deleted.
            /// </param>
            /// <param name="framebuffers">[length: n] 
            /// Specifies an array of framebuffer objects to be deleted.
            /// </param>
            [CLSCompliant(false)]
            public static void DeleteFramebuffers(Int32 n, ref Int32 framebuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "framebuffers_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("framebuffers_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("framebuffers_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(58);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_framebuffer_object]
            /// Delete named framebuffer objects
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of framebuffer objects to be deleted.
            /// </param>
            /// <param name="framebuffers">[length: n] 
            /// Specifies an array of framebuffer objects to be deleted.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void DeleteFramebuffers(Int32 n, Int32* framebuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(58);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_framebuffer_object]
            /// Delete named framebuffer objects
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of framebuffer objects to be deleted.
            /// </param>
            /// <param name="framebuffers">[length: n] 
            /// Specifies an array of framebuffer objects to be deleted.
            /// </param>
            [CLSCompliant(false)]
            public static void DeleteFramebuffers(Int32 n, UInt32[] framebuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "framebuffers_pinned");
                        if(framebuffers != null && framebuffers.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("framebuffers_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("framebuffers_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("framebuffers_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(58);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_framebuffer_object]
            /// Delete named framebuffer objects
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of framebuffer objects to be deleted.
            /// </param>
            /// <param name="framebuffers">[length: n] 
            /// Specifies an array of framebuffer objects to be deleted.
            /// </param>
            [CLSCompliant(false)]
            public static void DeleteFramebuffers(Int32 n, ref UInt32 framebuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "framebuffers_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("framebuffers_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("framebuffers_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(58);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_framebuffer_object]
            /// Delete named framebuffer objects
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of framebuffer objects to be deleted.
            /// </param>
            /// <param name="framebuffers">[length: n] 
            /// Specifies an array of framebuffer objects to be deleted.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void DeleteFramebuffers(Int32 n, UInt32* framebuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(58);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_framebuffer_object]
            /// Delete named renderbuffer objects
            /// </summary>
            /// <param name="renderbuffers">[length: n] 
            /// Specifies an array of renderbuffer objects to be deleted.
            /// </param>
            [CLSCompliant(false)]
            public static void DeleteRenderbuffer(Int32 renderbuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldc_I4(1);
                        Silk.Cil.LoadAddress(renderbuffers);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(59);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_framebuffer_object]
            /// Delete named renderbuffer objects
            /// </summary>
            /// <param name="renderbuffers">[length: n] 
            /// Specifies an array of renderbuffer objects to be deleted.
            /// </param>
            [CLSCompliant(false)]
            public static void DeleteRenderbuffer(UInt32 renderbuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldc_I4(1);
                        Silk.Cil.LoadAddress(renderbuffers);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(59);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_framebuffer_object]
            /// Delete named renderbuffer objects
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of renderbuffer objects to be deleted.
            /// </param>
            /// <param name="renderbuffers">[length: n] 
            /// Specifies an array of renderbuffer objects to be deleted.
            /// </param>
            [CLSCompliant(false)]
            public static void DeleteRenderbuffers(Int32 n, Int32[] renderbuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "renderbuffers_pinned");
                        if(renderbuffers != null && renderbuffers.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("renderbuffers_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("renderbuffers_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("renderbuffers_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(59);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_framebuffer_object]
            /// Delete named renderbuffer objects
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of renderbuffer objects to be deleted.
            /// </param>
            /// <param name="renderbuffers">[length: n] 
            /// Specifies an array of renderbuffer objects to be deleted.
            /// </param>
            [CLSCompliant(false)]
            public static void DeleteRenderbuffers(Int32 n, ref Int32 renderbuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "renderbuffers_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("renderbuffers_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("renderbuffers_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(59);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_framebuffer_object]
            /// Delete named renderbuffer objects
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of renderbuffer objects to be deleted.
            /// </param>
            /// <param name="renderbuffers">[length: n] 
            /// Specifies an array of renderbuffer objects to be deleted.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void DeleteRenderbuffers(Int32 n, Int32* renderbuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(59);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_framebuffer_object]
            /// Delete named renderbuffer objects
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of renderbuffer objects to be deleted.
            /// </param>
            /// <param name="renderbuffers">[length: n] 
            /// Specifies an array of renderbuffer objects to be deleted.
            /// </param>
            [CLSCompliant(false)]
            public static void DeleteRenderbuffers(Int32 n, UInt32[] renderbuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "renderbuffers_pinned");
                        if(renderbuffers != null && renderbuffers.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("renderbuffers_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("renderbuffers_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("renderbuffers_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(59);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_framebuffer_object]
            /// Delete named renderbuffer objects
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of renderbuffer objects to be deleted.
            /// </param>
            /// <param name="renderbuffers">[length: n] 
            /// Specifies an array of renderbuffer objects to be deleted.
            /// </param>
            [CLSCompliant(false)]
            public static void DeleteRenderbuffers(Int32 n, ref UInt32 renderbuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "renderbuffers_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("renderbuffers_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("renderbuffers_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(59);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_framebuffer_object]
            /// Delete named renderbuffer objects
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of renderbuffer objects to be deleted.
            /// </param>
            /// <param name="renderbuffers">[length: n] 
            /// Specifies an array of renderbuffer objects to be deleted.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void DeleteRenderbuffers(Int32 n, UInt32* renderbuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(59);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_vertex_array_object]
            /// Delete vertex array objects
            /// </summary>
            /// <param name="arrays">[length: n] 
            /// Specifies the address of an array containing the n names of the objects to be deleted.
            /// </param>
            [CLSCompliant(false)]
            public static void DeleteVertexArray(Int32 arrays)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldc_I4(1);
                        Silk.Cil.LoadAddress(arrays);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(62);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_vertex_array_object]
            /// Delete vertex array objects
            /// </summary>
            /// <param name="arrays">[length: n] 
            /// Specifies the address of an array containing the n names of the objects to be deleted.
            /// </param>
            [CLSCompliant(false)]
            public static void DeleteVertexArray(UInt32 arrays)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldc_I4(1);
                        Silk.Cil.LoadAddress(arrays);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(62);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_vertex_array_object]
            /// Delete vertex array objects
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of vertex array objects to be deleted.
            /// </param>
            /// <param name="arrays">[length: n] 
            /// Specifies the address of an array containing the n names of the objects to be deleted.
            /// </param>
            [CLSCompliant(false)]
            public static void DeleteVertexArrays(Int32 n, Int32[] arrays)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "arrays_pinned");
                        if(arrays != null && arrays.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("arrays_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("arrays_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("arrays_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(62);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_vertex_array_object]
            /// Delete vertex array objects
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of vertex array objects to be deleted.
            /// </param>
            /// <param name="arrays">[length: n] 
            /// Specifies the address of an array containing the n names of the objects to be deleted.
            /// </param>
            [CLSCompliant(false)]
            public static void DeleteVertexArrays(Int32 n, ref Int32 arrays)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "arrays_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("arrays_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("arrays_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(62);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_vertex_array_object]
            /// Delete vertex array objects
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of vertex array objects to be deleted.
            /// </param>
            /// <param name="arrays">[length: n] 
            /// Specifies the address of an array containing the n names of the objects to be deleted.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void DeleteVertexArrays(Int32 n, Int32* arrays)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(62);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_vertex_array_object]
            /// Delete vertex array objects
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of vertex array objects to be deleted.
            /// </param>
            /// <param name="arrays">[length: n] 
            /// Specifies the address of an array containing the n names of the objects to be deleted.
            /// </param>
            [CLSCompliant(false)]
            public static void DeleteVertexArrays(Int32 n, UInt32[] arrays)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "arrays_pinned");
                        if(arrays != null && arrays.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("arrays_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("arrays_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("arrays_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(62);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_vertex_array_object]
            /// Delete vertex array objects
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of vertex array objects to be deleted.
            /// </param>
            /// <param name="arrays">[length: n] 
            /// Specifies the address of an array containing the n names of the objects to be deleted.
            /// </param>
            [CLSCompliant(false)]
            public static void DeleteVertexArrays(Int32 n, ref UInt32 arrays)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "arrays_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("arrays_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("arrays_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(62);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_vertex_array_object]
            /// Delete vertex array objects
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of vertex array objects to be deleted.
            /// </param>
            /// <param name="arrays">[length: n] 
            /// Specifies the address of an array containing the n names of the objects to be deleted.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void DeleteVertexArrays(Int32 n, UInt32* arrays)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(62);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_single_precision]
            /// Specify mapping of depth values from normalized device coordinates to window coordinates
            /// </summary>
            /// <param name="n"> 
            /// Specifies the mapping of the near clipping plane to window coordinates. The initial value is 0.
            /// </param>
            /// <param name="f"> 
            /// Specifies the mapping of the far clipping plane to window coordinates. The initial value is 1.
            /// </param>
            public static void DepthRange(Single n, Single f)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(66);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Single), typeof(Single));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="n"></param>
            /// <param name="f"></param>
            public static void DepthRangex(Int32 n, Int32 f)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(68);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_draw_texture]</summary>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="z"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            public static void DrawTex(Single x, Single y, Single z, Single width, Single height)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(75);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Single), typeof(Single), typeof(Single), typeof(Single), typeof(Single));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_draw_texture]</summary>
            /// <param name="coords"></param>
            [CLSCompliant(false)]
            public static void DrawTex(Single[] coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "coords_pinned");
                        if(coords != null && coords.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Single");
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(76);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_draw_texture]</summary>
            /// <param name="coords"></param>
            [CLSCompliant(false)]
            public static void DrawTex(ref Single coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "coords_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("coords_pinned");
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(76);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_draw_texture]</summary>
            /// <param name="coords"></param>
            [CLSCompliant(false)]
            public static unsafe void DrawTex(Single* coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(76);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_draw_texture]</summary>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="z"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            public static void DrawTex(Int32 x, Int32 y, Int32 z, Int32 width, Int32 height)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(77);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_draw_texture]</summary>
            /// <param name="coords"></param>
            [CLSCompliant(false)]
            public static void DrawTex(Int32[] coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "coords_pinned");
                        if(coords != null && coords.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(78);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_draw_texture]</summary>
            /// <param name="coords"></param>
            [CLSCompliant(false)]
            public static void DrawTex(ref Int32 coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "coords_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("coords_pinned");
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(78);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_draw_texture]</summary>
            /// <param name="coords"></param>
            [CLSCompliant(false)]
            public static unsafe void DrawTex(Int32* coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(78);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_draw_texture]</summary>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="z"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            public static void DrawTex(Int16 x, Int16 y, Int16 z, Int16 width, Int16 height)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(79);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int16), typeof(Int16), typeof(Int16), typeof(Int16), typeof(Int16));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_draw_texture]</summary>
            /// <param name="coords"></param>
            [CLSCompliant(false)]
            public static void DrawTex(Int16[] coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int16& pinned", "coords_pinned");
                        if(coords != null && coords.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int16");
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(80);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int16*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_draw_texture]</summary>
            /// <param name="coords"></param>
            [CLSCompliant(false)]
            public static void DrawTex(ref Int16 coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int16& pinned", "coords_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("coords_pinned");
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(80);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int16*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_draw_texture]</summary>
            /// <param name="coords"></param>
            [CLSCompliant(false)]
            public static unsafe void DrawTex(Int16* coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(80);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int16*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_draw_texture]</summary>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="z"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            public static void DrawTexx(Int32 x, Int32 y, Int32 z, Int32 width, Int32 height)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(81);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_draw_texture]</summary>
            /// <param name="coords"></param>
            [CLSCompliant(false)]
            public static void DrawTexx(Int32[] coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "coords_pinned");
                        if(coords != null && coords.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(82);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_draw_texture]</summary>
            /// <param name="coords"></param>
            [CLSCompliant(false)]
            public static void DrawTexx(ref Int32 coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "coords_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("coords_pinned");
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(82);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_draw_texture]</summary>
            /// <param name="coords"></param>
            [CLSCompliant(false)]
            public static unsafe void DrawTexx(Int32* coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(82);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_EGL_image]</summary>
            /// <param name="target"></param>
            /// <param name="image"></param>
            public static void EGLImageTargetRenderbufferStorage(OpenTK.Graphics.ES11.All target, IntPtr image)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(83);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_EGL_image]</summary>
            /// <param name="target"></param>
            /// <param name="image"></param>
            public static void EGLImageTargetTexture2D(OpenTK.Graphics.ES11.All target, IntPtr image)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(84);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="u"></param>
            public static void EvalCoord1x(Int32 u)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(89);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="coords">[length: 1]</param>
            [CLSCompliant(false)]
            public static unsafe void EvalCoord1x(Int32* coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(90);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="u"></param>
            /// <param name="v"></param>
            public static void EvalCoord2x(Int32 u, Int32 v)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(91);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="coords">[length: 2]</param>
            [CLSCompliant(false)]
            public static void EvalCoord2x(Int32[] coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "coords_pinned");
                        if(coords != null && coords.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(92);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="coords">[length: 2]</param>
            [CLSCompliant(false)]
            public static void EvalCoord2x(ref Int32 coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "coords_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("coords_pinned");
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(92);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="coords">[length: 2]</param>
            [CLSCompliant(false)]
            public static unsafe void EvalCoord2x(Int32* coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(92);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="n"></param>
            /// <param name="type"></param>
            /// <param name="buffer">[length: n]</param>
            [CLSCompliant(false)]
            public static void FeedbackBufferx(Int32 n, OpenTK.Graphics.ES11.All type, Int32[] buffer)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "buffer_pinned");
                        if(buffer != null && buffer.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("buffer_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("buffer_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("buffer_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(105);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="n"></param>
            /// <param name="type"></param>
            /// <param name="buffer">[length: n]</param>
            [CLSCompliant(false)]
            public static void FeedbackBufferx(Int32 n, OpenTK.Graphics.ES11.All type, ref Int32 buffer)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "buffer_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("buffer_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("buffer_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(105);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="n"></param>
            /// <param name="type"></param>
            /// <param name="buffer">[length: n]</param>
            [CLSCompliant(false)]
            public static unsafe void FeedbackBufferx(Int32 n, OpenTK.Graphics.ES11.All type, Int32* buffer)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(105);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="pname"></param>
            /// <param name="param"></param>
            public static void Fogx(OpenTK.Graphics.ES11.All pname, Int32 param)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(114);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="pname"></param>
            /// <param name="param">[length: pname]</param>
            [CLSCompliant(false)]
            public static void Fogx(OpenTK.Graphics.ES11.All pname, Int32[] param)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "param_pinned");
                        if(param != null && param.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("param_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("param_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("param_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(116);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="pname"></param>
            /// <param name="param">[length: pname]</param>
            [CLSCompliant(false)]
            public static unsafe void Fogx(OpenTK.Graphics.ES11.All pname, Int32* param)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(116);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_framebuffer_object]
            /// Attach a renderbuffer object to a framebuffer object
            /// </summary>
            /// <param name="target"> 
            /// Specifies the framebuffer target. The symbolic constant must be Framebuffer.
            /// </param>
            /// <param name="attachment"> 
            /// Specifies the attachment point to which renderbuffer should be attached. Must be one of the following symbolic constants: ColorAttachment0, DepthAttachment, or StencilAttachment.
            /// </param>
            /// <param name="renderbuffertarget"> 
            /// Specifies the renderbuffer target. The symbolic constant must be Renderbuffer.
            /// </param>
            /// <param name="renderbuffer"> 
            /// Specifies the renderbuffer object that is to be attached.
            /// </param>
            [CLSCompliant(false)]
            public static void FramebufferRenderbuffer(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All attachment, OpenTK.Graphics.ES11.All renderbuffertarget, Int32 renderbuffer)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(117);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_framebuffer_object]
            /// Attach a renderbuffer object to a framebuffer object
            /// </summary>
            /// <param name="target"> 
            /// Specifies the framebuffer target. The symbolic constant must be Framebuffer.
            /// </param>
            /// <param name="attachment"> 
            /// Specifies the attachment point to which renderbuffer should be attached. Must be one of the following symbolic constants: ColorAttachment0, DepthAttachment, or StencilAttachment.
            /// </param>
            /// <param name="renderbuffertarget"> 
            /// Specifies the renderbuffer target. The symbolic constant must be Renderbuffer.
            /// </param>
            /// <param name="renderbuffer"> 
            /// Specifies the renderbuffer object that is to be attached.
            /// </param>
            [CLSCompliant(false)]
            public static void FramebufferRenderbuffer(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All attachment, OpenTK.Graphics.ES11.All renderbuffertarget, UInt32 renderbuffer)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(117);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_framebuffer_object]
            /// Attach a texture image to a framebuffer object
            /// </summary>
            /// <param name="target"> 
            /// Specifies the framebuffer target. The symbolic constant must be Framebuffer.
            /// </param>
            /// <param name="attachment"> 
            /// Specifies the attachment point to which an image from texture should be attached. Must be one of the following symbolic constants: ColorAttachment0, DepthAttachment, or StencilAttachment.
            /// </param>
            /// <param name="textarget"> 
            /// Specifies the texture target. Must be one of the following symbolic constants: Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
            /// </param>
            /// <param name="texture"> 
            /// Specifies the texture object whose image is to be attached.
            /// </param>
            /// <param name="level"> 
            /// Specifies the mipmap level of the texture image to be attached, which must be 0.
            /// </param>
            [CLSCompliant(false)]
            public static void FramebufferTexture2D(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All attachment, OpenTK.Graphics.ES11.All textarget, Int32 texture, Int32 level)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(120);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(UInt32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_framebuffer_object]
            /// Attach a texture image to a framebuffer object
            /// </summary>
            /// <param name="target"> 
            /// Specifies the framebuffer target. The symbolic constant must be Framebuffer.
            /// </param>
            /// <param name="attachment"> 
            /// Specifies the attachment point to which an image from texture should be attached. Must be one of the following symbolic constants: ColorAttachment0, DepthAttachment, or StencilAttachment.
            /// </param>
            /// <param name="textarget"> 
            /// Specifies the texture target. Must be one of the following symbolic constants: Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
            /// </param>
            /// <param name="texture"> 
            /// Specifies the texture object whose image is to be attached.
            /// </param>
            /// <param name="level"> 
            /// Specifies the mipmap level of the texture image to be attached, which must be 0.
            /// </param>
            [CLSCompliant(false)]
            public static void FramebufferTexture2D(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All attachment, OpenTK.Graphics.ES11.All textarget, UInt32 texture, Int32 level)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(120);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(UInt32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_single_precision]
            /// Multiply the current matrix by a perspective matrix
            /// </summary>
            /// <param name="l"> 
            /// Specify the coordinates for the left and right vertical clipping planes.
            /// </param>
            /// <param name="r"> 
            /// Specify the coordinates for the left and right vertical clipping planes.
            /// </param>
            /// <param name="b"> 
            /// Specify the coordinates for the bottom and top horizontal clipping planes.
            /// </param>
            /// <param name="t"> 
            /// Specify the coordinates for the bottom and top horizontal clipping planes.
            /// </param>
            /// <param name="n"> 
            /// Specify the distances to the near and far depth clipping planes. Both distances must be positive.
            /// </param>
            /// <param name="f"> 
            /// Specify the distances to the near and far depth clipping planes. Both distances must be positive.
            /// </param>
            public static void Frustum(Single l, Single r, Single b, Single t, Single n, Single f)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(123);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Single), typeof(Single), typeof(Single), typeof(Single), typeof(Single), typeof(Single));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="l"></param>
            /// <param name="r"></param>
            /// <param name="b"></param>
            /// <param name="t"></param>
            /// <param name="n"></param>
            /// <param name="f"></param>
            public static void Frustumx(Int32 l, Int32 r, Int32 b, Int32 t, Int32 n, Int32 f)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(125);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_framebuffer_object]
            /// Generate a complete set of mipmaps for a texture object
            /// </summary>
            /// <param name="target"> 
            /// Specifies the texture target of the active texture unit to which the texture object is bound whose mipmaps will be generated.  Must be one of the following symbolic constants: Texture2D or TextureCubeMap.
            /// </param>
            public static void GenerateMipmap(OpenTK.Graphics.ES11.All target)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(127);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_framebuffer_object]
            /// Generate framebuffer object names
            /// </summary>
            [CLSCompliant(false)]
            public static Int32 GenFramebuffer()
            {
                unsafe
                {
                    Int32 __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Int32 __result = default(Int32);
                        Silk.Cil.Ldc_I4(1);
                        Silk.Cil.LoadAddress(__result);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(129);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                        Silk.Cil.Load(__result);
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_framebuffer_object]
            /// Generate framebuffer object names
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of framebuffer object names to be generated.
            /// </param>
            /// <param name="framebuffers">[length: n] 
            /// Specifies an array in which the generated framebuffer object names are stored.
            /// </param>
            [CLSCompliant(false)]
            public static void GenFramebuffers(Int32 n, [OutAttribute] Int32[] framebuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "framebuffers_pinned");
                        if(framebuffers != null && framebuffers.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("framebuffers_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("framebuffers_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("framebuffers_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(129);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_framebuffer_object]
            /// Generate framebuffer object names
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of framebuffer object names to be generated.
            /// </param>
            /// <param name="framebuffers">[length: n] 
            /// Specifies an array in which the generated framebuffer object names are stored.
            /// </param>
            [CLSCompliant(false)]
            public static void GenFramebuffers(Int32 n, [OutAttribute] out Int32 framebuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "framebuffers_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("framebuffers_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("framebuffers_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(129);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_framebuffer_object]
            /// Generate framebuffer object names
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of framebuffer object names to be generated.
            /// </param>
            /// <param name="framebuffers">[length: n] 
            /// Specifies an array in which the generated framebuffer object names are stored.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void GenFramebuffers(Int32 n, [OutAttribute] Int32* framebuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(129);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_framebuffer_object]
            /// Generate framebuffer object names
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of framebuffer object names to be generated.
            /// </param>
            /// <param name="framebuffers">[length: n] 
            /// Specifies an array in which the generated framebuffer object names are stored.
            /// </param>
            [CLSCompliant(false)]
            public static void GenFramebuffers(Int32 n, [OutAttribute] UInt32[] framebuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "framebuffers_pinned");
                        if(framebuffers != null && framebuffers.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("framebuffers_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("framebuffers_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("framebuffers_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(129);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_framebuffer_object]
            /// Generate framebuffer object names
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of framebuffer object names to be generated.
            /// </param>
            /// <param name="framebuffers">[length: n] 
            /// Specifies an array in which the generated framebuffer object names are stored.
            /// </param>
            [CLSCompliant(false)]
            public static void GenFramebuffers(Int32 n, [OutAttribute] out UInt32 framebuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "framebuffers_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("framebuffers_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("framebuffers_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(129);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_framebuffer_object]
            /// Generate framebuffer object names
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of framebuffer object names to be generated.
            /// </param>
            /// <param name="framebuffers">[length: n] 
            /// Specifies an array in which the generated framebuffer object names are stored.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void GenFramebuffers(Int32 n, [OutAttribute] UInt32* framebuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(129);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_framebuffer_object]
            /// Generate renderbuffer object names
            /// </summary>
            [CLSCompliant(false)]
            public static Int32 GenRenderbuffer()
            {
                unsafe
                {
                    Int32 __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Int32 __result = default(Int32);
                        Silk.Cil.Ldc_I4(1);
                        Silk.Cil.LoadAddress(__result);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(130);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                        Silk.Cil.Load(__result);
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_framebuffer_object]
            /// Generate renderbuffer object names
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of renderbuffer object names to be generated.
            /// </param>
            /// <param name="renderbuffers">[length: n] 
            /// Specifies an array in which the generated renderbuffer object names are stored.
            /// </param>
            [CLSCompliant(false)]
            public static void GenRenderbuffers(Int32 n, [OutAttribute] Int32[] renderbuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "renderbuffers_pinned");
                        if(renderbuffers != null && renderbuffers.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("renderbuffers_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("renderbuffers_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("renderbuffers_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(130);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_framebuffer_object]
            /// Generate renderbuffer object names
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of renderbuffer object names to be generated.
            /// </param>
            /// <param name="renderbuffers">[length: n] 
            /// Specifies an array in which the generated renderbuffer object names are stored.
            /// </param>
            [CLSCompliant(false)]
            public static void GenRenderbuffers(Int32 n, [OutAttribute] out Int32 renderbuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "renderbuffers_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("renderbuffers_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("renderbuffers_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(130);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_framebuffer_object]
            /// Generate renderbuffer object names
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of renderbuffer object names to be generated.
            /// </param>
            /// <param name="renderbuffers">[length: n] 
            /// Specifies an array in which the generated renderbuffer object names are stored.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void GenRenderbuffers(Int32 n, [OutAttribute] Int32* renderbuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(130);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_framebuffer_object]
            /// Generate renderbuffer object names
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of renderbuffer object names to be generated.
            /// </param>
            /// <param name="renderbuffers">[length: n] 
            /// Specifies an array in which the generated renderbuffer object names are stored.
            /// </param>
            [CLSCompliant(false)]
            public static void GenRenderbuffers(Int32 n, [OutAttribute] UInt32[] renderbuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "renderbuffers_pinned");
                        if(renderbuffers != null && renderbuffers.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("renderbuffers_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("renderbuffers_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("renderbuffers_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(130);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_framebuffer_object]
            /// Generate renderbuffer object names
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of renderbuffer object names to be generated.
            /// </param>
            /// <param name="renderbuffers">[length: n] 
            /// Specifies an array in which the generated renderbuffer object names are stored.
            /// </param>
            [CLSCompliant(false)]
            public static void GenRenderbuffers(Int32 n, [OutAttribute] out UInt32 renderbuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "renderbuffers_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("renderbuffers_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("renderbuffers_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(130);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_framebuffer_object]
            /// Generate renderbuffer object names
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of renderbuffer object names to be generated.
            /// </param>
            /// <param name="renderbuffers">[length: n] 
            /// Specifies an array in which the generated renderbuffer object names are stored.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void GenRenderbuffers(Int32 n, [OutAttribute] UInt32* renderbuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(130);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_vertex_array_object]
            /// Generate vertex array object names
            /// </summary>
            [CLSCompliant(false)]
            public static Int32 GenVertexArray()
            {
                unsafe
                {
                    Int32 __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Int32 __result = default(Int32);
                        Silk.Cil.Ldc_I4(1);
                        Silk.Cil.LoadAddress(__result);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(132);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                        Silk.Cil.Load(__result);
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_vertex_array_object]
            /// Generate vertex array object names
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of vertex array object names to generate.
            /// </param>
            /// <param name="arrays">[length: n] 
            /// Specifies an array in which the generated vertex array object names are stored.
            /// </param>
            [CLSCompliant(false)]
            public static void GenVertexArrays(Int32 n, [OutAttribute] Int32[] arrays)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "arrays_pinned");
                        if(arrays != null && arrays.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("arrays_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("arrays_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("arrays_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(132);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_vertex_array_object]
            /// Generate vertex array object names
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of vertex array object names to generate.
            /// </param>
            /// <param name="arrays">[length: n] 
            /// Specifies an array in which the generated vertex array object names are stored.
            /// </param>
            [CLSCompliant(false)]
            public static void GenVertexArrays(Int32 n, [OutAttribute] out Int32 arrays)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "arrays_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("arrays_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("arrays_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(132);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_vertex_array_object]
            /// Generate vertex array object names
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of vertex array object names to generate.
            /// </param>
            /// <param name="arrays">[length: n] 
            /// Specifies an array in which the generated vertex array object names are stored.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void GenVertexArrays(Int32 n, [OutAttribute] Int32* arrays)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(132);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_vertex_array_object]
            /// Generate vertex array object names
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of vertex array object names to generate.
            /// </param>
            /// <param name="arrays">[length: n] 
            /// Specifies an array in which the generated vertex array object names are stored.
            /// </param>
            [CLSCompliant(false)]
            public static void GenVertexArrays(Int32 n, [OutAttribute] UInt32[] arrays)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "arrays_pinned");
                        if(arrays != null && arrays.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("arrays_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("arrays_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("arrays_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(132);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_vertex_array_object]
            /// Generate vertex array object names
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of vertex array object names to generate.
            /// </param>
            /// <param name="arrays">[length: n] 
            /// Specifies an array in which the generated vertex array object names are stored.
            /// </param>
            [CLSCompliant(false)]
            public static void GenVertexArrays(Int32 n, [OutAttribute] out UInt32 arrays)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "arrays_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("arrays_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("arrays_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(132);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_vertex_array_object]
            /// Generate vertex array object names
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of vertex array object names to generate.
            /// </param>
            /// <param name="arrays">[length: n] 
            /// Specifies an array in which the generated vertex array object names are stored.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void GenVertexArrays(Int32 n, [OutAttribute] UInt32* arrays)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(132);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_mapbuffer]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            public static void GetBufferPointer(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute] IntPtr @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(135);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_mapbuffer]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [CLSCompliant(false)]
            public static void GetBufferPointer<T2>(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [InAttribute, OutAttribute] T2[] @params)
                where T2 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T2& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T2");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(135);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_mapbuffer]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [CLSCompliant(false)]
            public static void GetBufferPointer<T2>(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [InAttribute, OutAttribute] T2[,] @params)
                where T2 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T2& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T2[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(135);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_mapbuffer]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [CLSCompliant(false)]
            public static void GetBufferPointer<T2>(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [InAttribute, OutAttribute] T2[,,] @params)
                where T2 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T2& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T2[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(135);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_mapbuffer]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            public static void GetBufferPointer<T2>(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [InAttribute, OutAttribute] ref T2 @params)
                where T2 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T2& pinned", "params_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(135);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_single_precision]
            /// Return the coefficients of the specified clipping plane
            /// </summary>
            /// <param name="plane"> 
            /// Specifies a clipping plane. The number of clipping planes depends on the implementation, but at least six clipping planes are supported. They are identified by symbolic names of the form ClipPlane  where i ranges from 0 to the value of MaxClipPlanes - 1.
            /// </param>
            /// <param name="equation">[length: 4] 
            /// Returns four double-precision values that are the coefficients of the plane equation of plane in eye coordinates. The initial value is (0, 0, 0, 0).
            /// </param>
            [CLSCompliant(false)]
            public static void GetClipPlane(OpenTK.Graphics.ES11.All plane, [OutAttribute] Single[] equation)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "equation_pinned");
                        if(equation != null && equation.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Single");
                            Silk.Cil.StoreByName("equation_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("equation_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("equation_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(137);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_single_precision]
            /// Return the coefficients of the specified clipping plane
            /// </summary>
            /// <param name="plane"> 
            /// Specifies a clipping plane. The number of clipping planes depends on the implementation, but at least six clipping planes are supported. They are identified by symbolic names of the form ClipPlane  where i ranges from 0 to the value of MaxClipPlanes - 1.
            /// </param>
            /// <param name="equation">[length: 4] 
            /// Returns four double-precision values that are the coefficients of the plane equation of plane in eye coordinates. The initial value is (0, 0, 0, 0).
            /// </param>
            [CLSCompliant(false)]
            public static void GetClipPlane(OpenTK.Graphics.ES11.All plane, [OutAttribute] out Single equation)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "equation_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("equation_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("equation_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(137);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_single_precision]
            /// Return the coefficients of the specified clipping plane
            /// </summary>
            /// <param name="plane"> 
            /// Specifies a clipping plane. The number of clipping planes depends on the implementation, but at least six clipping planes are supported. They are identified by symbolic names of the form ClipPlane  where i ranges from 0 to the value of MaxClipPlanes - 1.
            /// </param>
            /// <param name="equation">[length: 4] 
            /// Returns four double-precision values that are the coefficients of the plane equation of plane in eye coordinates. The initial value is (0, 0, 0, 0).
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void GetClipPlane(OpenTK.Graphics.ES11.All plane, [OutAttribute] Single* equation)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(137);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="plane"></param>
            /// <param name="equation">[length: 4]</param>
            [CLSCompliant(false)]
            public static void GetClipPlanex(OpenTK.Graphics.ES11.All plane, [OutAttribute] Int32[] equation)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "equation_pinned");
                        if(equation != null && equation.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("equation_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("equation_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("equation_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(139);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="plane"></param>
            /// <param name="equation">[length: 4]</param>
            [CLSCompliant(false)]
            public static void GetClipPlanex(OpenTK.Graphics.ES11.All plane, [OutAttribute] out Int32 equation)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "equation_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("equation_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("equation_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(139);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="plane"></param>
            /// <param name="equation">[length: 4]</param>
            [CLSCompliant(false)]
            public static unsafe void GetClipPlanex(OpenTK.Graphics.ES11.All plane, [OutAttribute] Int32* equation)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(139);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static void GetConvolutionParameterx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(140);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static void GetConvolutionParameterx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(140);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static unsafe void GetConvolutionParameterx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute] Int32* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(140);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="pname"></param>
            [CLSCompliant(false)]
            public static Int32 GetFixed(OpenTK.Graphics.ES11.All pname)
            {
                unsafe
                {
                    Int32 __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Int32 __result = default(Int32);
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadAddress(__result);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(146);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                        Silk.Cil.Load(__result);
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static void GetFixed(OpenTK.Graphics.ES11.All pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(146);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static void GetFixed(OpenTK.Graphics.ES11.All pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(146);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static unsafe void GetFixed(OpenTK.Graphics.ES11.All pname, [OutAttribute] Int32* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(146);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_framebuffer_object]
            /// Retrieve information about attachments of a bound framebuffer object
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target of the query operation.
            /// </param>
            /// <param name="attachment"> 
            /// Specifies the attachment within target
            /// </param>
            /// <param name="pname"> 
            /// Specifies the parameter of attachment to query.
            /// </param>
            /// <param name="@params">[length: pname] 
            /// Specifies the address of a variable receive the value of pname for attachment.
            /// </param>
            [CLSCompliant(false)]
            public static void GetFramebufferAttachmentParameter(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All attachment, OpenTK.Graphics.ES11.All pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(148);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_framebuffer_object]
            /// Retrieve information about attachments of a bound framebuffer object
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target of the query operation.
            /// </param>
            /// <param name="attachment"> 
            /// Specifies the attachment within target
            /// </param>
            /// <param name="pname"> 
            /// Specifies the parameter of attachment to query.
            /// </param>
            /// <param name="@params">[length: pname] 
            /// Specifies the address of a variable receive the value of pname for attachment.
            /// </param>
            [CLSCompliant(false)]
            public static void GetFramebufferAttachmentParameter(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All attachment, OpenTK.Graphics.ES11.All pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(148);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_framebuffer_object]
            /// Retrieve information about attachments of a bound framebuffer object
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target of the query operation.
            /// </param>
            /// <param name="attachment"> 
            /// Specifies the attachment within target
            /// </param>
            /// <param name="pname"> 
            /// Specifies the parameter of attachment to query.
            /// </param>
            /// <param name="@params">[length: pname] 
            /// Specifies the address of a variable receive the value of pname for attachment.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void GetFramebufferAttachmentParameter(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All attachment, OpenTK.Graphics.ES11.All pname, [OutAttribute] Int32* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(148);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static void GetHistogramParameterx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(150);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static void GetHistogramParameterx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(150);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static unsafe void GetHistogramParameterx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute] Int32* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(150);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="light"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static void GetLightx(OpenTK.Graphics.ES11.All light, OpenTK.Graphics.ES11.All pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(154);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="light"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static void GetLightx(OpenTK.Graphics.ES11.All light, OpenTK.Graphics.ES11.All pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(154);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="light"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static unsafe void GetLightx(OpenTK.Graphics.ES11.All light, OpenTK.Graphics.ES11.All pname, [OutAttribute] Int32* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(154);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="target"></param>
            /// <param name="query"></param>
            /// <param name="v">[length: query]</param>
            [CLSCompliant(false)]
            public static void GetMapx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All query, [OutAttribute] Int32[] v)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "v_pinned");
                        if(v != null && v.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("v_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("v_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("v_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(157);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="target"></param>
            /// <param name="query"></param>
            /// <param name="v">[length: query]</param>
            [CLSCompliant(false)]
            public static void GetMapx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All query, [OutAttribute] out Int32 v)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "v_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("v_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("v_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(157);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="target"></param>
            /// <param name="query"></param>
            /// <param name="v">[length: query]</param>
            [CLSCompliant(false)]
            public static unsafe void GetMapx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All query, [OutAttribute] Int32* v)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(157);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="face"></param>
            /// <param name="pname"></param>
            /// <param name="param"></param>
            public static void GetMaterialx(OpenTK.Graphics.ES11.All face, OpenTK.Graphics.ES11.All pname, Int32 param)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(159);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="face"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static void GetMaterialx(OpenTK.Graphics.ES11.All face, OpenTK.Graphics.ES11.All pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(161);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="face"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static unsafe void GetMaterialx(OpenTK.Graphics.ES11.All face, OpenTK.Graphics.ES11.All pname, [OutAttribute] Int32* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(161);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_framebuffer_object]
            /// Retrieve information about a bound renderbuffer object
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target of the query operation. target must be Renderbuffer.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the parameter whose value to retrieve from the renderbuffer bound to target.
            /// </param>
            /// <param name="@params">[length: pname] 
            /// Specifies the address of an array to receive the value of the queried parameter.
            /// </param>
            [CLSCompliant(false)]
            public static void GetRenderbufferParameter(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(166);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_framebuffer_object]
            /// Retrieve information about a bound renderbuffer object
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target of the query operation. target must be Renderbuffer.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the parameter whose value to retrieve from the renderbuffer bound to target.
            /// </param>
            /// <param name="@params">[length: pname] 
            /// Specifies the address of an array to receive the value of the queried parameter.
            /// </param>
            [CLSCompliant(false)]
            public static void GetRenderbufferParameter(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(166);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_framebuffer_object]
            /// Retrieve information about a bound renderbuffer object
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target of the query operation. target must be Renderbuffer.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the parameter whose value to retrieve from the renderbuffer bound to target.
            /// </param>
            /// <param name="@params">[length: pname] 
            /// Specifies the address of an array to receive the value of the queried parameter.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void GetRenderbufferParameter(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute] Int32* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(166);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static void GetTexEnvx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(172);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static void GetTexEnvx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(172);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static unsafe void GetTexEnvx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute] Int32* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(172);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_cube_map]
            /// Return texture coordinate generation parameters
            /// </summary>
            /// <param name="coord"> 
            /// Specifies a texture coordinate. Must be S, T, R, or Q.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of the value(s) to be returned. Must be either TextureGenMode or the name of one of the texture generation plane equations: ObjectPlane or EyePlane.
            /// </param>
            /// <param name="@params">[length: pname] 
            /// Returns the requested data.
            /// </param>
            [CLSCompliant(false)]
            public static void GetTexGen(OpenTK.Graphics.ES11.All coord, OpenTK.Graphics.ES11.All pname, [OutAttribute] Single[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Single");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(173);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_cube_map]
            /// Return texture coordinate generation parameters
            /// </summary>
            /// <param name="coord"> 
            /// Specifies a texture coordinate. Must be S, T, R, or Q.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of the value(s) to be returned. Must be either TextureGenMode or the name of one of the texture generation plane equations: ObjectPlane or EyePlane.
            /// </param>
            /// <param name="@params">[length: pname] 
            /// Returns the requested data.
            /// </param>
            [CLSCompliant(false)]
            public static void GetTexGen(OpenTK.Graphics.ES11.All coord, OpenTK.Graphics.ES11.All pname, [OutAttribute] out Single @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(173);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_cube_map]
            /// Return texture coordinate generation parameters
            /// </summary>
            /// <param name="coord"> 
            /// Specifies a texture coordinate. Must be S, T, R, or Q.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of the value(s) to be returned. Must be either TextureGenMode or the name of one of the texture generation plane equations: ObjectPlane or EyePlane.
            /// </param>
            /// <param name="@params">[length: pname] 
            /// Returns the requested data.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void GetTexGen(OpenTK.Graphics.ES11.All coord, OpenTK.Graphics.ES11.All pname, [OutAttribute] Single* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(173);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_cube_map]
            /// Return texture coordinate generation parameters
            /// </summary>
            /// <param name="coord"> 
            /// Specifies a texture coordinate. Must be S, T, R, or Q.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of the value(s) to be returned. Must be either TextureGenMode or the name of one of the texture generation plane equations: ObjectPlane or EyePlane.
            /// </param>
            /// <param name="@params">[length: pname] 
            /// Returns the requested data.
            /// </param>
            [CLSCompliant(false)]
            public static void GetTexGen(OpenTK.Graphics.ES11.All coord, OpenTK.Graphics.ES11.All pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(174);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_cube_map]
            /// Return texture coordinate generation parameters
            /// </summary>
            /// <param name="coord"> 
            /// Specifies a texture coordinate. Must be S, T, R, or Q.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of the value(s) to be returned. Must be either TextureGenMode or the name of one of the texture generation plane equations: ObjectPlane or EyePlane.
            /// </param>
            /// <param name="@params">[length: pname] 
            /// Returns the requested data.
            /// </param>
            [CLSCompliant(false)]
            public static void GetTexGen(OpenTK.Graphics.ES11.All coord, OpenTK.Graphics.ES11.All pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(174);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_cube_map]
            /// Return texture coordinate generation parameters
            /// </summary>
            /// <param name="coord"> 
            /// Specifies a texture coordinate. Must be S, T, R, or Q.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of the value(s) to be returned. Must be either TextureGenMode or the name of one of the texture generation plane equations: ObjectPlane or EyePlane.
            /// </param>
            /// <param name="@params">[length: pname] 
            /// Returns the requested data.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void GetTexGen(OpenTK.Graphics.ES11.All coord, OpenTK.Graphics.ES11.All pname, [OutAttribute] Int32* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(174);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point|OES_texture_cube_map]</summary>
            /// <param name="coord"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static void GetTexGenx(OpenTK.Graphics.ES11.All coord, OpenTK.Graphics.ES11.All pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(175);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point|OES_texture_cube_map]</summary>
            /// <param name="coord"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static void GetTexGenx(OpenTK.Graphics.ES11.All coord, OpenTK.Graphics.ES11.All pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(175);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point|OES_texture_cube_map]</summary>
            /// <param name="coord"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static unsafe void GetTexGenx(OpenTK.Graphics.ES11.All coord, OpenTK.Graphics.ES11.All pname, [OutAttribute] Int32* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(175);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="target"></param>
            /// <param name="level"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static void GetTexLevelParameterx(OpenTK.Graphics.ES11.All target, Int32 level, OpenTK.Graphics.ES11.All pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(176);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="target"></param>
            /// <param name="level"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static void GetTexLevelParameterx(OpenTK.Graphics.ES11.All target, Int32 level, OpenTK.Graphics.ES11.All pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(176);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="target"></param>
            /// <param name="level"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static unsafe void GetTexLevelParameterx(OpenTK.Graphics.ES11.All target, Int32 level, OpenTK.Graphics.ES11.All pname, [OutAttribute] Int32* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(176);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static void GetTexParameterx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(180);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static void GetTexParameterx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(180);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static unsafe void GetTexParameterx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute] Int32* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(180);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="component"></param>
            public static void Indexx(Int32 component)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(182);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="component">[length: 1]</param>
            [CLSCompliant(false)]
            public static unsafe void Indexx(Int32* component)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(183);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_framebuffer_object]
            /// Determine if a name corresponds to a framebuffer object
            /// </summary>
            /// <param name="framebuffer"> 
            /// Specifies a value that may be the name of a framebuffer object.
            /// </param>
            [CLSCompliant(false)]
            public static bool IsFramebuffer(Int32 framebuffer)
            {
                unsafe
                {
                    bool __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(187);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(byte), typeof(UInt32));
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_framebuffer_object]
            /// Determine if a name corresponds to a framebuffer object
            /// </summary>
            /// <param name="framebuffer"> 
            /// Specifies a value that may be the name of a framebuffer object.
            /// </param>
            [CLSCompliant(false)]
            public static bool IsFramebuffer(UInt32 framebuffer)
            {
                unsafe
                {
                    bool __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(187);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(byte), typeof(UInt32));
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_framebuffer_object]
            /// Determine if a name corresponds to a renderbuffer object
            /// </summary>
            /// <param name="renderbuffer"> 
            /// Specifies a value that may be the name of a renderbuffer object.
            /// </param>
            [CLSCompliant(false)]
            public static bool IsRenderbuffer(Int32 renderbuffer)
            {
                unsafe
                {
                    bool __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(188);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(byte), typeof(UInt32));
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_framebuffer_object]
            /// Determine if a name corresponds to a renderbuffer object
            /// </summary>
            /// <param name="renderbuffer"> 
            /// Specifies a value that may be the name of a renderbuffer object.
            /// </param>
            [CLSCompliant(false)]
            public static bool IsRenderbuffer(UInt32 renderbuffer)
            {
                unsafe
                {
                    bool __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(188);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(byte), typeof(UInt32));
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_vertex_array_object]
            /// Determine if a name corresponds to a vertex array object
            /// </summary>
            /// <param name="array"> 
            /// Specifies a value that may be the name of a vertex array object.
            /// </param>
            [CLSCompliant(false)]
            public static bool IsVertexArray(Int32 array)
            {
                unsafe
                {
                    bool __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(191);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(byte), typeof(UInt32));
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_vertex_array_object]
            /// Determine if a name corresponds to a vertex array object
            /// </summary>
            /// <param name="array"> 
            /// Specifies a value that may be the name of a vertex array object.
            /// </param>
            [CLSCompliant(false)]
            public static bool IsVertexArray(UInt32 array)
            {
                unsafe
                {
                    bool __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(191);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(byte), typeof(UInt32));
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="pname"></param>
            /// <param name="param"></param>
            public static void LightModelx(OpenTK.Graphics.ES11.All pname, Int32 param)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(197);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="pname"></param>
            /// <param name="param">[length: pname]</param>
            [CLSCompliant(false)]
            public static void LightModelx(OpenTK.Graphics.ES11.All pname, Int32[] param)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "param_pinned");
                        if(param != null && param.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("param_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("param_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("param_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(199);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="pname"></param>
            /// <param name="param">[length: pname]</param>
            [CLSCompliant(false)]
            public static unsafe void LightModelx(OpenTK.Graphics.ES11.All pname, Int32* param)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(199);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="light"></param>
            /// <param name="pname"></param>
            /// <param name="param"></param>
            public static void Lightx(OpenTK.Graphics.ES11.All light, OpenTK.Graphics.ES11.All pname, Int32 param)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(201);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="light"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static void Lightx(OpenTK.Graphics.ES11.All light, OpenTK.Graphics.ES11.All pname, Int32[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(203);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="light"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static unsafe void Lightx(OpenTK.Graphics.ES11.All light, OpenTK.Graphics.ES11.All pname, Int32* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(203);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="width"></param>
            public static void LineWidthx(Int32 width)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(206);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="m">[length: 16]</param>
            [CLSCompliant(false)]
            public static void LoadMatrixx(Int32[] m)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "m_pinned");
                        if(m != null && m.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("m_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("m_pinned");
                        }
                        Silk.Cil.LoadByName("m_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(210);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="m">[length: 16]</param>
            [CLSCompliant(false)]
            public static void LoadMatrixx(ref Int32 m)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "m_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("m_pinned");
                        Silk.Cil.LoadByName("m_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(210);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="m">[length: 16]</param>
            [CLSCompliant(false)]
            public static unsafe void LoadMatrixx(Int32* m)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(210);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_matrix_palette]</summary>
            public static void LoadPaletteFromModelViewMatrix()
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(211);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="m">[length: 16]</param>
            [CLSCompliant(false)]
            public static void LoadTransposeMatrixx(Int32[] m)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "m_pinned");
                        if(m != null && m.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("m_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("m_pinned");
                        }
                        Silk.Cil.LoadByName("m_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(212);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="m">[length: 16]</param>
            [CLSCompliant(false)]
            public static void LoadTransposeMatrixx(ref Int32 m)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "m_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("m_pinned");
                        Silk.Cil.LoadByName("m_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(212);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="m">[length: 16]</param>
            [CLSCompliant(false)]
            public static unsafe void LoadTransposeMatrixx(Int32* m)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(212);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="target"></param>
            /// <param name="u1"></param>
            /// <param name="u2"></param>
            /// <param name="stride"></param>
            /// <param name="order"></param>
            /// <param name="points"></param>
            public static void Map1x(OpenTK.Graphics.ES11.All target, Int32 u1, Int32 u2, Int32 stride, Int32 order, Int32 points)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(214);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="target"></param>
            /// <param name="u1"></param>
            /// <param name="u2"></param>
            /// <param name="ustride"></param>
            /// <param name="uorder"></param>
            /// <param name="v1"></param>
            /// <param name="v2"></param>
            /// <param name="vstride"></param>
            /// <param name="vorder"></param>
            /// <param name="points"></param>
            public static void Map2x(OpenTK.Graphics.ES11.All target, Int32 u1, Int32 u2, Int32 ustride, Int32 uorder, Int32 v1, Int32 v2, Int32 vstride, Int32 vorder, Int32 points)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldarg(9);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(215);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_mapbuffer]
            /// Map a buffer object's data store
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target buffer object being mapped. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer or UniformBuffer.
            /// </param>
            /// <param name="access"> 
            /// For glMapBuffer only, specifies the access policy, indicating whether it will be possible to read from, write to, or both read from and write to the buffer object's mapped data store. The symbolic constant must be ReadOnly, WriteOnly, or ReadWrite.
            /// </param>
            public static IntPtr MapBuffer(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All access)
            {
                unsafe
                {
                    IntPtr __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(216);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(IntPtr), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All));
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="n"></param>
            /// <param name="u1"></param>
            /// <param name="u2"></param>
            public static void MapGrid1x(Int32 n, Int32 u1, Int32 u2)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(218);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="n"></param>
            /// <param name="u1"></param>
            /// <param name="u2"></param>
            /// <param name="v1"></param>
            /// <param name="v2"></param>
            public static void MapGrid2x(Int32 n, Int32 u1, Int32 u2, Int32 v1, Int32 v2)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(219);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="face"></param>
            /// <param name="pname"></param>
            /// <param name="param"></param>
            public static void Materialx(OpenTK.Graphics.ES11.All face, OpenTK.Graphics.ES11.All pname, Int32 param)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(223);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="face"></param>
            /// <param name="pname"></param>
            /// <param name="param">[length: pname]</param>
            [CLSCompliant(false)]
            public static void Materialx(OpenTK.Graphics.ES11.All face, OpenTK.Graphics.ES11.All pname, Int32[] param)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "param_pinned");
                        if(param != null && param.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("param_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("param_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("param_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(225);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="face"></param>
            /// <param name="pname"></param>
            /// <param name="param">[length: pname]</param>
            [CLSCompliant(false)]
            public static unsafe void Materialx(OpenTK.Graphics.ES11.All face, OpenTK.Graphics.ES11.All pname, Int32* param)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(225);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_matrix_palette]</summary>
            /// <param name="size"></param>
            /// <param name="type"></param>
            /// <param name="stride"></param>
            /// <param name="pointer">[length: size,type,stride]</param>
            public static void MatrixIndexPointer(Int32 size, OpenTK.Graphics.ES11.All type, Int32 stride, IntPtr pointer)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(226);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_matrix_palette]</summary>
            /// <param name="size"></param>
            /// <param name="type"></param>
            /// <param name="stride"></param>
            /// <param name="pointer">[length: size,type,stride]</param>
            [CLSCompliant(false)]
            public static void MatrixIndexPointer<T3>(Int32 size, OpenTK.Graphics.ES11.All type, Int32 stride, [InAttribute, OutAttribute] T3[] pointer)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "pointer_pinned");
                        if(pointer != null && pointer.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T3");
                            Silk.Cil.StoreByName("pointer_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("pointer_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("pointer_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(226);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_matrix_palette]</summary>
            /// <param name="size"></param>
            /// <param name="type"></param>
            /// <param name="stride"></param>
            /// <param name="pointer">[length: size,type,stride]</param>
            [CLSCompliant(false)]
            public static void MatrixIndexPointer<T3>(Int32 size, OpenTK.Graphics.ES11.All type, Int32 stride, [InAttribute, OutAttribute] T3[,] pointer)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "pointer_pinned");
                        if(pointer != null && pointer.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T3[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("pointer_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("pointer_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("pointer_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(226);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_matrix_palette]</summary>
            /// <param name="size"></param>
            /// <param name="type"></param>
            /// <param name="stride"></param>
            /// <param name="pointer">[length: size,type,stride]</param>
            [CLSCompliant(false)]
            public static void MatrixIndexPointer<T3>(Int32 size, OpenTK.Graphics.ES11.All type, Int32 stride, [InAttribute, OutAttribute] T3[,,] pointer)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "pointer_pinned");
                        if(pointer != null && pointer.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T3[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("pointer_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("pointer_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("pointer_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(226);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_matrix_palette]</summary>
            /// <param name="size"></param>
            /// <param name="type"></param>
            /// <param name="stride"></param>
            /// <param name="pointer">[length: size,type,stride]</param>
            public static void MatrixIndexPointer<T3>(Int32 size, OpenTK.Graphics.ES11.All type, Int32 stride, [InAttribute, OutAttribute] ref T3 pointer)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "pointer_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("pointer_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("pointer_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(226);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture"> 
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="s"> 
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static void MultiTexCoord1(OpenTK.Graphics.ES11.All texture, Byte s)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(230);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(SByte));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture"> 
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="s"> 
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static void MultiTexCoord1(OpenTK.Graphics.ES11.All texture, SByte s)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(230);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(SByte));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture"> 
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="coords">[length: 1] 
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void MultiTexCoord1(OpenTK.Graphics.ES11.All texture, Byte* coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(231);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(SByte*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture"> 
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="coords">[length: 1] 
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void MultiTexCoord1(OpenTK.Graphics.ES11.All texture, SByte* coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(231);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(SByte*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="texture"></param>
            /// <param name="s"></param>
            public static void MultiTexCoord1x(OpenTK.Graphics.ES11.All texture, Int32 s)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(232);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="texture"></param>
            /// <param name="coords">[length: 1]</param>
            [CLSCompliant(false)]
            public static unsafe void MultiTexCoord1x(OpenTK.Graphics.ES11.All texture, Int32* coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(233);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture"> 
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="s"> 
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="t"> 
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static void MultiTexCoord2(OpenTK.Graphics.ES11.All texture, Byte s, Byte t)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(234);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(SByte), typeof(SByte));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture"> 
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="s"> 
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="t"> 
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static void MultiTexCoord2(OpenTK.Graphics.ES11.All texture, SByte s, SByte t)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(234);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(SByte), typeof(SByte));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture"> 
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="coords">[length: 2] 
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static void MultiTexCoord2(OpenTK.Graphics.ES11.All texture, Byte[] coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Byte& pinned", "coords_pinned");
                        if(coords != null && coords.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Byte");
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(235);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(SByte*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture"> 
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="coords">[length: 2] 
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static void MultiTexCoord2(OpenTK.Graphics.ES11.All texture, ref Byte coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Byte& pinned", "coords_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("coords_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(235);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(SByte*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture"> 
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="coords">[length: 2] 
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void MultiTexCoord2(OpenTK.Graphics.ES11.All texture, Byte* coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(235);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(SByte*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture"> 
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="coords">[length: 2] 
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static void MultiTexCoord2(OpenTK.Graphics.ES11.All texture, SByte[] coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.SByte& pinned", "coords_pinned");
                        if(coords != null && coords.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.SByte");
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(235);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(SByte*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture"> 
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="coords">[length: 2] 
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static void MultiTexCoord2(OpenTK.Graphics.ES11.All texture, ref SByte coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.SByte& pinned", "coords_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("coords_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(235);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(SByte*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture"> 
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="coords">[length: 2] 
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void MultiTexCoord2(OpenTK.Graphics.ES11.All texture, SByte* coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(235);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(SByte*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="texture"></param>
            /// <param name="s"></param>
            /// <param name="t"></param>
            public static void MultiTexCoord2x(OpenTK.Graphics.ES11.All texture, Int32 s, Int32 t)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(236);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="texture"></param>
            /// <param name="coords">[length: 2]</param>
            [CLSCompliant(false)]
            public static void MultiTexCoord2x(OpenTK.Graphics.ES11.All texture, Int32[] coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "coords_pinned");
                        if(coords != null && coords.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(237);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="texture"></param>
            /// <param name="coords">[length: 2]</param>
            [CLSCompliant(false)]
            public static void MultiTexCoord2x(OpenTK.Graphics.ES11.All texture, ref Int32 coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "coords_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("coords_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(237);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="texture"></param>
            /// <param name="coords">[length: 2]</param>
            [CLSCompliant(false)]
            public static unsafe void MultiTexCoord2x(OpenTK.Graphics.ES11.All texture, Int32* coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(237);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture"> 
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="s"> 
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="t"> 
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="r"> 
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static void MultiTexCoord3(OpenTK.Graphics.ES11.All texture, Byte s, Byte t, Byte r)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(238);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(SByte), typeof(SByte), typeof(SByte));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture"> 
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="s"> 
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="t"> 
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="r"> 
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static void MultiTexCoord3(OpenTK.Graphics.ES11.All texture, SByte s, SByte t, SByte r)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(238);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(SByte), typeof(SByte), typeof(SByte));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture"> 
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="coords">[length: 3] 
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static void MultiTexCoord3(OpenTK.Graphics.ES11.All texture, Byte[] coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Byte& pinned", "coords_pinned");
                        if(coords != null && coords.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Byte");
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(239);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(SByte*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture"> 
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="coords">[length: 3] 
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static void MultiTexCoord3(OpenTK.Graphics.ES11.All texture, ref Byte coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Byte& pinned", "coords_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("coords_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(239);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(SByte*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture"> 
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="coords">[length: 3] 
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void MultiTexCoord3(OpenTK.Graphics.ES11.All texture, Byte* coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(239);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(SByte*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture"> 
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="coords">[length: 3] 
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static void MultiTexCoord3(OpenTK.Graphics.ES11.All texture, SByte[] coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.SByte& pinned", "coords_pinned");
                        if(coords != null && coords.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.SByte");
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(239);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(SByte*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture"> 
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="coords">[length: 3] 
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static void MultiTexCoord3(OpenTK.Graphics.ES11.All texture, ref SByte coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.SByte& pinned", "coords_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("coords_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(239);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(SByte*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture"> 
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="coords">[length: 3] 
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void MultiTexCoord3(OpenTK.Graphics.ES11.All texture, SByte* coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(239);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(SByte*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="texture"></param>
            /// <param name="s"></param>
            /// <param name="t"></param>
            /// <param name="r"></param>
            public static void MultiTexCoord3x(OpenTK.Graphics.ES11.All texture, Int32 s, Int32 t, Int32 r)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(240);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="texture"></param>
            /// <param name="coords">[length: 3]</param>
            [CLSCompliant(false)]
            public static void MultiTexCoord3x(OpenTK.Graphics.ES11.All texture, Int32[] coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "coords_pinned");
                        if(coords != null && coords.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(241);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="texture"></param>
            /// <param name="coords">[length: 3]</param>
            [CLSCompliant(false)]
            public static void MultiTexCoord3x(OpenTK.Graphics.ES11.All texture, ref Int32 coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "coords_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("coords_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(241);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="texture"></param>
            /// <param name="coords">[length: 3]</param>
            [CLSCompliant(false)]
            public static unsafe void MultiTexCoord3x(OpenTK.Graphics.ES11.All texture, Int32* coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(241);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture"> 
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="s"> 
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="t"> 
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="r"> 
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="q"> 
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static void MultiTexCoord4(OpenTK.Graphics.ES11.All texture, Byte s, Byte t, Byte r, Byte q)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(242);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(SByte), typeof(SByte), typeof(SByte), typeof(SByte));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture"> 
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="s"> 
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="t"> 
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="r"> 
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="q"> 
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static void MultiTexCoord4(OpenTK.Graphics.ES11.All texture, SByte s, SByte t, SByte r, SByte q)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(242);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(SByte), typeof(SByte), typeof(SByte), typeof(SByte));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture"> 
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="coords">[length: 4] 
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static void MultiTexCoord4(OpenTK.Graphics.ES11.All texture, Byte[] coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Byte& pinned", "coords_pinned");
                        if(coords != null && coords.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Byte");
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(243);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(SByte*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture"> 
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="coords">[length: 4] 
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static void MultiTexCoord4(OpenTK.Graphics.ES11.All texture, ref Byte coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Byte& pinned", "coords_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("coords_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(243);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(SByte*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture"> 
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="coords">[length: 4] 
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void MultiTexCoord4(OpenTK.Graphics.ES11.All texture, Byte* coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(243);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(SByte*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture"> 
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="coords">[length: 4] 
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static void MultiTexCoord4(OpenTK.Graphics.ES11.All texture, SByte[] coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.SByte& pinned", "coords_pinned");
                        if(coords != null && coords.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.SByte");
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(243);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(SByte*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture"> 
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="coords">[length: 4] 
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static void MultiTexCoord4(OpenTK.Graphics.ES11.All texture, ref SByte coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.SByte& pinned", "coords_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("coords_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(243);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(SByte*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture"> 
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="coords">[length: 4] 
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void MultiTexCoord4(OpenTK.Graphics.ES11.All texture, SByte* coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(243);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(SByte*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="texture"></param>
            /// <param name="s"></param>
            /// <param name="t"></param>
            /// <param name="r"></param>
            /// <param name="q"></param>
            public static void MultiTexCoord4x(OpenTK.Graphics.ES11.All texture, Int32 s, Int32 t, Int32 r, Int32 q)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(246);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="texture"></param>
            /// <param name="coords">[length: 4]</param>
            [CLSCompliant(false)]
            public static void MultiTexCoord4x(OpenTK.Graphics.ES11.All texture, Int32[] coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "coords_pinned");
                        if(coords != null && coords.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(247);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="texture"></param>
            /// <param name="coords">[length: 4]</param>
            [CLSCompliant(false)]
            public static void MultiTexCoord4x(OpenTK.Graphics.ES11.All texture, ref Int32 coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "coords_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("coords_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(247);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="texture"></param>
            /// <param name="coords">[length: 4]</param>
            [CLSCompliant(false)]
            public static unsafe void MultiTexCoord4x(OpenTK.Graphics.ES11.All texture, Int32* coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(247);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="m">[length: 16]</param>
            [CLSCompliant(false)]
            public static void MultMatrixx(Int32[] m)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "m_pinned");
                        if(m != null && m.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("m_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("m_pinned");
                        }
                        Silk.Cil.LoadByName("m_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(250);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="m">[length: 16]</param>
            [CLSCompliant(false)]
            public static void MultMatrixx(ref Int32 m)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "m_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("m_pinned");
                        Silk.Cil.LoadByName("m_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(250);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="m">[length: 16]</param>
            [CLSCompliant(false)]
            public static unsafe void MultMatrixx(Int32* m)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(250);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="m">[length: 16]</param>
            [CLSCompliant(false)]
            public static void MultTransposeMatrixx(Int32[] m)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "m_pinned");
                        if(m != null && m.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("m_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("m_pinned");
                        }
                        Silk.Cil.LoadByName("m_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(251);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="m">[length: 16]</param>
            [CLSCompliant(false)]
            public static void MultTransposeMatrixx(ref Int32 m)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "m_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("m_pinned");
                        Silk.Cil.LoadByName("m_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(251);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="m">[length: 16]</param>
            [CLSCompliant(false)]
            public static unsafe void MultTransposeMatrixx(Int32* m)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(251);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="nx"></param>
            /// <param name="ny"></param>
            /// <param name="nz"></param>
            public static void Normal3x(Int32 nx, Int32 ny, Int32 nz)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(254);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="coords">[length: 3]</param>
            [CLSCompliant(false)]
            public static void Normal3x(Int32[] coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "coords_pinned");
                        if(coords != null && coords.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(255);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="coords">[length: 3]</param>
            [CLSCompliant(false)]
            public static void Normal3x(ref Int32 coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "coords_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("coords_pinned");
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(255);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="coords">[length: 3]</param>
            [CLSCompliant(false)]
            public static unsafe void Normal3x(Int32* coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(255);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_single_precision]
            /// Multiply the current matrix with an orthographic matrix
            /// </summary>
            /// <param name="l"> 
            /// Specify the coordinates for the left and right vertical clipping planes.
            /// </param>
            /// <param name="r"> 
            /// Specify the coordinates for the left and right vertical clipping planes.
            /// </param>
            /// <param name="b"> 
            /// Specify the coordinates for the bottom and top horizontal clipping planes.
            /// </param>
            /// <param name="t"> 
            /// Specify the coordinates for the bottom and top horizontal clipping planes.
            /// </param>
            /// <param name="n"> 
            /// Specify the distances to the nearer and farther depth clipping planes. These values are negative if the plane is to be behind the viewer.
            /// </param>
            /// <param name="f"> 
            /// Specify the distances to the nearer and farther depth clipping planes. These values are negative if the plane is to be behind the viewer.
            /// </param>
            public static void Ortho(Single l, Single r, Single b, Single t, Single n, Single f)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(258);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Single), typeof(Single), typeof(Single), typeof(Single), typeof(Single), typeof(Single));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="l"></param>
            /// <param name="r"></param>
            /// <param name="b"></param>
            /// <param name="t"></param>
            /// <param name="n"></param>
            /// <param name="f"></param>
            public static void Orthox(Int32 l, Int32 r, Int32 b, Int32 t, Int32 n, Int32 f)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(260);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="token"></param>
            public static void PassThroughx(Int32 token)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(261);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="pname"></param>
            /// <param name="param"></param>
            public static void PixelTransferx(OpenTK.Graphics.ES11.All pname, Int32 param)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(265);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="xfactor"></param>
            /// <param name="yfactor"></param>
            public static void PixelZoomx(Int32 xfactor, Int32 yfactor)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(266);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="pname"></param>
            /// <param name="param"></param>
            public static void PointParameterx(OpenTK.Graphics.ES11.All pname, Int32 param)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(270);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static void PointParameterx(OpenTK.Graphics.ES11.All pname, Int32[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(272);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static unsafe void PointParameterx(OpenTK.Graphics.ES11.All pname, Int32* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(272);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_point_size_array]</summary>
            /// <param name="type"></param>
            /// <param name="stride"></param>
            /// <param name="pointer">[length: type,stride]</param>
            public static void PointSizePointer(OpenTK.Graphics.ES11.All type, Int32 stride, IntPtr pointer)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(274);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_point_size_array]</summary>
            /// <param name="type"></param>
            /// <param name="stride"></param>
            /// <param name="pointer">[length: type,stride]</param>
            [CLSCompliant(false)]
            public static void PointSizePointer<T2>(OpenTK.Graphics.ES11.All type, Int32 stride, [InAttribute, OutAttribute] T2[] pointer)
                where T2 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T2& pinned", "pointer_pinned");
                        if(pointer != null && pointer.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T2");
                            Silk.Cil.StoreByName("pointer_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("pointer_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("pointer_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(274);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_point_size_array]</summary>
            /// <param name="type"></param>
            /// <param name="stride"></param>
            /// <param name="pointer">[length: type,stride]</param>
            [CLSCompliant(false)]
            public static void PointSizePointer<T2>(OpenTK.Graphics.ES11.All type, Int32 stride, [InAttribute, OutAttribute] T2[,] pointer)
                where T2 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T2& pinned", "pointer_pinned");
                        if(pointer != null && pointer.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T2[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("pointer_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("pointer_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("pointer_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(274);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_point_size_array]</summary>
            /// <param name="type"></param>
            /// <param name="stride"></param>
            /// <param name="pointer">[length: type,stride]</param>
            [CLSCompliant(false)]
            public static void PointSizePointer<T2>(OpenTK.Graphics.ES11.All type, Int32 stride, [InAttribute, OutAttribute] T2[,,] pointer)
                where T2 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T2& pinned", "pointer_pinned");
                        if(pointer != null && pointer.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T2[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("pointer_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("pointer_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("pointer_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(274);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_point_size_array]</summary>
            /// <param name="type"></param>
            /// <param name="stride"></param>
            /// <param name="pointer">[length: type,stride]</param>
            public static void PointSizePointer<T2>(OpenTK.Graphics.ES11.All type, Int32 stride, [InAttribute, OutAttribute] ref T2 pointer)
                where T2 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T2& pinned", "pointer_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("pointer_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("pointer_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(274);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="size"></param>
            public static void PointSizex(Int32 size)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(276);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="factor"></param>
            /// <param name="units"></param>
            public static void PolygonOffsetx(Int32 factor, Int32 units)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(279);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="n"></param>
            /// <param name="textures">[length: n]</param>
            /// <param name="priorities">[length: n]</param>
            [CLSCompliant(false)]
            public static void PrioritizeTexturesx(Int32 n, Int32[] textures, Int32[] priorities)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "textures_pinned");
                        if(textures != null && textures.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("textures_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("textures_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "priorities_pinned");
                        if(priorities != null && priorities.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("priorities_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("priorities_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("textures_pinned");
                        Silk.Cil.LoadByName("priorities_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(281);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="n"></param>
            /// <param name="textures">[length: n]</param>
            /// <param name="priorities">[length: n]</param>
            [CLSCompliant(false)]
            public static void PrioritizeTexturesx(Int32 n, ref Int32 textures, ref Int32 priorities)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "textures_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("textures_pinned");
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "priorities_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("priorities_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("textures_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("priorities_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(281);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="n"></param>
            /// <param name="textures">[length: n]</param>
            /// <param name="priorities">[length: n]</param>
            [CLSCompliant(false)]
            public static unsafe void PrioritizeTexturesx(Int32 n, Int32* textures, Int32* priorities)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(281);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="n"></param>
            /// <param name="textures">[length: n]</param>
            /// <param name="priorities">[length: n]</param>
            [CLSCompliant(false)]
            public static void PrioritizeTexturesx(Int32 n, UInt32[] textures, Int32[] priorities)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "textures_pinned");
                        if(textures != null && textures.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("textures_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("textures_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "priorities_pinned");
                        if(priorities != null && priorities.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("priorities_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("priorities_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("textures_pinned");
                        Silk.Cil.LoadByName("priorities_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(281);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="n"></param>
            /// <param name="textures">[length: n]</param>
            /// <param name="priorities">[length: n]</param>
            [CLSCompliant(false)]
            public static void PrioritizeTexturesx(Int32 n, ref UInt32 textures, ref Int32 priorities)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "textures_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("textures_pinned");
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "priorities_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("priorities_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("textures_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("priorities_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(281);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="n"></param>
            /// <param name="textures">[length: n]</param>
            /// <param name="priorities">[length: n]</param>
            [CLSCompliant(false)]
            public static unsafe void PrioritizeTexturesx(Int32 n, UInt32* textures, Int32* priorities)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(281);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_query_matrix]</summary>
            /// <param name="mantissa">[length: 16]</param>
            /// <param name="exponent">[length: 16]</param>
            [CLSCompliant(false)]
            public static Int32 QueryMatrixx([OutAttribute] Int32[] mantissa, [OutAttribute] Int32[] exponent)
            {
                unsafe
                {
                    Int32 __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "mantissa_pinned");
                        if(mantissa != null && mantissa.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("mantissa_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("mantissa_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "exponent_pinned");
                        if(exponent != null && exponent.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("exponent_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("exponent_pinned");
                        }
                        Silk.Cil.LoadByName("mantissa_pinned");
                        Silk.Cil.LoadByName("exponent_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(283);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(Int32), typeof(Int32*), typeof(Int32*));
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_query_matrix]</summary>
            /// <param name="mantissa">[length: 16]</param>
            /// <param name="exponent">[length: 16]</param>
            [CLSCompliant(false)]
            public static Int32 QueryMatrixx([OutAttribute] out Int32 mantissa, [OutAttribute] out Int32 exponent)
            {
                unsafe
                {
                    Int32 __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "mantissa_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("mantissa_pinned");
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "exponent_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("exponent_pinned");
                        Silk.Cil.LoadByName("mantissa_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("exponent_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(283);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(Int32), typeof(Int32*), typeof(Int32*));
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_query_matrix]</summary>
            /// <param name="mantissa">[length: 16]</param>
            /// <param name="exponent">[length: 16]</param>
            [CLSCompliant(false)]
            public static unsafe Int32 QueryMatrixx([OutAttribute] Int32* mantissa, [OutAttribute] Int32* exponent)
            {
                unsafe
                {
                    Int32 __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(283);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(Int32), typeof(Int32*), typeof(Int32*));
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="x"></param>
            /// <param name="y"></param>
            public static void RasterPos2x(Int32 x, Int32 y)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(284);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="coords">[length: 2]</param>
            [CLSCompliant(false)]
            public static void RasterPos2x(Int32[] coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "coords_pinned");
                        if(coords != null && coords.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(285);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="coords">[length: 2]</param>
            [CLSCompliant(false)]
            public static void RasterPos2x(ref Int32 coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "coords_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("coords_pinned");
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(285);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="coords">[length: 2]</param>
            [CLSCompliant(false)]
            public static unsafe void RasterPos2x(Int32* coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(285);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="z"></param>
            public static void RasterPos3x(Int32 x, Int32 y, Int32 z)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(286);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="coords">[length: 3]</param>
            [CLSCompliant(false)]
            public static void RasterPos3x(Int32[] coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "coords_pinned");
                        if(coords != null && coords.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(287);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="coords">[length: 3]</param>
            [CLSCompliant(false)]
            public static void RasterPos3x(ref Int32 coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "coords_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("coords_pinned");
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(287);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="coords">[length: 3]</param>
            [CLSCompliant(false)]
            public static unsafe void RasterPos3x(Int32* coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(287);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="z"></param>
            /// <param name="w"></param>
            public static void RasterPos4x(Int32 x, Int32 y, Int32 z, Int32 w)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(288);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="coords">[length: 4]</param>
            [CLSCompliant(false)]
            public static void RasterPos4x(Int32[] coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "coords_pinned");
                        if(coords != null && coords.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(289);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="coords">[length: 4]</param>
            [CLSCompliant(false)]
            public static void RasterPos4x(ref Int32 coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "coords_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("coords_pinned");
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(289);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="coords">[length: 4]</param>
            [CLSCompliant(false)]
            public static unsafe void RasterPos4x(Int32* coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(289);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="x1"></param>
            /// <param name="y1"></param>
            /// <param name="x2"></param>
            /// <param name="y2"></param>
            public static void Rectx(Int32 x1, Int32 y1, Int32 x2, Int32 y2)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(292);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="v1">[length: 2]</param>
            /// <param name="v2">[length: 2]</param>
            [CLSCompliant(false)]
            public static void Rectx(Int32[] v1, Int32[] v2)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "v1_pinned");
                        if(v1 != null && v1.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("v1_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("v1_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "v2_pinned");
                        if(v2 != null && v2.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("v2_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("v2_pinned");
                        }
                        Silk.Cil.LoadByName("v1_pinned");
                        Silk.Cil.LoadByName("v2_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(293);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="v1">[length: 2]</param>
            /// <param name="v2">[length: 2]</param>
            [CLSCompliant(false)]
            public static void Rectx(ref Int32 v1, ref Int32 v2)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "v1_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("v1_pinned");
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "v2_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("v2_pinned");
                        Silk.Cil.LoadByName("v1_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("v2_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(293);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="v1">[length: 2]</param>
            /// <param name="v2">[length: 2]</param>
            [CLSCompliant(false)]
            public static unsafe void Rectx(Int32* v1, Int32* v2)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(293);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_framebuffer_object]
            /// Create and initialize a renderbuffer object's data store
            /// </summary>
            /// <param name="target"> 
            /// Specifies the renderbuffer target.  The symbolic constant must be Renderbuffer.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the color-renderable, depth-renderable, or stencil-renderable format of the renderbuffer. Must be one of the following symbolic constants: Rgba4, Rgb565, Rgb5A1, DepthComponent16, or StencilIndex8.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the renderbuffer in pixels.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the renderbuffer in pixels.
            /// </param>
            public static void RenderbufferStorage(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All internalformat, Int32 width, Int32 height)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(297);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="angle"></param>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="z"></param>
            public static void Rotatex(Int32 angle, Int32 x, Int32 y, Int32 z)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(301);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]
            /// Specify multisample coverage parameters
            /// </summary>
            /// <param name="value"> 
            /// Specify a single floating-point sample coverage value.  The value is clamped to the range [0 ,1]. The initial value is 1.0.
            /// </param>
            /// <param name="invert"> 
            /// Specify a single boolean value representing if the coverage masks should be inverted.  True and False are accepted.  The initial value is False.
            /// </param>
            public static void SampleCoverage(Int32 value, bool invert)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(303);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(bool));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="value"></param>
            /// <param name="invert"></param>
            public static void SampleCoveragex(Int32 value, bool invert)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(305);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(bool));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="z"></param>
            public static void Scalex(Int32 x, Int32 y, Int32 z)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(308);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="s"> 
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static void TexCoord1(Byte s)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(317);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(SByte));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="s"> 
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static void TexCoord1(SByte s)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(317);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(SByte));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="coords">[length: 1] 
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void TexCoord1(Byte* coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(318);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(SByte*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="coords">[length: 1] 
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void TexCoord1(SByte* coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(318);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(SByte*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="s"></param>
            public static void TexCoord1x(Int32 s)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(319);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="coords">[length: 1]</param>
            [CLSCompliant(false)]
            public static unsafe void TexCoord1x(Int32* coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(320);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="s"> 
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="t"> 
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static void TexCoord2(Byte s, Byte t)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(321);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(SByte), typeof(SByte));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="s"> 
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="t"> 
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static void TexCoord2(SByte s, SByte t)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(321);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(SByte), typeof(SByte));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="coords">[length: 2] 
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static void TexCoord2(Byte[] coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Byte& pinned", "coords_pinned");
                        if(coords != null && coords.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Byte");
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(322);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(SByte*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="coords">[length: 2] 
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static void TexCoord2(ref Byte coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Byte& pinned", "coords_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("coords_pinned");
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(322);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(SByte*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="coords">[length: 2] 
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void TexCoord2(Byte* coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(322);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(SByte*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="coords">[length: 2] 
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static void TexCoord2(SByte[] coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.SByte& pinned", "coords_pinned");
                        if(coords != null && coords.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.SByte");
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(322);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(SByte*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="coords">[length: 2] 
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static void TexCoord2(ref SByte coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.SByte& pinned", "coords_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("coords_pinned");
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(322);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(SByte*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="coords">[length: 2] 
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void TexCoord2(SByte* coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(322);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(SByte*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="s"></param>
            /// <param name="t"></param>
            public static void TexCoord2x(Int32 s, Int32 t)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(323);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="coords">[length: 2]</param>
            [CLSCompliant(false)]
            public static void TexCoord2x(Int32[] coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "coords_pinned");
                        if(coords != null && coords.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(324);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="coords">[length: 2]</param>
            [CLSCompliant(false)]
            public static void TexCoord2x(ref Int32 coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "coords_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("coords_pinned");
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(324);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="coords">[length: 2]</param>
            [CLSCompliant(false)]
            public static unsafe void TexCoord2x(Int32* coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(324);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="s"> 
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="t"> 
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="r"> 
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static void TexCoord3(Byte s, Byte t, Byte r)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(325);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(SByte), typeof(SByte), typeof(SByte));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="s"> 
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="t"> 
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="r"> 
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static void TexCoord3(SByte s, SByte t, SByte r)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(325);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(SByte), typeof(SByte), typeof(SByte));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="coords">[length: 3] 
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static void TexCoord3(Byte[] coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Byte& pinned", "coords_pinned");
                        if(coords != null && coords.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Byte");
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(326);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(SByte*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="coords">[length: 3] 
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static void TexCoord3(ref Byte coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Byte& pinned", "coords_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("coords_pinned");
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(326);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(SByte*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="coords">[length: 3] 
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void TexCoord3(Byte* coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(326);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(SByte*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="coords">[length: 3] 
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static void TexCoord3(SByte[] coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.SByte& pinned", "coords_pinned");
                        if(coords != null && coords.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.SByte");
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(326);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(SByte*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="coords">[length: 3] 
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static void TexCoord3(ref SByte coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.SByte& pinned", "coords_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("coords_pinned");
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(326);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(SByte*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="coords">[length: 3] 
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void TexCoord3(SByte* coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(326);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(SByte*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="s"></param>
            /// <param name="t"></param>
            /// <param name="r"></param>
            public static void TexCoord3x(Int32 s, Int32 t, Int32 r)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(327);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="coords">[length: 3]</param>
            [CLSCompliant(false)]
            public static void TexCoord3x(Int32[] coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "coords_pinned");
                        if(coords != null && coords.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(328);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="coords">[length: 3]</param>
            [CLSCompliant(false)]
            public static void TexCoord3x(ref Int32 coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "coords_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("coords_pinned");
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(328);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="coords">[length: 3]</param>
            [CLSCompliant(false)]
            public static unsafe void TexCoord3x(Int32* coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(328);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="s"> 
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="t"> 
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="r"> 
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="q"> 
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static void TexCoord4(Byte s, Byte t, Byte r, Byte q)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(329);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(SByte), typeof(SByte), typeof(SByte), typeof(SByte));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="s"> 
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="t"> 
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="r"> 
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="q"> 
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static void TexCoord4(SByte s, SByte t, SByte r, SByte q)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(329);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(SByte), typeof(SByte), typeof(SByte), typeof(SByte));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="coords">[length: 4] 
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static void TexCoord4(Byte[] coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Byte& pinned", "coords_pinned");
                        if(coords != null && coords.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Byte");
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(330);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(SByte*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="coords">[length: 4] 
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static void TexCoord4(ref Byte coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Byte& pinned", "coords_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("coords_pinned");
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(330);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(SByte*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="coords">[length: 4] 
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void TexCoord4(Byte* coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(330);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(SByte*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="coords">[length: 4] 
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static void TexCoord4(SByte[] coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.SByte& pinned", "coords_pinned");
                        if(coords != null && coords.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.SByte");
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(330);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(SByte*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="coords">[length: 4] 
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static void TexCoord4(ref SByte coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.SByte& pinned", "coords_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("coords_pinned");
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(330);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(SByte*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="coords">[length: 4] 
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void TexCoord4(SByte* coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(330);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(SByte*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="s"></param>
            /// <param name="t"></param>
            /// <param name="r"></param>
            /// <param name="q"></param>
            public static void TexCoord4x(Int32 s, Int32 t, Int32 r, Int32 q)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(331);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="coords">[length: 4]</param>
            [CLSCompliant(false)]
            public static void TexCoord4x(Int32[] coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "coords_pinned");
                        if(coords != null && coords.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(332);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="coords">[length: 4]</param>
            [CLSCompliant(false)]
            public static void TexCoord4x(ref Int32 coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "coords_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("coords_pinned");
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(332);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="coords">[length: 4]</param>
            [CLSCompliant(false)]
            public static unsafe void TexCoord4x(Int32* coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(332);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="param"></param>
            public static void TexEnvx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, Int32 param)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(339);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static void TexEnvx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, Int32[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(341);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static unsafe void TexEnvx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, Int32* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(341);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_cube_map]
            /// Control the generation of texture coordinates
            /// </summary>
            /// <param name="coord"> 
            /// Specifies a texture coordinate. Must be one of S, T, R, or Q.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of the texture-coordinate generation function. Must be TextureGenMode.
            /// </param>
            /// <param name="param"> 
            /// Specifies a single-valued texture generation parameter, one of ObjectLinear, EyeLinear, SphereMap, NormalMap, or ReflectionMap.
            /// </param>
            public static void TexGen(OpenTK.Graphics.ES11.All coord, OpenTK.Graphics.ES11.All pname, Single param)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(342);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Single));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_cube_map]
            /// Control the generation of texture coordinates
            /// </summary>
            /// <param name="coord"> 
            /// Specifies a texture coordinate. Must be one of S, T, R, or Q.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of the texture-coordinate generation function. Must be TextureGenMode.
            /// </param>
            /// <param name="@params">[length: pname] 
            /// Specifies a single-valued texture generation parameter, one of ObjectLinear, EyeLinear, SphereMap, NormalMap, or ReflectionMap.
            /// </param>
            [CLSCompliant(false)]
            public static void TexGen(OpenTK.Graphics.ES11.All coord, OpenTK.Graphics.ES11.All pname, Single[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Single");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(343);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_cube_map]
            /// Control the generation of texture coordinates
            /// </summary>
            /// <param name="coord"> 
            /// Specifies a texture coordinate. Must be one of S, T, R, or Q.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of the texture-coordinate generation function. Must be TextureGenMode.
            /// </param>
            /// <param name="@params">[length: pname] 
            /// Specifies a single-valued texture generation parameter, one of ObjectLinear, EyeLinear, SphereMap, NormalMap, or ReflectionMap.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void TexGen(OpenTK.Graphics.ES11.All coord, OpenTK.Graphics.ES11.All pname, Single* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(343);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_cube_map]
            /// Control the generation of texture coordinates
            /// </summary>
            /// <param name="coord"> 
            /// Specifies a texture coordinate. Must be one of S, T, R, or Q.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of the texture-coordinate generation function. Must be TextureGenMode.
            /// </param>
            /// <param name="param"> 
            /// Specifies a single-valued texture generation parameter, one of ObjectLinear, EyeLinear, SphereMap, NormalMap, or ReflectionMap.
            /// </param>
            public static void TexGen(OpenTK.Graphics.ES11.All coord, OpenTK.Graphics.ES11.All pname, Int32 param)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(344);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_cube_map]
            /// Control the generation of texture coordinates
            /// </summary>
            /// <param name="coord"> 
            /// Specifies a texture coordinate. Must be one of S, T, R, or Q.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of the texture-coordinate generation function. Must be TextureGenMode.
            /// </param>
            /// <param name="@params">[length: pname] 
            /// Specifies a single-valued texture generation parameter, one of ObjectLinear, EyeLinear, SphereMap, NormalMap, or ReflectionMap.
            /// </param>
            [CLSCompliant(false)]
            public static void TexGen(OpenTK.Graphics.ES11.All coord, OpenTK.Graphics.ES11.All pname, Int32[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(345);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_cube_map]
            /// Control the generation of texture coordinates
            /// </summary>
            /// <param name="coord"> 
            /// Specifies a texture coordinate. Must be one of S, T, R, or Q.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of the texture-coordinate generation function. Must be TextureGenMode.
            /// </param>
            /// <param name="@params">[length: pname] 
            /// Specifies a single-valued texture generation parameter, one of ObjectLinear, EyeLinear, SphereMap, NormalMap, or ReflectionMap.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void TexGen(OpenTK.Graphics.ES11.All coord, OpenTK.Graphics.ES11.All pname, Int32* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(345);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point|OES_texture_cube_map]</summary>
            /// <param name="coord"></param>
            /// <param name="pname"></param>
            /// <param name="param"></param>
            public static void TexGenx(OpenTK.Graphics.ES11.All coord, OpenTK.Graphics.ES11.All pname, Int32 param)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(346);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point|OES_texture_cube_map]</summary>
            /// <param name="coord"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static void TexGenx(OpenTK.Graphics.ES11.All coord, OpenTK.Graphics.ES11.All pname, Int32[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(347);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point|OES_texture_cube_map]</summary>
            /// <param name="coord"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static unsafe void TexGenx(OpenTK.Graphics.ES11.All coord, OpenTK.Graphics.ES11.All pname, Int32* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(347);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="param"></param>
            public static void TexParameterx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, Int32 param)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(354);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static void TexParameterx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, Int32[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(356);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static unsafe void TexParameterx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, Int32* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(356);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="z"></param>
            public static void Translatex(Int32 x, Int32 y, Int32 z)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(366);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_mapbuffer]</summary>
            /// <param name="target"></param>
            public static bool UnmapBuffer(OpenTK.Graphics.ES11.All target)
            {
                unsafe
                {
                    bool __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(367);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(byte), typeof(OpenTK.Graphics.ES11.All));
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Specify a vertex
            /// </summary>
            /// <param name="x"> 
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="y"> 
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static void Vertex2(Byte x, Byte y)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(368);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(SByte), typeof(SByte));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Specify a vertex
            /// </summary>
            /// <param name="x"> 
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="y"> 
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static void Vertex2(SByte x, SByte y)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(368);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(SByte), typeof(SByte));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Specify a vertex
            /// </summary>
            /// <param name="coords">[length: 2] 
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static void Vertex2(Byte[] coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Byte& pinned", "coords_pinned");
                        if(coords != null && coords.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Byte");
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(369);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(SByte*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Specify a vertex
            /// </summary>
            /// <param name="coords">[length: 2] 
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static void Vertex2(ref Byte coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Byte& pinned", "coords_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("coords_pinned");
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(369);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(SByte*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Specify a vertex
            /// </summary>
            /// <param name="coords">[length: 2] 
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void Vertex2(Byte* coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(369);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(SByte*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Specify a vertex
            /// </summary>
            /// <param name="coords">[length: 2] 
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static void Vertex2(SByte[] coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.SByte& pinned", "coords_pinned");
                        if(coords != null && coords.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.SByte");
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(369);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(SByte*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Specify a vertex
            /// </summary>
            /// <param name="coords">[length: 2] 
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static void Vertex2(ref SByte coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.SByte& pinned", "coords_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("coords_pinned");
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(369);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(SByte*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Specify a vertex
            /// </summary>
            /// <param name="coords">[length: 2] 
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void Vertex2(SByte* coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(369);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(SByte*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="x"></param>
            public static void Vertex2x(Int32 x)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(370);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="coords">[length: 2]</param>
            [CLSCompliant(false)]
            public static void Vertex2x(Int32[] coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "coords_pinned");
                        if(coords != null && coords.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(371);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="coords">[length: 2]</param>
            [CLSCompliant(false)]
            public static unsafe void Vertex2x(Int32* coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(371);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Specify a vertex
            /// </summary>
            /// <param name="x"> 
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="y"> 
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="z"> 
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static void Vertex3(Byte x, Byte y, Byte z)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(372);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(SByte), typeof(SByte), typeof(SByte));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Specify a vertex
            /// </summary>
            /// <param name="x"> 
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="y"> 
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="z"> 
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static void Vertex3(SByte x, SByte y, SByte z)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(372);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(SByte), typeof(SByte), typeof(SByte));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Specify a vertex
            /// </summary>
            /// <param name="coords">[length: 3] 
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static void Vertex3(Byte[] coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Byte& pinned", "coords_pinned");
                        if(coords != null && coords.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Byte");
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(373);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(SByte*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Specify a vertex
            /// </summary>
            /// <param name="coords">[length: 3] 
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static void Vertex3(ref Byte coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Byte& pinned", "coords_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("coords_pinned");
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(373);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(SByte*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Specify a vertex
            /// </summary>
            /// <param name="coords">[length: 3] 
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void Vertex3(Byte* coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(373);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(SByte*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Specify a vertex
            /// </summary>
            /// <param name="coords">[length: 3] 
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static void Vertex3(SByte[] coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.SByte& pinned", "coords_pinned");
                        if(coords != null && coords.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.SByte");
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(373);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(SByte*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Specify a vertex
            /// </summary>
            /// <param name="coords">[length: 3] 
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static void Vertex3(ref SByte coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.SByte& pinned", "coords_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("coords_pinned");
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(373);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(SByte*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Specify a vertex
            /// </summary>
            /// <param name="coords">[length: 3] 
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void Vertex3(SByte* coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(373);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(SByte*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="x"></param>
            /// <param name="y"></param>
            public static void Vertex3x(Int32 x, Int32 y)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(374);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="coords">[length: 3]</param>
            [CLSCompliant(false)]
            public static void Vertex3x(Int32[] coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "coords_pinned");
                        if(coords != null && coords.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(375);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="coords">[length: 3]</param>
            [CLSCompliant(false)]
            public static void Vertex3x(ref Int32 coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "coords_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("coords_pinned");
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(375);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="coords">[length: 3]</param>
            [CLSCompliant(false)]
            public static unsafe void Vertex3x(Int32* coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(375);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Specify a vertex
            /// </summary>
            /// <param name="x"> 
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="y"> 
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="z"> 
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="w"> 
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static void Vertex4(Byte x, Byte y, Byte z, Byte w)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(376);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(SByte), typeof(SByte), typeof(SByte), typeof(SByte));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Specify a vertex
            /// </summary>
            /// <param name="x"> 
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="y"> 
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="z"> 
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="w"> 
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static void Vertex4(SByte x, SByte y, SByte z, SByte w)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(376);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(SByte), typeof(SByte), typeof(SByte), typeof(SByte));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Specify a vertex
            /// </summary>
            /// <param name="coords">[length: 4] 
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static void Vertex4(Byte[] coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Byte& pinned", "coords_pinned");
                        if(coords != null && coords.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Byte");
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(377);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(SByte*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Specify a vertex
            /// </summary>
            /// <param name="coords">[length: 4] 
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static void Vertex4(ref Byte coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Byte& pinned", "coords_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("coords_pinned");
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(377);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(SByte*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Specify a vertex
            /// </summary>
            /// <param name="coords">[length: 4] 
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void Vertex4(Byte* coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(377);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(SByte*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Specify a vertex
            /// </summary>
            /// <param name="coords">[length: 4] 
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static void Vertex4(SByte[] coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.SByte& pinned", "coords_pinned");
                        if(coords != null && coords.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.SByte");
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(377);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(SByte*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Specify a vertex
            /// </summary>
            /// <param name="coords">[length: 4] 
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static void Vertex4(ref SByte coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.SByte& pinned", "coords_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("coords_pinned");
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(377);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(SByte*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_byte_coordinates]
            /// Specify a vertex
            /// </summary>
            /// <param name="coords">[length: 4] 
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void Vertex4(SByte* coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(377);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(SByte*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="z"></param>
            public static void Vertex4x(Int32 x, Int32 y, Int32 z)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(378);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="coords">[length: 4]</param>
            [CLSCompliant(false)]
            public static void Vertex4x(Int32[] coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "coords_pinned");
                        if(coords != null && coords.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("coords_pinned");
                        }
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(379);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="coords">[length: 4]</param>
            [CLSCompliant(false)]
            public static void Vertex4x(ref Int32 coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "coords_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("coords_pinned");
                        Silk.Cil.LoadByName("coords_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(379);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_fixed_point]</summary>
            /// <param name="coords">[length: 4]</param>
            [CLSCompliant(false)]
            public static unsafe void Vertex4x(Int32* coords)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(379);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_matrix_palette]</summary>
            /// <param name="size"></param>
            /// <param name="type"></param>
            /// <param name="stride"></param>
            /// <param name="pointer">[length: type,stride]</param>
            public static void WeightPointer(Int32 size, OpenTK.Graphics.ES11.All type, Int32 stride, IntPtr pointer)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(383);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_matrix_palette]</summary>
            /// <param name="size"></param>
            /// <param name="type"></param>
            /// <param name="stride"></param>
            /// <param name="pointer">[length: type,stride]</param>
            [CLSCompliant(false)]
            public static void WeightPointer<T3>(Int32 size, OpenTK.Graphics.ES11.All type, Int32 stride, [InAttribute, OutAttribute] T3[] pointer)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "pointer_pinned");
                        if(pointer != null && pointer.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T3");
                            Silk.Cil.StoreByName("pointer_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("pointer_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("pointer_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(383);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_matrix_palette]</summary>
            /// <param name="size"></param>
            /// <param name="type"></param>
            /// <param name="stride"></param>
            /// <param name="pointer">[length: type,stride]</param>
            [CLSCompliant(false)]
            public static void WeightPointer<T3>(Int32 size, OpenTK.Graphics.ES11.All type, Int32 stride, [InAttribute, OutAttribute] T3[,] pointer)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "pointer_pinned");
                        if(pointer != null && pointer.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T3[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("pointer_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("pointer_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("pointer_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(383);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_matrix_palette]</summary>
            /// <param name="size"></param>
            /// <param name="type"></param>
            /// <param name="stride"></param>
            /// <param name="pointer">[length: type,stride]</param>
            [CLSCompliant(false)]
            public static void WeightPointer<T3>(Int32 size, OpenTK.Graphics.ES11.All type, Int32 stride, [InAttribute, OutAttribute] T3[,,] pointer)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "pointer_pinned");
                        if(pointer != null && pointer.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T3[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("pointer_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("pointer_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("pointer_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(383);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_matrix_palette]</summary>
            /// <param name="size"></param>
            /// <param name="type"></param>
            /// <param name="stride"></param>
            /// <param name="pointer">[length: type,stride]</param>
            public static void WeightPointer<T3>(Int32 size, OpenTK.Graphics.ES11.All type, Int32 stride, [InAttribute, OutAttribute] ref T3 pointer)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "pointer_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("pointer_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("pointer_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(383);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

        }

        public static partial class Qcom
        {
            /// <summary>[requires: QCOM_driver_control]</summary>
            /// <param name="driverControl"></param>
            [CLSCompliant(false)]
            public static void DisableDriverControl(Int32 driverControl)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(71);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_driver_control]</summary>
            /// <param name="driverControl"></param>
            [CLSCompliant(false)]
            public static void DisableDriverControl(UInt32 driverControl)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(71);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_driver_control]</summary>
            /// <param name="driverControl"></param>
            [CLSCompliant(false)]
            public static void EnableDriverControl(Int32 driverControl)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(87);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_driver_control]</summary>
            /// <param name="driverControl"></param>
            [CLSCompliant(false)]
            public static void EnableDriverControl(UInt32 driverControl)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(87);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_tiled_rendering]</summary>
            /// <param name="preserveMask"></param>
            [CLSCompliant(false)]
            public static void EndTiling(Int32 preserveMask)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(88);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_tiled_rendering]</summary>
            /// <param name="preserveMask"></param>
            [CLSCompliant(false)]
            public static void EndTiling(UInt32 preserveMask)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(88);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="target"></param>
            /// <param name="@params"></param>
            public static void ExtGetBufferPointer(OpenTK.Graphics.ES11.All target, [OutAttribute] IntPtr @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(93);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="target"></param>
            /// <param name="@params"></param>
            [CLSCompliant(false)]
            public static void ExtGetBufferPointer<T1>(OpenTK.Graphics.ES11.All target, [InAttribute, OutAttribute] T1[] @params)
                where T1 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T1& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T1");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(93);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="target"></param>
            /// <param name="@params"></param>
            [CLSCompliant(false)]
            public static void ExtGetBufferPointer<T1>(OpenTK.Graphics.ES11.All target, [InAttribute, OutAttribute] T1[,] @params)
                where T1 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T1& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T1[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(93);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="target"></param>
            /// <param name="@params"></param>
            [CLSCompliant(false)]
            public static void ExtGetBufferPointer<T1>(OpenTK.Graphics.ES11.All target, [InAttribute, OutAttribute] T1[,,] @params)
                where T1 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T1& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T1[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(93);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="target"></param>
            /// <param name="@params"></param>
            public static void ExtGetBufferPointer<T1>(OpenTK.Graphics.ES11.All target, [InAttribute, OutAttribute] ref T1 @params)
                where T1 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T1& pinned", "params_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(93);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="buffers">[length: maxBuffers]</param>
            /// <param name="maxBuffers"></param>
            /// <param name="numBuffers">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void ExtGetBuffers([OutAttribute] Int32[] buffers, Int32 maxBuffers, [OutAttribute] Int32[] numBuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "buffers_pinned");
                        if(buffers != null && buffers.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("buffers_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("buffers_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numBuffers_pinned");
                        if(numBuffers != null && numBuffers.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("numBuffers_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("numBuffers_pinned");
                        }
                        Silk.Cil.LoadByName("buffers_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numBuffers_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(94);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="buffers">[length: maxBuffers]</param>
            /// <param name="maxBuffers"></param>
            /// <param name="numBuffers">[length: 1]</param>
            [CLSCompliant(false)]
            public static void ExtGetBuffers([OutAttribute] Int32[] buffers, Int32 maxBuffers, [OutAttribute] out Int32 numBuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "buffers_pinned");
                        if(buffers != null && buffers.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("buffers_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("buffers_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numBuffers_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("numBuffers_pinned");
                        Silk.Cil.LoadByName("buffers_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numBuffers_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(94);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="buffers">[length: maxBuffers]</param>
            /// <param name="maxBuffers"></param>
            /// <param name="numBuffers">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void ExtGetBuffers([OutAttribute] out Int32 buffers, Int32 maxBuffers, [OutAttribute] out Int32 numBuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "buffers_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("buffers_pinned");
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numBuffers_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("numBuffers_pinned");
                        Silk.Cil.LoadByName("buffers_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numBuffers_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(94);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="buffers">[length: maxBuffers]</param>
            /// <param name="maxBuffers"></param>
            /// <param name="numBuffers">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static unsafe void ExtGetBuffers([OutAttribute] Int32* buffers, Int32 maxBuffers, [OutAttribute] Int32* numBuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(94);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="buffers">[length: maxBuffers]</param>
            /// <param name="maxBuffers"></param>
            /// <param name="numBuffers">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void ExtGetBuffers([OutAttribute] UInt32[] buffers, Int32 maxBuffers, [OutAttribute] Int32[] numBuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "buffers_pinned");
                        if(buffers != null && buffers.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("buffers_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("buffers_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numBuffers_pinned");
                        if(numBuffers != null && numBuffers.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("numBuffers_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("numBuffers_pinned");
                        }
                        Silk.Cil.LoadByName("buffers_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numBuffers_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(94);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="buffers">[length: maxBuffers]</param>
            /// <param name="maxBuffers"></param>
            /// <param name="numBuffers">[length: 1]</param>
            [CLSCompliant(false)]
            public static void ExtGetBuffers([OutAttribute] UInt32[] buffers, Int32 maxBuffers, [OutAttribute] out Int32 numBuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "buffers_pinned");
                        if(buffers != null && buffers.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("buffers_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("buffers_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numBuffers_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("numBuffers_pinned");
                        Silk.Cil.LoadByName("buffers_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numBuffers_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(94);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="buffers">[length: maxBuffers]</param>
            /// <param name="maxBuffers"></param>
            /// <param name="numBuffers">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void ExtGetBuffers([OutAttribute] out UInt32 buffers, Int32 maxBuffers, [OutAttribute] out Int32 numBuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "buffers_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("buffers_pinned");
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numBuffers_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("numBuffers_pinned");
                        Silk.Cil.LoadByName("buffers_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numBuffers_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(94);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="buffers">[length: maxBuffers]</param>
            /// <param name="maxBuffers"></param>
            /// <param name="numBuffers">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static unsafe void ExtGetBuffers([OutAttribute] UInt32* buffers, Int32 maxBuffers, [OutAttribute] Int32* numBuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(94);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="framebuffers">[length: maxFramebuffers]</param>
            /// <param name="maxFramebuffers"></param>
            /// <param name="numFramebuffers">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void ExtGetFramebuffers([OutAttribute] Int32[] framebuffers, Int32 maxFramebuffers, [OutAttribute] Int32[] numFramebuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "framebuffers_pinned");
                        if(framebuffers != null && framebuffers.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("framebuffers_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("framebuffers_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numFramebuffers_pinned");
                        if(numFramebuffers != null && numFramebuffers.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("numFramebuffers_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("numFramebuffers_pinned");
                        }
                        Silk.Cil.LoadByName("framebuffers_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numFramebuffers_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(95);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="framebuffers">[length: maxFramebuffers]</param>
            /// <param name="maxFramebuffers"></param>
            /// <param name="numFramebuffers">[length: 1]</param>
            [CLSCompliant(false)]
            public static void ExtGetFramebuffers([OutAttribute] Int32[] framebuffers, Int32 maxFramebuffers, [OutAttribute] out Int32 numFramebuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "framebuffers_pinned");
                        if(framebuffers != null && framebuffers.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("framebuffers_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("framebuffers_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numFramebuffers_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("numFramebuffers_pinned");
                        Silk.Cil.LoadByName("framebuffers_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numFramebuffers_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(95);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="framebuffers">[length: maxFramebuffers]</param>
            /// <param name="maxFramebuffers"></param>
            /// <param name="numFramebuffers">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void ExtGetFramebuffers([OutAttribute] out Int32 framebuffers, Int32 maxFramebuffers, [OutAttribute] out Int32 numFramebuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "framebuffers_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("framebuffers_pinned");
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numFramebuffers_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("numFramebuffers_pinned");
                        Silk.Cil.LoadByName("framebuffers_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numFramebuffers_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(95);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="framebuffers">[length: maxFramebuffers]</param>
            /// <param name="maxFramebuffers"></param>
            /// <param name="numFramebuffers">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static unsafe void ExtGetFramebuffers([OutAttribute] Int32* framebuffers, Int32 maxFramebuffers, [OutAttribute] Int32* numFramebuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(95);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="framebuffers">[length: maxFramebuffers]</param>
            /// <param name="maxFramebuffers"></param>
            /// <param name="numFramebuffers">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void ExtGetFramebuffers([OutAttribute] UInt32[] framebuffers, Int32 maxFramebuffers, [OutAttribute] Int32[] numFramebuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "framebuffers_pinned");
                        if(framebuffers != null && framebuffers.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("framebuffers_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("framebuffers_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numFramebuffers_pinned");
                        if(numFramebuffers != null && numFramebuffers.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("numFramebuffers_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("numFramebuffers_pinned");
                        }
                        Silk.Cil.LoadByName("framebuffers_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numFramebuffers_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(95);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="framebuffers">[length: maxFramebuffers]</param>
            /// <param name="maxFramebuffers"></param>
            /// <param name="numFramebuffers">[length: 1]</param>
            [CLSCompliant(false)]
            public static void ExtGetFramebuffers([OutAttribute] UInt32[] framebuffers, Int32 maxFramebuffers, [OutAttribute] out Int32 numFramebuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "framebuffers_pinned");
                        if(framebuffers != null && framebuffers.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("framebuffers_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("framebuffers_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numFramebuffers_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("numFramebuffers_pinned");
                        Silk.Cil.LoadByName("framebuffers_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numFramebuffers_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(95);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="framebuffers">[length: maxFramebuffers]</param>
            /// <param name="maxFramebuffers"></param>
            /// <param name="numFramebuffers">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void ExtGetFramebuffers([OutAttribute] out UInt32 framebuffers, Int32 maxFramebuffers, [OutAttribute] out Int32 numFramebuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "framebuffers_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("framebuffers_pinned");
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numFramebuffers_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("numFramebuffers_pinned");
                        Silk.Cil.LoadByName("framebuffers_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numFramebuffers_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(95);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="framebuffers">[length: maxFramebuffers]</param>
            /// <param name="maxFramebuffers"></param>
            /// <param name="numFramebuffers">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static unsafe void ExtGetFramebuffers([OutAttribute] UInt32* framebuffers, Int32 maxFramebuffers, [OutAttribute] Int32* numFramebuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(95);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="program"></param>
            /// <param name="shadertype"></param>
            /// <param name="source"></param>
            /// <param name="length"></param>
            [CLSCompliant(false)]
            public static void ExtGetProgramBinarySource(Int32 program, OpenTK.Graphics.ES11.All shadertype, [OutAttribute] StringBuilder source, [OutAttribute] Int32[] length)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr source_sb_ptr = IntPtr.Zero;
                        try
                        {
                            source_sb_ptr = Marshal.AllocHGlobal(source.Capacity + 1);
                            Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                            if(length != null && length.Length != 0)
                            {
                                Silk.Cil.Ldarg(3);
                                Silk.Cil.Ldc_I4(0);
                                Silk.Cil.Ldelema("System.Int32");
                                Silk.Cil.StoreByName("length_pinned");
                            }
                            else
                            {
                                Silk.Cil.Ldc_I4(0);
                                Silk.Cil.Conv_U();
                                Silk.Cil.StoreByName("length_pinned");
                            }
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Load(source_sb_ptr);
                            Silk.Cil.LoadByName("length_pinned");
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(96);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr), typeof(Int32*));
                            MarshalPtrToStringBuilder(source_sb_ptr, source);
                        } finally {
                            Marshal.FreeHGlobal(source_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="program"></param>
            /// <param name="shadertype"></param>
            /// <param name="source"></param>
            /// <param name="length"></param>
            [CLSCompliant(false)]
            public static void ExtGetProgramBinarySource(Int32 program, OpenTK.Graphics.ES11.All shadertype, [OutAttribute] StringBuilder source, [OutAttribute] out Int32 length)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr source_sb_ptr = IntPtr.Zero;
                        try
                        {
                            source_sb_ptr = Marshal.AllocHGlobal(source.Capacity + 1);
                            Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.StoreByName("length_pinned");
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Load(source_sb_ptr);
                            Silk.Cil.LoadByName("length_pinned");
                            Silk.Cil.Conv_I();
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(96);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr), typeof(Int32*));
                            MarshalPtrToStringBuilder(source_sb_ptr, source);
                        } finally {
                            Marshal.FreeHGlobal(source_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="program"></param>
            /// <param name="shadertype"></param>
            /// <param name="source"></param>
            /// <param name="length"></param>
            [CLSCompliant(false)]
            public static unsafe void ExtGetProgramBinarySource(Int32 program, OpenTK.Graphics.ES11.All shadertype, [OutAttribute] StringBuilder source, [OutAttribute] Int32* length)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr source_sb_ptr = IntPtr.Zero;
                        try
                        {
                            source_sb_ptr = Marshal.AllocHGlobal(source.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Load(source_sb_ptr);
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(96);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr), typeof(Int32*));
                            MarshalPtrToStringBuilder(source_sb_ptr, source);
                        } finally {
                            Marshal.FreeHGlobal(source_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="program"></param>
            /// <param name="shadertype"></param>
            /// <param name="source"></param>
            /// <param name="length"></param>
            [CLSCompliant(false)]
            public static void ExtGetProgramBinarySource(UInt32 program, OpenTK.Graphics.ES11.All shadertype, [OutAttribute] StringBuilder source, [OutAttribute] Int32[] length)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr source_sb_ptr = IntPtr.Zero;
                        try
                        {
                            source_sb_ptr = Marshal.AllocHGlobal(source.Capacity + 1);
                            Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                            if(length != null && length.Length != 0)
                            {
                                Silk.Cil.Ldarg(3);
                                Silk.Cil.Ldc_I4(0);
                                Silk.Cil.Ldelema("System.Int32");
                                Silk.Cil.StoreByName("length_pinned");
                            }
                            else
                            {
                                Silk.Cil.Ldc_I4(0);
                                Silk.Cil.Conv_U();
                                Silk.Cil.StoreByName("length_pinned");
                            }
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Load(source_sb_ptr);
                            Silk.Cil.LoadByName("length_pinned");
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(96);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr), typeof(Int32*));
                            MarshalPtrToStringBuilder(source_sb_ptr, source);
                        } finally {
                            Marshal.FreeHGlobal(source_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="program"></param>
            /// <param name="shadertype"></param>
            /// <param name="source"></param>
            /// <param name="length"></param>
            [CLSCompliant(false)]
            public static void ExtGetProgramBinarySource(UInt32 program, OpenTK.Graphics.ES11.All shadertype, [OutAttribute] StringBuilder source, [OutAttribute] out Int32 length)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr source_sb_ptr = IntPtr.Zero;
                        try
                        {
                            source_sb_ptr = Marshal.AllocHGlobal(source.Capacity + 1);
                            Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.StoreByName("length_pinned");
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Load(source_sb_ptr);
                            Silk.Cil.LoadByName("length_pinned");
                            Silk.Cil.Conv_I();
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(96);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr), typeof(Int32*));
                            MarshalPtrToStringBuilder(source_sb_ptr, source);
                        } finally {
                            Marshal.FreeHGlobal(source_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="program"></param>
            /// <param name="shadertype"></param>
            /// <param name="source"></param>
            /// <param name="length"></param>
            [CLSCompliant(false)]
            public static unsafe void ExtGetProgramBinarySource(UInt32 program, OpenTK.Graphics.ES11.All shadertype, [OutAttribute] StringBuilder source, [OutAttribute] Int32* length)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr source_sb_ptr = IntPtr.Zero;
                        try
                        {
                            source_sb_ptr = Marshal.AllocHGlobal(source.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Load(source_sb_ptr);
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(96);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr), typeof(Int32*));
                            MarshalPtrToStringBuilder(source_sb_ptr, source);
                        } finally {
                            Marshal.FreeHGlobal(source_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="programs">[length: maxPrograms]</param>
            /// <param name="maxPrograms"></param>
            /// <param name="numPrograms">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void ExtGetProgram([OutAttribute] Int32[] programs, Int32 maxPrograms, [OutAttribute] Int32[] numPrograms)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "programs_pinned");
                        if(programs != null && programs.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("programs_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("programs_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numPrograms_pinned");
                        if(numPrograms != null && numPrograms.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("numPrograms_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("numPrograms_pinned");
                        }
                        Silk.Cil.LoadByName("programs_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numPrograms_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(97);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="programs">[length: maxPrograms]</param>
            /// <param name="maxPrograms"></param>
            /// <param name="numPrograms">[length: 1]</param>
            [CLSCompliant(false)]
            public static void ExtGetProgram([OutAttribute] Int32[] programs, Int32 maxPrograms, [OutAttribute] out Int32 numPrograms)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "programs_pinned");
                        if(programs != null && programs.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("programs_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("programs_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numPrograms_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("numPrograms_pinned");
                        Silk.Cil.LoadByName("programs_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numPrograms_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(97);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="programs">[length: maxPrograms]</param>
            /// <param name="maxPrograms"></param>
            /// <param name="numPrograms">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void ExtGetProgram([OutAttribute] out Int32 programs, Int32 maxPrograms, [OutAttribute] out Int32 numPrograms)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "programs_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("programs_pinned");
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numPrograms_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("numPrograms_pinned");
                        Silk.Cil.LoadByName("programs_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numPrograms_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(97);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="programs">[length: maxPrograms]</param>
            /// <param name="maxPrograms"></param>
            /// <param name="numPrograms">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static unsafe void ExtGetProgram([OutAttribute] Int32* programs, Int32 maxPrograms, [OutAttribute] Int32* numPrograms)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(97);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="programs">[length: maxPrograms]</param>
            /// <param name="maxPrograms"></param>
            /// <param name="numPrograms">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void ExtGetProgram([OutAttribute] UInt32[] programs, Int32 maxPrograms, [OutAttribute] Int32[] numPrograms)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "programs_pinned");
                        if(programs != null && programs.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("programs_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("programs_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numPrograms_pinned");
                        if(numPrograms != null && numPrograms.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("numPrograms_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("numPrograms_pinned");
                        }
                        Silk.Cil.LoadByName("programs_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numPrograms_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(97);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="programs">[length: maxPrograms]</param>
            /// <param name="maxPrograms"></param>
            /// <param name="numPrograms">[length: 1]</param>
            [CLSCompliant(false)]
            public static void ExtGetProgram([OutAttribute] UInt32[] programs, Int32 maxPrograms, [OutAttribute] out Int32 numPrograms)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "programs_pinned");
                        if(programs != null && programs.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("programs_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("programs_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numPrograms_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("numPrograms_pinned");
                        Silk.Cil.LoadByName("programs_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numPrograms_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(97);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="programs">[length: maxPrograms]</param>
            /// <param name="maxPrograms"></param>
            /// <param name="numPrograms">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void ExtGetProgram([OutAttribute] out UInt32 programs, Int32 maxPrograms, [OutAttribute] out Int32 numPrograms)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "programs_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("programs_pinned");
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numPrograms_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("numPrograms_pinned");
                        Silk.Cil.LoadByName("programs_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numPrograms_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(97);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="programs">[length: maxPrograms]</param>
            /// <param name="maxPrograms"></param>
            /// <param name="numPrograms">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static unsafe void ExtGetProgram([OutAttribute] UInt32* programs, Int32 maxPrograms, [OutAttribute] Int32* numPrograms)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(97);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="renderbuffers">[length: maxRenderbuffers]</param>
            /// <param name="maxRenderbuffers"></param>
            /// <param name="numRenderbuffers">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void ExtGetRenderbuffers([OutAttribute] Int32[] renderbuffers, Int32 maxRenderbuffers, [OutAttribute] Int32[] numRenderbuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "renderbuffers_pinned");
                        if(renderbuffers != null && renderbuffers.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("renderbuffers_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("renderbuffers_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numRenderbuffers_pinned");
                        if(numRenderbuffers != null && numRenderbuffers.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("numRenderbuffers_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("numRenderbuffers_pinned");
                        }
                        Silk.Cil.LoadByName("renderbuffers_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numRenderbuffers_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(98);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="renderbuffers">[length: maxRenderbuffers]</param>
            /// <param name="maxRenderbuffers"></param>
            /// <param name="numRenderbuffers">[length: 1]</param>
            [CLSCompliant(false)]
            public static void ExtGetRenderbuffers([OutAttribute] Int32[] renderbuffers, Int32 maxRenderbuffers, [OutAttribute] out Int32 numRenderbuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "renderbuffers_pinned");
                        if(renderbuffers != null && renderbuffers.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("renderbuffers_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("renderbuffers_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numRenderbuffers_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("numRenderbuffers_pinned");
                        Silk.Cil.LoadByName("renderbuffers_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numRenderbuffers_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(98);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="renderbuffers">[length: maxRenderbuffers]</param>
            /// <param name="maxRenderbuffers"></param>
            /// <param name="numRenderbuffers">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void ExtGetRenderbuffers([OutAttribute] out Int32 renderbuffers, Int32 maxRenderbuffers, [OutAttribute] out Int32 numRenderbuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "renderbuffers_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("renderbuffers_pinned");
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numRenderbuffers_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("numRenderbuffers_pinned");
                        Silk.Cil.LoadByName("renderbuffers_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numRenderbuffers_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(98);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="renderbuffers">[length: maxRenderbuffers]</param>
            /// <param name="maxRenderbuffers"></param>
            /// <param name="numRenderbuffers">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static unsafe void ExtGetRenderbuffers([OutAttribute] Int32* renderbuffers, Int32 maxRenderbuffers, [OutAttribute] Int32* numRenderbuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(98);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="renderbuffers">[length: maxRenderbuffers]</param>
            /// <param name="maxRenderbuffers"></param>
            /// <param name="numRenderbuffers">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void ExtGetRenderbuffers([OutAttribute] UInt32[] renderbuffers, Int32 maxRenderbuffers, [OutAttribute] Int32[] numRenderbuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "renderbuffers_pinned");
                        if(renderbuffers != null && renderbuffers.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("renderbuffers_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("renderbuffers_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numRenderbuffers_pinned");
                        if(numRenderbuffers != null && numRenderbuffers.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("numRenderbuffers_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("numRenderbuffers_pinned");
                        }
                        Silk.Cil.LoadByName("renderbuffers_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numRenderbuffers_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(98);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="renderbuffers">[length: maxRenderbuffers]</param>
            /// <param name="maxRenderbuffers"></param>
            /// <param name="numRenderbuffers">[length: 1]</param>
            [CLSCompliant(false)]
            public static void ExtGetRenderbuffers([OutAttribute] UInt32[] renderbuffers, Int32 maxRenderbuffers, [OutAttribute] out Int32 numRenderbuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "renderbuffers_pinned");
                        if(renderbuffers != null && renderbuffers.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("renderbuffers_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("renderbuffers_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numRenderbuffers_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("numRenderbuffers_pinned");
                        Silk.Cil.LoadByName("renderbuffers_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numRenderbuffers_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(98);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="renderbuffers">[length: maxRenderbuffers]</param>
            /// <param name="maxRenderbuffers"></param>
            /// <param name="numRenderbuffers">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void ExtGetRenderbuffers([OutAttribute] out UInt32 renderbuffers, Int32 maxRenderbuffers, [OutAttribute] out Int32 numRenderbuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "renderbuffers_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("renderbuffers_pinned");
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numRenderbuffers_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("numRenderbuffers_pinned");
                        Silk.Cil.LoadByName("renderbuffers_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numRenderbuffers_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(98);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="renderbuffers">[length: maxRenderbuffers]</param>
            /// <param name="maxRenderbuffers"></param>
            /// <param name="numRenderbuffers">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static unsafe void ExtGetRenderbuffers([OutAttribute] UInt32* renderbuffers, Int32 maxRenderbuffers, [OutAttribute] Int32* numRenderbuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(98);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="shaders">[length: maxShaders]</param>
            /// <param name="maxShaders"></param>
            /// <param name="numShaders">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void ExtGetShaders([OutAttribute] Int32[] shaders, Int32 maxShaders, [OutAttribute] Int32[] numShaders)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "shaders_pinned");
                        if(shaders != null && shaders.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("shaders_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("shaders_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numShaders_pinned");
                        if(numShaders != null && numShaders.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("numShaders_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("numShaders_pinned");
                        }
                        Silk.Cil.LoadByName("shaders_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numShaders_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(99);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="shaders">[length: maxShaders]</param>
            /// <param name="maxShaders"></param>
            /// <param name="numShaders">[length: 1]</param>
            [CLSCompliant(false)]
            public static void ExtGetShaders([OutAttribute] Int32[] shaders, Int32 maxShaders, [OutAttribute] out Int32 numShaders)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "shaders_pinned");
                        if(shaders != null && shaders.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("shaders_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("shaders_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numShaders_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("numShaders_pinned");
                        Silk.Cil.LoadByName("shaders_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numShaders_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(99);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="shaders">[length: maxShaders]</param>
            /// <param name="maxShaders"></param>
            /// <param name="numShaders">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void ExtGetShaders([OutAttribute] out Int32 shaders, Int32 maxShaders, [OutAttribute] out Int32 numShaders)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "shaders_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("shaders_pinned");
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numShaders_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("numShaders_pinned");
                        Silk.Cil.LoadByName("shaders_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numShaders_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(99);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="shaders">[length: maxShaders]</param>
            /// <param name="maxShaders"></param>
            /// <param name="numShaders">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static unsafe void ExtGetShaders([OutAttribute] Int32* shaders, Int32 maxShaders, [OutAttribute] Int32* numShaders)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(99);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="shaders">[length: maxShaders]</param>
            /// <param name="maxShaders"></param>
            /// <param name="numShaders">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void ExtGetShaders([OutAttribute] UInt32[] shaders, Int32 maxShaders, [OutAttribute] Int32[] numShaders)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "shaders_pinned");
                        if(shaders != null && shaders.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("shaders_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("shaders_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numShaders_pinned");
                        if(numShaders != null && numShaders.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("numShaders_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("numShaders_pinned");
                        }
                        Silk.Cil.LoadByName("shaders_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numShaders_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(99);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="shaders">[length: maxShaders]</param>
            /// <param name="maxShaders"></param>
            /// <param name="numShaders">[length: 1]</param>
            [CLSCompliant(false)]
            public static void ExtGetShaders([OutAttribute] UInt32[] shaders, Int32 maxShaders, [OutAttribute] out Int32 numShaders)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "shaders_pinned");
                        if(shaders != null && shaders.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("shaders_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("shaders_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numShaders_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("numShaders_pinned");
                        Silk.Cil.LoadByName("shaders_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numShaders_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(99);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="shaders">[length: maxShaders]</param>
            /// <param name="maxShaders"></param>
            /// <param name="numShaders">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void ExtGetShaders([OutAttribute] out UInt32 shaders, Int32 maxShaders, [OutAttribute] out Int32 numShaders)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "shaders_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("shaders_pinned");
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numShaders_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("numShaders_pinned");
                        Silk.Cil.LoadByName("shaders_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numShaders_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(99);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="shaders">[length: maxShaders]</param>
            /// <param name="maxShaders"></param>
            /// <param name="numShaders">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static unsafe void ExtGetShaders([OutAttribute] UInt32* shaders, Int32 maxShaders, [OutAttribute] Int32* numShaders)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(99);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="texture"></param>
            /// <param name="face"></param>
            /// <param name="level"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [CLSCompliant(false)]
            public static void ExtGetTexLevelParameter(Int32 texture, OpenTK.Graphics.ES11.All face, Int32 level, OpenTK.Graphics.ES11.All pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(100);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="texture"></param>
            /// <param name="face"></param>
            /// <param name="level"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [CLSCompliant(false)]
            public static void ExtGetTexLevelParameter(Int32 texture, OpenTK.Graphics.ES11.All face, Int32 level, OpenTK.Graphics.ES11.All pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(100);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="texture"></param>
            /// <param name="face"></param>
            /// <param name="level"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [CLSCompliant(false)]
            public static unsafe void ExtGetTexLevelParameter(Int32 texture, OpenTK.Graphics.ES11.All face, Int32 level, OpenTK.Graphics.ES11.All pname, [OutAttribute] Int32* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(100);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="texture"></param>
            /// <param name="face"></param>
            /// <param name="level"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [CLSCompliant(false)]
            public static void ExtGetTexLevelParameter(UInt32 texture, OpenTK.Graphics.ES11.All face, Int32 level, OpenTK.Graphics.ES11.All pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(100);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="texture"></param>
            /// <param name="face"></param>
            /// <param name="level"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [CLSCompliant(false)]
            public static void ExtGetTexLevelParameter(UInt32 texture, OpenTK.Graphics.ES11.All face, Int32 level, OpenTK.Graphics.ES11.All pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(100);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="texture"></param>
            /// <param name="face"></param>
            /// <param name="level"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [CLSCompliant(false)]
            public static unsafe void ExtGetTexLevelParameter(UInt32 texture, OpenTK.Graphics.ES11.All face, Int32 level, OpenTK.Graphics.ES11.All pname, [OutAttribute] Int32* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(100);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="target"></param>
            /// <param name="level"></param>
            /// <param name="xoffset"></param>
            /// <param name="yoffset"></param>
            /// <param name="zoffset"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="depth"></param>
            /// <param name="format"></param>
            /// <param name="type"></param>
            /// <param name="texels"></param>
            public static void ExtGetTexSubImage(OpenTK.Graphics.ES11.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES11.All format, OpenTK.Graphics.ES11.All type, [OutAttribute] IntPtr texels)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldarg(9);
                        Silk.Cil.Ldarg(10);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(101);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="target"></param>
            /// <param name="level"></param>
            /// <param name="xoffset"></param>
            /// <param name="yoffset"></param>
            /// <param name="zoffset"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="depth"></param>
            /// <param name="format"></param>
            /// <param name="type"></param>
            /// <param name="texels"></param>
            [CLSCompliant(false)]
            public static void ExtGetTexSubImage<T10>(OpenTK.Graphics.ES11.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES11.All format, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute] T10[] texels)
                where T10 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T10& pinned", "texels_pinned");
                        if(texels != null && texels.Length != 0)
                        {
                            Silk.Cil.Ldarg(10);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T10");
                            Silk.Cil.StoreByName("texels_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("texels_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldarg(9);
                        Silk.Cil.LoadByName("texels_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(101);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="target"></param>
            /// <param name="level"></param>
            /// <param name="xoffset"></param>
            /// <param name="yoffset"></param>
            /// <param name="zoffset"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="depth"></param>
            /// <param name="format"></param>
            /// <param name="type"></param>
            /// <param name="texels"></param>
            [CLSCompliant(false)]
            public static void ExtGetTexSubImage<T10>(OpenTK.Graphics.ES11.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES11.All format, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute] T10[,] texels)
                where T10 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T10& pinned", "texels_pinned");
                        if(texels != null && texels.Length != 0)
                        {
                            Silk.Cil.Ldarg(10);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T10[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("texels_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("texels_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldarg(9);
                        Silk.Cil.LoadByName("texels_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(101);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="target"></param>
            /// <param name="level"></param>
            /// <param name="xoffset"></param>
            /// <param name="yoffset"></param>
            /// <param name="zoffset"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="depth"></param>
            /// <param name="format"></param>
            /// <param name="type"></param>
            /// <param name="texels"></param>
            [CLSCompliant(false)]
            public static void ExtGetTexSubImage<T10>(OpenTK.Graphics.ES11.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES11.All format, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute] T10[,,] texels)
                where T10 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T10& pinned", "texels_pinned");
                        if(texels != null && texels.Length != 0)
                        {
                            Silk.Cil.Ldarg(10);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T10[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("texels_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("texels_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldarg(9);
                        Silk.Cil.LoadByName("texels_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(101);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="target"></param>
            /// <param name="level"></param>
            /// <param name="xoffset"></param>
            /// <param name="yoffset"></param>
            /// <param name="zoffset"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="depth"></param>
            /// <param name="format"></param>
            /// <param name="type"></param>
            /// <param name="texels"></param>
            public static void ExtGetTexSubImage<T10>(OpenTK.Graphics.ES11.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES11.All format, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute] ref T10 texels)
                where T10 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T10& pinned", "texels_pinned");
                        Silk.Cil.Ldarg(10);
                        Silk.Cil.StoreByName("texels_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldarg(9);
                        Silk.Cil.LoadByName("texels_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(101);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="textures"></param>
            /// <param name="maxTextures"></param>
            /// <param name="numTextures"></param>
            [CLSCompliant(false)]
            public static void ExtGetTextures([OutAttribute] Int32[] textures, Int32 maxTextures, [OutAttribute] Int32[] numTextures)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "textures_pinned");
                        if(textures != null && textures.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("textures_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("textures_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numTextures_pinned");
                        if(numTextures != null && numTextures.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("numTextures_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("numTextures_pinned");
                        }
                        Silk.Cil.LoadByName("textures_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numTextures_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(102);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="textures"></param>
            /// <param name="maxTextures"></param>
            /// <param name="numTextures"></param>
            [CLSCompliant(false)]
            public static void ExtGetTextures([OutAttribute] out Int32 textures, Int32 maxTextures, [OutAttribute] out Int32 numTextures)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "textures_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("textures_pinned");
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numTextures_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("numTextures_pinned");
                        Silk.Cil.LoadByName("textures_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numTextures_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(102);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="textures"></param>
            /// <param name="maxTextures"></param>
            /// <param name="numTextures"></param>
            [CLSCompliant(false)]
            public static unsafe void ExtGetTextures([OutAttribute] Int32* textures, Int32 maxTextures, [OutAttribute] Int32* numTextures)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(102);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="textures"></param>
            /// <param name="maxTextures"></param>
            /// <param name="numTextures"></param>
            [CLSCompliant(false)]
            public static void ExtGetTextures([OutAttribute] UInt32[] textures, Int32 maxTextures, [OutAttribute] Int32[] numTextures)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "textures_pinned");
                        if(textures != null && textures.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("textures_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("textures_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numTextures_pinned");
                        if(numTextures != null && numTextures.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("numTextures_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("numTextures_pinned");
                        }
                        Silk.Cil.LoadByName("textures_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numTextures_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(102);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="textures"></param>
            /// <param name="maxTextures"></param>
            /// <param name="numTextures"></param>
            [CLSCompliant(false)]
            public static void ExtGetTextures([OutAttribute] out UInt32 textures, Int32 maxTextures, [OutAttribute] out Int32 numTextures)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "textures_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("textures_pinned");
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numTextures_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("numTextures_pinned");
                        Silk.Cil.LoadByName("textures_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numTextures_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(102);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="textures"></param>
            /// <param name="maxTextures"></param>
            /// <param name="numTextures"></param>
            [CLSCompliant(false)]
            public static unsafe void ExtGetTextures([OutAttribute] UInt32* textures, Int32 maxTextures, [OutAttribute] Int32* numTextures)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(102);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="program"></param>
            [CLSCompliant(false)]
            public static bool ExtIsProgramBinary(Int32 program)
            {
                unsafe
                {
                    bool __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(103);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(byte), typeof(UInt32));
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="program"></param>
            [CLSCompliant(false)]
            public static bool ExtIsProgramBinary(UInt32 program)
            {
                unsafe
                {
                    bool __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(103);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(byte), typeof(UInt32));
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="param"></param>
            public static void ExtTexObjectStateOverride(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, Int32 param)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(104);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES11.All), typeof(OpenTK.Graphics.ES11.All), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_driver_control]</summary>
            /// <param name="num"></param>
            /// <param name="size"></param>
            /// <param name="driverControls">[length: size]</param>
            [CLSCompliant(false)]
            public static void GetDriverControl([OutAttribute] Int32[] num, Int32 size, [OutAttribute] Int32[] driverControls)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "num_pinned");
                        if(num != null && num.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("num_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("num_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "driverControls_pinned");
                        if(driverControls != null && driverControls.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("driverControls_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("driverControls_pinned");
                        }
                        Silk.Cil.LoadByName("num_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("driverControls_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(141);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_driver_control]</summary>
            /// <param name="num"></param>
            /// <param name="size"></param>
            /// <param name="driverControls">[length: size]</param>
            [CLSCompliant(false)]
            public static void GetDriverControl([OutAttribute] Int32[] num, Int32 size, [OutAttribute] UInt32[] driverControls)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "num_pinned");
                        if(num != null && num.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("num_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("num_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "driverControls_pinned");
                        if(driverControls != null && driverControls.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("driverControls_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("driverControls_pinned");
                        }
                        Silk.Cil.LoadByName("num_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("driverControls_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(141);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_driver_control]</summary>
            /// <param name="num"></param>
            /// <param name="size"></param>
            /// <param name="driverControls">[length: size]</param>
            [CLSCompliant(false)]
            public static void GetDriverControl([OutAttribute] out Int32 num, Int32 size, [OutAttribute] out Int32 driverControls)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "num_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("num_pinned");
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "driverControls_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("driverControls_pinned");
                        Silk.Cil.LoadByName("num_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("driverControls_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(141);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_driver_control]</summary>
            /// <param name="num"></param>
            /// <param name="size"></param>
            /// <param name="driverControls">[length: size]</param>
            [CLSCompliant(false)]
            public static void GetDriverControl([OutAttribute] out Int32 num, Int32 size, [OutAttribute] out UInt32 driverControls)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "num_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("num_pinned");
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "driverControls_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("driverControls_pinned");
                        Silk.Cil.LoadByName("num_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("driverControls_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(141);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_driver_control]</summary>
            /// <param name="num"></param>
            /// <param name="size"></param>
            /// <param name="driverControls">[length: size]</param>
            [CLSCompliant(false)]
            public static unsafe void GetDriverControl([OutAttribute] Int32* num, Int32 size, [OutAttribute] Int32* driverControls)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(141);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_driver_control]</summary>
            /// <param name="num"></param>
            /// <param name="size"></param>
            /// <param name="driverControls">[length: size]</param>
            [CLSCompliant(false)]
            public static unsafe void GetDriverControl([OutAttribute] Int32* num, Int32 size, [OutAttribute] UInt32* driverControls)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(141);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_driver_control]</summary>
            /// <param name="driverControl"></param>
            /// <param name="bufSize"></param>
            /// <param name="length"></param>
            /// <param name="driverControlString">[length: bufSize]</param>
            [CLSCompliant(false)]
            public static void GetDriverControlString(Int32 driverControl, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder driverControlString)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        if(length != null && length.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        IntPtr driverControlString_sb_ptr = IntPtr.Zero;
                        try
                        {
                            driverControlString_sb_ptr = Marshal.AllocHGlobal(driverControlString.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.LoadByName("length_pinned");
                            Silk.Cil.Load(driverControlString_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(142);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(driverControlString_sb_ptr, driverControlString);
                        } finally {
                            Marshal.FreeHGlobal(driverControlString_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_driver_control]</summary>
            /// <param name="driverControl"></param>
            /// <param name="bufSize"></param>
            /// <param name="length"></param>
            /// <param name="driverControlString">[length: bufSize]</param>
            [CLSCompliant(false)]
            public static void GetDriverControlString(Int32 driverControl, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder driverControlString)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("length_pinned");
                        IntPtr driverControlString_sb_ptr = IntPtr.Zero;
                        try
                        {
                            driverControlString_sb_ptr = Marshal.AllocHGlobal(driverControlString.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.LoadByName("length_pinned");
                            Silk.Cil.Conv_I();
                            Silk.Cil.Load(driverControlString_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(142);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(driverControlString_sb_ptr, driverControlString);
                        } finally {
                            Marshal.FreeHGlobal(driverControlString_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_driver_control]</summary>
            /// <param name="driverControl"></param>
            /// <param name="bufSize"></param>
            /// <param name="length"></param>
            /// <param name="driverControlString">[length: bufSize]</param>
            [CLSCompliant(false)]
            public static unsafe void GetDriverControlString(Int32 driverControl, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder driverControlString)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr driverControlString_sb_ptr = IntPtr.Zero;
                        try
                        {
                            driverControlString_sb_ptr = Marshal.AllocHGlobal(driverControlString.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Load(driverControlString_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(142);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(driverControlString_sb_ptr, driverControlString);
                        } finally {
                            Marshal.FreeHGlobal(driverControlString_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_driver_control]</summary>
            /// <param name="driverControl"></param>
            /// <param name="bufSize"></param>
            /// <param name="length"></param>
            /// <param name="driverControlString">[length: bufSize]</param>
            [CLSCompliant(false)]
            public static void GetDriverControlString(UInt32 driverControl, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder driverControlString)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        if(length != null && length.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        IntPtr driverControlString_sb_ptr = IntPtr.Zero;
                        try
                        {
                            driverControlString_sb_ptr = Marshal.AllocHGlobal(driverControlString.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.LoadByName("length_pinned");
                            Silk.Cil.Load(driverControlString_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(142);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(driverControlString_sb_ptr, driverControlString);
                        } finally {
                            Marshal.FreeHGlobal(driverControlString_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_driver_control]</summary>
            /// <param name="driverControl"></param>
            /// <param name="bufSize"></param>
            /// <param name="length"></param>
            /// <param name="driverControlString">[length: bufSize]</param>
            [CLSCompliant(false)]
            public static void GetDriverControlString(UInt32 driverControl, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder driverControlString)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("length_pinned");
                        IntPtr driverControlString_sb_ptr = IntPtr.Zero;
                        try
                        {
                            driverControlString_sb_ptr = Marshal.AllocHGlobal(driverControlString.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.LoadByName("length_pinned");
                            Silk.Cil.Conv_I();
                            Silk.Cil.Load(driverControlString_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(142);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(driverControlString_sb_ptr, driverControlString);
                        } finally {
                            Marshal.FreeHGlobal(driverControlString_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_driver_control]</summary>
            /// <param name="driverControl"></param>
            /// <param name="bufSize"></param>
            /// <param name="length"></param>
            /// <param name="driverControlString">[length: bufSize]</param>
            [CLSCompliant(false)]
            public static unsafe void GetDriverControlString(UInt32 driverControl, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder driverControlString)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr driverControlString_sb_ptr = IntPtr.Zero;
                        try
                        {
                            driverControlString_sb_ptr = Marshal.AllocHGlobal(driverControlString.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Load(driverControlString_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(142);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(driverControlString_sb_ptr, driverControlString);
                        } finally {
                            Marshal.FreeHGlobal(driverControlString_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_tiled_rendering]</summary>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="preserveMask"></param>
            [CLSCompliant(false)]
            public static void StartTiling(Int32 x, Int32 y, Int32 width, Int32 height, Int32 preserveMask)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(312);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(UInt32), typeof(UInt32), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_tiled_rendering]</summary>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="preserveMask"></param>
            [CLSCompliant(false)]
            public static void StartTiling(UInt32 x, UInt32 y, UInt32 width, UInt32 height, UInt32 preserveMask)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(312);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(UInt32), typeof(UInt32), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

        }

    }
}
