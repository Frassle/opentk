//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to 
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//



namespace OpenTK.Graphics.ES20
{
    using System;
    using System.Text;
    using System.Runtime.InteropServices;
    #pragma warning disable 3019
    #pragma warning disable 1591
    #pragma warning disable 1572
    #pragma warning disable 1573
    #pragma warning disable 626

    partial class GL
    {
        static GL()
        {
            EntryPointNames = new byte[]
            {
                103, 108, 65, 99, 116, 105, 118, 101, 80, 114, 111, 103, 114, 97, 109, 69, 88, 84, 0,
                103, 108, 65, 99, 116, 105, 118, 101, 83, 104, 97, 100, 101, 114, 80, 114, 111, 103, 114, 97, 109, 69, 88, 84, 0,
                103, 108, 65, 99, 116, 105, 118, 101, 84, 101, 120, 116, 117, 114, 101, 0,
                103, 108, 65, 108, 112, 104, 97, 70, 117, 110, 99, 81, 67, 79, 77, 0,
                103, 108, 65, 116, 116, 97, 99, 104, 83, 104, 97, 100, 101, 114, 0,
                103, 108, 66, 101, 103, 105, 110, 80, 101, 114, 102, 77, 111, 110, 105, 116, 111, 114, 65, 77, 68, 0,
                103, 108, 66, 101, 103, 105, 110, 80, 101, 114, 102, 81, 117, 101, 114, 121, 73, 78, 84, 69, 76, 0,
                103, 108, 66, 101, 103, 105, 110, 81, 117, 101, 114, 121, 69, 88, 84, 0,
                103, 108, 66, 105, 110, 100, 65, 116, 116, 114, 105, 98, 76, 111, 99, 97, 116, 105, 111, 110, 0,
                103, 108, 66, 105, 110, 100, 66, 117, 102, 102, 101, 114, 0,
                103, 108, 66, 105, 110, 100, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 0,
                103, 108, 66, 105, 110, 100, 80, 114, 111, 103, 114, 97, 109, 80, 105, 112, 101, 108, 105, 110, 101, 69, 88, 84, 0,
                103, 108, 66, 105, 110, 100, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 0,
                103, 108, 66, 105, 110, 100, 84, 101, 120, 116, 117, 114, 101, 0,
                103, 108, 66, 105, 110, 100, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 79, 69, 83, 0,
                103, 108, 66, 108, 101, 110, 100, 66, 97, 114, 114, 105, 101, 114, 75, 72, 82, 0,
                103, 108, 66, 108, 101, 110, 100, 66, 97, 114, 114, 105, 101, 114, 78, 86, 0,
                103, 108, 66, 108, 101, 110, 100, 67, 111, 108, 111, 114, 0,
                103, 108, 66, 108, 101, 110, 100, 69, 113, 117, 97, 116, 105, 111, 110, 0,
                103, 108, 66, 108, 101, 110, 100, 69, 113, 117, 97, 116, 105, 111, 110, 69, 88, 84, 0,
                103, 108, 66, 108, 101, 110, 100, 69, 113, 117, 97, 116, 105, 111, 110, 105, 69, 88, 84, 0,
                103, 108, 66, 108, 101, 110, 100, 69, 113, 117, 97, 116, 105, 111, 110, 83, 101, 112, 97, 114, 97, 116, 101, 0,
                103, 108, 66, 108, 101, 110, 100, 69, 113, 117, 97, 116, 105, 111, 110, 83, 101, 112, 97, 114, 97, 116, 101, 105, 69, 88, 84, 0,
                103, 108, 66, 108, 101, 110, 100, 70, 117, 110, 99, 0,
                103, 108, 66, 108, 101, 110, 100, 70, 117, 110, 99, 105, 69, 88, 84, 0,
                103, 108, 66, 108, 101, 110, 100, 70, 117, 110, 99, 83, 101, 112, 97, 114, 97, 116, 101, 0,
                103, 108, 66, 108, 101, 110, 100, 70, 117, 110, 99, 83, 101, 112, 97, 114, 97, 116, 101, 105, 69, 88, 84, 0,
                103, 108, 66, 108, 101, 110, 100, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 78, 86, 0,
                103, 108, 66, 108, 105, 116, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 65, 78, 71, 76, 69, 0,
                103, 108, 66, 108, 105, 116, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 78, 86, 0,
                103, 108, 66, 117, 102, 102, 101, 114, 68, 97, 116, 97, 0,
                103, 108, 66, 117, 102, 102, 101, 114, 83, 117, 98, 68, 97, 116, 97, 0,
                103, 108, 67, 104, 101, 99, 107, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 83, 116, 97, 116, 117, 115, 0,
                103, 108, 67, 108, 101, 97, 114, 0,
                103, 108, 67, 108, 101, 97, 114, 67, 111, 108, 111, 114, 0,
                103, 108, 67, 108, 101, 97, 114, 68, 101, 112, 116, 104, 102, 0,
                103, 108, 67, 108, 101, 97, 114, 83, 116, 101, 110, 99, 105, 108, 0,
                103, 108, 67, 108, 105, 101, 110, 116, 87, 97, 105, 116, 83, 121, 110, 99, 65, 80, 80, 76, 69, 0,
                103, 108, 67, 111, 108, 111, 114, 77, 97, 115, 107, 0,
                103, 108, 67, 111, 108, 111, 114, 77, 97, 115, 107, 105, 69, 88, 84, 0,
                103, 108, 67, 111, 109, 112, 105, 108, 101, 83, 104, 97, 100, 101, 114, 0,
                103, 108, 67, 111, 109, 112, 114, 101, 115, 115, 101, 100, 84, 101, 120, 73, 109, 97, 103, 101, 50, 68, 0,
                103, 108, 67, 111, 109, 112, 114, 101, 115, 115, 101, 100, 84, 101, 120, 73, 109, 97, 103, 101, 51, 68, 79, 69, 83, 0,
                103, 108, 67, 111, 109, 112, 114, 101, 115, 115, 101, 100, 84, 101, 120, 83, 117, 98, 73, 109, 97, 103, 101, 50, 68, 0,
                103, 108, 67, 111, 109, 112, 114, 101, 115, 115, 101, 100, 84, 101, 120, 83, 117, 98, 73, 109, 97, 103, 101, 51, 68, 79, 69, 83, 0,
                103, 108, 67, 111, 112, 121, 66, 117, 102, 102, 101, 114, 83, 117, 98, 68, 97, 116, 97, 78, 86, 0,
                103, 108, 67, 111, 112, 121, 73, 109, 97, 103, 101, 83, 117, 98, 68, 97, 116, 97, 69, 88, 84, 0,
                103, 108, 67, 111, 112, 121, 84, 101, 120, 73, 109, 97, 103, 101, 50, 68, 0,
                103, 108, 67, 111, 112, 121, 84, 101, 120, 83, 117, 98, 73, 109, 97, 103, 101, 50, 68, 0,
                103, 108, 67, 111, 112, 121, 84, 101, 120, 83, 117, 98, 73, 109, 97, 103, 101, 51, 68, 79, 69, 83, 0,
                103, 108, 67, 111, 112, 121, 84, 101, 120, 116, 117, 114, 101, 76, 101, 118, 101, 108, 115, 65, 80, 80, 76, 69, 0,
                103, 108, 67, 111, 118, 101, 114, 97, 103, 101, 77, 97, 115, 107, 78, 86, 0,
                103, 108, 67, 111, 118, 101, 114, 97, 103, 101, 79, 112, 101, 114, 97, 116, 105, 111, 110, 78, 86, 0,
                103, 108, 67, 114, 101, 97, 116, 101, 80, 101, 114, 102, 81, 117, 101, 114, 121, 73, 78, 84, 69, 76, 0,
                103, 108, 67, 114, 101, 97, 116, 101, 80, 114, 111, 103, 114, 97, 109, 0,
                103, 108, 67, 114, 101, 97, 116, 101, 83, 104, 97, 100, 101, 114, 0,
                103, 108, 67, 114, 101, 97, 116, 101, 83, 104, 97, 100, 101, 114, 80, 114, 111, 103, 114, 97, 109, 69, 88, 84, 0,
                103, 108, 67, 114, 101, 97, 116, 101, 83, 104, 97, 100, 101, 114, 80, 114, 111, 103, 114, 97, 109, 118, 69, 88, 84, 0,
                103, 108, 67, 117, 108, 108, 70, 97, 99, 101, 0,
                103, 108, 68, 101, 98, 117, 103, 77, 101, 115, 115, 97, 103, 101, 67, 97, 108, 108, 98, 97, 99, 107, 0,
                103, 108, 68, 101, 98, 117, 103, 77, 101, 115, 115, 97, 103, 101, 67, 97, 108, 108, 98, 97, 99, 107, 75, 72, 82, 0,
                103, 108, 68, 101, 98, 117, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 116, 114, 111, 108, 0,
                103, 108, 68, 101, 98, 117, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 116, 114, 111, 108, 75, 72, 82, 0,
                103, 108, 68, 101, 98, 117, 103, 77, 101, 115, 115, 97, 103, 101, 73, 110, 115, 101, 114, 116, 0,
                103, 108, 68, 101, 98, 117, 103, 77, 101, 115, 115, 97, 103, 101, 73, 110, 115, 101, 114, 116, 75, 72, 82, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 66, 117, 102, 102, 101, 114, 115, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 70, 101, 110, 99, 101, 115, 78, 86, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 115, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 80, 101, 114, 102, 77, 111, 110, 105, 116, 111, 114, 115, 65, 77, 68, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 80, 101, 114, 102, 81, 117, 101, 114, 121, 73, 78, 84, 69, 76, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 80, 114, 111, 103, 114, 97, 109, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 80, 114, 111, 103, 114, 97, 109, 80, 105, 112, 101, 108, 105, 110, 101, 115, 69, 88, 84, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 81, 117, 101, 114, 105, 101, 115, 69, 88, 84, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 115, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 83, 104, 97, 100, 101, 114, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 83, 121, 110, 99, 65, 80, 80, 76, 69, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 84, 101, 120, 116, 117, 114, 101, 115, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 115, 79, 69, 83, 0,
                103, 108, 68, 101, 112, 116, 104, 70, 117, 110, 99, 0,
                103, 108, 68, 101, 112, 116, 104, 77, 97, 115, 107, 0,
                103, 108, 68, 101, 112, 116, 104, 82, 97, 110, 103, 101, 102, 0,
                103, 108, 68, 101, 116, 97, 99, 104, 83, 104, 97, 100, 101, 114, 0,
                103, 108, 68, 105, 115, 97, 98, 108, 101, 0,
                103, 108, 68, 105, 115, 97, 98, 108, 101, 68, 114, 105, 118, 101, 114, 67, 111, 110, 116, 114, 111, 108, 81, 67, 79, 77, 0,
                103, 108, 68, 105, 115, 97, 98, 108, 101, 105, 69, 88, 84, 0,
                103, 108, 68, 105, 115, 97, 98, 108, 101, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 65, 114, 114, 97, 121, 0,
                103, 108, 68, 105, 115, 99, 97, 114, 100, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 69, 88, 84, 0,
                103, 108, 68, 114, 97, 119, 65, 114, 114, 97, 121, 115, 0,
                103, 108, 68, 114, 97, 119, 65, 114, 114, 97, 121, 115, 73, 110, 115, 116, 97, 110, 99, 101, 100, 65, 78, 71, 76, 69, 0,
                103, 108, 68, 114, 97, 119, 65, 114, 114, 97, 121, 115, 73, 110, 115, 116, 97, 110, 99, 101, 100, 69, 88, 84, 0,
                103, 108, 68, 114, 97, 119, 65, 114, 114, 97, 121, 115, 73, 110, 115, 116, 97, 110, 99, 101, 100, 78, 86, 0,
                103, 108, 68, 114, 97, 119, 66, 117, 102, 102, 101, 114, 115, 69, 88, 84, 0,
                103, 108, 68, 114, 97, 119, 66, 117, 102, 102, 101, 114, 115, 73, 110, 100, 101, 120, 101, 100, 69, 88, 84, 0,
                103, 108, 68, 114, 97, 119, 66, 117, 102, 102, 101, 114, 115, 78, 86, 0,
                103, 108, 68, 114, 97, 119, 69, 108, 101, 109, 101, 110, 116, 115, 0,
                103, 108, 68, 114, 97, 119, 69, 108, 101, 109, 101, 110, 116, 115, 73, 110, 115, 116, 97, 110, 99, 101, 100, 65, 78, 71, 76, 69, 0,
                103, 108, 68, 114, 97, 119, 69, 108, 101, 109, 101, 110, 116, 115, 73, 110, 115, 116, 97, 110, 99, 101, 100, 69, 88, 84, 0,
                103, 108, 68, 114, 97, 119, 69, 108, 101, 109, 101, 110, 116, 115, 73, 110, 115, 116, 97, 110, 99, 101, 100, 78, 86, 0,
                103, 108, 69, 71, 76, 73, 109, 97, 103, 101, 84, 97, 114, 103, 101, 116, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 83, 116, 111, 114, 97, 103, 101, 79, 69, 83, 0,
                103, 108, 69, 71, 76, 73, 109, 97, 103, 101, 84, 97, 114, 103, 101, 116, 84, 101, 120, 116, 117, 114, 101, 50, 68, 79, 69, 83, 0,
                103, 108, 69, 110, 97, 98, 108, 101, 0,
                103, 108, 69, 110, 97, 98, 108, 101, 68, 114, 105, 118, 101, 114, 67, 111, 110, 116, 114, 111, 108, 81, 67, 79, 77, 0,
                103, 108, 69, 110, 97, 98, 108, 101, 105, 69, 88, 84, 0,
                103, 108, 69, 110, 97, 98, 108, 101, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 65, 114, 114, 97, 121, 0,
                103, 108, 69, 110, 100, 80, 101, 114, 102, 77, 111, 110, 105, 116, 111, 114, 65, 77, 68, 0,
                103, 108, 69, 110, 100, 80, 101, 114, 102, 81, 117, 101, 114, 121, 73, 78, 84, 69, 76, 0,
                103, 108, 69, 110, 100, 81, 117, 101, 114, 121, 69, 88, 84, 0,
                103, 108, 69, 110, 100, 84, 105, 108, 105, 110, 103, 81, 67, 79, 77, 0,
                103, 108, 69, 120, 116, 71, 101, 116, 66, 117, 102, 102, 101, 114, 80, 111, 105, 110, 116, 101, 114, 118, 81, 67, 79, 77, 0,
                103, 108, 69, 120, 116, 71, 101, 116, 66, 117, 102, 102, 101, 114, 115, 81, 67, 79, 77, 0,
                103, 108, 69, 120, 116, 71, 101, 116, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 115, 81, 67, 79, 77, 0,
                103, 108, 69, 120, 116, 71, 101, 116, 80, 114, 111, 103, 114, 97, 109, 66, 105, 110, 97, 114, 121, 83, 111, 117, 114, 99, 101, 81, 67, 79, 77, 0,
                103, 108, 69, 120, 116, 71, 101, 116, 80, 114, 111, 103, 114, 97, 109, 115, 81, 67, 79, 77, 0,
                103, 108, 69, 120, 116, 71, 101, 116, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 115, 81, 67, 79, 77, 0,
                103, 108, 69, 120, 116, 71, 101, 116, 83, 104, 97, 100, 101, 114, 115, 81, 67, 79, 77, 0,
                103, 108, 69, 120, 116, 71, 101, 116, 84, 101, 120, 76, 101, 118, 101, 108, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 81, 67, 79, 77, 0,
                103, 108, 69, 120, 116, 71, 101, 116, 84, 101, 120, 83, 117, 98, 73, 109, 97, 103, 101, 81, 67, 79, 77, 0,
                103, 108, 69, 120, 116, 71, 101, 116, 84, 101, 120, 116, 117, 114, 101, 115, 81, 67, 79, 77, 0,
                103, 108, 69, 120, 116, 73, 115, 80, 114, 111, 103, 114, 97, 109, 66, 105, 110, 97, 114, 121, 81, 67, 79, 77, 0,
                103, 108, 69, 120, 116, 84, 101, 120, 79, 98, 106, 101, 99, 116, 83, 116, 97, 116, 101, 79, 118, 101, 114, 114, 105, 100, 101, 105, 81, 67, 79, 77, 0,
                103, 108, 70, 101, 110, 99, 101, 83, 121, 110, 99, 65, 80, 80, 76, 69, 0,
                103, 108, 70, 105, 110, 105, 115, 104, 0,
                103, 108, 70, 105, 110, 105, 115, 104, 70, 101, 110, 99, 101, 78, 86, 0,
                103, 108, 70, 108, 117, 115, 104, 0,
                103, 108, 70, 108, 117, 115, 104, 77, 97, 112, 112, 101, 100, 66, 117, 102, 102, 101, 114, 82, 97, 110, 103, 101, 69, 88, 84, 0,
                103, 108, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 0,
                103, 108, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 84, 101, 120, 116, 117, 114, 101, 50, 68, 0,
                103, 108, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 84, 101, 120, 116, 117, 114, 101, 50, 68, 77, 117, 108, 116, 105, 115, 97, 109, 112, 108, 101, 69, 88, 84, 0,
                103, 108, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 84, 101, 120, 116, 117, 114, 101, 50, 68, 77, 117, 108, 116, 105, 115, 97, 109, 112, 108, 101, 73, 77, 71, 0,
                103, 108, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 84, 101, 120, 116, 117, 114, 101, 51, 68, 79, 69, 83, 0,
                103, 108, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 84, 101, 120, 116, 117, 114, 101, 69, 88, 84, 0,
                103, 108, 70, 114, 111, 110, 116, 70, 97, 99, 101, 0,
                103, 108, 71, 101, 110, 66, 117, 102, 102, 101, 114, 115, 0,
                103, 108, 71, 101, 110, 101, 114, 97, 116, 101, 77, 105, 112, 109, 97, 112, 0,
                103, 108, 71, 101, 110, 70, 101, 110, 99, 101, 115, 78, 86, 0,
                103, 108, 71, 101, 110, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 115, 0,
                103, 108, 71, 101, 110, 80, 101, 114, 102, 77, 111, 110, 105, 116, 111, 114, 115, 65, 77, 68, 0,
                103, 108, 71, 101, 110, 80, 114, 111, 103, 114, 97, 109, 80, 105, 112, 101, 108, 105, 110, 101, 115, 69, 88, 84, 0,
                103, 108, 71, 101, 110, 81, 117, 101, 114, 105, 101, 115, 69, 88, 84, 0,
                103, 108, 71, 101, 110, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 115, 0,
                103, 108, 71, 101, 110, 84, 101, 120, 116, 117, 114, 101, 115, 0,
                103, 108, 71, 101, 110, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 115, 79, 69, 83, 0,
                103, 108, 71, 101, 116, 65, 99, 116, 105, 118, 101, 65, 116, 116, 114, 105, 98, 0,
                103, 108, 71, 101, 116, 65, 99, 116, 105, 118, 101, 85, 110, 105, 102, 111, 114, 109, 0,
                103, 108, 71, 101, 116, 65, 116, 116, 97, 99, 104, 101, 100, 83, 104, 97, 100, 101, 114, 115, 0,
                103, 108, 71, 101, 116, 65, 116, 116, 114, 105, 98, 76, 111, 99, 97, 116, 105, 111, 110, 0,
                103, 108, 71, 101, 116, 66, 111, 111, 108, 101, 97, 110, 118, 0,
                103, 108, 71, 101, 116, 66, 117, 102, 102, 101, 114, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 0,
                103, 108, 71, 101, 116, 66, 117, 102, 102, 101, 114, 80, 111, 105, 110, 116, 101, 114, 118, 79, 69, 83, 0,
                103, 108, 71, 101, 116, 68, 101, 98, 117, 103, 77, 101, 115, 115, 97, 103, 101, 76, 111, 103, 0,
                103, 108, 71, 101, 116, 68, 101, 98, 117, 103, 77, 101, 115, 115, 97, 103, 101, 76, 111, 103, 75, 72, 82, 0,
                103, 108, 71, 101, 116, 68, 114, 105, 118, 101, 114, 67, 111, 110, 116, 114, 111, 108, 115, 81, 67, 79, 77, 0,
                103, 108, 71, 101, 116, 68, 114, 105, 118, 101, 114, 67, 111, 110, 116, 114, 111, 108, 83, 116, 114, 105, 110, 103, 81, 67, 79, 77, 0,
                103, 108, 71, 101, 116, 69, 114, 114, 111, 114, 0,
                103, 108, 71, 101, 116, 70, 101, 110, 99, 101, 105, 118, 78, 86, 0,
                103, 108, 71, 101, 116, 70, 105, 114, 115, 116, 80, 101, 114, 102, 81, 117, 101, 114, 121, 73, 100, 73, 78, 84, 69, 76, 0,
                103, 108, 71, 101, 116, 70, 108, 111, 97, 116, 118, 0,
                103, 108, 71, 101, 116, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 65, 116, 116, 97, 99, 104, 109, 101, 110, 116, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 0,
                103, 108, 71, 101, 116, 71, 114, 97, 112, 104, 105, 99, 115, 82, 101, 115, 101, 116, 83, 116, 97, 116, 117, 115, 0,
                103, 108, 71, 101, 116, 71, 114, 97, 112, 104, 105, 99, 115, 82, 101, 115, 101, 116, 83, 116, 97, 116, 117, 115, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 71, 114, 97, 112, 104, 105, 99, 115, 82, 101, 115, 101, 116, 83, 116, 97, 116, 117, 115, 75, 72, 82, 0,
                103, 108, 71, 101, 116, 73, 110, 116, 101, 103, 101, 114, 54, 52, 118, 65, 80, 80, 76, 69, 0,
                103, 108, 71, 101, 116, 73, 110, 116, 101, 103, 101, 114, 105, 95, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 73, 110, 116, 101, 103, 101, 114, 118, 0,
                103, 108, 71, 101, 116, 78, 101, 120, 116, 80, 101, 114, 102, 81, 117, 101, 114, 121, 73, 100, 73, 78, 84, 69, 76, 0,
                103, 108, 71, 101, 116, 110, 85, 110, 105, 102, 111, 114, 109, 102, 118, 0,
                103, 108, 71, 101, 116, 110, 85, 110, 105, 102, 111, 114, 109, 102, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 110, 85, 110, 105, 102, 111, 114, 109, 102, 118, 75, 72, 82, 0,
                103, 108, 71, 101, 116, 110, 85, 110, 105, 102, 111, 114, 109, 105, 118, 0,
                103, 108, 71, 101, 116, 110, 85, 110, 105, 102, 111, 114, 109, 105, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 110, 85, 110, 105, 102, 111, 114, 109, 105, 118, 75, 72, 82, 0,
                103, 108, 71, 101, 116, 110, 85, 110, 105, 102, 111, 114, 109, 117, 105, 118, 0,
                103, 108, 71, 101, 116, 110, 85, 110, 105, 102, 111, 114, 109, 117, 105, 118, 75, 72, 82, 0,
                103, 108, 71, 101, 116, 79, 98, 106, 101, 99, 116, 76, 97, 98, 101, 108, 0,
                103, 108, 71, 101, 116, 79, 98, 106, 101, 99, 116, 76, 97, 98, 101, 108, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 79, 98, 106, 101, 99, 116, 76, 97, 98, 101, 108, 75, 72, 82, 0,
                103, 108, 71, 101, 116, 79, 98, 106, 101, 99, 116, 80, 116, 114, 76, 97, 98, 101, 108, 0,
                103, 108, 71, 101, 116, 79, 98, 106, 101, 99, 116, 80, 116, 114, 76, 97, 98, 101, 108, 75, 72, 82, 0,
                103, 108, 71, 101, 116, 80, 101, 114, 102, 67, 111, 117, 110, 116, 101, 114, 73, 110, 102, 111, 73, 78, 84, 69, 76, 0,
                103, 108, 71, 101, 116, 80, 101, 114, 102, 77, 111, 110, 105, 116, 111, 114, 67, 111, 117, 110, 116, 101, 114, 68, 97, 116, 97, 65, 77, 68, 0,
                103, 108, 71, 101, 116, 80, 101, 114, 102, 77, 111, 110, 105, 116, 111, 114, 67, 111, 117, 110, 116, 101, 114, 73, 110, 102, 111, 65, 77, 68, 0,
                103, 108, 71, 101, 116, 80, 101, 114, 102, 77, 111, 110, 105, 116, 111, 114, 67, 111, 117, 110, 116, 101, 114, 115, 65, 77, 68, 0,
                103, 108, 71, 101, 116, 80, 101, 114, 102, 77, 111, 110, 105, 116, 111, 114, 67, 111, 117, 110, 116, 101, 114, 83, 116, 114, 105, 110, 103, 65, 77, 68, 0,
                103, 108, 71, 101, 116, 80, 101, 114, 102, 77, 111, 110, 105, 116, 111, 114, 71, 114, 111, 117, 112, 115, 65, 77, 68, 0,
                103, 108, 71, 101, 116, 80, 101, 114, 102, 77, 111, 110, 105, 116, 111, 114, 71, 114, 111, 117, 112, 83, 116, 114, 105, 110, 103, 65, 77, 68, 0,
                103, 108, 71, 101, 116, 80, 101, 114, 102, 81, 117, 101, 114, 121, 68, 97, 116, 97, 73, 78, 84, 69, 76, 0,
                103, 108, 71, 101, 116, 80, 101, 114, 102, 81, 117, 101, 114, 121, 73, 100, 66, 121, 78, 97, 109, 101, 73, 78, 84, 69, 76, 0,
                103, 108, 71, 101, 116, 80, 101, 114, 102, 81, 117, 101, 114, 121, 73, 110, 102, 111, 73, 78, 84, 69, 76, 0,
                103, 108, 71, 101, 116, 80, 111, 105, 110, 116, 101, 114, 118, 0,
                103, 108, 71, 101, 116, 80, 111, 105, 110, 116, 101, 114, 118, 75, 72, 82, 0,
                103, 108, 71, 101, 116, 80, 114, 111, 103, 114, 97, 109, 66, 105, 110, 97, 114, 121, 79, 69, 83, 0,
                103, 108, 71, 101, 116, 80, 114, 111, 103, 114, 97, 109, 73, 110, 102, 111, 76, 111, 103, 0,
                103, 108, 71, 101, 116, 80, 114, 111, 103, 114, 97, 109, 105, 118, 0,
                103, 108, 71, 101, 116, 80, 114, 111, 103, 114, 97, 109, 80, 105, 112, 101, 108, 105, 110, 101, 73, 110, 102, 111, 76, 111, 103, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 80, 114, 111, 103, 114, 97, 109, 80, 105, 112, 101, 108, 105, 110, 101, 105, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 81, 117, 101, 114, 121, 105, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 81, 117, 101, 114, 121, 79, 98, 106, 101, 99, 116, 105, 54, 52, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 81, 117, 101, 114, 121, 79, 98, 106, 101, 99, 116, 105, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 81, 117, 101, 114, 121, 79, 98, 106, 101, 99, 116, 117, 105, 54, 52, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 81, 117, 101, 114, 121, 79, 98, 106, 101, 99, 116, 117, 105, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 0,
                103, 108, 71, 101, 116, 83, 97, 109, 112, 108, 101, 114, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 105, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 83, 97, 109, 112, 108, 101, 114, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 117, 105, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 83, 104, 97, 100, 101, 114, 73, 110, 102, 111, 76, 111, 103, 0,
                103, 108, 71, 101, 116, 83, 104, 97, 100, 101, 114, 105, 118, 0,
                103, 108, 71, 101, 116, 83, 104, 97, 100, 101, 114, 80, 114, 101, 99, 105, 115, 105, 111, 110, 70, 111, 114, 109, 97, 116, 0,
                103, 108, 71, 101, 116, 83, 104, 97, 100, 101, 114, 83, 111, 117, 114, 99, 101, 0,
                103, 108, 71, 101, 116, 83, 116, 114, 105, 110, 103, 0,
                103, 108, 71, 101, 116, 83, 121, 110, 99, 105, 118, 65, 80, 80, 76, 69, 0,
                103, 108, 71, 101, 116, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 102, 118, 0,
                103, 108, 71, 101, 116, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 105, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 117, 105, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 0,
                103, 108, 71, 101, 116, 84, 114, 97, 110, 115, 108, 97, 116, 101, 100, 83, 104, 97, 100, 101, 114, 83, 111, 117, 114, 99, 101, 65, 78, 71, 76, 69, 0,
                103, 108, 71, 101, 116, 85, 110, 105, 102, 111, 114, 109, 102, 118, 0,
                103, 108, 71, 101, 116, 85, 110, 105, 102, 111, 114, 109, 105, 118, 0,
                103, 108, 71, 101, 116, 85, 110, 105, 102, 111, 114, 109, 76, 111, 99, 97, 116, 105, 111, 110, 0,
                103, 108, 71, 101, 116, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 102, 118, 0,
                103, 108, 71, 101, 116, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 105, 118, 0,
                103, 108, 71, 101, 116, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 80, 111, 105, 110, 116, 101, 114, 118, 0,
                103, 108, 72, 105, 110, 116, 0,
                103, 108, 73, 110, 115, 101, 114, 116, 69, 118, 101, 110, 116, 77, 97, 114, 107, 101, 114, 69, 88, 84, 0,
                103, 108, 73, 115, 66, 117, 102, 102, 101, 114, 0,
                103, 108, 73, 115, 69, 110, 97, 98, 108, 101, 100, 0,
                103, 108, 73, 115, 69, 110, 97, 98, 108, 101, 100, 105, 69, 88, 84, 0,
                103, 108, 73, 115, 70, 101, 110, 99, 101, 78, 86, 0,
                103, 108, 73, 115, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 0,
                103, 108, 73, 115, 80, 114, 111, 103, 114, 97, 109, 0,
                103, 108, 73, 115, 80, 114, 111, 103, 114, 97, 109, 80, 105, 112, 101, 108, 105, 110, 101, 69, 88, 84, 0,
                103, 108, 73, 115, 81, 117, 101, 114, 121, 69, 88, 84, 0,
                103, 108, 73, 115, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 0,
                103, 108, 73, 115, 83, 104, 97, 100, 101, 114, 0,
                103, 108, 73, 115, 83, 121, 110, 99, 65, 80, 80, 76, 69, 0,
                103, 108, 73, 115, 84, 101, 120, 116, 117, 114, 101, 0,
                103, 108, 73, 115, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 79, 69, 83, 0,
                103, 108, 76, 97, 98, 101, 108, 79, 98, 106, 101, 99, 116, 69, 88, 84, 0,
                103, 108, 76, 105, 110, 101, 87, 105, 100, 116, 104, 0,
                103, 108, 76, 105, 110, 107, 80, 114, 111, 103, 114, 97, 109, 0,
                103, 108, 77, 97, 112, 66, 117, 102, 102, 101, 114, 79, 69, 83, 0,
                103, 108, 77, 97, 112, 66, 117, 102, 102, 101, 114, 82, 97, 110, 103, 101, 69, 88, 84, 0,
                103, 108, 77, 105, 110, 83, 97, 109, 112, 108, 101, 83, 104, 97, 100, 105, 110, 103, 79, 69, 83, 0,
                103, 108, 77, 117, 108, 116, 105, 68, 114, 97, 119, 65, 114, 114, 97, 121, 115, 69, 88, 84, 0,
                103, 108, 77, 117, 108, 116, 105, 68, 114, 97, 119, 69, 108, 101, 109, 101, 110, 116, 115, 69, 88, 84, 0,
                103, 108, 79, 98, 106, 101, 99, 116, 76, 97, 98, 101, 108, 0,
                103, 108, 79, 98, 106, 101, 99, 116, 76, 97, 98, 101, 108, 75, 72, 82, 0,
                103, 108, 79, 98, 106, 101, 99, 116, 80, 116, 114, 76, 97, 98, 101, 108, 0,
                103, 108, 79, 98, 106, 101, 99, 116, 80, 116, 114, 76, 97, 98, 101, 108, 75, 72, 82, 0,
                103, 108, 80, 97, 116, 99, 104, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 69, 88, 84, 0,
                103, 108, 80, 105, 120, 101, 108, 83, 116, 111, 114, 101, 105, 0,
                103, 108, 80, 111, 108, 121, 103, 111, 110, 79, 102, 102, 115, 101, 116, 0,
                103, 108, 80, 111, 112, 68, 101, 98, 117, 103, 71, 114, 111, 117, 112, 0,
                103, 108, 80, 111, 112, 68, 101, 98, 117, 103, 71, 114, 111, 117, 112, 75, 72, 82, 0,
                103, 108, 80, 111, 112, 71, 114, 111, 117, 112, 77, 97, 114, 107, 101, 114, 69, 88, 84, 0,
                103, 108, 80, 114, 105, 109, 105, 116, 105, 118, 101, 66, 111, 117, 110, 100, 105, 110, 103, 66, 111, 120, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 66, 105, 110, 97, 114, 121, 79, 69, 83, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 49, 102, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 49, 102, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 49, 105, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 49, 105, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 49, 117, 105, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 49, 117, 105, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 50, 102, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 50, 102, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 50, 105, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 50, 105, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 50, 117, 105, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 50, 117, 105, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 51, 102, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 51, 102, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 51, 105, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 51, 105, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 51, 117, 105, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 51, 117, 105, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 52, 102, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 52, 102, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 52, 105, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 52, 105, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 52, 117, 105, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 52, 117, 105, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 50, 102, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 50, 120, 51, 102, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 50, 120, 52, 102, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 51, 102, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 51, 120, 50, 102, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 51, 120, 52, 102, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 52, 102, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 52, 120, 50, 102, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 52, 120, 51, 102, 118, 69, 88, 84, 0,
                103, 108, 80, 117, 115, 104, 68, 101, 98, 117, 103, 71, 114, 111, 117, 112, 0,
                103, 108, 80, 117, 115, 104, 68, 101, 98, 117, 103, 71, 114, 111, 117, 112, 75, 72, 82, 0,
                103, 108, 80, 117, 115, 104, 71, 114, 111, 117, 112, 77, 97, 114, 107, 101, 114, 69, 88, 84, 0,
                103, 108, 81, 117, 101, 114, 121, 67, 111, 117, 110, 116, 101, 114, 69, 88, 84, 0,
                103, 108, 82, 101, 97, 100, 66, 117, 102, 102, 101, 114, 73, 110, 100, 101, 120, 101, 100, 69, 88, 84, 0,
                103, 108, 82, 101, 97, 100, 66, 117, 102, 102, 101, 114, 78, 86, 0,
                103, 108, 82, 101, 97, 100, 110, 80, 105, 120, 101, 108, 115, 0,
                103, 108, 82, 101, 97, 100, 110, 80, 105, 120, 101, 108, 115, 69, 88, 84, 0,
                103, 108, 82, 101, 97, 100, 110, 80, 105, 120, 101, 108, 115, 75, 72, 82, 0,
                103, 108, 82, 101, 97, 100, 80, 105, 120, 101, 108, 115, 0,
                103, 108, 82, 101, 108, 101, 97, 115, 101, 83, 104, 97, 100, 101, 114, 67, 111, 109, 112, 105, 108, 101, 114, 0,
                103, 108, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 83, 116, 111, 114, 97, 103, 101, 0,
                103, 108, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 83, 116, 111, 114, 97, 103, 101, 77, 117, 108, 116, 105, 115, 97, 109, 112, 108, 101, 65, 78, 71, 76, 69, 0,
                103, 108, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 83, 116, 111, 114, 97, 103, 101, 77, 117, 108, 116, 105, 115, 97, 109, 112, 108, 101, 65, 80, 80, 76, 69, 0,
                103, 108, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 83, 116, 111, 114, 97, 103, 101, 77, 117, 108, 116, 105, 115, 97, 109, 112, 108, 101, 69, 88, 84, 0,
                103, 108, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 83, 116, 111, 114, 97, 103, 101, 77, 117, 108, 116, 105, 115, 97, 109, 112, 108, 101, 73, 77, 71, 0,
                103, 108, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 83, 116, 111, 114, 97, 103, 101, 77, 117, 108, 116, 105, 115, 97, 109, 112, 108, 101, 78, 86, 0,
                103, 108, 82, 101, 115, 111, 108, 118, 101, 77, 117, 108, 116, 105, 115, 97, 109, 112, 108, 101, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 65, 80, 80, 76, 69, 0,
                103, 108, 83, 97, 109, 112, 108, 101, 67, 111, 118, 101, 114, 97, 103, 101, 0,
                103, 108, 83, 97, 109, 112, 108, 101, 114, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 105, 118, 69, 88, 84, 0,
                103, 108, 83, 97, 109, 112, 108, 101, 114, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 117, 105, 118, 69, 88, 84, 0,
                103, 108, 83, 99, 105, 115, 115, 111, 114, 0,
                103, 108, 83, 101, 108, 101, 99, 116, 80, 101, 114, 102, 77, 111, 110, 105, 116, 111, 114, 67, 111, 117, 110, 116, 101, 114, 115, 65, 77, 68, 0,
                103, 108, 83, 101, 116, 70, 101, 110, 99, 101, 78, 86, 0,
                103, 108, 83, 104, 97, 100, 101, 114, 66, 105, 110, 97, 114, 121, 0,
                103, 108, 83, 104, 97, 100, 101, 114, 83, 111, 117, 114, 99, 101, 0,
                103, 108, 83, 116, 97, 114, 116, 84, 105, 108, 105, 110, 103, 81, 67, 79, 77, 0,
                103, 108, 83, 116, 101, 110, 99, 105, 108, 70, 117, 110, 99, 0,
                103, 108, 83, 116, 101, 110, 99, 105, 108, 70, 117, 110, 99, 83, 101, 112, 97, 114, 97, 116, 101, 0,
                103, 108, 83, 116, 101, 110, 99, 105, 108, 77, 97, 115, 107, 0,
                103, 108, 83, 116, 101, 110, 99, 105, 108, 77, 97, 115, 107, 83, 101, 112, 97, 114, 97, 116, 101, 0,
                103, 108, 83, 116, 101, 110, 99, 105, 108, 79, 112, 0,
                103, 108, 83, 116, 101, 110, 99, 105, 108, 79, 112, 83, 101, 112, 97, 114, 97, 116, 101, 0,
                103, 108, 84, 101, 115, 116, 70, 101, 110, 99, 101, 78, 86, 0,
                103, 108, 84, 101, 120, 66, 117, 102, 102, 101, 114, 69, 88, 84, 0,
                103, 108, 84, 101, 120, 66, 117, 102, 102, 101, 114, 82, 97, 110, 103, 101, 69, 88, 84, 0,
                103, 108, 84, 101, 120, 73, 109, 97, 103, 101, 50, 68, 0,
                103, 108, 84, 101, 120, 73, 109, 97, 103, 101, 51, 68, 79, 69, 83, 0,
                103, 108, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 102, 0,
                103, 108, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 102, 118, 0,
                103, 108, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 0,
                103, 108, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 105, 118, 69, 88, 84, 0,
                103, 108, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 117, 105, 118, 69, 88, 84, 0,
                103, 108, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 0,
                103, 108, 84, 101, 120, 83, 116, 111, 114, 97, 103, 101, 49, 68, 69, 88, 84, 0,
                103, 108, 84, 101, 120, 83, 116, 111, 114, 97, 103, 101, 50, 68, 69, 88, 84, 0,
                103, 108, 84, 101, 120, 83, 116, 111, 114, 97, 103, 101, 51, 68, 69, 88, 84, 0,
                103, 108, 84, 101, 120, 83, 116, 111, 114, 97, 103, 101, 51, 68, 77, 117, 108, 116, 105, 115, 97, 109, 112, 108, 101, 79, 69, 83, 0,
                103, 108, 84, 101, 120, 83, 117, 98, 73, 109, 97, 103, 101, 50, 68, 0,
                103, 108, 84, 101, 120, 83, 117, 98, 73, 109, 97, 103, 101, 51, 68, 79, 69, 83, 0,
                103, 108, 84, 101, 120, 116, 117, 114, 101, 83, 116, 111, 114, 97, 103, 101, 49, 68, 69, 88, 84, 0,
                103, 108, 84, 101, 120, 116, 117, 114, 101, 83, 116, 111, 114, 97, 103, 101, 50, 68, 69, 88, 84, 0,
                103, 108, 84, 101, 120, 116, 117, 114, 101, 83, 116, 111, 114, 97, 103, 101, 51, 68, 69, 88, 84, 0,
                103, 108, 84, 101, 120, 116, 117, 114, 101, 86, 105, 101, 119, 69, 88, 84, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 49, 102, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 49, 102, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 49, 105, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 49, 105, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 50, 102, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 50, 102, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 50, 105, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 50, 105, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 51, 102, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 51, 102, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 51, 105, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 51, 105, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 52, 102, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 52, 102, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 52, 105, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 52, 105, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 50, 102, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 50, 120, 51, 102, 118, 78, 86, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 50, 120, 52, 102, 118, 78, 86, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 51, 102, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 51, 120, 50, 102, 118, 78, 86, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 51, 120, 52, 102, 118, 78, 86, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 52, 102, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 52, 120, 50, 102, 118, 78, 86, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 52, 120, 51, 102, 118, 78, 86, 0,
                103, 108, 85, 110, 109, 97, 112, 66, 117, 102, 102, 101, 114, 79, 69, 83, 0,
                103, 108, 85, 115, 101, 80, 114, 111, 103, 114, 97, 109, 0,
                103, 108, 85, 115, 101, 80, 114, 111, 103, 114, 97, 109, 83, 116, 97, 103, 101, 115, 69, 88, 84, 0,
                103, 108, 85, 115, 101, 83, 104, 97, 100, 101, 114, 80, 114, 111, 103, 114, 97, 109, 69, 88, 84, 0,
                103, 108, 86, 97, 108, 105, 100, 97, 116, 101, 80, 114, 111, 103, 114, 97, 109, 0,
                103, 108, 86, 97, 108, 105, 100, 97, 116, 101, 80, 114, 111, 103, 114, 97, 109, 80, 105, 112, 101, 108, 105, 110, 101, 69, 88, 84, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 49, 102, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 49, 102, 118, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 50, 102, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 50, 102, 118, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 51, 102, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 51, 102, 118, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 52, 102, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 52, 102, 118, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 68, 105, 118, 105, 115, 111, 114, 65, 78, 71, 76, 69, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 68, 105, 118, 105, 115, 111, 114, 69, 88, 84, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 68, 105, 118, 105, 115, 111, 114, 78, 86, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 80, 111, 105, 110, 116, 101, 114, 0,
                103, 108, 86, 105, 101, 119, 112, 111, 114, 116, 0,
                103, 108, 87, 97, 105, 116, 83, 121, 110, 99, 65, 80, 80, 76, 69, 0,
            };
            EntryPointNameOffsets = new int[]
            {
                0,
                19,
                44,
                60,
                76,
                91,
                113,
                135,
                151,
                172,
                185,
                203,
                228,
                247,
                261,
                282,
                300,
                317,
                330,
                346,
                365,
                385,
                409,
                437,
                449,
                465,
                485,
                509,
                529,
                552,
                572,
                585,
                601,
                626,
                634,
                647,
                661,
                676,
                698,
                710,
                726,
                742,
                765,
                791,
                817,
                846,
                868,
                890,
                907,
                927,
                950,
                975,
                992,
                1014,
                1037,
                1053,
                1068,
                1093,
                1119,
                1130,
                1153,
                1179,
                1201,
                1226,
                1247,
                1271,
                1287,
                1304,
                1325,
                1349,
                1372,
                1388,
                1416,
                1435,
                1457,
                1472,
                1490,
                1507,
                1531,
                1543,
                1555,
                1569,
                1584,
                1594,
                1621,
                1635,
                1662,
                1686,
                1699,
                1726,
                1751,
                1775,
                1792,
                1816,
                1832,
                1847,
                1876,
                1903,
                1929,
                1968,
                1997,
                2006,
                2032,
                2045,
                2071,
                2091,
                2111,
                2125,
                2141,
                2168,
                2188,
                2213,
                2245,
                2266,
                2292,
                2312,
                2344,
                2368,
                2389,
                2414,
                2447,
                2464,
                2473,
                2489,
                2497,
                2525,
                2551,
                2574,
                2611,
                2648,
                2674,
                2698,
                2710,
                2723,
                2740,
                2754,
                2772,
                2793,
                2818,
                2834,
                2853,
                2867,
                2888,
                2906,
                2925,
                2946,
                2966,
                2980,
                3003,
                3026,
                3047,
                3071,
                3095,
                3124,
                3135,
                3150,
                3177,
                3189,
                3227,
                3252,
                3280,
                3308,
                3329,
                3348,
                3362,
                3388,
                3404,
                3423,
                3442,
                3458,
                3477,
                3496,
                3513,
                3533,
                3550,
                3570,
                3590,
                3610,
                3633,
                3659,
                3690,
                3721,
                3749,
                3782,
                3808,
                3839,
                3863,
                3891,
                3915,
                3929,
                3946,
                3968,
                3988,
                4003,
                4034,
                4060,
                4076,
                4100,
                4122,
                4147,
                4170,
                4199,
                4227,
                4256,
                4275,
                4289,
                4316,
                4334,
                4346,
                4363,
                4383,
                4407,
                4432,
                4452,
                4485,
                4500,
                4515,
                4536,
                4556,
                4576,
                4602,
                4609,
                4632,
                4643,
                4655,
                4671,
                4683,
                4699,
                4711,
                4734,
                4747,
                4764,
                4775,
                4789,
                4801,
                4820,
                4837,
                4849,
                4863,
                4878,
                4898,
                4920,
                4941,
                4964,
                4978,
                4995,
                5012,
                5032,
                5053,
                5067,
                5083,
                5099,
                5118,
                5138,
                5164,
                5183,
                5206,
                5228,
                5251,
                5273,
                5296,
                5319,
                5343,
                5365,
                5388,
                5410,
                5433,
                5456,
                5480,
                5502,
                5525,
                5547,
                5570,
                5593,
                5617,
                5639,
                5662,
                5684,
                5707,
                5730,
                5754,
                5783,
                5814,
                5845,
                5874,
                5905,
                5936,
                5965,
                5996,
                6027,
                6044,
                6064,
                6085,
                6103,
                6126,
                6141,
                6155,
                6172,
                6189,
                6202,
                6226,
                6248,
                6286,
                6324,
                6360,
                6396,
                6431,
                6468,
                6485,
                6510,
                6536,
                6546,
                6577,
                6590,
                6605,
                6620,
                6638,
                6652,
                6674,
                6688,
                6710,
                6722,
                6742,
                6756,
                6771,
                6791,
                6804,
                6820,
                6836,
                6853,
                6869,
                6890,
                6912,
                6929,
                6947,
                6965,
                6983,
                7012,
                7028,
                7047,
                7069,
                7091,
                7113,
                7130,
                7142,
                7155,
                7167,
                7180,
                7192,
                7205,
                7217,
                7230,
                7242,
                7255,
                7267,
                7280,
                7292,
                7305,
                7317,
                7330,
                7349,
                7372,
                7395,
                7414,
                7437,
                7460,
                7479,
                7502,
                7525,
                7542,
                7555,
                7577,
                7599,
                7617,
                7646,
                7663,
                7681,
                7698,
                7716,
                7733,
                7751,
                7768,
                7786,
                7813,
                7838,
                7862,
                7884,
                7895,
            };
            EntryPoints = new IntPtr[EntryPointNameOffsets.Length];
        }

        public static partial class Amd
        {
            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="monitor"></param>
            [CLSCompliant(false)]
            public static void BeginPerfMonitor(Int32 monitor)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(5);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="monitor"></param>
            [CLSCompliant(false)]
            public static void BeginPerfMonitor(UInt32 monitor)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(5);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="monitors">[length: n]</param>
            [CLSCompliant(false)]
            public static void DeletePerfMonitor(Int32 monitors)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldc_I4(1);
                        Silk.Cil.LoadAddress(monitors);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(68);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="monitors">[length: n]</param>
            [CLSCompliant(false)]
            public static void DeletePerfMonitor(UInt32 monitors)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldc_I4(1);
                        Silk.Cil.LoadAddress(monitors);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(68);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="n"></param>
            /// <param name="monitors">[length: n]</param>
            [CLSCompliant(false)]
            public static void DeletePerfMonitors(Int32 n, Int32[] monitors)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "monitors_pinned");
                        if(monitors != null && monitors.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("monitors_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("monitors_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("monitors_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(68);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="n"></param>
            /// <param name="monitors">[length: n]</param>
            [CLSCompliant(false)]
            public static void DeletePerfMonitors(Int32 n, ref Int32 monitors)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "monitors_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("monitors_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("monitors_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(68);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="n"></param>
            /// <param name="monitors">[length: n]</param>
            [CLSCompliant(false)]
            public static unsafe void DeletePerfMonitors(Int32 n, Int32* monitors)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(68);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="n"></param>
            /// <param name="monitors">[length: n]</param>
            [CLSCompliant(false)]
            public static void DeletePerfMonitors(Int32 n, UInt32[] monitors)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "monitors_pinned");
                        if(monitors != null && monitors.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("monitors_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("monitors_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("monitors_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(68);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="n"></param>
            /// <param name="monitors">[length: n]</param>
            [CLSCompliant(false)]
            public static void DeletePerfMonitors(Int32 n, ref UInt32 monitors)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "monitors_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("monitors_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("monitors_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(68);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="n"></param>
            /// <param name="monitors">[length: n]</param>
            [CLSCompliant(false)]
            public static unsafe void DeletePerfMonitors(Int32 n, UInt32* monitors)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(68);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="monitor"></param>
            [CLSCompliant(false)]
            public static void EndPerfMonitor(Int32 monitor)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(104);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="monitor"></param>
            [CLSCompliant(false)]
            public static void EndPerfMonitor(UInt32 monitor)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(104);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            [CLSCompliant(false)]
            public static Int32 GenPerfMonitor()
            {
                unsafe
                {
                    Int32 __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Int32 __result = default(Int32);
                        Silk.Cil.Ldc_I4(1);
                        Silk.Cil.LoadAddress(__result);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(136);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                        Silk.Cil.Load(__result);
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="n"></param>
            /// <param name="monitors">[length: n]</param>
            [CLSCompliant(false)]
            public static void GenPerfMonitors(Int32 n, [OutAttribute] Int32[] monitors)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "monitors_pinned");
                        if(monitors != null && monitors.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("monitors_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("monitors_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("monitors_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(136);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="n"></param>
            /// <param name="monitors">[length: n]</param>
            [CLSCompliant(false)]
            public static void GenPerfMonitors(Int32 n, [OutAttribute] out Int32 monitors)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "monitors_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("monitors_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("monitors_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(136);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="n"></param>
            /// <param name="monitors">[length: n]</param>
            [CLSCompliant(false)]
            public static unsafe void GenPerfMonitors(Int32 n, [OutAttribute] Int32* monitors)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(136);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="n"></param>
            /// <param name="monitors">[length: n]</param>
            [CLSCompliant(false)]
            public static void GenPerfMonitors(Int32 n, [OutAttribute] UInt32[] monitors)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "monitors_pinned");
                        if(monitors != null && monitors.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("monitors_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("monitors_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("monitors_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(136);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="n"></param>
            /// <param name="monitors">[length: n]</param>
            [CLSCompliant(false)]
            public static void GenPerfMonitors(Int32 n, [OutAttribute] out UInt32 monitors)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "monitors_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("monitors_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("monitors_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(136);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="n"></param>
            /// <param name="monitors">[length: n]</param>
            [CLSCompliant(false)]
            public static unsafe void GenPerfMonitors(Int32 n, [OutAttribute] UInt32* monitors)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(136);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="monitor"></param>
            /// <param name="pname"></param>
            /// <param name="dataSize"></param>
            /// <param name="data">[length: dataSize]</param>
            /// <param name="bytesWritten">[length: 1]</param>
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounterData(Int32 monitor, OpenTK.Graphics.ES20.All pname, Int32 dataSize, [OutAttribute] Int32[] data, [OutAttribute] out Int32 bytesWritten)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "data_pinned");
                        if(data != null && data.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "bytesWritten_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.StoreByName("bytesWritten_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.LoadByName("bytesWritten_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(179);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32), typeof(UInt32*), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="monitor"></param>
            /// <param name="pname"></param>
            /// <param name="dataSize"></param>
            /// <param name="data">[length: dataSize]</param>
            /// <param name="bytesWritten">[length: 1]</param>
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounterData(Int32 monitor, OpenTK.Graphics.ES20.All pname, Int32 dataSize, [OutAttribute] out Int32 data, [OutAttribute] out Int32 bytesWritten)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "data_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("data_pinned");
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "bytesWritten_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.StoreByName("bytesWritten_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("bytesWritten_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(179);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32), typeof(UInt32*), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="monitor"></param>
            /// <param name="pname"></param>
            /// <param name="dataSize"></param>
            /// <param name="data">[length: dataSize]</param>
            /// <param name="bytesWritten">[length: 1]</param>
            [CLSCompliant(false)]
            public static unsafe void GetPerfMonitorCounterData(Int32 monitor, OpenTK.Graphics.ES20.All pname, Int32 dataSize, [OutAttribute] Int32* data, [OutAttribute] Int32* bytesWritten)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(179);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32), typeof(UInt32*), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="monitor"></param>
            /// <param name="pname"></param>
            /// <param name="dataSize"></param>
            /// <param name="data">[length: dataSize]</param>
            /// <param name="bytesWritten">[length: 1]</param>
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounterData(UInt32 monitor, OpenTK.Graphics.ES20.All pname, Int32 dataSize, [OutAttribute] UInt32[] data, [OutAttribute] out Int32 bytesWritten)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "data_pinned");
                        if(data != null && data.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "bytesWritten_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.StoreByName("bytesWritten_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.LoadByName("bytesWritten_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(179);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32), typeof(UInt32*), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="monitor"></param>
            /// <param name="pname"></param>
            /// <param name="dataSize"></param>
            /// <param name="data">[length: dataSize]</param>
            /// <param name="bytesWritten">[length: 1]</param>
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounterData(UInt32 monitor, OpenTK.Graphics.ES20.All pname, Int32 dataSize, [OutAttribute] out UInt32 data, [OutAttribute] out Int32 bytesWritten)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "data_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("data_pinned");
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "bytesWritten_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.StoreByName("bytesWritten_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("bytesWritten_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(179);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32), typeof(UInt32*), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="monitor"></param>
            /// <param name="pname"></param>
            /// <param name="dataSize"></param>
            /// <param name="data">[length: dataSize]</param>
            /// <param name="bytesWritten">[length: 1]</param>
            [CLSCompliant(false)]
            public static unsafe void GetPerfMonitorCounterData(UInt32 monitor, OpenTK.Graphics.ES20.All pname, Int32 dataSize, [OutAttribute] UInt32* data, [OutAttribute] Int32* bytesWritten)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(179);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32), typeof(UInt32*), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="counter"></param>
            /// <param name="pname"></param>
            /// <param name="data">[length: pname]</param>
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounterInfo(Int32 group, Int32 counter, OpenTK.Graphics.ES20.All pname, [OutAttribute] IntPtr data)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(180);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="counter"></param>
            /// <param name="pname"></param>
            /// <param name="data">[length: pname]</param>
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounterInfo<T3>(Int32 group, Int32 counter, OpenTK.Graphics.ES20.All pname, [InAttribute, OutAttribute] T3[] data)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "data_pinned");
                        if(data != null && data.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T3");
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(180);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="counter"></param>
            /// <param name="pname"></param>
            /// <param name="data">[length: pname]</param>
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounterInfo<T3>(Int32 group, Int32 counter, OpenTK.Graphics.ES20.All pname, [InAttribute, OutAttribute] T3[,] data)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "data_pinned");
                        if(data != null && data.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T3[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(180);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="counter"></param>
            /// <param name="pname"></param>
            /// <param name="data">[length: pname]</param>
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounterInfo<T3>(Int32 group, Int32 counter, OpenTK.Graphics.ES20.All pname, [InAttribute, OutAttribute] T3[,,] data)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "data_pinned");
                        if(data != null && data.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T3[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(180);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="counter"></param>
            /// <param name="pname"></param>
            /// <param name="data">[length: pname]</param>
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounterInfo<T3>(Int32 group, Int32 counter, OpenTK.Graphics.ES20.All pname, [InAttribute, OutAttribute] ref T3 data)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "data_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("data_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(180);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="counter"></param>
            /// <param name="pname"></param>
            /// <param name="data">[length: pname]</param>
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounterInfo(UInt32 group, UInt32 counter, OpenTK.Graphics.ES20.All pname, [OutAttribute] IntPtr data)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(180);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="counter"></param>
            /// <param name="pname"></param>
            /// <param name="data">[length: pname]</param>
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounterInfo<T3>(UInt32 group, UInt32 counter, OpenTK.Graphics.ES20.All pname, [InAttribute, OutAttribute] T3[] data)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "data_pinned");
                        if(data != null && data.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T3");
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(180);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="counter"></param>
            /// <param name="pname"></param>
            /// <param name="data">[length: pname]</param>
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounterInfo<T3>(UInt32 group, UInt32 counter, OpenTK.Graphics.ES20.All pname, [InAttribute, OutAttribute] T3[,] data)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "data_pinned");
                        if(data != null && data.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T3[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(180);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="counter"></param>
            /// <param name="pname"></param>
            /// <param name="data">[length: pname]</param>
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounterInfo<T3>(UInt32 group, UInt32 counter, OpenTK.Graphics.ES20.All pname, [InAttribute, OutAttribute] T3[,,] data)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "data_pinned");
                        if(data != null && data.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T3[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(180);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="counter"></param>
            /// <param name="pname"></param>
            /// <param name="data">[length: pname]</param>
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounterInfo<T3>(UInt32 group, UInt32 counter, OpenTK.Graphics.ES20.All pname, [InAttribute, OutAttribute] ref T3 data)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "data_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("data_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(180);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="numCounters">[length: 1]</param>
            /// <param name="maxActiveCounters">[length: 1]</param>
            /// <param name="counterSize"></param>
            /// <param name="counters">[length: counterSize]</param>
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounters(Int32 group, [OutAttribute] out Int32 numCounters, [OutAttribute] out Int32 maxActiveCounters, Int32 counterSize, [OutAttribute] Int32[] counters)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numCounters_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("numCounters_pinned");
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "maxActiveCounters_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("maxActiveCounters_pinned");
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "counters_pinned");
                        if(counters != null && counters.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("counters_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("counters_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("numCounters_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("maxActiveCounters_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("counters_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(181);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32*), typeof(Int32*), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="numCounters">[length: 1]</param>
            /// <param name="maxActiveCounters">[length: 1]</param>
            /// <param name="counterSize"></param>
            /// <param name="counters">[length: counterSize]</param>
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounters(Int32 group, [OutAttribute] out Int32 numCounters, [OutAttribute] out Int32 maxActiveCounters, Int32 counterSize, [OutAttribute] out Int32 counters)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numCounters_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("numCounters_pinned");
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "maxActiveCounters_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("maxActiveCounters_pinned");
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "counters_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.StoreByName("counters_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("numCounters_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("maxActiveCounters_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("counters_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(181);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32*), typeof(Int32*), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="numCounters">[length: 1]</param>
            /// <param name="maxActiveCounters">[length: 1]</param>
            /// <param name="counterSize"></param>
            /// <param name="counters">[length: counterSize]</param>
            [CLSCompliant(false)]
            public static unsafe void GetPerfMonitorCounters(Int32 group, [OutAttribute] Int32* numCounters, [OutAttribute] Int32* maxActiveCounters, Int32 counterSize, [OutAttribute] Int32* counters)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(181);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32*), typeof(Int32*), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="numCounters">[length: 1]</param>
            /// <param name="maxActiveCounters">[length: 1]</param>
            /// <param name="counterSize"></param>
            /// <param name="counters">[length: counterSize]</param>
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounters(UInt32 group, [OutAttribute] out Int32 numCounters, [OutAttribute] out Int32 maxActiveCounters, Int32 counterSize, [OutAttribute] UInt32[] counters)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numCounters_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("numCounters_pinned");
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "maxActiveCounters_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("maxActiveCounters_pinned");
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "counters_pinned");
                        if(counters != null && counters.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("counters_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("counters_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("numCounters_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("maxActiveCounters_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("counters_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(181);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32*), typeof(Int32*), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="numCounters">[length: 1]</param>
            /// <param name="maxActiveCounters">[length: 1]</param>
            /// <param name="counterSize"></param>
            /// <param name="counters">[length: counterSize]</param>
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounters(UInt32 group, [OutAttribute] out Int32 numCounters, [OutAttribute] out Int32 maxActiveCounters, Int32 counterSize, [OutAttribute] out UInt32 counters)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numCounters_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("numCounters_pinned");
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "maxActiveCounters_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("maxActiveCounters_pinned");
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "counters_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.StoreByName("counters_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("numCounters_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("maxActiveCounters_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("counters_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(181);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32*), typeof(Int32*), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="numCounters">[length: 1]</param>
            /// <param name="maxActiveCounters">[length: 1]</param>
            /// <param name="counterSize"></param>
            /// <param name="counters">[length: counterSize]</param>
            [CLSCompliant(false)]
            public static unsafe void GetPerfMonitorCounters(UInt32 group, [OutAttribute] Int32* numCounters, [OutAttribute] Int32* maxActiveCounters, Int32 counterSize, [OutAttribute] UInt32* counters)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(181);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32*), typeof(Int32*), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="counter"></param>
            /// <param name="bufSize"></param>
            /// <param name="length">[length: 1]</param>
            /// <param name="counterString">[length: bufSize]</param>
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounterString(Int32 group, Int32 counter, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder counterString)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("length_pinned");
                        IntPtr counterString_sb_ptr = IntPtr.Zero;
                        try
                        {
                            counterString_sb_ptr = Marshal.AllocHGlobal(counterString.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.LoadByName("length_pinned");
                            Silk.Cil.Conv_I();
                            Silk.Cil.Load(counterString_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(182);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(counterString_sb_ptr, counterString);
                        } finally {
                            Marshal.FreeHGlobal(counterString_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="counter"></param>
            /// <param name="bufSize"></param>
            /// <param name="length">[length: 1]</param>
            /// <param name="counterString">[length: bufSize]</param>
            [CLSCompliant(false)]
            public static unsafe void GetPerfMonitorCounterString(Int32 group, Int32 counter, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder counterString)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr counterString_sb_ptr = IntPtr.Zero;
                        try
                        {
                            counterString_sb_ptr = Marshal.AllocHGlobal(counterString.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Load(counterString_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(182);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(counterString_sb_ptr, counterString);
                        } finally {
                            Marshal.FreeHGlobal(counterString_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="counter"></param>
            /// <param name="bufSize"></param>
            /// <param name="length">[length: 1]</param>
            /// <param name="counterString">[length: bufSize]</param>
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounterString(UInt32 group, UInt32 counter, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder counterString)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("length_pinned");
                        IntPtr counterString_sb_ptr = IntPtr.Zero;
                        try
                        {
                            counterString_sb_ptr = Marshal.AllocHGlobal(counterString.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.LoadByName("length_pinned");
                            Silk.Cil.Conv_I();
                            Silk.Cil.Load(counterString_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(182);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(counterString_sb_ptr, counterString);
                        } finally {
                            Marshal.FreeHGlobal(counterString_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="counter"></param>
            /// <param name="bufSize"></param>
            /// <param name="length">[length: 1]</param>
            /// <param name="counterString">[length: bufSize]</param>
            [CLSCompliant(false)]
            public static unsafe void GetPerfMonitorCounterString(UInt32 group, UInt32 counter, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder counterString)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr counterString_sb_ptr = IntPtr.Zero;
                        try
                        {
                            counterString_sb_ptr = Marshal.AllocHGlobal(counterString.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Load(counterString_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(182);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(counterString_sb_ptr, counterString);
                        } finally {
                            Marshal.FreeHGlobal(counterString_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="numGroups">[length: 1]</param>
            /// <param name="groupsSize"></param>
            /// <param name="groups">[length: groupsSize]</param>
            [CLSCompliant(false)]
            public static void GetPerfMonitorGroups([OutAttribute] out Int32 numGroups, Int32 groupsSize, [OutAttribute] Int32[] groups)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numGroups_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("numGroups_pinned");
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "groups_pinned");
                        if(groups != null && groups.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("groups_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("groups_pinned");
                        }
                        Silk.Cil.LoadByName("numGroups_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("groups_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(183);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="numGroups">[length: 1]</param>
            /// <param name="groupsSize"></param>
            /// <param name="groups">[length: groupsSize]</param>
            [CLSCompliant(false)]
            public static void GetPerfMonitorGroups([OutAttribute] out Int32 numGroups, Int32 groupsSize, [OutAttribute] out Int32 groups)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numGroups_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("numGroups_pinned");
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "groups_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("groups_pinned");
                        Silk.Cil.LoadByName("numGroups_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("groups_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(183);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="numGroups">[length: 1]</param>
            /// <param name="groupsSize"></param>
            /// <param name="groups">[length: groupsSize]</param>
            [CLSCompliant(false)]
            public static void GetPerfMonitorGroups([OutAttribute] out Int32 numGroups, Int32 groupsSize, [OutAttribute] UInt32[] groups)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numGroups_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("numGroups_pinned");
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "groups_pinned");
                        if(groups != null && groups.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("groups_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("groups_pinned");
                        }
                        Silk.Cil.LoadByName("numGroups_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("groups_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(183);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="numGroups">[length: 1]</param>
            /// <param name="groupsSize"></param>
            /// <param name="groups">[length: groupsSize]</param>
            [CLSCompliant(false)]
            public static void GetPerfMonitorGroups([OutAttribute] out Int32 numGroups, Int32 groupsSize, [OutAttribute] out UInt32 groups)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numGroups_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("numGroups_pinned");
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "groups_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("groups_pinned");
                        Silk.Cil.LoadByName("numGroups_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("groups_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(183);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="numGroups">[length: 1]</param>
            /// <param name="groupsSize"></param>
            /// <param name="groups">[length: groupsSize]</param>
            [CLSCompliant(false)]
            public static unsafe void GetPerfMonitorGroups([OutAttribute] Int32* numGroups, Int32 groupsSize, [OutAttribute] Int32* groups)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(183);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="numGroups">[length: 1]</param>
            /// <param name="groupsSize"></param>
            /// <param name="groups">[length: groupsSize]</param>
            [CLSCompliant(false)]
            public static unsafe void GetPerfMonitorGroups([OutAttribute] Int32* numGroups, Int32 groupsSize, [OutAttribute] UInt32* groups)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(183);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="bufSize"></param>
            /// <param name="length">[length: 1]</param>
            /// <param name="groupString">[length: bufSize]</param>
            [CLSCompliant(false)]
            public static void GetPerfMonitorGroupString(Int32 group, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder groupString)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("length_pinned");
                        IntPtr groupString_sb_ptr = IntPtr.Zero;
                        try
                        {
                            groupString_sb_ptr = Marshal.AllocHGlobal(groupString.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.LoadByName("length_pinned");
                            Silk.Cil.Conv_I();
                            Silk.Cil.Load(groupString_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(184);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(groupString_sb_ptr, groupString);
                        } finally {
                            Marshal.FreeHGlobal(groupString_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="bufSize"></param>
            /// <param name="length">[length: 1]</param>
            /// <param name="groupString">[length: bufSize]</param>
            [CLSCompliant(false)]
            public static unsafe void GetPerfMonitorGroupString(Int32 group, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder groupString)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr groupString_sb_ptr = IntPtr.Zero;
                        try
                        {
                            groupString_sb_ptr = Marshal.AllocHGlobal(groupString.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Load(groupString_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(184);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(groupString_sb_ptr, groupString);
                        } finally {
                            Marshal.FreeHGlobal(groupString_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="bufSize"></param>
            /// <param name="length">[length: 1]</param>
            /// <param name="groupString">[length: bufSize]</param>
            [CLSCompliant(false)]
            public static void GetPerfMonitorGroupString(UInt32 group, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder groupString)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("length_pinned");
                        IntPtr groupString_sb_ptr = IntPtr.Zero;
                        try
                        {
                            groupString_sb_ptr = Marshal.AllocHGlobal(groupString.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.LoadByName("length_pinned");
                            Silk.Cil.Conv_I();
                            Silk.Cil.Load(groupString_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(184);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(groupString_sb_ptr, groupString);
                        } finally {
                            Marshal.FreeHGlobal(groupString_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="bufSize"></param>
            /// <param name="length">[length: 1]</param>
            /// <param name="groupString">[length: bufSize]</param>
            [CLSCompliant(false)]
            public static unsafe void GetPerfMonitorGroupString(UInt32 group, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder groupString)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr groupString_sb_ptr = IntPtr.Zero;
                        try
                        {
                            groupString_sb_ptr = Marshal.AllocHGlobal(groupString.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Load(groupString_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(184);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(groupString_sb_ptr, groupString);
                        } finally {
                            Marshal.FreeHGlobal(groupString_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="monitor"></param>
            /// <param name="enable"></param>
            /// <param name="group"></param>
            /// <param name="numCounters"></param>
            /// <param name="counterList">[length: numCounters]</param>
            [CLSCompliant(false)]
            public static void SelectPerfMonitorCounters(Int32 monitor, bool enable, Int32 group, Int32 numCounters, [OutAttribute] Int32[] counterList)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "counterList_pinned");
                        if(counterList != null && counterList.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("counterList_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("counterList_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("counterList_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(311);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(bool), typeof(UInt32), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="monitor"></param>
            /// <param name="enable"></param>
            /// <param name="group"></param>
            /// <param name="numCounters"></param>
            /// <param name="counterList">[length: numCounters]</param>
            [CLSCompliant(false)]
            public static void SelectPerfMonitorCounters(Int32 monitor, bool enable, Int32 group, Int32 numCounters, [OutAttribute] out Int32 counterList)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "counterList_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.StoreByName("counterList_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("counterList_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(311);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(bool), typeof(UInt32), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="monitor"></param>
            /// <param name="enable"></param>
            /// <param name="group"></param>
            /// <param name="numCounters"></param>
            /// <param name="counterList">[length: numCounters]</param>
            [CLSCompliant(false)]
            public static unsafe void SelectPerfMonitorCounters(Int32 monitor, bool enable, Int32 group, Int32 numCounters, [OutAttribute] Int32* counterList)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(311);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(bool), typeof(UInt32), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="monitor"></param>
            /// <param name="enable"></param>
            /// <param name="group"></param>
            /// <param name="numCounters"></param>
            /// <param name="counterList">[length: numCounters]</param>
            [CLSCompliant(false)]
            public static void SelectPerfMonitorCounters(UInt32 monitor, bool enable, UInt32 group, Int32 numCounters, [OutAttribute] UInt32[] counterList)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "counterList_pinned");
                        if(counterList != null && counterList.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("counterList_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("counterList_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("counterList_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(311);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(bool), typeof(UInt32), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="monitor"></param>
            /// <param name="enable"></param>
            /// <param name="group"></param>
            /// <param name="numCounters"></param>
            /// <param name="counterList">[length: numCounters]</param>
            [CLSCompliant(false)]
            public static void SelectPerfMonitorCounters(UInt32 monitor, bool enable, UInt32 group, Int32 numCounters, [OutAttribute] out UInt32 counterList)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "counterList_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.StoreByName("counterList_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("counterList_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(311);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(bool), typeof(UInt32), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="monitor"></param>
            /// <param name="enable"></param>
            /// <param name="group"></param>
            /// <param name="numCounters"></param>
            /// <param name="counterList">[length: numCounters]</param>
            [CLSCompliant(false)]
            public static unsafe void SelectPerfMonitorCounters(UInt32 monitor, bool enable, UInt32 group, Int32 numCounters, [OutAttribute] UInt32* counterList)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(311);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(bool), typeof(UInt32), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

        }

        public static partial class Angle
        {
            /// <summary>[requires: ANGLE_framebuffer_blit]
            /// Copy a block of pixels from the read framebuffer to the draw framebuffer
            /// </summary>
            /// <param name="srcX0"> 
            /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
            /// </param>
            /// <param name="srcY0"> 
            /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
            /// </param>
            /// <param name="srcX1"> 
            /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
            /// </param>
            /// <param name="srcY1"> 
            /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
            /// </param>
            /// <param name="dstX0"> 
            /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
            /// </param>
            /// <param name="dstY0"> 
            /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
            /// </param>
            /// <param name="dstX1"> 
            /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
            /// </param>
            /// <param name="dstY1"> 
            /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
            /// </param>
            /// <param name="mask"> 
            /// The bitwise OR of the flags indicating which buffers are to be copied. The allowed flags are ColorBufferBit, DepthBufferBit and StencilBufferBit.
            /// </param>
            /// <param name="filter"> 
            /// Specifies the interpolation to be applied if the image is stretched. Must be Nearest or Linear.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            public static void BlitFramebuffer(Int32 srcX0, Int32 srcY0, Int32 srcX1, Int32 srcY1, Int32 dstX0, Int32 dstY0, Int32 dstX1, Int32 dstY1, OpenTK.Graphics.ES20.All mask, OpenTK.Graphics.ES20.All filter)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldarg(9);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(28);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.ClearBufferMask), typeof(OpenTK.Graphics.ES20.BlitFramebufferFilter));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: ANGLE_framebuffer_blit]
            /// Copy a block of pixels from the read framebuffer to the draw framebuffer
            /// </summary>
            /// <param name="srcX0"> 
            /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
            /// </param>
            /// <param name="srcY0"> 
            /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
            /// </param>
            /// <param name="srcX1"> 
            /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
            /// </param>
            /// <param name="srcY1"> 
            /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
            /// </param>
            /// <param name="dstX0"> 
            /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
            /// </param>
            /// <param name="dstY0"> 
            /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
            /// </param>
            /// <param name="dstX1"> 
            /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
            /// </param>
            /// <param name="dstY1"> 
            /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
            /// </param>
            /// <param name="mask"> 
            /// The bitwise OR of the flags indicating which buffers are to be copied. The allowed flags are ColorBufferBit, DepthBufferBit and StencilBufferBit.
            /// </param>
            /// <param name="filter"> 
            /// Specifies the interpolation to be applied if the image is stretched. Must be Nearest or Linear.
            /// </param>
            public static void BlitFramebuffer(Int32 srcX0, Int32 srcY0, Int32 srcX1, Int32 srcY1, Int32 dstX0, Int32 dstY0, Int32 dstX1, Int32 dstY1, OpenTK.Graphics.ES20.ClearBufferMask mask, OpenTK.Graphics.ES20.BlitFramebufferFilter filter)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldarg(9);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(28);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.ClearBufferMask), typeof(OpenTK.Graphics.ES20.BlitFramebufferFilter));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: ANGLE_instanced_arrays]
            /// Draw multiple instances of a range of elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, TrianglesLinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
            /// </param>
            /// <param name="first"> 
            /// Specifies the starting index in the enabled arrays.
            /// </param>
            /// <param name="count"> 
            /// Specifies the number of indices to be rendered.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            public static void DrawArraysInstanced(OpenTK.Graphics.ES20.All mode, Int32 first, Int32 count, Int32 primcount)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(88);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: ANGLE_instanced_arrays]
            /// Draw multiple instances of a range of elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, TrianglesLinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
            /// </param>
            /// <param name="first"> 
            /// Specifies the starting index in the enabled arrays.
            /// </param>
            /// <param name="count"> 
            /// Specifies the number of indices to be rendered.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            public static void DrawArraysInstanced(OpenTK.Graphics.ES20.PrimitiveType mode, Int32 first, Int32 count, Int32 primcount)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(88);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: ANGLE_instanced_arrays]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count"> 
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: count,type] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            public static void DrawElementsInstanced(OpenTK.Graphics.ES20.All mode, Int32 count, OpenTK.Graphics.ES20.All type, IntPtr indices, Int32 primcount)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(95);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: ANGLE_instanced_arrays]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count"> 
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: count,type] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES20.All mode, Int32 count, OpenTK.Graphics.ES20.All type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        if(indices != null && indices.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T3");
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(95);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: ANGLE_instanced_arrays]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count"> 
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: count,type] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES20.All mode, Int32 count, OpenTK.Graphics.ES20.All type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        if(indices != null && indices.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T3[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(95);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: ANGLE_instanced_arrays]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count"> 
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: count,type] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES20.All mode, Int32 count, OpenTK.Graphics.ES20.All type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        if(indices != null && indices.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T3[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(95);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: ANGLE_instanced_arrays]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count"> 
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: count,type] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES20.All mode, Int32 count, OpenTK.Graphics.ES20.All type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("indices_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(95);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: ANGLE_instanced_arrays]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count"> 
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: count,type] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            public static void DrawElementsInstanced(OpenTK.Graphics.ES20.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES20.DrawElementsType type, IntPtr indices, Int32 primcount)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(95);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: ANGLE_instanced_arrays]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count"> 
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: count,type] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [CLSCompliant(false)]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES20.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES20.DrawElementsType type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        if(indices != null && indices.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T3");
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(95);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: ANGLE_instanced_arrays]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count"> 
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: count,type] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [CLSCompliant(false)]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES20.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES20.DrawElementsType type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        if(indices != null && indices.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T3[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(95);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: ANGLE_instanced_arrays]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count"> 
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: count,type] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [CLSCompliant(false)]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES20.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES20.DrawElementsType type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        if(indices != null && indices.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T3[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(95);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: ANGLE_instanced_arrays]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count"> 
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: count,type] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES20.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES20.DrawElementsType type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("indices_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(95);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: ANGLE_translated_shader_source]</summary>
            /// <param name="shader"></param>
            /// <param name="bufsize"></param>
            /// <param name="length">[length: 1]</param>
            /// <param name="source"></param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void GetTranslatedShaderSource(Int32 shader, Int32 bufsize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder source)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        if(length != null && length.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        IntPtr source_sb_ptr = IntPtr.Zero;
                        try
                        {
                            source_sb_ptr = Marshal.AllocHGlobal(source.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.LoadByName("length_pinned");
                            Silk.Cil.Load(source_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(213);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(source_sb_ptr, source);
                        } finally {
                            Marshal.FreeHGlobal(source_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: ANGLE_translated_shader_source]</summary>
            /// <param name="shader"></param>
            /// <param name="bufsize"></param>
            /// <param name="length">[length: 1]</param>
            /// <param name="source"></param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void GetTranslatedShaderSource(Int32 shader, Int32 bufsize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder source)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("length_pinned");
                        IntPtr source_sb_ptr = IntPtr.Zero;
                        try
                        {
                            source_sb_ptr = Marshal.AllocHGlobal(source.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.LoadByName("length_pinned");
                            Silk.Cil.Conv_I();
                            Silk.Cil.Load(source_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(213);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(source_sb_ptr, source);
                        } finally {
                            Marshal.FreeHGlobal(source_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: ANGLE_translated_shader_source]</summary>
            /// <param name="shader"></param>
            /// <param name="bufsize"></param>
            /// <param name="length">[length: 1]</param>
            /// <param name="source"></param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static unsafe void GetTranslatedShaderSource(Int32 shader, Int32 bufsize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder source)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr source_sb_ptr = IntPtr.Zero;
                        try
                        {
                            source_sb_ptr = Marshal.AllocHGlobal(source.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Load(source_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(213);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(source_sb_ptr, source);
                        } finally {
                            Marshal.FreeHGlobal(source_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: ANGLE_translated_shader_source]</summary>
            /// <param name="shader"></param>
            /// <param name="bufsize"></param>
            /// <param name="length">[length: 1]</param>
            /// <param name="source"></param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void GetTranslatedShaderSource(UInt32 shader, Int32 bufsize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder source)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        if(length != null && length.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        IntPtr source_sb_ptr = IntPtr.Zero;
                        try
                        {
                            source_sb_ptr = Marshal.AllocHGlobal(source.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.LoadByName("length_pinned");
                            Silk.Cil.Load(source_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(213);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(source_sb_ptr, source);
                        } finally {
                            Marshal.FreeHGlobal(source_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: ANGLE_translated_shader_source]</summary>
            /// <param name="shader"></param>
            /// <param name="bufsize"></param>
            /// <param name="length">[length: 1]</param>
            /// <param name="source"></param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void GetTranslatedShaderSource(UInt32 shader, Int32 bufsize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder source)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("length_pinned");
                        IntPtr source_sb_ptr = IntPtr.Zero;
                        try
                        {
                            source_sb_ptr = Marshal.AllocHGlobal(source.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.LoadByName("length_pinned");
                            Silk.Cil.Conv_I();
                            Silk.Cil.Load(source_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(213);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(source_sb_ptr, source);
                        } finally {
                            Marshal.FreeHGlobal(source_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: ANGLE_translated_shader_source]</summary>
            /// <param name="shader"></param>
            /// <param name="bufsize"></param>
            /// <param name="length">[length: 1]</param>
            /// <param name="source"></param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static unsafe void GetTranslatedShaderSource(UInt32 shader, Int32 bufsize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder source)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr source_sb_ptr = IntPtr.Zero;
                        try
                        {
                            source_sb_ptr = Marshal.AllocHGlobal(source.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Load(source_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(213);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(source_sb_ptr, source);
                        } finally {
                            Marshal.FreeHGlobal(source_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: ANGLE_framebuffer_multisample]
            /// Establish data storage, format, dimensions and sample count of a renderbuffer object's image
            /// </summary>
            /// <param name="target"> 
            /// Specifies a binding to which the target of the allocation and must be Renderbuffer.
            /// </param>
            /// <param name="samples"> 
            /// Specifies the number of samples to be used for the renderbuffer object's storage.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the internal format to use for the renderbuffer object's image.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the renderbuffer, in pixels.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the renderbuffer, in pixels.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            public static void RenderbufferStorageMultisample(OpenTK.Graphics.ES20.All target, Int32 samples, OpenTK.Graphics.ES20.All internalformat, Int32 width, Int32 height)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(301);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.RenderbufferTarget), typeof(Int32), typeof(OpenTK.Graphics.ES20.RenderbufferInternalFormat), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: ANGLE_framebuffer_multisample]
            /// Establish data storage, format, dimensions and sample count of a renderbuffer object's image
            /// </summary>
            /// <param name="target"> 
            /// Specifies a binding to which the target of the allocation and must be Renderbuffer.
            /// </param>
            /// <param name="samples"> 
            /// Specifies the number of samples to be used for the renderbuffer object's storage.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the internal format to use for the renderbuffer object's image.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the renderbuffer, in pixels.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the renderbuffer, in pixels.
            /// </param>
            public static void RenderbufferStorageMultisample(OpenTK.Graphics.ES20.RenderbufferTarget target, Int32 samples, OpenTK.Graphics.ES20.RenderbufferInternalFormat internalformat, Int32 width, Int32 height)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(301);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.RenderbufferTarget), typeof(Int32), typeof(OpenTK.Graphics.ES20.RenderbufferInternalFormat), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: ANGLE_instanced_arrays]
            /// Modify the rate at which generic vertex attributes advance during instanced rendering
            /// </summary>
            /// <param name="index"> 
            /// Specify the index of the generic vertex attribute.
            /// </param>
            /// <param name="divisor"> 
            /// Specify the number of instances that will pass between updates of the generic attribute at slot index.
            /// </param>
            [CLSCompliant(false)]
            public static void VertexAttribDivisor(Int32 index, Int32 divisor)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(382);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: ANGLE_instanced_arrays]
            /// Modify the rate at which generic vertex attributes advance during instanced rendering
            /// </summary>
            /// <param name="index"> 
            /// Specify the index of the generic vertex attribute.
            /// </param>
            /// <param name="divisor"> 
            /// Specify the number of instances that will pass between updates of the generic attribute at slot index.
            /// </param>
            [CLSCompliant(false)]
            public static void VertexAttribDivisor(UInt32 index, UInt32 divisor)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(382);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

        }

        public static partial class Apple
        {
            /// <summary>[requires: APPLE_sync]
            /// Block and wait for a sync object to become signaled
            /// </summary>
            /// <param name="sync"> 
            /// The sync object whose status to wait on.
            /// </param>
            /// <param name="flags"> 
            /// A bitfield controlling the command flushing behavior. flags may be SyncFlushCommandsBit.
            /// </param>
            /// <param name="timeout"> 
            /// The timeout, specified in nanoseconds, for which the implementation should wait for sync to become signaled.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static OpenTK.Graphics.ES20.WaitSyncStatus ClientWaitSync(IntPtr sync, OpenTK.Graphics.ES20.All flags, Int64 timeout)
            {
                unsafe
                {
                    OpenTK.Graphics.ES20.WaitSyncStatus __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(37);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(OpenTK.Graphics.ES20.WaitSyncStatus), typeof(IntPtr), typeof(OpenTK.Graphics.ES20.ClientWaitSyncFlags), typeof(UInt64));
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: APPLE_sync]
            /// Block and wait for a sync object to become signaled
            /// </summary>
            /// <param name="sync"> 
            /// The sync object whose status to wait on.
            /// </param>
            /// <param name="flags"> 
            /// A bitfield controlling the command flushing behavior. flags may be SyncFlushCommandsBit.
            /// </param>
            /// <param name="timeout"> 
            /// The timeout, specified in nanoseconds, for which the implementation should wait for sync to become signaled.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static OpenTK.Graphics.ES20.WaitSyncStatus ClientWaitSync(IntPtr sync, OpenTK.Graphics.ES20.All flags, UInt64 timeout)
            {
                unsafe
                {
                    OpenTK.Graphics.ES20.WaitSyncStatus __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(37);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(OpenTK.Graphics.ES20.WaitSyncStatus), typeof(IntPtr), typeof(OpenTK.Graphics.ES20.ClientWaitSyncFlags), typeof(UInt64));
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: APPLE_sync]
            /// Block and wait for a sync object to become signaled
            /// </summary>
            /// <param name="sync"> 
            /// The sync object whose status to wait on.
            /// </param>
            /// <param name="flags"> 
            /// A bitfield controlling the command flushing behavior. flags may be SyncFlushCommandsBit.
            /// </param>
            /// <param name="timeout"> 
            /// The timeout, specified in nanoseconds, for which the implementation should wait for sync to become signaled.
            /// </param>
            [CLSCompliant(false)]
            public static OpenTK.Graphics.ES20.WaitSyncStatus ClientWaitSync(IntPtr sync, OpenTK.Graphics.ES20.ClientWaitSyncFlags flags, Int64 timeout)
            {
                unsafe
                {
                    OpenTK.Graphics.ES20.WaitSyncStatus __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(37);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(OpenTK.Graphics.ES20.WaitSyncStatus), typeof(IntPtr), typeof(OpenTK.Graphics.ES20.ClientWaitSyncFlags), typeof(UInt64));
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: APPLE_sync]
            /// Block and wait for a sync object to become signaled
            /// </summary>
            /// <param name="sync"> 
            /// The sync object whose status to wait on.
            /// </param>
            /// <param name="flags"> 
            /// A bitfield controlling the command flushing behavior. flags may be SyncFlushCommandsBit.
            /// </param>
            /// <param name="timeout"> 
            /// The timeout, specified in nanoseconds, for which the implementation should wait for sync to become signaled.
            /// </param>
            [CLSCompliant(false)]
            public static OpenTK.Graphics.ES20.WaitSyncStatus ClientWaitSync(IntPtr sync, OpenTK.Graphics.ES20.ClientWaitSyncFlags flags, UInt64 timeout)
            {
                unsafe
                {
                    OpenTK.Graphics.ES20.WaitSyncStatus __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(37);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(OpenTK.Graphics.ES20.WaitSyncStatus), typeof(IntPtr), typeof(OpenTK.Graphics.ES20.ClientWaitSyncFlags), typeof(UInt64));
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: APPLE_copy_texture_levels]</summary>
            /// <param name="destinationTexture"></param>
            /// <param name="sourceTexture"></param>
            /// <param name="sourceBaseLevel"></param>
            /// <param name="sourceLevelCount"></param>
            [CLSCompliant(false)]
            public static void CopyTextureLevel(Int32 destinationTexture, Int32 sourceTexture, Int32 sourceBaseLevel, Int32 sourceLevelCount)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(50);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: APPLE_copy_texture_levels]</summary>
            /// <param name="destinationTexture"></param>
            /// <param name="sourceTexture"></param>
            /// <param name="sourceBaseLevel"></param>
            /// <param name="sourceLevelCount"></param>
            [CLSCompliant(false)]
            public static void CopyTextureLevel(UInt32 destinationTexture, UInt32 sourceTexture, Int32 sourceBaseLevel, Int32 sourceLevelCount)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(50);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: APPLE_sync]
            /// Delete a sync object
            /// </summary>
            /// <param name="sync"> 
            /// The sync object to be deleted.
            /// </param>
            public static void DeleteSync(IntPtr sync)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(75);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: APPLE_sync]
            /// Create a new sync object and insert it into the GL command stream
            /// </summary>
            /// <param name="condition"> 
            /// Specifies the condition that must be met to set the sync object's state to signaled. condition must be SyncGpuCommandsComplete.
            /// </param>
            /// <param name="flags"> 
            /// Specifies a bitwise combination of flags controlling the behavior of the sync object. No flags are presently defined for this operation and flags must be zero.flags is a placeholder for anticipated future extensions of fence sync object capabilities.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            public static IntPtr FenceSync(OpenTK.Graphics.ES20.All condition, OpenTK.Graphics.ES20.All flags)
            {
                unsafe
                {
                    IntPtr __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(120);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(IntPtr), typeof(OpenTK.Graphics.ES20.SyncCondition), typeof(OpenTK.Graphics.ES20.WaitSyncFlags));
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: APPLE_sync]
            /// Create a new sync object and insert it into the GL command stream
            /// </summary>
            /// <param name="condition"> 
            /// Specifies the condition that must be met to set the sync object's state to signaled. condition must be SyncGpuCommandsComplete.
            /// </param>
            /// <param name="flags"> 
            /// Specifies a bitwise combination of flags controlling the behavior of the sync object. No flags are presently defined for this operation and flags must be zero.flags is a placeholder for anticipated future extensions of fence sync object capabilities.
            /// </param>
            public static IntPtr FenceSync(OpenTK.Graphics.ES20.SyncCondition condition, OpenTK.Graphics.ES20.WaitSyncFlags flags)
            {
                unsafe
                {
                    IntPtr __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(120);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(IntPtr), typeof(OpenTK.Graphics.ES20.SyncCondition), typeof(OpenTK.Graphics.ES20.WaitSyncFlags));
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: APPLE_sync]</summary>
            /// <param name="pname"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static Int64 GetInteger64(OpenTK.Graphics.ES20.All pname)
            {
                unsafe
                {
                    Int64 __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Int64 __result = default(Int64);
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadAddress(__result);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(161);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.GetPName), typeof(Int64*));
                        Silk.Cil.Load(__result);
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: APPLE_sync]</summary>
            /// <param name="pname"></param>
            [CLSCompliant(false)]
            public static Int64 GetInteger64(OpenTK.Graphics.ES20.GetPName pname)
            {
                unsafe
                {
                    Int64 __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Int64 __result = default(Int64);
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadAddress(__result);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(161);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.GetPName), typeof(Int64*));
                        Silk.Cil.Load(__result);
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: APPLE_sync]</summary>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void GetInteger64(OpenTK.Graphics.ES20.All pname, [OutAttribute] Int64[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int64& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int64");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(161);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.GetPName), typeof(Int64*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: APPLE_sync]</summary>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void GetInteger64(OpenTK.Graphics.ES20.All pname, [OutAttribute] out Int64 @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int64& pinned", "params_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(161);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.GetPName), typeof(Int64*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: APPLE_sync]</summary>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static unsafe void GetInteger64(OpenTK.Graphics.ES20.All pname, [OutAttribute] Int64* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(161);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.GetPName), typeof(Int64*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: APPLE_sync]</summary>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [CLSCompliant(false)]
            public static void GetInteger64(OpenTK.Graphics.ES20.GetPName pname, [OutAttribute] Int64[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int64& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int64");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(161);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.GetPName), typeof(Int64*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: APPLE_sync]</summary>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [CLSCompliant(false)]
            public static void GetInteger64(OpenTK.Graphics.ES20.GetPName pname, [OutAttribute] out Int64 @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int64& pinned", "params_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(161);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.GetPName), typeof(Int64*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: APPLE_sync]</summary>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [CLSCompliant(false)]
            public static unsafe void GetInteger64(OpenTK.Graphics.ES20.GetPName pname, [OutAttribute] Int64* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(161);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.GetPName), typeof(Int64*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: APPLE_sync]
            /// Query the properties of a sync object
            /// </summary>
            /// <param name="sync"> 
            /// Specifies the sync object whose properties to query.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the parameter whose value to retrieve from the sync object specified in sync.
            /// </param>
            /// <param name="bufSize"> 
            /// Specifies the size of the buffer whose address is given in values.
            /// </param>
            /// <param name="length"> 
            /// Specifies the address of an variable to receive the number of integers placed in values.
            /// </param>
            /// <param name="values">[length: bufSize] 
            /// Specifies the address of an array to receive the values of the queried parameter.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void GetSync(IntPtr sync, OpenTK.Graphics.ES20.All pname, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] Int32[] values)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        if(length != null && length.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "values_pinned");
                        if(values != null && values.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("values_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("values_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("length_pinned");
                        Silk.Cil.LoadByName("values_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(208);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(IntPtr), typeof(OpenTK.Graphics.ES20.SyncParameterName), typeof(Int32), typeof(Int32*), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: APPLE_sync]
            /// Query the properties of a sync object
            /// </summary>
            /// <param name="sync"> 
            /// Specifies the sync object whose properties to query.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the parameter whose value to retrieve from the sync object specified in sync.
            /// </param>
            /// <param name="bufSize"> 
            /// Specifies the size of the buffer whose address is given in values.
            /// </param>
            /// <param name="length"> 
            /// Specifies the address of an variable to receive the number of integers placed in values.
            /// </param>
            /// <param name="values">[length: bufSize] 
            /// Specifies the address of an array to receive the values of the queried parameter.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void GetSync(IntPtr sync, OpenTK.Graphics.ES20.All pname, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 values)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("length_pinned");
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "values_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.StoreByName("values_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("length_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("values_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(208);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(IntPtr), typeof(OpenTK.Graphics.ES20.SyncParameterName), typeof(Int32), typeof(Int32*), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: APPLE_sync]
            /// Query the properties of a sync object
            /// </summary>
            /// <param name="sync"> 
            /// Specifies the sync object whose properties to query.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the parameter whose value to retrieve from the sync object specified in sync.
            /// </param>
            /// <param name="bufSize"> 
            /// Specifies the size of the buffer whose address is given in values.
            /// </param>
            /// <param name="length"> 
            /// Specifies the address of an variable to receive the number of integers placed in values.
            /// </param>
            /// <param name="values">[length: bufSize] 
            /// Specifies the address of an array to receive the values of the queried parameter.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static unsafe void GetSync(IntPtr sync, OpenTK.Graphics.ES20.All pname, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* values)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(208);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(IntPtr), typeof(OpenTK.Graphics.ES20.SyncParameterName), typeof(Int32), typeof(Int32*), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: APPLE_sync]
            /// Query the properties of a sync object
            /// </summary>
            /// <param name="sync"> 
            /// Specifies the sync object whose properties to query.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the parameter whose value to retrieve from the sync object specified in sync.
            /// </param>
            /// <param name="bufSize"> 
            /// Specifies the size of the buffer whose address is given in values.
            /// </param>
            /// <param name="length"> 
            /// Specifies the address of an variable to receive the number of integers placed in values.
            /// </param>
            /// <param name="values">[length: bufSize] 
            /// Specifies the address of an array to receive the values of the queried parameter.
            /// </param>
            [CLSCompliant(false)]
            public static void GetSync(IntPtr sync, OpenTK.Graphics.ES20.SyncParameterName pname, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] Int32[] values)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        if(length != null && length.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "values_pinned");
                        if(values != null && values.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("values_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("values_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("length_pinned");
                        Silk.Cil.LoadByName("values_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(208);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(IntPtr), typeof(OpenTK.Graphics.ES20.SyncParameterName), typeof(Int32), typeof(Int32*), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: APPLE_sync]
            /// Query the properties of a sync object
            /// </summary>
            /// <param name="sync"> 
            /// Specifies the sync object whose properties to query.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the parameter whose value to retrieve from the sync object specified in sync.
            /// </param>
            /// <param name="bufSize"> 
            /// Specifies the size of the buffer whose address is given in values.
            /// </param>
            /// <param name="length"> 
            /// Specifies the address of an variable to receive the number of integers placed in values.
            /// </param>
            /// <param name="values">[length: bufSize] 
            /// Specifies the address of an array to receive the values of the queried parameter.
            /// </param>
            [CLSCompliant(false)]
            public static void GetSync(IntPtr sync, OpenTK.Graphics.ES20.SyncParameterName pname, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 values)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("length_pinned");
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "values_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.StoreByName("values_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("length_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("values_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(208);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(IntPtr), typeof(OpenTK.Graphics.ES20.SyncParameterName), typeof(Int32), typeof(Int32*), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: APPLE_sync]
            /// Query the properties of a sync object
            /// </summary>
            /// <param name="sync"> 
            /// Specifies the sync object whose properties to query.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the parameter whose value to retrieve from the sync object specified in sync.
            /// </param>
            /// <param name="bufSize"> 
            /// Specifies the size of the buffer whose address is given in values.
            /// </param>
            /// <param name="length"> 
            /// Specifies the address of an variable to receive the number of integers placed in values.
            /// </param>
            /// <param name="values">[length: bufSize] 
            /// Specifies the address of an array to receive the values of the queried parameter.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void GetSync(IntPtr sync, OpenTK.Graphics.ES20.SyncParameterName pname, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* values)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(208);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(IntPtr), typeof(OpenTK.Graphics.ES20.SyncParameterName), typeof(Int32), typeof(Int32*), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: APPLE_sync]
            /// Determine if a name corresponds to a sync object
            /// </summary>
            /// <param name="sync"> 
            /// Specifies a value that may be the name of a sync object.
            /// </param>
            public static bool IsSync(IntPtr sync)
            {
                unsafe
                {
                    bool __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(232);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(byte), typeof(IntPtr));
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: APPLE_framebuffer_multisample]
            /// Establish data storage, format, dimensions and sample count of a renderbuffer object's image
            /// </summary>
            /// <param name="target"> 
            /// Specifies a binding to which the target of the allocation and must be Renderbuffer.
            /// </param>
            /// <param name="samples"> 
            /// Specifies the number of samples to be used for the renderbuffer object's storage.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the internal format to use for the renderbuffer object's image.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the renderbuffer, in pixels.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the renderbuffer, in pixels.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            public static void RenderbufferStorageMultisample(OpenTK.Graphics.ES20.All target, Int32 samples, OpenTK.Graphics.ES20.All internalformat, Int32 width, Int32 height)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(302);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.RenderbufferTarget), typeof(Int32), typeof(OpenTK.Graphics.ES20.RenderbufferInternalFormat), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: APPLE_framebuffer_multisample]
            /// Establish data storage, format, dimensions and sample count of a renderbuffer object's image
            /// </summary>
            /// <param name="target"> 
            /// Specifies a binding to which the target of the allocation and must be Renderbuffer.
            /// </param>
            /// <param name="samples"> 
            /// Specifies the number of samples to be used for the renderbuffer object's storage.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the internal format to use for the renderbuffer object's image.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the renderbuffer, in pixels.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the renderbuffer, in pixels.
            /// </param>
            public static void RenderbufferStorageMultisample(OpenTK.Graphics.ES20.RenderbufferTarget target, Int32 samples, OpenTK.Graphics.ES20.RenderbufferInternalFormat internalformat, Int32 width, Int32 height)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(302);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.RenderbufferTarget), typeof(Int32), typeof(OpenTK.Graphics.ES20.RenderbufferInternalFormat), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: APPLE_framebuffer_multisample]</summary>
            public static void ResolveMultisampleFramebuffer()
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(306);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: APPLE_sync]
            /// Instruct the GL server to block until the specified sync object becomes signaled
            /// </summary>
            /// <param name="sync"> 
            /// Specifies the sync object whose status to wait on.
            /// </param>
            /// <param name="flags"> 
            /// A bitfield controlling the command flushing behavior. flags may be zero.
            /// </param>
            /// <param name="timeout"> 
            /// Specifies the timeout that the server should wait before continuing. timeout must be TimeoutIgnored.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void WaitSync(IntPtr sync, OpenTK.Graphics.ES20.All flags, Int64 timeout)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(387);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(IntPtr), typeof(OpenTK.Graphics.ES20.WaitSyncFlags), typeof(UInt64));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: APPLE_sync]
            /// Instruct the GL server to block until the specified sync object becomes signaled
            /// </summary>
            /// <param name="sync"> 
            /// Specifies the sync object whose status to wait on.
            /// </param>
            /// <param name="flags"> 
            /// A bitfield controlling the command flushing behavior. flags may be zero.
            /// </param>
            /// <param name="timeout"> 
            /// Specifies the timeout that the server should wait before continuing. timeout must be TimeoutIgnored.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void WaitSync(IntPtr sync, OpenTK.Graphics.ES20.All flags, UInt64 timeout)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(387);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(IntPtr), typeof(OpenTK.Graphics.ES20.WaitSyncFlags), typeof(UInt64));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: APPLE_sync]
            /// Instruct the GL server to block until the specified sync object becomes signaled
            /// </summary>
            /// <param name="sync"> 
            /// Specifies the sync object whose status to wait on.
            /// </param>
            /// <param name="flags"> 
            /// A bitfield controlling the command flushing behavior. flags may be zero.
            /// </param>
            /// <param name="timeout"> 
            /// Specifies the timeout that the server should wait before continuing. timeout must be TimeoutIgnored.
            /// </param>
            [CLSCompliant(false)]
            public static void WaitSync(IntPtr sync, OpenTK.Graphics.ES20.WaitSyncFlags flags, Int64 timeout)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(387);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(IntPtr), typeof(OpenTK.Graphics.ES20.WaitSyncFlags), typeof(UInt64));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: APPLE_sync]
            /// Instruct the GL server to block until the specified sync object becomes signaled
            /// </summary>
            /// <param name="sync"> 
            /// Specifies the sync object whose status to wait on.
            /// </param>
            /// <param name="flags"> 
            /// A bitfield controlling the command flushing behavior. flags may be zero.
            /// </param>
            /// <param name="timeout"> 
            /// Specifies the timeout that the server should wait before continuing. timeout must be TimeoutIgnored.
            /// </param>
            [CLSCompliant(false)]
            public static void WaitSync(IntPtr sync, OpenTK.Graphics.ES20.WaitSyncFlags flags, UInt64 timeout)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(387);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(IntPtr), typeof(OpenTK.Graphics.ES20.WaitSyncFlags), typeof(UInt64));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Select active texture unit
        /// </summary>
        /// <param name="texture"> 
        /// Specifies which texture unit to make active. The number of texture units is implementation dependent, but must be at least 8. texture must be one of Texture, where i ranges from 0 to (MaxCombinedTextureImageUnits - 1). The initial value is Texture0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void ActiveTexture(OpenTK.Graphics.ES20.All texture)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(2);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureUnit));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Select active texture unit
        /// </summary>
        /// <param name="texture"> 
        /// Specifies which texture unit to make active. The number of texture units is implementation dependent, but must be at least 8. texture must be one of Texture, where i ranges from 0 to (MaxCombinedTextureImageUnits - 1). The initial value is Texture0.
        /// </param>
        public static void ActiveTexture(OpenTK.Graphics.ES20.TextureUnit texture)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(2);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureUnit));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Attach a shader object to a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to which a shader object will be attached.
        /// </param>
        /// <param name="shader"> 
        /// Specifies the shader object that is to be attached.
        /// </param>
        [CLSCompliant(false)]
        public static void AttachShader(Int32 program, Int32 shader)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(4);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Attach a shader object to a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to which a shader object will be attached.
        /// </param>
        /// <param name="shader"> 
        /// Specifies the shader object that is to be attached.
        /// </param>
        [CLSCompliant(false)]
        public static void AttachShader(UInt32 program, UInt32 shader)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(4);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Associate a generic vertex attribute index with a named attribute variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the handle of the program object in which the association is to be made.
        /// </param>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be bound.
        /// </param>
        /// <param name="name"> 
        /// Specifies a null terminated string containing the name of the vertex shader attribute variable to which index is to be bound.
        /// </param>
        [CLSCompliant(false)]
        public static void BindAttribLocation(Int32 program, Int32 index, String name)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    IntPtr name_string_ptr = MarshalStringToPtr(name);
                    try {
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(name_string_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(8);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(IntPtr));
                    } finally {
                        FreeStringPtr(name_string_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Associate a generic vertex attribute index with a named attribute variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the handle of the program object in which the association is to be made.
        /// </param>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be bound.
        /// </param>
        /// <param name="name"> 
        /// Specifies a null terminated string containing the name of the vertex shader attribute variable to which index is to be bound.
        /// </param>
        [CLSCompliant(false)]
        public static void BindAttribLocation(UInt32 program, UInt32 index, String name)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    IntPtr name_string_ptr = MarshalStringToPtr(name);
                    try {
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(name_string_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(8);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(IntPtr));
                    } finally {
                        FreeStringPtr(name_string_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Bind a named buffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target to which the buffer object is bound. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="buffer"> 
        /// Specifies the name of a buffer object.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void BindBuffer(OpenTK.Graphics.ES20.All target, Int32 buffer)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(9);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Bind a named buffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target to which the buffer object is bound. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="buffer"> 
        /// Specifies the name of a buffer object.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void BindBuffer(OpenTK.Graphics.ES20.All target, UInt32 buffer)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(9);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Bind a named buffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target to which the buffer object is bound. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="buffer"> 
        /// Specifies the name of a buffer object.
        /// </param>
        [CLSCompliant(false)]
        public static void BindBuffer(OpenTK.Graphics.ES20.BufferTarget target, Int32 buffer)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(9);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Bind a named buffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target to which the buffer object is bound. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="buffer"> 
        /// Specifies the name of a buffer object.
        /// </param>
        [CLSCompliant(false)]
        public static void BindBuffer(OpenTK.Graphics.ES20.BufferTarget target, UInt32 buffer)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(9);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Bind a named framebuffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target to which the framebuffer object is bound. The symbolic constant must be Framebuffer.
        /// </param>
        /// <param name="framebuffer"> 
        /// Specifies the name of a framebuffer object.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void BindFramebuffer(OpenTK.Graphics.ES20.All target, Int32 framebuffer)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(10);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.FramebufferTarget), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Bind a named framebuffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target to which the framebuffer object is bound. The symbolic constant must be Framebuffer.
        /// </param>
        /// <param name="framebuffer"> 
        /// Specifies the name of a framebuffer object.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void BindFramebuffer(OpenTK.Graphics.ES20.All target, UInt32 framebuffer)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(10);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.FramebufferTarget), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Bind a named framebuffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target to which the framebuffer object is bound. The symbolic constant must be Framebuffer.
        /// </param>
        /// <param name="framebuffer"> 
        /// Specifies the name of a framebuffer object.
        /// </param>
        [CLSCompliant(false)]
        public static void BindFramebuffer(OpenTK.Graphics.ES20.FramebufferTarget target, Int32 framebuffer)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(10);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.FramebufferTarget), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Bind a named framebuffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target to which the framebuffer object is bound. The symbolic constant must be Framebuffer.
        /// </param>
        /// <param name="framebuffer"> 
        /// Specifies the name of a framebuffer object.
        /// </param>
        [CLSCompliant(false)]
        public static void BindFramebuffer(OpenTK.Graphics.ES20.FramebufferTarget target, UInt32 framebuffer)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(10);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.FramebufferTarget), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Bind a named renderbuffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target to which the renderbuffer object is bound. The symbolic constant must be Renderbuffer.
        /// </param>
        /// <param name="renderbuffer"> 
        /// Specifies the name of a renderbuffer object.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void BindRenderbuffer(OpenTK.Graphics.ES20.All target, Int32 renderbuffer)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(12);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.RenderbufferTarget), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Bind a named renderbuffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target to which the renderbuffer object is bound. The symbolic constant must be Renderbuffer.
        /// </param>
        /// <param name="renderbuffer"> 
        /// Specifies the name of a renderbuffer object.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void BindRenderbuffer(OpenTK.Graphics.ES20.All target, UInt32 renderbuffer)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(12);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.RenderbufferTarget), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Bind a named renderbuffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target to which the renderbuffer object is bound. The symbolic constant must be Renderbuffer.
        /// </param>
        /// <param name="renderbuffer"> 
        /// Specifies the name of a renderbuffer object.
        /// </param>
        [CLSCompliant(false)]
        public static void BindRenderbuffer(OpenTK.Graphics.ES20.RenderbufferTarget target, Int32 renderbuffer)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(12);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.RenderbufferTarget), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Bind a named renderbuffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target to which the renderbuffer object is bound. The symbolic constant must be Renderbuffer.
        /// </param>
        /// <param name="renderbuffer"> 
        /// Specifies the name of a renderbuffer object.
        /// </param>
        [CLSCompliant(false)]
        public static void BindRenderbuffer(OpenTK.Graphics.ES20.RenderbufferTarget target, UInt32 renderbuffer)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(12);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.RenderbufferTarget), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Bind a named texture to a texturing target
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target of the active texture unit to which the texture is bound. Must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="texture"> 
        /// Specifies the name of a texture.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void BindTexture(OpenTK.Graphics.ES20.All target, Int32 texture)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(13);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Bind a named texture to a texturing target
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target of the active texture unit to which the texture is bound. Must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="texture"> 
        /// Specifies the name of a texture.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void BindTexture(OpenTK.Graphics.ES20.All target, UInt32 texture)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(13);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Bind a named texture to a texturing target
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target of the active texture unit to which the texture is bound. Must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="texture"> 
        /// Specifies the name of a texture.
        /// </param>
        [CLSCompliant(false)]
        public static void BindTexture(OpenTK.Graphics.ES20.TextureTarget target, Int32 texture)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(13);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Bind a named texture to a texturing target
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target of the active texture unit to which the texture is bound. Must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="texture"> 
        /// Specifies the name of a texture.
        /// </param>
        [CLSCompliant(false)]
        public static void BindTexture(OpenTK.Graphics.ES20.TextureTarget target, UInt32 texture)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(13);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set the blend color
        /// </summary>
        /// <param name="red"> 
        /// specify the components of BlendColor
        /// </param>
        /// <param name="green"> 
        /// specify the components of BlendColor
        /// </param>
        /// <param name="blue"> 
        /// specify the components of BlendColor
        /// </param>
        /// <param name="alpha"> 
        /// specify the components of BlendColor
        /// </param>
        public static void BlendColor(Single red, Single green, Single blue, Single alpha)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(17);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Single), typeof(Single), typeof(Single), typeof(Single));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the equation used for both the RGB blend equation and the Alpha blend equation
        /// </summary>
        /// <param name="mode"> 
        /// specifies how source and destination colors are combined. It must be FuncAdd, FuncSubtract, or FuncReverseSubtract.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void BlendEquation(OpenTK.Graphics.ES20.All mode)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(18);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BlendEquationMode));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the equation used for both the RGB blend equation and the Alpha blend equation
        /// </summary>
        /// <param name="mode"> 
        /// specifies how source and destination colors are combined. It must be FuncAdd, FuncSubtract, or FuncReverseSubtract.
        /// </param>
        public static void BlendEquation(OpenTK.Graphics.ES20.BlendEquationMode mode)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(18);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BlendEquationMode));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set the RGB blend equation and the alpha blend equation separately
        /// </summary>
        /// <param name="modeRGB"> 
        /// specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, or FuncReverseSubtract.
        /// </param>
        /// <param name="modeAlpha"> 
        /// specifies the alpha blend equation, how the alpha component of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, or FuncReverseSubtract.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void BlendEquationSeparate(OpenTK.Graphics.ES20.All modeRGB, OpenTK.Graphics.ES20.All modeAlpha)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(21);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BlendEquationMode), typeof(OpenTK.Graphics.ES20.BlendEquationMode));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set the RGB blend equation and the alpha blend equation separately
        /// </summary>
        /// <param name="modeRGB"> 
        /// specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, or FuncReverseSubtract.
        /// </param>
        /// <param name="modeAlpha"> 
        /// specifies the alpha blend equation, how the alpha component of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, or FuncReverseSubtract.
        /// </param>
        public static void BlendEquationSeparate(OpenTK.Graphics.ES20.BlendEquationMode modeRGB, OpenTK.Graphics.ES20.BlendEquationMode modeAlpha)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(21);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BlendEquationMode), typeof(OpenTK.Graphics.ES20.BlendEquationMode));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify pixel arithmetic
        /// </summary>
        /// <param name="sfactor"> 
        /// Specifies how the red, green, blue, and alpha source blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha, ConstantColor, OneMinusConstantColor, ConstantAlpha, OneMinusConstantAlpha, and SrcAlphaSaturate. The initial value is One.
        /// </param>
        /// <param name="dfactor"> 
        /// Specifies how the red, green, blue, and alpha destination blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha. ConstantColor, OneMinusConstantColor, ConstantAlpha, and OneMinusConstantAlpha. The initial value is Zero.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void BlendFunc(OpenTK.Graphics.ES20.All sfactor, OpenTK.Graphics.ES20.All dfactor)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(23);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BlendingFactorSrc), typeof(OpenTK.Graphics.ES20.BlendingFactorDest));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify pixel arithmetic
        /// </summary>
        /// <param name="sfactor"> 
        /// Specifies how the red, green, blue, and alpha source blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha, ConstantColor, OneMinusConstantColor, ConstantAlpha, OneMinusConstantAlpha, and SrcAlphaSaturate. The initial value is One.
        /// </param>
        /// <param name="dfactor"> 
        /// Specifies how the red, green, blue, and alpha destination blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha. ConstantColor, OneMinusConstantColor, ConstantAlpha, and OneMinusConstantAlpha. The initial value is Zero.
        /// </param>
        public static void BlendFunc(OpenTK.Graphics.ES20.BlendingFactorSrc sfactor, OpenTK.Graphics.ES20.BlendingFactorDest dfactor)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(23);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BlendingFactorSrc), typeof(OpenTK.Graphics.ES20.BlendingFactorDest));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify pixel arithmetic for RGB and alpha components separately
        /// </summary>
        /// <param name="sfactorRGB"> 
        /// Specifies how the red, green, and blue blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha, ConstantColor, OneMinusConstantColor, ConstantAlpha, OneMinusConstantAlpha, and SrcAlphaSaturate. The initial value is One.
        /// </param>
        /// <param name="dfactorRGB"> 
        /// Specifies how the red, green, and blue destination blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha. ConstantColor, OneMinusConstantColor, ConstantAlpha, and OneMinusConstantAlpha. The initial value is Zero.
        /// </param>
        /// <param name="sfactorAlpha"> 
        /// Specified how the alpha source blending factor is computed.  The same symbolic constants are accepted as for srcRGB. The initial value is One.
        /// </param>
        /// <param name="dfactorAlpha"> 
        /// Specified how the alpha destination blending factor is computed.  The same symbolic constants are accepted as for dstRGB. The initial value is Zero.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void BlendFuncSeparate(OpenTK.Graphics.ES20.All sfactorRGB, OpenTK.Graphics.ES20.All dfactorRGB, OpenTK.Graphics.ES20.All sfactorAlpha, OpenTK.Graphics.ES20.All dfactorAlpha)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(25);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BlendingFactorSrc), typeof(OpenTK.Graphics.ES20.BlendingFactorDest), typeof(OpenTK.Graphics.ES20.BlendingFactorSrc), typeof(OpenTK.Graphics.ES20.BlendingFactorDest));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify pixel arithmetic for RGB and alpha components separately
        /// </summary>
        /// <param name="sfactorRGB"> 
        /// Specifies how the red, green, and blue blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha, ConstantColor, OneMinusConstantColor, ConstantAlpha, OneMinusConstantAlpha, and SrcAlphaSaturate. The initial value is One.
        /// </param>
        /// <param name="dfactorRGB"> 
        /// Specifies how the red, green, and blue destination blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha. ConstantColor, OneMinusConstantColor, ConstantAlpha, and OneMinusConstantAlpha. The initial value is Zero.
        /// </param>
        /// <param name="sfactorAlpha"> 
        /// Specified how the alpha source blending factor is computed.  The same symbolic constants are accepted as for srcRGB. The initial value is One.
        /// </param>
        /// <param name="dfactorAlpha"> 
        /// Specified how the alpha destination blending factor is computed.  The same symbolic constants are accepted as for dstRGB. The initial value is Zero.
        /// </param>
        public static void BlendFuncSeparate(OpenTK.Graphics.ES20.BlendingFactorSrc sfactorRGB, OpenTK.Graphics.ES20.BlendingFactorDest dfactorRGB, OpenTK.Graphics.ES20.BlendingFactorSrc sfactorAlpha, OpenTK.Graphics.ES20.BlendingFactorDest dfactorAlpha)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(25);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BlendingFactorSrc), typeof(OpenTK.Graphics.ES20.BlendingFactorDest), typeof(OpenTK.Graphics.ES20.BlendingFactorSrc), typeof(OpenTK.Graphics.ES20.BlendingFactorDest));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage"> 
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void BufferData(OpenTK.Graphics.ES20.All target, Int32 size, IntPtr data, OpenTK.Graphics.ES20.All usage)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(30);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr), typeof(OpenTK.Graphics.ES20.BufferUsageHint));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage"> 
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void BufferData<T2>(OpenTK.Graphics.ES20.All target, Int32 size, [InAttribute, OutAttribute] T2[] data, OpenTK.Graphics.ES20.All usage)
            where T2 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T2& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T2");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(30);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr), typeof(OpenTK.Graphics.ES20.BufferUsageHint));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage"> 
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void BufferData<T2>(OpenTK.Graphics.ES20.All target, Int32 size, [InAttribute, OutAttribute] T2[,] data, OpenTK.Graphics.ES20.All usage)
            where T2 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T2& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T2[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(30);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr), typeof(OpenTK.Graphics.ES20.BufferUsageHint));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage"> 
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void BufferData<T2>(OpenTK.Graphics.ES20.All target, Int32 size, [InAttribute, OutAttribute] T2[,,] data, OpenTK.Graphics.ES20.All usage)
            where T2 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T2& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T2[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(30);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr), typeof(OpenTK.Graphics.ES20.BufferUsageHint));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage"> 
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void BufferData<T2>(OpenTK.Graphics.ES20.All target, Int32 size, [InAttribute, OutAttribute] ref T2 data, OpenTK.Graphics.ES20.All usage)
            where T2 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T2& pinned", "data_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("data_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(30);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr), typeof(OpenTK.Graphics.ES20.BufferUsageHint));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage"> 
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void BufferData(OpenTK.Graphics.ES20.All target, IntPtr size, IntPtr data, OpenTK.Graphics.ES20.All usage)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(30);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr), typeof(OpenTK.Graphics.ES20.BufferUsageHint));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage"> 
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void BufferData<T2>(OpenTK.Graphics.ES20.All target, IntPtr size, [InAttribute, OutAttribute] T2[] data, OpenTK.Graphics.ES20.All usage)
            where T2 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T2& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T2");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(30);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr), typeof(OpenTK.Graphics.ES20.BufferUsageHint));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage"> 
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void BufferData<T2>(OpenTK.Graphics.ES20.All target, IntPtr size, [InAttribute, OutAttribute] T2[,] data, OpenTK.Graphics.ES20.All usage)
            where T2 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T2& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T2[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(30);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr), typeof(OpenTK.Graphics.ES20.BufferUsageHint));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage"> 
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void BufferData<T2>(OpenTK.Graphics.ES20.All target, IntPtr size, [InAttribute, OutAttribute] T2[,,] data, OpenTK.Graphics.ES20.All usage)
            where T2 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T2& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T2[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(30);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr), typeof(OpenTK.Graphics.ES20.BufferUsageHint));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage"> 
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void BufferData<T2>(OpenTK.Graphics.ES20.All target, IntPtr size, [InAttribute, OutAttribute] ref T2 data, OpenTK.Graphics.ES20.All usage)
            where T2 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T2& pinned", "data_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("data_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(30);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr), typeof(OpenTK.Graphics.ES20.BufferUsageHint));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage"> 
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [Obsolete("Use BufferUsageHint overload instead")]
        public static void BufferData(OpenTK.Graphics.ES20.BufferTarget target, Int32 size, IntPtr data, OpenTK.Graphics.ES20.BufferUsage usage)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(30);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr), typeof(OpenTK.Graphics.ES20.BufferUsageHint));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage"> 
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        public static void BufferData(OpenTK.Graphics.ES20.BufferTarget target, Int32 size, IntPtr data, OpenTK.Graphics.ES20.BufferUsageHint usage)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(30);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr), typeof(OpenTK.Graphics.ES20.BufferUsageHint));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage"> 
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [Obsolete("Use BufferUsageHint overload instead")]
        [CLSCompliant(false)]
        public static void BufferData<T2>(OpenTK.Graphics.ES20.BufferTarget target, Int32 size, [InAttribute, OutAttribute] T2[] data, OpenTK.Graphics.ES20.BufferUsage usage)
            where T2 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T2& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T2");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(30);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr), typeof(OpenTK.Graphics.ES20.BufferUsageHint));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage"> 
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [CLSCompliant(false)]
        public static void BufferData<T2>(OpenTK.Graphics.ES20.BufferTarget target, Int32 size, [InAttribute, OutAttribute] T2[] data, OpenTK.Graphics.ES20.BufferUsageHint usage)
            where T2 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T2& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T2");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(30);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr), typeof(OpenTK.Graphics.ES20.BufferUsageHint));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage"> 
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [Obsolete("Use BufferUsageHint overload instead")]
        [CLSCompliant(false)]
        public static void BufferData<T2>(OpenTK.Graphics.ES20.BufferTarget target, Int32 size, [InAttribute, OutAttribute] T2[,] data, OpenTK.Graphics.ES20.BufferUsage usage)
            where T2 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T2& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T2[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(30);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr), typeof(OpenTK.Graphics.ES20.BufferUsageHint));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage"> 
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [CLSCompliant(false)]
        public static void BufferData<T2>(OpenTK.Graphics.ES20.BufferTarget target, Int32 size, [InAttribute, OutAttribute] T2[,] data, OpenTK.Graphics.ES20.BufferUsageHint usage)
            where T2 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T2& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T2[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(30);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr), typeof(OpenTK.Graphics.ES20.BufferUsageHint));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage"> 
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [Obsolete("Use BufferUsageHint overload instead")]
        [CLSCompliant(false)]
        public static void BufferData<T2>(OpenTK.Graphics.ES20.BufferTarget target, Int32 size, [InAttribute, OutAttribute] T2[,,] data, OpenTK.Graphics.ES20.BufferUsage usage)
            where T2 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T2& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T2[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(30);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr), typeof(OpenTK.Graphics.ES20.BufferUsageHint));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage"> 
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [CLSCompliant(false)]
        public static void BufferData<T2>(OpenTK.Graphics.ES20.BufferTarget target, Int32 size, [InAttribute, OutAttribute] T2[,,] data, OpenTK.Graphics.ES20.BufferUsageHint usage)
            where T2 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T2& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T2[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(30);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr), typeof(OpenTK.Graphics.ES20.BufferUsageHint));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage"> 
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [Obsolete("Use BufferUsageHint overload instead")]
        public static void BufferData<T2>(OpenTK.Graphics.ES20.BufferTarget target, Int32 size, [InAttribute, OutAttribute] ref T2 data, OpenTK.Graphics.ES20.BufferUsage usage)
            where T2 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T2& pinned", "data_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("data_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(30);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr), typeof(OpenTK.Graphics.ES20.BufferUsageHint));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage"> 
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        public static void BufferData<T2>(OpenTK.Graphics.ES20.BufferTarget target, Int32 size, [InAttribute, OutAttribute] ref T2 data, OpenTK.Graphics.ES20.BufferUsageHint usage)
            where T2 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T2& pinned", "data_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("data_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(30);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr), typeof(OpenTK.Graphics.ES20.BufferUsageHint));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage"> 
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [Obsolete("Use BufferUsageHint overload instead")]
        public static void BufferData(OpenTK.Graphics.ES20.BufferTarget target, IntPtr size, IntPtr data, OpenTK.Graphics.ES20.BufferUsage usage)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(30);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr), typeof(OpenTK.Graphics.ES20.BufferUsageHint));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage"> 
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        public static void BufferData(OpenTK.Graphics.ES20.BufferTarget target, IntPtr size, IntPtr data, OpenTK.Graphics.ES20.BufferUsageHint usage)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(30);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr), typeof(OpenTK.Graphics.ES20.BufferUsageHint));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage"> 
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [Obsolete("Use BufferUsageHint overload instead")]
        [CLSCompliant(false)]
        public static void BufferData<T2>(OpenTK.Graphics.ES20.BufferTarget target, IntPtr size, [InAttribute, OutAttribute] T2[] data, OpenTK.Graphics.ES20.BufferUsage usage)
            where T2 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T2& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T2");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(30);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr), typeof(OpenTK.Graphics.ES20.BufferUsageHint));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage"> 
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [CLSCompliant(false)]
        public static void BufferData<T2>(OpenTK.Graphics.ES20.BufferTarget target, IntPtr size, [InAttribute, OutAttribute] T2[] data, OpenTK.Graphics.ES20.BufferUsageHint usage)
            where T2 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T2& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T2");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(30);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr), typeof(OpenTK.Graphics.ES20.BufferUsageHint));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage"> 
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [Obsolete("Use BufferUsageHint overload instead")]
        [CLSCompliant(false)]
        public static void BufferData<T2>(OpenTK.Graphics.ES20.BufferTarget target, IntPtr size, [InAttribute, OutAttribute] T2[,] data, OpenTK.Graphics.ES20.BufferUsage usage)
            where T2 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T2& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T2[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(30);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr), typeof(OpenTK.Graphics.ES20.BufferUsageHint));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage"> 
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [CLSCompliant(false)]
        public static void BufferData<T2>(OpenTK.Graphics.ES20.BufferTarget target, IntPtr size, [InAttribute, OutAttribute] T2[,] data, OpenTK.Graphics.ES20.BufferUsageHint usage)
            where T2 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T2& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T2[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(30);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr), typeof(OpenTK.Graphics.ES20.BufferUsageHint));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage"> 
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [Obsolete("Use BufferUsageHint overload instead")]
        [CLSCompliant(false)]
        public static void BufferData<T2>(OpenTK.Graphics.ES20.BufferTarget target, IntPtr size, [InAttribute, OutAttribute] T2[,,] data, OpenTK.Graphics.ES20.BufferUsage usage)
            where T2 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T2& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T2[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(30);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr), typeof(OpenTK.Graphics.ES20.BufferUsageHint));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage"> 
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [CLSCompliant(false)]
        public static void BufferData<T2>(OpenTK.Graphics.ES20.BufferTarget target, IntPtr size, [InAttribute, OutAttribute] T2[,,] data, OpenTK.Graphics.ES20.BufferUsageHint usage)
            where T2 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T2& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T2[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(30);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr), typeof(OpenTK.Graphics.ES20.BufferUsageHint));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage"> 
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [Obsolete("Use BufferUsageHint overload instead")]
        public static void BufferData<T2>(OpenTK.Graphics.ES20.BufferTarget target, IntPtr size, [InAttribute, OutAttribute] ref T2 data, OpenTK.Graphics.ES20.BufferUsage usage)
            where T2 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T2& pinned", "data_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("data_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(30);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr), typeof(OpenTK.Graphics.ES20.BufferUsageHint));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage"> 
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        public static void BufferData<T2>(OpenTK.Graphics.ES20.BufferTarget target, IntPtr size, [InAttribute, OutAttribute] ref T2 data, OpenTK.Graphics.ES20.BufferUsageHint usage)
            where T2 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T2& pinned", "data_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("data_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(30);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr), typeof(OpenTK.Graphics.ES20.BufferUsageHint));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset"> 
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void BufferSubData(OpenTK.Graphics.ES20.All target, IntPtr offset, Int32 size, IntPtr data)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(31);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset"> 
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void BufferSubData<T3>(OpenTK.Graphics.ES20.All target, IntPtr offset, Int32 size, [InAttribute, OutAttribute] T3[] data)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T3");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(31);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset"> 
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void BufferSubData<T3>(OpenTK.Graphics.ES20.All target, IntPtr offset, Int32 size, [InAttribute, OutAttribute] T3[,] data)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T3[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(31);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset"> 
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void BufferSubData<T3>(OpenTK.Graphics.ES20.All target, IntPtr offset, Int32 size, [InAttribute, OutAttribute] T3[,,] data)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T3[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(31);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset"> 
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void BufferSubData<T3>(OpenTK.Graphics.ES20.All target, IntPtr offset, Int32 size, [InAttribute, OutAttribute] ref T3 data)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "data_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.StoreByName("data_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(31);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset"> 
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void BufferSubData(OpenTK.Graphics.ES20.All target, IntPtr offset, IntPtr size, IntPtr data)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(31);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset"> 
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void BufferSubData<T3>(OpenTK.Graphics.ES20.All target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[] data)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T3");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(31);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset"> 
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void BufferSubData<T3>(OpenTK.Graphics.ES20.All target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[,] data)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T3[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(31);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset"> 
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void BufferSubData<T3>(OpenTK.Graphics.ES20.All target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[,,] data)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T3[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(31);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset"> 
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void BufferSubData<T3>(OpenTK.Graphics.ES20.All target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] ref T3 data)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "data_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.StoreByName("data_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(31);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset"> 
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        public static void BufferSubData(OpenTK.Graphics.ES20.BufferTarget target, IntPtr offset, Int32 size, IntPtr data)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(31);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset"> 
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [CLSCompliant(false)]
        public static void BufferSubData<T3>(OpenTK.Graphics.ES20.BufferTarget target, IntPtr offset, Int32 size, [InAttribute, OutAttribute] T3[] data)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T3");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(31);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset"> 
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [CLSCompliant(false)]
        public static void BufferSubData<T3>(OpenTK.Graphics.ES20.BufferTarget target, IntPtr offset, Int32 size, [InAttribute, OutAttribute] T3[,] data)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T3[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(31);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset"> 
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [CLSCompliant(false)]
        public static void BufferSubData<T3>(OpenTK.Graphics.ES20.BufferTarget target, IntPtr offset, Int32 size, [InAttribute, OutAttribute] T3[,,] data)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T3[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(31);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset"> 
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        public static void BufferSubData<T3>(OpenTK.Graphics.ES20.BufferTarget target, IntPtr offset, Int32 size, [InAttribute, OutAttribute] ref T3 data)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "data_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.StoreByName("data_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(31);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset"> 
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        public static void BufferSubData(OpenTK.Graphics.ES20.BufferTarget target, IntPtr offset, IntPtr size, IntPtr data)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(31);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset"> 
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [CLSCompliant(false)]
        public static void BufferSubData<T3>(OpenTK.Graphics.ES20.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[] data)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T3");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(31);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset"> 
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [CLSCompliant(false)]
        public static void BufferSubData<T3>(OpenTK.Graphics.ES20.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[,] data)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T3[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(31);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset"> 
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [CLSCompliant(false)]
        public static void BufferSubData<T3>(OpenTK.Graphics.ES20.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[,,] data)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T3[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(31);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset"> 
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        public static void BufferSubData<T3>(OpenTK.Graphics.ES20.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] ref T3 data)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "data_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.StoreByName("data_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(31);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the framebuffer completeness status of a framebuffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target framebuffer object. The symbolic constant must be Framebuffer.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static OpenTK.Graphics.ES20.FramebufferErrorCode CheckFramebufferStatus(OpenTK.Graphics.ES20.All target)
        {
            unsafe
            {
                OpenTK.Graphics.ES20.FramebufferErrorCode __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(32);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(OpenTK.Graphics.ES20.FramebufferErrorCode), typeof(OpenTK.Graphics.ES20.FramebufferTarget));
                    Silk.Cil.Store(out __return_result);
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the framebuffer completeness status of a framebuffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target framebuffer object. The symbolic constant must be Framebuffer.
        /// </param>
        public static OpenTK.Graphics.ES20.FramebufferErrorCode CheckFramebufferStatus(OpenTK.Graphics.ES20.FramebufferTarget target)
        {
            unsafe
            {
                OpenTK.Graphics.ES20.FramebufferErrorCode __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(32);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(OpenTK.Graphics.ES20.FramebufferErrorCode), typeof(OpenTK.Graphics.ES20.FramebufferTarget));
                    Silk.Cil.Store(out __return_result);
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Clear buffers to preset values
        /// </summary>
        /// <param name="mask"> 
        /// Bitwise OR of masks that indicate the buffers to be cleared. The three masks are ColorBufferBit, DepthBufferBit, and StencilBufferBit.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void Clear(OpenTK.Graphics.ES20.All mask)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(33);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.ClearBufferMask));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Clear buffers to preset values
        /// </summary>
        /// <param name="mask"> 
        /// Bitwise OR of masks that indicate the buffers to be cleared. The three masks are ColorBufferBit, DepthBufferBit, and StencilBufferBit.
        /// </param>
        public static void Clear(OpenTK.Graphics.ES20.ClearBufferMask mask)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(33);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.ClearBufferMask));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify clear values for the color buffers
        /// </summary>
        /// <param name="red"> 
        /// Specify the red, green, blue, and alpha values used when the color buffers are cleared. The initial values are all 0.
        /// </param>
        /// <param name="green"> 
        /// Specify the red, green, blue, and alpha values used when the color buffers are cleared. The initial values are all 0.
        /// </param>
        /// <param name="blue"> 
        /// Specify the red, green, blue, and alpha values used when the color buffers are cleared. The initial values are all 0.
        /// </param>
        /// <param name="alpha"> 
        /// Specify the red, green, blue, and alpha values used when the color buffers are cleared. The initial values are all 0.
        /// </param>
        public static void ClearColor(Single red, Single green, Single blue, Single alpha)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(34);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Single), typeof(Single), typeof(Single), typeof(Single));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the clear value for the depth buffer
        /// </summary>
        /// <param name="d"> 
        /// Specifies the depth value used when the depth buffer is cleared. The initial value is 1.
        /// </param>
        public static void ClearDepth(Single d)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(35);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Single));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the clear value for the stencil buffer
        /// </summary>
        /// <param name="s"> 
        /// Specifies the index used when the stencil buffer is cleared. The initial value is 0.
        /// </param>
        public static void ClearStencil(Int32 s)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(36);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Enable and disable writing of frame buffer color components
        /// </summary>
        /// <param name="red"> 
        /// Specify whether red, green, blue, and alpha can or cannot be written into the frame buffer. The initial values are all True, indicating that the color components can be written.
        /// </param>
        /// <param name="green"> 
        /// Specify whether red, green, blue, and alpha can or cannot be written into the frame buffer. The initial values are all True, indicating that the color components can be written.
        /// </param>
        /// <param name="blue"> 
        /// Specify whether red, green, blue, and alpha can or cannot be written into the frame buffer. The initial values are all True, indicating that the color components can be written.
        /// </param>
        /// <param name="alpha"> 
        /// Specify whether red, green, blue, and alpha can or cannot be written into the frame buffer. The initial values are all True, indicating that the color components can be written.
        /// </param>
        public static void ColorMask(bool red, bool green, bool blue, bool alpha)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(38);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(bool), typeof(bool), typeof(bool), typeof(bool));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Compile a shader object
        /// </summary>
        /// <param name="shader"> 
        /// Specifies the shader object to be compiled.
        /// </param>
        [CLSCompliant(false)]
        public static void CompileShader(Int32 shader)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(40);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Compile a shader object
        /// </summary>
        /// <param name="shader"> 
        /// Specifies the shader object to be compiled.
        /// </param>
        [CLSCompliant(false)]
        public static void CompileShader(UInt32 shader)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(40);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="imageSize"> 
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize] 
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void CompressedTexImage2D(OpenTK.Graphics.ES20.All target, Int32 level, OpenTK.Graphics.ES20.All internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, IntPtr data)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(41);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(OpenTK.Graphics.ES20.CompressedInternalFormat), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="imageSize"> 
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize] 
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void CompressedTexImage2D<T7>(OpenTK.Graphics.ES20.All target, Int32 level, OpenTK.Graphics.ES20.All internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[] data)
            where T7 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T7& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T7");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(41);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(OpenTK.Graphics.ES20.CompressedInternalFormat), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="imageSize"> 
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize] 
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void CompressedTexImage2D<T7>(OpenTK.Graphics.ES20.All target, Int32 level, OpenTK.Graphics.ES20.All internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[,] data)
            where T7 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T7& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T7[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(41);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(OpenTK.Graphics.ES20.CompressedInternalFormat), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="imageSize"> 
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize] 
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void CompressedTexImage2D<T7>(OpenTK.Graphics.ES20.All target, Int32 level, OpenTK.Graphics.ES20.All internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[,,] data)
            where T7 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T7& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T7[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(41);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(OpenTK.Graphics.ES20.CompressedInternalFormat), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="imageSize"> 
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize] 
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void CompressedTexImage2D<T7>(OpenTK.Graphics.ES20.All target, Int32 level, OpenTK.Graphics.ES20.All internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] ref T7 data)
            where T7 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T7& pinned", "data_pinned");
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.StoreByName("data_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(41);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(OpenTK.Graphics.ES20.CompressedInternalFormat), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="imageSize"> 
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize] 
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [Obsolete("Use TextureTarget2d overload instead")]
        public static void CompressedTexImage2D(OpenTK.Graphics.ES20.TextureTarget target, Int32 level, OpenTK.Graphics.ES20.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, IntPtr data)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(41);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(OpenTK.Graphics.ES20.CompressedInternalFormat), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="imageSize"> 
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize] 
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [Obsolete("Use TextureTarget2d overload instead")]
        [CLSCompliant(false)]
        public static void CompressedTexImage2D<T7>(OpenTK.Graphics.ES20.TextureTarget target, Int32 level, OpenTK.Graphics.ES20.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[] data)
            where T7 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T7& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T7");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(41);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(OpenTK.Graphics.ES20.CompressedInternalFormat), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="imageSize"> 
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize] 
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [Obsolete("Use TextureTarget2d overload instead")]
        [CLSCompliant(false)]
        public static void CompressedTexImage2D<T7>(OpenTK.Graphics.ES20.TextureTarget target, Int32 level, OpenTK.Graphics.ES20.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[,] data)
            where T7 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T7& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T7[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(41);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(OpenTK.Graphics.ES20.CompressedInternalFormat), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="imageSize"> 
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize] 
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [Obsolete("Use TextureTarget2d overload instead")]
        [CLSCompliant(false)]
        public static void CompressedTexImage2D<T7>(OpenTK.Graphics.ES20.TextureTarget target, Int32 level, OpenTK.Graphics.ES20.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[,,] data)
            where T7 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T7& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T7[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(41);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(OpenTK.Graphics.ES20.CompressedInternalFormat), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="imageSize"> 
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize] 
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [Obsolete("Use TextureTarget2d overload instead")]
        public static void CompressedTexImage2D<T7>(OpenTK.Graphics.ES20.TextureTarget target, Int32 level, OpenTK.Graphics.ES20.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] ref T7 data)
            where T7 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T7& pinned", "data_pinned");
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.StoreByName("data_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(41);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(OpenTK.Graphics.ES20.CompressedInternalFormat), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="imageSize"> 
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize] 
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        public static void CompressedTexImage2D(OpenTK.Graphics.ES20.TextureTarget2d target, Int32 level, OpenTK.Graphics.ES20.CompressedInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, IntPtr data)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(41);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(OpenTK.Graphics.ES20.CompressedInternalFormat), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="imageSize"> 
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize] 
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [CLSCompliant(false)]
        public static void CompressedTexImage2D<T7>(OpenTK.Graphics.ES20.TextureTarget2d target, Int32 level, OpenTK.Graphics.ES20.CompressedInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[] data)
            where T7 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T7& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T7");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(41);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(OpenTK.Graphics.ES20.CompressedInternalFormat), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="imageSize"> 
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize] 
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [CLSCompliant(false)]
        public static void CompressedTexImage2D<T7>(OpenTK.Graphics.ES20.TextureTarget2d target, Int32 level, OpenTK.Graphics.ES20.CompressedInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[,] data)
            where T7 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T7& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T7[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(41);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(OpenTK.Graphics.ES20.CompressedInternalFormat), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="imageSize"> 
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize] 
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [CLSCompliant(false)]
        public static void CompressedTexImage2D<T7>(OpenTK.Graphics.ES20.TextureTarget2d target, Int32 level, OpenTK.Graphics.ES20.CompressedInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[,,] data)
            where T7 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T7& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T7[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(41);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(OpenTK.Graphics.ES20.CompressedInternalFormat), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="imageSize"> 
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize] 
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        public static void CompressedTexImage2D<T7>(OpenTK.Graphics.ES20.TextureTarget2d target, Int32 level, OpenTK.Graphics.ES20.CompressedInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] ref T7 data)
            where T7 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T7& pinned", "data_pinned");
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.StoreByName("data_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(41);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(OpenTK.Graphics.ES20.CompressedInternalFormat), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize"> 
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize] 
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void CompressedTexSubImage2D(OpenTK.Graphics.ES20.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES20.All format, Int32 imageSize, IntPtr data)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.Ldarg(8);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(43);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize"> 
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize] 
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void CompressedTexSubImage2D<T8>(OpenTK.Graphics.ES20.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES20.All format, Int32 imageSize, [InAttribute, OutAttribute] T8[] data)
            where T8 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T8& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T8");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(43);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize"> 
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize] 
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void CompressedTexSubImage2D<T8>(OpenTK.Graphics.ES20.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES20.All format, Int32 imageSize, [InAttribute, OutAttribute] T8[,] data)
            where T8 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T8& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T8[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(43);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize"> 
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize] 
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void CompressedTexSubImage2D<T8>(OpenTK.Graphics.ES20.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES20.All format, Int32 imageSize, [InAttribute, OutAttribute] T8[,,] data)
            where T8 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T8& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T8[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(43);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize"> 
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize] 
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void CompressedTexSubImage2D<T8>(OpenTK.Graphics.ES20.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES20.All format, Int32 imageSize, [InAttribute, OutAttribute] ref T8 data)
            where T8 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T8& pinned", "data_pinned");
                    Silk.Cil.Ldarg(8);
                    Silk.Cil.StoreByName("data_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(43);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize"> 
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize] 
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [Obsolete("Use TextureTarget2d and CompressedInternalFormat overloads instead")]
        public static void CompressedTexSubImage2D(OpenTK.Graphics.ES20.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES20.PixelFormat format, Int32 imageSize, IntPtr data)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.Ldarg(8);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(43);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize"> 
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize] 
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [Obsolete("Use TextureTarget2d and CompressedInternalFormat overloads instead")]
        [CLSCompliant(false)]
        public static void CompressedTexSubImage2D<T8>(OpenTK.Graphics.ES20.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES20.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T8[] data)
            where T8 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T8& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T8");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(43);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize"> 
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize] 
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [Obsolete("Use TextureTarget2d and CompressedInternalFormat overloads instead")]
        [CLSCompliant(false)]
        public static void CompressedTexSubImage2D<T8>(OpenTK.Graphics.ES20.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES20.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T8[,] data)
            where T8 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T8& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T8[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(43);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize"> 
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize] 
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [Obsolete("Use TextureTarget2d and CompressedInternalFormat overloads instead")]
        [CLSCompliant(false)]
        public static void CompressedTexSubImage2D<T8>(OpenTK.Graphics.ES20.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES20.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T8[,,] data)
            where T8 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T8& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T8[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(43);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize"> 
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize] 
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [Obsolete("Use TextureTarget2d and CompressedInternalFormat overloads instead")]
        public static void CompressedTexSubImage2D<T8>(OpenTK.Graphics.ES20.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES20.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] ref T8 data)
            where T8 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T8& pinned", "data_pinned");
                    Silk.Cil.Ldarg(8);
                    Silk.Cil.StoreByName("data_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(43);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize"> 
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize] 
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        public static void CompressedTexSubImage2D(OpenTK.Graphics.ES20.TextureTarget2d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES20.PixelFormat format, Int32 imageSize, IntPtr data)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.Ldarg(8);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(43);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize"> 
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize] 
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [CLSCompliant(false)]
        public static void CompressedTexSubImage2D<T8>(OpenTK.Graphics.ES20.TextureTarget2d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES20.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T8[] data)
            where T8 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T8& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T8");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(43);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize"> 
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize] 
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [CLSCompliant(false)]
        public static void CompressedTexSubImage2D<T8>(OpenTK.Graphics.ES20.TextureTarget2d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES20.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T8[,] data)
            where T8 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T8& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T8[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(43);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize"> 
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize] 
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [CLSCompliant(false)]
        public static void CompressedTexSubImage2D<T8>(OpenTK.Graphics.ES20.TextureTarget2d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES20.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T8[,,] data)
            where T8 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T8& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T8[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(43);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize"> 
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize] 
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        public static void CompressedTexSubImage2D<T8>(OpenTK.Graphics.ES20.TextureTarget2d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES20.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] ref T8 data)
            where T8 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T8& pinned", "data_pinned");
                    Silk.Cil.Ldarg(8);
                    Silk.Cil.StoreByName("data_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(43);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Copy pixels into a 2D texture image
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, or Rgba.
        /// </param>
        /// <param name="x"> 
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="y"> 
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void CopyTexImage2D(OpenTK.Graphics.ES20.All target, Int32 level, OpenTK.Graphics.ES20.All internalformat, Int32 x, Int32 y, Int32 width, Int32 height, Int32 border)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(47);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(OpenTK.Graphics.ES20.TextureCopyComponentCount), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Copy pixels into a 2D texture image
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, or Rgba.
        /// </param>
        /// <param name="x"> 
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="y"> 
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        [Obsolete("Use TextureTarget2d and TextureCopyComponentCount overloads instead")]
        public static void CopyTexImage2D(OpenTK.Graphics.ES20.TextureTarget target, Int32 level, OpenTK.Graphics.ES20.PixelInternalFormat internalformat, Int32 x, Int32 y, Int32 width, Int32 height, Int32 border)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(47);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(OpenTK.Graphics.ES20.TextureCopyComponentCount), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Copy pixels into a 2D texture image
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, or Rgba.
        /// </param>
        /// <param name="x"> 
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="y"> 
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        public static void CopyTexImage2D(OpenTK.Graphics.ES20.TextureTarget2d target, Int32 level, OpenTK.Graphics.ES20.TextureCopyComponentCount internalformat, Int32 x, Int32 y, Int32 width, Int32 height, Int32 border)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(47);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(OpenTK.Graphics.ES20.TextureCopyComponentCount), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Copy a two-dimensional texture subimage
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="x"> 
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="y"> 
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void CopyTexSubImage2D(OpenTK.Graphics.ES20.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 x, Int32 y, Int32 width, Int32 height)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(48);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Copy a two-dimensional texture subimage
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="x"> 
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="y"> 
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        [Obsolete("Use TextureTarget2d overload instead")]
        public static void CopyTexSubImage2D(OpenTK.Graphics.ES20.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 x, Int32 y, Int32 width, Int32 height)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(48);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Copy a two-dimensional texture subimage
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="x"> 
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="y"> 
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        public static void CopyTexSubImage2D(OpenTK.Graphics.ES20.TextureTarget2d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 x, Int32 y, Int32 width, Int32 height)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(48);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Create a program object
        /// </summary>
        public static Int32 CreateProgram()
        {
            unsafe
            {
                Int32 __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(54);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(Int32));
                    Silk.Cil.Store(out __return_result);
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Create a shader object
        /// </summary>
        /// <param name="type"> 
        /// Specifies the type of shader to be created. Must be either VertexShader or FragmentShader.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static Int32 CreateShader(OpenTK.Graphics.ES20.All type)
        {
            unsafe
            {
                Int32 __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(55);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(Int32), typeof(OpenTK.Graphics.ES20.ShaderType));
                    Silk.Cil.Store(out __return_result);
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Create a shader object
        /// </summary>
        /// <param name="type"> 
        /// Specifies the type of shader to be created. Must be either VertexShader or FragmentShader.
        /// </param>
        public static Int32 CreateShader(OpenTK.Graphics.ES20.ShaderType type)
        {
            unsafe
            {
                Int32 __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(55);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(Int32), typeof(OpenTK.Graphics.ES20.ShaderType));
                    Silk.Cil.Store(out __return_result);
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify whether front- or back-facing polygons can be culled
        /// </summary>
        /// <param name="mode"> 
        /// Specifies whether front- or back-facing polygons are candidates for culling. Symbolic constants Front, Back, and FrontAndBack are accepted. The initial value is Back.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void CullFace(OpenTK.Graphics.ES20.All mode)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(58);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.CullFaceMode));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify whether front- or back-facing polygons can be culled
        /// </summary>
        /// <param name="mode"> 
        /// Specifies whether front- or back-facing polygons are candidates for culling. Symbolic constants Front, Back, and FrontAndBack are accepted. The initial value is Back.
        /// </param>
        public static void CullFace(OpenTK.Graphics.ES20.CullFaceMode mode)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(58);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.CullFaceMode));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Specify a callback to receive debugging messages from the GL
        /// </summary>
        /// <param name="callback"> 
        /// The address of a callback function that will be called when a debug message is generated.
        /// </param>
        /// <param name="userParam"> 
        /// A user supplied pointer that will be passed on each invocation of callback.
        /// </param>
        public static void DebugMessageCallback(DebugProc callback, IntPtr userParam)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(59);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(DebugProc), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Specify a callback to receive debugging messages from the GL
        /// </summary>
        /// <param name="callback"> 
        /// The address of a callback function that will be called when a debug message is generated.
        /// </param>
        /// <param name="userParam"> 
        /// A user supplied pointer that will be passed on each invocation of callback.
        /// </param>
        [CLSCompliant(false)]
        public static void DebugMessageCallback<T1>(DebugProc callback, [InAttribute, OutAttribute] T1[] userParam)
            where T1 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T1& pinned", "userParam_pinned");
                    if(userParam != null && userParam.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T1");
                        Silk.Cil.StoreByName("userParam_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("userParam_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("userParam_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(59);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(DebugProc), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Specify a callback to receive debugging messages from the GL
        /// </summary>
        /// <param name="callback"> 
        /// The address of a callback function that will be called when a debug message is generated.
        /// </param>
        /// <param name="userParam"> 
        /// A user supplied pointer that will be passed on each invocation of callback.
        /// </param>
        [CLSCompliant(false)]
        public static void DebugMessageCallback<T1>(DebugProc callback, [InAttribute, OutAttribute] T1[,] userParam)
            where T1 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T1& pinned", "userParam_pinned");
                    if(userParam != null && userParam.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T1[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("userParam_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("userParam_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("userParam_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(59);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(DebugProc), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Specify a callback to receive debugging messages from the GL
        /// </summary>
        /// <param name="callback"> 
        /// The address of a callback function that will be called when a debug message is generated.
        /// </param>
        /// <param name="userParam"> 
        /// A user supplied pointer that will be passed on each invocation of callback.
        /// </param>
        [CLSCompliant(false)]
        public static void DebugMessageCallback<T1>(DebugProc callback, [InAttribute, OutAttribute] T1[,,] userParam)
            where T1 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T1& pinned", "userParam_pinned");
                    if(userParam != null && userParam.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T1[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("userParam_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("userParam_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("userParam_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(59);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(DebugProc), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Specify a callback to receive debugging messages from the GL
        /// </summary>
        /// <param name="callback"> 
        /// The address of a callback function that will be called when a debug message is generated.
        /// </param>
        /// <param name="userParam"> 
        /// A user supplied pointer that will be passed on each invocation of callback.
        /// </param>
        public static void DebugMessageCallback<T1>(DebugProc callback, [InAttribute, OutAttribute] ref T1 userParam)
            where T1 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T1& pinned", "userParam_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("userParam_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("userParam_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(59);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(DebugProc), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source"> 
        /// The source of debug messages to enable or disable.
        /// </param>
        /// <param name="type"> 
        /// The type of debug messages to enable or disable.
        /// </param>
        /// <param name="severity"> 
        /// The severity of debug messages to enable or disable.
        /// </param>
        /// <param name="count"> 
        /// The length of the array ids.
        /// </param>
        /// <param name="ids">[length: count] 
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </param>
        /// <param name="enabled"> 
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void DebugMessageControl(OpenTK.Graphics.ES20.All source, OpenTK.Graphics.ES20.All type, OpenTK.Graphics.ES20.All severity, Int32 count, Int32[] ids, bool enabled)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "ids_pinned");
                    if(ids != null && ids.Length != 0)
                    {
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("ids_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("ids_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.LoadByName("ids_pinned");
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(61);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.DebugSourceControl), typeof(OpenTK.Graphics.ES20.DebugTypeControl), typeof(OpenTK.Graphics.ES20.DebugSeverityControl), typeof(Int32), typeof(UInt32*), typeof(bool));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source"> 
        /// The source of debug messages to enable or disable.
        /// </param>
        /// <param name="type"> 
        /// The type of debug messages to enable or disable.
        /// </param>
        /// <param name="severity"> 
        /// The severity of debug messages to enable or disable.
        /// </param>
        /// <param name="count"> 
        /// The length of the array ids.
        /// </param>
        /// <param name="ids">[length: count] 
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </param>
        /// <param name="enabled"> 
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void DebugMessageControl(OpenTK.Graphics.ES20.All source, OpenTK.Graphics.ES20.All type, OpenTK.Graphics.ES20.All severity, Int32 count, ref Int32 ids, bool enabled)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "ids_pinned");
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.StoreByName("ids_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.LoadByName("ids_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(61);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.DebugSourceControl), typeof(OpenTK.Graphics.ES20.DebugTypeControl), typeof(OpenTK.Graphics.ES20.DebugSeverityControl), typeof(Int32), typeof(UInt32*), typeof(bool));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source"> 
        /// The source of debug messages to enable or disable.
        /// </param>
        /// <param name="type"> 
        /// The type of debug messages to enable or disable.
        /// </param>
        /// <param name="severity"> 
        /// The severity of debug messages to enable or disable.
        /// </param>
        /// <param name="count"> 
        /// The length of the array ids.
        /// </param>
        /// <param name="ids">[length: count] 
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </param>
        /// <param name="enabled"> 
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static unsafe void DebugMessageControl(OpenTK.Graphics.ES20.All source, OpenTK.Graphics.ES20.All type, OpenTK.Graphics.ES20.All severity, Int32 count, Int32* ids, bool enabled)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(61);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.DebugSourceControl), typeof(OpenTK.Graphics.ES20.DebugTypeControl), typeof(OpenTK.Graphics.ES20.DebugSeverityControl), typeof(Int32), typeof(UInt32*), typeof(bool));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source"> 
        /// The source of debug messages to enable or disable.
        /// </param>
        /// <param name="type"> 
        /// The type of debug messages to enable or disable.
        /// </param>
        /// <param name="severity"> 
        /// The severity of debug messages to enable or disable.
        /// </param>
        /// <param name="count"> 
        /// The length of the array ids.
        /// </param>
        /// <param name="ids">[length: count] 
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </param>
        /// <param name="enabled"> 
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void DebugMessageControl(OpenTK.Graphics.ES20.All source, OpenTK.Graphics.ES20.All type, OpenTK.Graphics.ES20.All severity, Int32 count, UInt32[] ids, bool enabled)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.UInt32& pinned", "ids_pinned");
                    if(ids != null && ids.Length != 0)
                    {
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.UInt32");
                        Silk.Cil.StoreByName("ids_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("ids_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.LoadByName("ids_pinned");
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(61);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.DebugSourceControl), typeof(OpenTK.Graphics.ES20.DebugTypeControl), typeof(OpenTK.Graphics.ES20.DebugSeverityControl), typeof(Int32), typeof(UInt32*), typeof(bool));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source"> 
        /// The source of debug messages to enable or disable.
        /// </param>
        /// <param name="type"> 
        /// The type of debug messages to enable or disable.
        /// </param>
        /// <param name="severity"> 
        /// The severity of debug messages to enable or disable.
        /// </param>
        /// <param name="count"> 
        /// The length of the array ids.
        /// </param>
        /// <param name="ids">[length: count] 
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </param>
        /// <param name="enabled"> 
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void DebugMessageControl(OpenTK.Graphics.ES20.All source, OpenTK.Graphics.ES20.All type, OpenTK.Graphics.ES20.All severity, Int32 count, ref UInt32 ids, bool enabled)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.UInt32& pinned", "ids_pinned");
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.StoreByName("ids_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.LoadByName("ids_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(61);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.DebugSourceControl), typeof(OpenTK.Graphics.ES20.DebugTypeControl), typeof(OpenTK.Graphics.ES20.DebugSeverityControl), typeof(Int32), typeof(UInt32*), typeof(bool));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source"> 
        /// The source of debug messages to enable or disable.
        /// </param>
        /// <param name="type"> 
        /// The type of debug messages to enable or disable.
        /// </param>
        /// <param name="severity"> 
        /// The severity of debug messages to enable or disable.
        /// </param>
        /// <param name="count"> 
        /// The length of the array ids.
        /// </param>
        /// <param name="ids">[length: count] 
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </param>
        /// <param name="enabled"> 
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static unsafe void DebugMessageControl(OpenTK.Graphics.ES20.All source, OpenTK.Graphics.ES20.All type, OpenTK.Graphics.ES20.All severity, Int32 count, UInt32* ids, bool enabled)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(61);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.DebugSourceControl), typeof(OpenTK.Graphics.ES20.DebugTypeControl), typeof(OpenTK.Graphics.ES20.DebugSeverityControl), typeof(Int32), typeof(UInt32*), typeof(bool));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source"> 
        /// The source of debug messages to enable or disable.
        /// </param>
        /// <param name="type"> 
        /// The type of debug messages to enable or disable.
        /// </param>
        /// <param name="severity"> 
        /// The severity of debug messages to enable or disable.
        /// </param>
        /// <param name="count"> 
        /// The length of the array ids.
        /// </param>
        /// <param name="ids">[length: count] 
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </param>
        /// <param name="enabled"> 
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </param>
        [CLSCompliant(false)]
        public static void DebugMessageControl(OpenTK.Graphics.ES20.DebugSourceControl source, OpenTK.Graphics.ES20.DebugTypeControl type, OpenTK.Graphics.ES20.DebugSeverityControl severity, Int32 count, Int32[] ids, bool enabled)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "ids_pinned");
                    if(ids != null && ids.Length != 0)
                    {
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("ids_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("ids_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.LoadByName("ids_pinned");
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(61);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.DebugSourceControl), typeof(OpenTK.Graphics.ES20.DebugTypeControl), typeof(OpenTK.Graphics.ES20.DebugSeverityControl), typeof(Int32), typeof(UInt32*), typeof(bool));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source"> 
        /// The source of debug messages to enable or disable.
        /// </param>
        /// <param name="type"> 
        /// The type of debug messages to enable or disable.
        /// </param>
        /// <param name="severity"> 
        /// The severity of debug messages to enable or disable.
        /// </param>
        /// <param name="count"> 
        /// The length of the array ids.
        /// </param>
        /// <param name="ids">[length: count] 
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </param>
        /// <param name="enabled"> 
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </param>
        [CLSCompliant(false)]
        public static void DebugMessageControl(OpenTK.Graphics.ES20.DebugSourceControl source, OpenTK.Graphics.ES20.DebugTypeControl type, OpenTK.Graphics.ES20.DebugSeverityControl severity, Int32 count, ref Int32 ids, bool enabled)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "ids_pinned");
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.StoreByName("ids_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.LoadByName("ids_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(61);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.DebugSourceControl), typeof(OpenTK.Graphics.ES20.DebugTypeControl), typeof(OpenTK.Graphics.ES20.DebugSeverityControl), typeof(Int32), typeof(UInt32*), typeof(bool));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source"> 
        /// The source of debug messages to enable or disable.
        /// </param>
        /// <param name="type"> 
        /// The type of debug messages to enable or disable.
        /// </param>
        /// <param name="severity"> 
        /// The severity of debug messages to enable or disable.
        /// </param>
        /// <param name="count"> 
        /// The length of the array ids.
        /// </param>
        /// <param name="ids">[length: count] 
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </param>
        /// <param name="enabled"> 
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void DebugMessageControl(OpenTK.Graphics.ES20.DebugSourceControl source, OpenTK.Graphics.ES20.DebugTypeControl type, OpenTK.Graphics.ES20.DebugSeverityControl severity, Int32 count, Int32* ids, bool enabled)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(61);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.DebugSourceControl), typeof(OpenTK.Graphics.ES20.DebugTypeControl), typeof(OpenTK.Graphics.ES20.DebugSeverityControl), typeof(Int32), typeof(UInt32*), typeof(bool));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source"> 
        /// The source of debug messages to enable or disable.
        /// </param>
        /// <param name="type"> 
        /// The type of debug messages to enable or disable.
        /// </param>
        /// <param name="severity"> 
        /// The severity of debug messages to enable or disable.
        /// </param>
        /// <param name="count"> 
        /// The length of the array ids.
        /// </param>
        /// <param name="ids">[length: count] 
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </param>
        /// <param name="enabled"> 
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </param>
        [CLSCompliant(false)]
        public static void DebugMessageControl(OpenTK.Graphics.ES20.DebugSourceControl source, OpenTK.Graphics.ES20.DebugTypeControl type, OpenTK.Graphics.ES20.DebugSeverityControl severity, Int32 count, UInt32[] ids, bool enabled)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.UInt32& pinned", "ids_pinned");
                    if(ids != null && ids.Length != 0)
                    {
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.UInt32");
                        Silk.Cil.StoreByName("ids_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("ids_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.LoadByName("ids_pinned");
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(61);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.DebugSourceControl), typeof(OpenTK.Graphics.ES20.DebugTypeControl), typeof(OpenTK.Graphics.ES20.DebugSeverityControl), typeof(Int32), typeof(UInt32*), typeof(bool));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source"> 
        /// The source of debug messages to enable or disable.
        /// </param>
        /// <param name="type"> 
        /// The type of debug messages to enable or disable.
        /// </param>
        /// <param name="severity"> 
        /// The severity of debug messages to enable or disable.
        /// </param>
        /// <param name="count"> 
        /// The length of the array ids.
        /// </param>
        /// <param name="ids">[length: count] 
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </param>
        /// <param name="enabled"> 
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </param>
        [CLSCompliant(false)]
        public static void DebugMessageControl(OpenTK.Graphics.ES20.DebugSourceControl source, OpenTK.Graphics.ES20.DebugTypeControl type, OpenTK.Graphics.ES20.DebugSeverityControl severity, Int32 count, ref UInt32 ids, bool enabled)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.UInt32& pinned", "ids_pinned");
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.StoreByName("ids_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.LoadByName("ids_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(61);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.DebugSourceControl), typeof(OpenTK.Graphics.ES20.DebugTypeControl), typeof(OpenTK.Graphics.ES20.DebugSeverityControl), typeof(Int32), typeof(UInt32*), typeof(bool));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source"> 
        /// The source of debug messages to enable or disable.
        /// </param>
        /// <param name="type"> 
        /// The type of debug messages to enable or disable.
        /// </param>
        /// <param name="severity"> 
        /// The severity of debug messages to enable or disable.
        /// </param>
        /// <param name="count"> 
        /// The length of the array ids.
        /// </param>
        /// <param name="ids">[length: count] 
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </param>
        /// <param name="enabled"> 
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void DebugMessageControl(OpenTK.Graphics.ES20.DebugSourceControl source, OpenTK.Graphics.ES20.DebugTypeControl type, OpenTK.Graphics.ES20.DebugSeverityControl severity, Int32 count, UInt32* ids, bool enabled)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(61);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.DebugSourceControl), typeof(OpenTK.Graphics.ES20.DebugTypeControl), typeof(OpenTK.Graphics.ES20.DebugSeverityControl), typeof(Int32), typeof(UInt32*), typeof(bool));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Inject an application-supplied message into the debug message queue
        /// </summary>
        /// <param name="source"> 
        /// The source of the debug message to insert.
        /// </param>
        /// <param name="type"> 
        /// The type of the debug message insert.
        /// </param>
        /// <param name="id"> 
        /// The user-supplied identifier of the message to insert.
        /// </param>
        /// <param name="severity"> 
        /// The severity of the debug messages to insert.
        /// </param>
        /// <param name="length"> 
        /// The length string contained in the character array whose address is given by message.
        /// </param>
        /// <param name="buf">[length: buf,length] 
        /// The address of a character array containing the message to insert.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void DebugMessageInsert(OpenTK.Graphics.ES20.All source, OpenTK.Graphics.ES20.All type, Int32 id, OpenTK.Graphics.ES20.All severity, Int32 length, String buf)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    IntPtr buf_string_ptr = MarshalStringToPtr(buf);
                    try {
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(buf_string_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(63);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.DebugSourceExternal), typeof(OpenTK.Graphics.ES20.DebugType), typeof(UInt32), typeof(OpenTK.Graphics.ES20.DebugSeverity), typeof(Int32), typeof(IntPtr));
                    } finally {
                        FreeStringPtr(buf_string_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Inject an application-supplied message into the debug message queue
        /// </summary>
        /// <param name="source"> 
        /// The source of the debug message to insert.
        /// </param>
        /// <param name="type"> 
        /// The type of the debug message insert.
        /// </param>
        /// <param name="id"> 
        /// The user-supplied identifier of the message to insert.
        /// </param>
        /// <param name="severity"> 
        /// The severity of the debug messages to insert.
        /// </param>
        /// <param name="length"> 
        /// The length string contained in the character array whose address is given by message.
        /// </param>
        /// <param name="buf">[length: buf,length] 
        /// The address of a character array containing the message to insert.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void DebugMessageInsert(OpenTK.Graphics.ES20.All source, OpenTK.Graphics.ES20.All type, UInt32 id, OpenTK.Graphics.ES20.All severity, Int32 length, String buf)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    IntPtr buf_string_ptr = MarshalStringToPtr(buf);
                    try {
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(buf_string_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(63);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.DebugSourceExternal), typeof(OpenTK.Graphics.ES20.DebugType), typeof(UInt32), typeof(OpenTK.Graphics.ES20.DebugSeverity), typeof(Int32), typeof(IntPtr));
                    } finally {
                        FreeStringPtr(buf_string_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Inject an application-supplied message into the debug message queue
        /// </summary>
        /// <param name="source"> 
        /// The source of the debug message to insert.
        /// </param>
        /// <param name="type"> 
        /// The type of the debug message insert.
        /// </param>
        /// <param name="id"> 
        /// The user-supplied identifier of the message to insert.
        /// </param>
        /// <param name="severity"> 
        /// The severity of the debug messages to insert.
        /// </param>
        /// <param name="length"> 
        /// The length string contained in the character array whose address is given by message.
        /// </param>
        /// <param name="buf">[length: buf,length] 
        /// The address of a character array containing the message to insert.
        /// </param>
        [CLSCompliant(false)]
        public static void DebugMessageInsert(OpenTK.Graphics.ES20.DebugSourceExternal source, OpenTK.Graphics.ES20.DebugType type, Int32 id, OpenTK.Graphics.ES20.DebugSeverity severity, Int32 length, String buf)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    IntPtr buf_string_ptr = MarshalStringToPtr(buf);
                    try {
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(buf_string_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(63);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.DebugSourceExternal), typeof(OpenTK.Graphics.ES20.DebugType), typeof(UInt32), typeof(OpenTK.Graphics.ES20.DebugSeverity), typeof(Int32), typeof(IntPtr));
                    } finally {
                        FreeStringPtr(buf_string_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Inject an application-supplied message into the debug message queue
        /// </summary>
        /// <param name="source"> 
        /// The source of the debug message to insert.
        /// </param>
        /// <param name="type"> 
        /// The type of the debug message insert.
        /// </param>
        /// <param name="id"> 
        /// The user-supplied identifier of the message to insert.
        /// </param>
        /// <param name="severity"> 
        /// The severity of the debug messages to insert.
        /// </param>
        /// <param name="length"> 
        /// The length string contained in the character array whose address is given by message.
        /// </param>
        /// <param name="buf">[length: buf,length] 
        /// The address of a character array containing the message to insert.
        /// </param>
        [CLSCompliant(false)]
        public static void DebugMessageInsert(OpenTK.Graphics.ES20.DebugSourceExternal source, OpenTK.Graphics.ES20.DebugType type, UInt32 id, OpenTK.Graphics.ES20.DebugSeverity severity, Int32 length, String buf)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    IntPtr buf_string_ptr = MarshalStringToPtr(buf);
                    try {
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(buf_string_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(63);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.DebugSourceExternal), typeof(OpenTK.Graphics.ES20.DebugType), typeof(UInt32), typeof(OpenTK.Graphics.ES20.DebugSeverity), typeof(Int32), typeof(IntPtr));
                    } finally {
                        FreeStringPtr(buf_string_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="buffers">[length: n] 
        /// Specifies an array of buffer objects to be deleted.
        /// </param>
        [CLSCompliant(false)]
        public static void DeleteBuffer(Int32 buffers)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldc_I4(1);
                    Silk.Cil.LoadAddress(buffers);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(65);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="buffers">[length: n] 
        /// Specifies an array of buffer objects to be deleted.
        /// </param>
        [CLSCompliant(false)]
        public static void DeleteBuffer(UInt32 buffers)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldc_I4(1);
                    Silk.Cil.LoadAddress(buffers);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(65);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of buffer objects to be deleted.
        /// </param>
        /// <param name="buffers">[length: n] 
        /// Specifies an array of buffer objects to be deleted.
        /// </param>
        [CLSCompliant(false)]
        public static void DeleteBuffers(Int32 n, Int32[] buffers)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "buffers_pinned");
                    if(buffers != null && buffers.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("buffers_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("buffers_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("buffers_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(65);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of buffer objects to be deleted.
        /// </param>
        /// <param name="buffers">[length: n] 
        /// Specifies an array of buffer objects to be deleted.
        /// </param>
        [CLSCompliant(false)]
        public static void DeleteBuffers(Int32 n, ref Int32 buffers)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "buffers_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("buffers_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("buffers_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(65);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of buffer objects to be deleted.
        /// </param>
        /// <param name="buffers">[length: n] 
        /// Specifies an array of buffer objects to be deleted.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void DeleteBuffers(Int32 n, Int32* buffers)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(65);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of buffer objects to be deleted.
        /// </param>
        /// <param name="buffers">[length: n] 
        /// Specifies an array of buffer objects to be deleted.
        /// </param>
        [CLSCompliant(false)]
        public static void DeleteBuffers(Int32 n, UInt32[] buffers)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.UInt32& pinned", "buffers_pinned");
                    if(buffers != null && buffers.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.UInt32");
                        Silk.Cil.StoreByName("buffers_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("buffers_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("buffers_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(65);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of buffer objects to be deleted.
        /// </param>
        /// <param name="buffers">[length: n] 
        /// Specifies an array of buffer objects to be deleted.
        /// </param>
        [CLSCompliant(false)]
        public static void DeleteBuffers(Int32 n, ref UInt32 buffers)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.UInt32& pinned", "buffers_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("buffers_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("buffers_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(65);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of buffer objects to be deleted.
        /// </param>
        /// <param name="buffers">[length: n] 
        /// Specifies an array of buffer objects to be deleted.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void DeleteBuffers(Int32 n, UInt32* buffers)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(65);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named framebuffer objects
        /// </summary>
        /// <param name="framebuffers">[length: n] 
        /// Specifies an array of framebuffer objects to be deleted.
        /// </param>
        [CLSCompliant(false)]
        public static void DeleteFramebuffer(Int32 framebuffers)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldc_I4(1);
                    Silk.Cil.LoadAddress(framebuffers);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(67);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named framebuffer objects
        /// </summary>
        /// <param name="framebuffers">[length: n] 
        /// Specifies an array of framebuffer objects to be deleted.
        /// </param>
        [CLSCompliant(false)]
        public static void DeleteFramebuffer(UInt32 framebuffers)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldc_I4(1);
                    Silk.Cil.LoadAddress(framebuffers);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(67);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named framebuffer objects
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of framebuffer objects to be deleted.
        /// </param>
        /// <param name="framebuffers">[length: n] 
        /// Specifies an array of framebuffer objects to be deleted.
        /// </param>
        [CLSCompliant(false)]
        public static void DeleteFramebuffers(Int32 n, Int32[] framebuffers)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "framebuffers_pinned");
                    if(framebuffers != null && framebuffers.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("framebuffers_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("framebuffers_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("framebuffers_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(67);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named framebuffer objects
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of framebuffer objects to be deleted.
        /// </param>
        /// <param name="framebuffers">[length: n] 
        /// Specifies an array of framebuffer objects to be deleted.
        /// </param>
        [CLSCompliant(false)]
        public static void DeleteFramebuffers(Int32 n, ref Int32 framebuffers)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "framebuffers_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("framebuffers_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("framebuffers_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(67);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named framebuffer objects
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of framebuffer objects to be deleted.
        /// </param>
        /// <param name="framebuffers">[length: n] 
        /// Specifies an array of framebuffer objects to be deleted.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void DeleteFramebuffers(Int32 n, Int32* framebuffers)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(67);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named framebuffer objects
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of framebuffer objects to be deleted.
        /// </param>
        /// <param name="framebuffers">[length: n] 
        /// Specifies an array of framebuffer objects to be deleted.
        /// </param>
        [CLSCompliant(false)]
        public static void DeleteFramebuffers(Int32 n, UInt32[] framebuffers)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.UInt32& pinned", "framebuffers_pinned");
                    if(framebuffers != null && framebuffers.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.UInt32");
                        Silk.Cil.StoreByName("framebuffers_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("framebuffers_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("framebuffers_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(67);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named framebuffer objects
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of framebuffer objects to be deleted.
        /// </param>
        /// <param name="framebuffers">[length: n] 
        /// Specifies an array of framebuffer objects to be deleted.
        /// </param>
        [CLSCompliant(false)]
        public static void DeleteFramebuffers(Int32 n, ref UInt32 framebuffers)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.UInt32& pinned", "framebuffers_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("framebuffers_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("framebuffers_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(67);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named framebuffer objects
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of framebuffer objects to be deleted.
        /// </param>
        /// <param name="framebuffers">[length: n] 
        /// Specifies an array of framebuffer objects to be deleted.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void DeleteFramebuffers(Int32 n, UInt32* framebuffers)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(67);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be deleted.
        /// </param>
        [CLSCompliant(false)]
        public static void DeleteProgram(Int32 program)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(70);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be deleted.
        /// </param>
        [CLSCompliant(false)]
        public static void DeleteProgram(UInt32 program)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(70);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named renderbuffer objects
        /// </summary>
        /// <param name="renderbuffers">[length: n] 
        /// Specifies an array of renderbuffer objects to be deleted.
        /// </param>
        [CLSCompliant(false)]
        public static void DeleteRenderbuffer(Int32 renderbuffers)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldc_I4(1);
                    Silk.Cil.LoadAddress(renderbuffers);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(73);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named renderbuffer objects
        /// </summary>
        /// <param name="renderbuffers">[length: n] 
        /// Specifies an array of renderbuffer objects to be deleted.
        /// </param>
        [CLSCompliant(false)]
        public static void DeleteRenderbuffer(UInt32 renderbuffers)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldc_I4(1);
                    Silk.Cil.LoadAddress(renderbuffers);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(73);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named renderbuffer objects
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of renderbuffer objects to be deleted.
        /// </param>
        /// <param name="renderbuffers">[length: n] 
        /// Specifies an array of renderbuffer objects to be deleted.
        /// </param>
        [CLSCompliant(false)]
        public static void DeleteRenderbuffers(Int32 n, Int32[] renderbuffers)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "renderbuffers_pinned");
                    if(renderbuffers != null && renderbuffers.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("renderbuffers_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("renderbuffers_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("renderbuffers_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(73);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named renderbuffer objects
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of renderbuffer objects to be deleted.
        /// </param>
        /// <param name="renderbuffers">[length: n] 
        /// Specifies an array of renderbuffer objects to be deleted.
        /// </param>
        [CLSCompliant(false)]
        public static void DeleteRenderbuffers(Int32 n, ref Int32 renderbuffers)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "renderbuffers_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("renderbuffers_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("renderbuffers_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(73);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named renderbuffer objects
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of renderbuffer objects to be deleted.
        /// </param>
        /// <param name="renderbuffers">[length: n] 
        /// Specifies an array of renderbuffer objects to be deleted.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void DeleteRenderbuffers(Int32 n, Int32* renderbuffers)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(73);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named renderbuffer objects
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of renderbuffer objects to be deleted.
        /// </param>
        /// <param name="renderbuffers">[length: n] 
        /// Specifies an array of renderbuffer objects to be deleted.
        /// </param>
        [CLSCompliant(false)]
        public static void DeleteRenderbuffers(Int32 n, UInt32[] renderbuffers)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.UInt32& pinned", "renderbuffers_pinned");
                    if(renderbuffers != null && renderbuffers.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.UInt32");
                        Silk.Cil.StoreByName("renderbuffers_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("renderbuffers_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("renderbuffers_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(73);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named renderbuffer objects
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of renderbuffer objects to be deleted.
        /// </param>
        /// <param name="renderbuffers">[length: n] 
        /// Specifies an array of renderbuffer objects to be deleted.
        /// </param>
        [CLSCompliant(false)]
        public static void DeleteRenderbuffers(Int32 n, ref UInt32 renderbuffers)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.UInt32& pinned", "renderbuffers_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("renderbuffers_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("renderbuffers_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(73);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named renderbuffer objects
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of renderbuffer objects to be deleted.
        /// </param>
        /// <param name="renderbuffers">[length: n] 
        /// Specifies an array of renderbuffer objects to be deleted.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void DeleteRenderbuffers(Int32 n, UInt32* renderbuffers)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(73);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete a shader object
        /// </summary>
        /// <param name="shader"> 
        /// Specifies the shader object to be deleted.
        /// </param>
        [CLSCompliant(false)]
        public static void DeleteShader(Int32 shader)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(74);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete a shader object
        /// </summary>
        /// <param name="shader"> 
        /// Specifies the shader object to be deleted.
        /// </param>
        [CLSCompliant(false)]
        public static void DeleteShader(UInt32 shader)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(74);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named textures
        /// </summary>
        /// <param name="textures">[length: n] 
        /// Specifies an array of textures to be deleted.
        /// </param>
        [CLSCompliant(false)]
        public static void DeleteTexture(Int32 textures)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldc_I4(1);
                    Silk.Cil.LoadAddress(textures);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(76);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named textures
        /// </summary>
        /// <param name="textures">[length: n] 
        /// Specifies an array of textures to be deleted.
        /// </param>
        [CLSCompliant(false)]
        public static void DeleteTexture(UInt32 textures)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldc_I4(1);
                    Silk.Cil.LoadAddress(textures);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(76);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named textures
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of textures to be deleted.
        /// </param>
        /// <param name="textures">[length: n] 
        /// Specifies an array of textures to be deleted.
        /// </param>
        [CLSCompliant(false)]
        public static void DeleteTextures(Int32 n, Int32[] textures)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "textures_pinned");
                    if(textures != null && textures.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("textures_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("textures_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("textures_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(76);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named textures
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of textures to be deleted.
        /// </param>
        /// <param name="textures">[length: n] 
        /// Specifies an array of textures to be deleted.
        /// </param>
        [CLSCompliant(false)]
        public static void DeleteTextures(Int32 n, ref Int32 textures)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "textures_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("textures_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("textures_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(76);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named textures
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of textures to be deleted.
        /// </param>
        /// <param name="textures">[length: n] 
        /// Specifies an array of textures to be deleted.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void DeleteTextures(Int32 n, Int32* textures)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(76);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named textures
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of textures to be deleted.
        /// </param>
        /// <param name="textures">[length: n] 
        /// Specifies an array of textures to be deleted.
        /// </param>
        [CLSCompliant(false)]
        public static void DeleteTextures(Int32 n, UInt32[] textures)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.UInt32& pinned", "textures_pinned");
                    if(textures != null && textures.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.UInt32");
                        Silk.Cil.StoreByName("textures_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("textures_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("textures_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(76);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named textures
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of textures to be deleted.
        /// </param>
        /// <param name="textures">[length: n] 
        /// Specifies an array of textures to be deleted.
        /// </param>
        [CLSCompliant(false)]
        public static void DeleteTextures(Int32 n, ref UInt32 textures)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.UInt32& pinned", "textures_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("textures_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("textures_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(76);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named textures
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of textures to be deleted.
        /// </param>
        /// <param name="textures">[length: n] 
        /// Specifies an array of textures to be deleted.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void DeleteTextures(Int32 n, UInt32* textures)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(76);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value used for depth buffer comparisons
        /// </summary>
        /// <param name="func"> 
        /// Specifies the depth comparison function. Symbolic constants Never, Less, Equal, Lequal, Greater, Notequal, Gequal, and Always are accepted. The initial value is Less.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void DepthFunc(OpenTK.Graphics.ES20.All func)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(78);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.DepthFunction));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value used for depth buffer comparisons
        /// </summary>
        /// <param name="func"> 
        /// Specifies the depth comparison function. Symbolic constants Never, Less, Equal, Lequal, Greater, Notequal, Gequal, and Always are accepted. The initial value is Less.
        /// </param>
        public static void DepthFunc(OpenTK.Graphics.ES20.DepthFunction func)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(78);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.DepthFunction));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Enable or disable writing into the depth buffer
        /// </summary>
        /// <param name="flag"> 
        /// Specifies whether the depth buffer is enabled for writing. If flag is False, depth buffer writing is disabled. Otherwise, it is enabled. Initially, depth buffer writing is enabled.
        /// </param>
        public static void DepthMask(bool flag)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(79);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(bool));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify mapping of depth values from normalized device coordinates to window coordinates
        /// </summary>
        /// <param name="n"> 
        /// Specifies the mapping of the near clipping plane to window coordinates. The initial value is 0.
        /// </param>
        /// <param name="f"> 
        /// Specifies the mapping of the far clipping plane to window coordinates. The initial value is 1.
        /// </param>
        public static void DepthRange(Single n, Single f)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(80);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Single), typeof(Single));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Detach a shader object from a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object from which to detach the shader object.
        /// </param>
        /// <param name="shader"> 
        /// Specifies the shader object to be detached.
        /// </param>
        [CLSCompliant(false)]
        public static void DetachShader(Int32 program, Int32 shader)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(81);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Detach a shader object from a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object from which to detach the shader object.
        /// </param>
        /// <param name="shader"> 
        /// Specifies the shader object to be detached.
        /// </param>
        [CLSCompliant(false)]
        public static void DetachShader(UInt32 program, UInt32 shader)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(81);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="cap"></param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void Disable(OpenTK.Graphics.ES20.All cap)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(82);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.EnableCap));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="cap"></param>
        public static void Disable(OpenTK.Graphics.ES20.EnableCap cap)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(82);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.EnableCap));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="index"></param>
        [CLSCompliant(false)]
        public static void DisableVertexAttribArray(Int32 index)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(85);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="index"></param>
        [CLSCompliant(false)]
        public static void DisableVertexAttribArray(UInt32 index)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(85);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode"> 
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="first"> 
        /// Specifies the starting index in the enabled arrays.
        /// </param>
        /// <param name="count"> 
        /// Specifies the number of indices to be rendered.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void DrawArrays(OpenTK.Graphics.ES20.All mode, Int32 first, Int32 count)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(87);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode"> 
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="first"> 
        /// Specifies the starting index in the enabled arrays.
        /// </param>
        /// <param name="count"> 
        /// Specifies the number of indices to be rendered.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        public static void DrawArrays(OpenTK.Graphics.ES20.BeginMode mode, Int32 first, Int32 count)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(87);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode"> 
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="first"> 
        /// Specifies the starting index in the enabled arrays.
        /// </param>
        /// <param name="count"> 
        /// Specifies the number of indices to be rendered.
        /// </param>
        public static void DrawArrays(OpenTK.Graphics.ES20.PrimitiveType mode, Int32 first, Int32 count)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(87);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode"> 
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="count"> 
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type"> 
        /// Specifies the type of the values in indices. Must be UnsignedByte or UnsignedShort.
        /// </param>
        /// <param name="indices">[length: count,type] 
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void DrawElements(OpenTK.Graphics.ES20.All mode, Int32 count, OpenTK.Graphics.ES20.All type, IntPtr indices)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(94);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode"> 
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="count"> 
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type"> 
        /// Specifies the type of the values in indices. Must be UnsignedByte or UnsignedShort.
        /// </param>
        /// <param name="indices">[length: count,type] 
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void DrawElements<T3>(OpenTK.Graphics.ES20.All mode, Int32 count, OpenTK.Graphics.ES20.All type, [InAttribute, OutAttribute] T3[] indices)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                    if(indices != null && indices.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T3");
                        Silk.Cil.StoreByName("indices_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("indices_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("indices_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(94);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode"> 
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="count"> 
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type"> 
        /// Specifies the type of the values in indices. Must be UnsignedByte or UnsignedShort.
        /// </param>
        /// <param name="indices">[length: count,type] 
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void DrawElements<T3>(OpenTK.Graphics.ES20.All mode, Int32 count, OpenTK.Graphics.ES20.All type, [InAttribute, OutAttribute] T3[,] indices)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                    if(indices != null && indices.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T3[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("indices_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("indices_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("indices_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(94);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode"> 
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="count"> 
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type"> 
        /// Specifies the type of the values in indices. Must be UnsignedByte or UnsignedShort.
        /// </param>
        /// <param name="indices">[length: count,type] 
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void DrawElements<T3>(OpenTK.Graphics.ES20.All mode, Int32 count, OpenTK.Graphics.ES20.All type, [InAttribute, OutAttribute] T3[,,] indices)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                    if(indices != null && indices.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T3[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("indices_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("indices_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("indices_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(94);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode"> 
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="count"> 
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type"> 
        /// Specifies the type of the values in indices. Must be UnsignedByte or UnsignedShort.
        /// </param>
        /// <param name="indices">[length: count,type] 
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void DrawElements<T3>(OpenTK.Graphics.ES20.All mode, Int32 count, OpenTK.Graphics.ES20.All type, [InAttribute, OutAttribute] ref T3 indices)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.StoreByName("indices_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("indices_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(94);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode"> 
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="count"> 
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type"> 
        /// Specifies the type of the values in indices. Must be UnsignedByte or UnsignedShort.
        /// </param>
        /// <param name="indices">[length: count,type] 
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        public static void DrawElements(OpenTK.Graphics.ES20.BeginMode mode, Int32 count, OpenTK.Graphics.ES20.DrawElementsType type, IntPtr indices)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(94);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode"> 
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="count"> 
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type"> 
        /// Specifies the type of the values in indices. Must be UnsignedByte or UnsignedShort.
        /// </param>
        /// <param name="indices">[length: count,type] 
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [CLSCompliant(false)]
        public static void DrawElements<T3>(OpenTK.Graphics.ES20.BeginMode mode, Int32 count, OpenTK.Graphics.ES20.DrawElementsType type, [InAttribute, OutAttribute] T3[] indices)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                    if(indices != null && indices.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T3");
                        Silk.Cil.StoreByName("indices_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("indices_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("indices_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(94);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode"> 
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="count"> 
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type"> 
        /// Specifies the type of the values in indices. Must be UnsignedByte or UnsignedShort.
        /// </param>
        /// <param name="indices">[length: count,type] 
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [CLSCompliant(false)]
        public static void DrawElements<T3>(OpenTK.Graphics.ES20.BeginMode mode, Int32 count, OpenTK.Graphics.ES20.DrawElementsType type, [InAttribute, OutAttribute] T3[,] indices)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                    if(indices != null && indices.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T3[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("indices_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("indices_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("indices_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(94);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode"> 
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="count"> 
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type"> 
        /// Specifies the type of the values in indices. Must be UnsignedByte or UnsignedShort.
        /// </param>
        /// <param name="indices">[length: count,type] 
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [CLSCompliant(false)]
        public static void DrawElements<T3>(OpenTK.Graphics.ES20.BeginMode mode, Int32 count, OpenTK.Graphics.ES20.DrawElementsType type, [InAttribute, OutAttribute] T3[,,] indices)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                    if(indices != null && indices.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T3[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("indices_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("indices_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("indices_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(94);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode"> 
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="count"> 
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type"> 
        /// Specifies the type of the values in indices. Must be UnsignedByte or UnsignedShort.
        /// </param>
        /// <param name="indices">[length: count,type] 
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        public static void DrawElements<T3>(OpenTK.Graphics.ES20.BeginMode mode, Int32 count, OpenTK.Graphics.ES20.DrawElementsType type, [InAttribute, OutAttribute] ref T3 indices)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.StoreByName("indices_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("indices_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(94);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode"> 
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="count"> 
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type"> 
        /// Specifies the type of the values in indices. Must be UnsignedByte or UnsignedShort.
        /// </param>
        /// <param name="indices">[length: count,type] 
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        public static void DrawElements(OpenTK.Graphics.ES20.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES20.DrawElementsType type, IntPtr indices)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(94);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode"> 
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="count"> 
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type"> 
        /// Specifies the type of the values in indices. Must be UnsignedByte or UnsignedShort.
        /// </param>
        /// <param name="indices">[length: count,type] 
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [CLSCompliant(false)]
        public static void DrawElements<T3>(OpenTK.Graphics.ES20.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES20.DrawElementsType type, [InAttribute, OutAttribute] T3[] indices)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                    if(indices != null && indices.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T3");
                        Silk.Cil.StoreByName("indices_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("indices_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("indices_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(94);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode"> 
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="count"> 
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type"> 
        /// Specifies the type of the values in indices. Must be UnsignedByte or UnsignedShort.
        /// </param>
        /// <param name="indices">[length: count,type] 
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [CLSCompliant(false)]
        public static void DrawElements<T3>(OpenTK.Graphics.ES20.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES20.DrawElementsType type, [InAttribute, OutAttribute] T3[,] indices)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                    if(indices != null && indices.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T3[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("indices_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("indices_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("indices_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(94);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode"> 
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="count"> 
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type"> 
        /// Specifies the type of the values in indices. Must be UnsignedByte or UnsignedShort.
        /// </param>
        /// <param name="indices">[length: count,type] 
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [CLSCompliant(false)]
        public static void DrawElements<T3>(OpenTK.Graphics.ES20.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES20.DrawElementsType type, [InAttribute, OutAttribute] T3[,,] indices)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                    if(indices != null && indices.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T3[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("indices_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("indices_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("indices_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(94);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode"> 
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="count"> 
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type"> 
        /// Specifies the type of the values in indices. Must be UnsignedByte or UnsignedShort.
        /// </param>
        /// <param name="indices">[length: count,type] 
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        public static void DrawElements<T3>(OpenTK.Graphics.ES20.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES20.DrawElementsType type, [InAttribute, OutAttribute] ref T3 indices)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.StoreByName("indices_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("indices_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(94);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Enable or disable server-side GL capabilities
        /// </summary>
        /// <param name="cap"> 
        /// Specifies a symbolic constant indicating a GL capability.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void Enable(OpenTK.Graphics.ES20.All cap)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(100);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.EnableCap));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Enable or disable server-side GL capabilities
        /// </summary>
        /// <param name="cap"> 
        /// Specifies a symbolic constant indicating a GL capability.
        /// </param>
        public static void Enable(OpenTK.Graphics.ES20.EnableCap cap)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(100);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.EnableCap));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Enable or disable a generic vertex attribute array
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be enabled or disabled.
        /// </param>
        [CLSCompliant(false)]
        public static void EnableVertexAttribArray(Int32 index)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(103);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Enable or disable a generic vertex attribute array
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be enabled or disabled.
        /// </param>
        [CLSCompliant(false)]
        public static void EnableVertexAttribArray(UInt32 index)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(103);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Block until all GL execution is complete
        /// </summary>
        public static void Finish()
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(121);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Force execution of GL commands in finite time
        /// </summary>
        public static void Flush()
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(123);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Attach a renderbuffer object to a framebuffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the framebuffer target. The symbolic constant must be Framebuffer.
        /// </param>
        /// <param name="attachment"> 
        /// Specifies the attachment point to which renderbuffer should be attached. Must be one of the following symbolic constants: ColorAttachment0, DepthAttachment, or StencilAttachment.
        /// </param>
        /// <param name="renderbuffertarget"> 
        /// Specifies the renderbuffer target. The symbolic constant must be Renderbuffer.
        /// </param>
        /// <param name="renderbuffer"> 
        /// Specifies the renderbuffer object that is to be attached.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void FramebufferRenderbuffer(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All attachment, OpenTK.Graphics.ES20.All renderbuffertarget, Int32 renderbuffer)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(125);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.FramebufferTarget), typeof(OpenTK.Graphics.ES20.All), typeof(OpenTK.Graphics.ES20.RenderbufferTarget), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Attach a renderbuffer object to a framebuffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the framebuffer target. The symbolic constant must be Framebuffer.
        /// </param>
        /// <param name="attachment"> 
        /// Specifies the attachment point to which renderbuffer should be attached. Must be one of the following symbolic constants: ColorAttachment0, DepthAttachment, or StencilAttachment.
        /// </param>
        /// <param name="renderbuffertarget"> 
        /// Specifies the renderbuffer target. The symbolic constant must be Renderbuffer.
        /// </param>
        /// <param name="renderbuffer"> 
        /// Specifies the renderbuffer object that is to be attached.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void FramebufferRenderbuffer(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All attachment, OpenTK.Graphics.ES20.All renderbuffertarget, UInt32 renderbuffer)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(125);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.FramebufferTarget), typeof(OpenTK.Graphics.ES20.All), typeof(OpenTK.Graphics.ES20.RenderbufferTarget), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Attach a renderbuffer object to a framebuffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the framebuffer target. The symbolic constant must be Framebuffer.
        /// </param>
        /// <param name="attachment"> 
        /// Specifies the attachment point to which renderbuffer should be attached. Must be one of the following symbolic constants: ColorAttachment0, DepthAttachment, or StencilAttachment.
        /// </param>
        /// <param name="renderbuffertarget"> 
        /// Specifies the renderbuffer target. The symbolic constant must be Renderbuffer.
        /// </param>
        /// <param name="renderbuffer"> 
        /// Specifies the renderbuffer object that is to be attached.
        /// </param>
        [CLSCompliant(false)]
        public static void FramebufferRenderbuffer(OpenTK.Graphics.ES20.FramebufferTarget target, OpenTK.Graphics.ES20.All attachment, OpenTK.Graphics.ES20.RenderbufferTarget renderbuffertarget, Int32 renderbuffer)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(125);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.FramebufferTarget), typeof(OpenTK.Graphics.ES20.All), typeof(OpenTK.Graphics.ES20.RenderbufferTarget), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Attach a renderbuffer object to a framebuffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the framebuffer target. The symbolic constant must be Framebuffer.
        /// </param>
        /// <param name="attachment"> 
        /// Specifies the attachment point to which renderbuffer should be attached. Must be one of the following symbolic constants: ColorAttachment0, DepthAttachment, or StencilAttachment.
        /// </param>
        /// <param name="renderbuffertarget"> 
        /// Specifies the renderbuffer target. The symbolic constant must be Renderbuffer.
        /// </param>
        /// <param name="renderbuffer"> 
        /// Specifies the renderbuffer object that is to be attached.
        /// </param>
        [CLSCompliant(false)]
        public static void FramebufferRenderbuffer(OpenTK.Graphics.ES20.FramebufferTarget target, OpenTK.Graphics.ES20.All attachment, OpenTK.Graphics.ES20.RenderbufferTarget renderbuffertarget, UInt32 renderbuffer)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(125);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.FramebufferTarget), typeof(OpenTK.Graphics.ES20.All), typeof(OpenTK.Graphics.ES20.RenderbufferTarget), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Attach a renderbuffer object to a framebuffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the framebuffer target. The symbolic constant must be Framebuffer.
        /// </param>
        /// <param name="attachment"> 
        /// Specifies the attachment point to which renderbuffer should be attached. Must be one of the following symbolic constants: ColorAttachment0, DepthAttachment, or StencilAttachment.
        /// </param>
        /// <param name="renderbuffertarget"> 
        /// Specifies the renderbuffer target. The symbolic constant must be Renderbuffer.
        /// </param>
        /// <param name="renderbuffer"> 
        /// Specifies the renderbuffer object that is to be attached.
        /// </param>
        [Obsolete("Use FramebufferAttachment overload instead")]
        [CLSCompliant(false)]
        public static void FramebufferRenderbuffer(OpenTK.Graphics.ES20.FramebufferTarget target, OpenTK.Graphics.ES20.FramebufferSlot attachment, OpenTK.Graphics.ES20.RenderbufferTarget renderbuffertarget, Int32 renderbuffer)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(125);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.FramebufferTarget), typeof(OpenTK.Graphics.ES20.All), typeof(OpenTK.Graphics.ES20.RenderbufferTarget), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Attach a renderbuffer object to a framebuffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the framebuffer target. The symbolic constant must be Framebuffer.
        /// </param>
        /// <param name="attachment"> 
        /// Specifies the attachment point to which renderbuffer should be attached. Must be one of the following symbolic constants: ColorAttachment0, DepthAttachment, or StencilAttachment.
        /// </param>
        /// <param name="renderbuffertarget"> 
        /// Specifies the renderbuffer target. The symbolic constant must be Renderbuffer.
        /// </param>
        /// <param name="renderbuffer"> 
        /// Specifies the renderbuffer object that is to be attached.
        /// </param>
        [Obsolete("Use FramebufferAttachment overload instead")]
        [CLSCompliant(false)]
        public static void FramebufferRenderbuffer(OpenTK.Graphics.ES20.FramebufferTarget target, OpenTK.Graphics.ES20.FramebufferSlot attachment, OpenTK.Graphics.ES20.RenderbufferTarget renderbuffertarget, UInt32 renderbuffer)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(125);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.FramebufferTarget), typeof(OpenTK.Graphics.ES20.All), typeof(OpenTK.Graphics.ES20.RenderbufferTarget), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Attach a texture image to a framebuffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the framebuffer target. The symbolic constant must be Framebuffer.
        /// </param>
        /// <param name="attachment"> 
        /// Specifies the attachment point to which an image from texture should be attached. Must be one of the following symbolic constants: ColorAttachment0, DepthAttachment, or StencilAttachment.
        /// </param>
        /// <param name="textarget"> 
        /// Specifies the texture target. Must be one of the following symbolic constants: Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="texture"> 
        /// Specifies the texture object whose image is to be attached.
        /// </param>
        /// <param name="level"> 
        /// Specifies the mipmap level of the texture image to be attached, which must be 0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void FramebufferTexture2D(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All attachment, OpenTK.Graphics.ES20.All textarget, Int32 texture, Int32 level)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(126);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.FramebufferTarget), typeof(OpenTK.Graphics.ES20.All), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(UInt32), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Attach a texture image to a framebuffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the framebuffer target. The symbolic constant must be Framebuffer.
        /// </param>
        /// <param name="attachment"> 
        /// Specifies the attachment point to which an image from texture should be attached. Must be one of the following symbolic constants: ColorAttachment0, DepthAttachment, or StencilAttachment.
        /// </param>
        /// <param name="textarget"> 
        /// Specifies the texture target. Must be one of the following symbolic constants: Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="texture"> 
        /// Specifies the texture object whose image is to be attached.
        /// </param>
        /// <param name="level"> 
        /// Specifies the mipmap level of the texture image to be attached, which must be 0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void FramebufferTexture2D(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All attachment, OpenTK.Graphics.ES20.All textarget, UInt32 texture, Int32 level)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(126);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.FramebufferTarget), typeof(OpenTK.Graphics.ES20.All), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(UInt32), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Attach a texture image to a framebuffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the framebuffer target. The symbolic constant must be Framebuffer.
        /// </param>
        /// <param name="attachment"> 
        /// Specifies the attachment point to which an image from texture should be attached. Must be one of the following symbolic constants: ColorAttachment0, DepthAttachment, or StencilAttachment.
        /// </param>
        /// <param name="textarget"> 
        /// Specifies the texture target. Must be one of the following symbolic constants: Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="texture"> 
        /// Specifies the texture object whose image is to be attached.
        /// </param>
        /// <param name="level"> 
        /// Specifies the mipmap level of the texture image to be attached, which must be 0.
        /// </param>
        [Obsolete("Use TextureTarget2d overload instead")]
        [CLSCompliant(false)]
        public static void FramebufferTexture2D(OpenTK.Graphics.ES20.FramebufferTarget target, OpenTK.Graphics.ES20.All attachment, OpenTK.Graphics.ES20.TextureTarget textarget, Int32 texture, Int32 level)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(126);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.FramebufferTarget), typeof(OpenTK.Graphics.ES20.All), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(UInt32), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Attach a texture image to a framebuffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the framebuffer target. The symbolic constant must be Framebuffer.
        /// </param>
        /// <param name="attachment"> 
        /// Specifies the attachment point to which an image from texture should be attached. Must be one of the following symbolic constants: ColorAttachment0, DepthAttachment, or StencilAttachment.
        /// </param>
        /// <param name="textarget"> 
        /// Specifies the texture target. Must be one of the following symbolic constants: Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="texture"> 
        /// Specifies the texture object whose image is to be attached.
        /// </param>
        /// <param name="level"> 
        /// Specifies the mipmap level of the texture image to be attached, which must be 0.
        /// </param>
        [Obsolete("Use TextureTarget2d overload instead")]
        [CLSCompliant(false)]
        public static void FramebufferTexture2D(OpenTK.Graphics.ES20.FramebufferTarget target, OpenTK.Graphics.ES20.All attachment, OpenTK.Graphics.ES20.TextureTarget textarget, UInt32 texture, Int32 level)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(126);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.FramebufferTarget), typeof(OpenTK.Graphics.ES20.All), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(UInt32), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Attach a texture image to a framebuffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the framebuffer target. The symbolic constant must be Framebuffer.
        /// </param>
        /// <param name="attachment"> 
        /// Specifies the attachment point to which an image from texture should be attached. Must be one of the following symbolic constants: ColorAttachment0, DepthAttachment, or StencilAttachment.
        /// </param>
        /// <param name="textarget"> 
        /// Specifies the texture target. Must be one of the following symbolic constants: Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="texture"> 
        /// Specifies the texture object whose image is to be attached.
        /// </param>
        /// <param name="level"> 
        /// Specifies the mipmap level of the texture image to be attached, which must be 0.
        /// </param>
        [CLSCompliant(false)]
        public static void FramebufferTexture2D(OpenTK.Graphics.ES20.FramebufferTarget target, OpenTK.Graphics.ES20.All attachment, OpenTK.Graphics.ES20.TextureTarget2d textarget, Int32 texture, Int32 level)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(126);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.FramebufferTarget), typeof(OpenTK.Graphics.ES20.All), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(UInt32), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Attach a texture image to a framebuffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the framebuffer target. The symbolic constant must be Framebuffer.
        /// </param>
        /// <param name="attachment"> 
        /// Specifies the attachment point to which an image from texture should be attached. Must be one of the following symbolic constants: ColorAttachment0, DepthAttachment, or StencilAttachment.
        /// </param>
        /// <param name="textarget"> 
        /// Specifies the texture target. Must be one of the following symbolic constants: Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="texture"> 
        /// Specifies the texture object whose image is to be attached.
        /// </param>
        /// <param name="level"> 
        /// Specifies the mipmap level of the texture image to be attached, which must be 0.
        /// </param>
        [CLSCompliant(false)]
        public static void FramebufferTexture2D(OpenTK.Graphics.ES20.FramebufferTarget target, OpenTK.Graphics.ES20.All attachment, OpenTK.Graphics.ES20.TextureTarget2d textarget, UInt32 texture, Int32 level)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(126);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.FramebufferTarget), typeof(OpenTK.Graphics.ES20.All), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(UInt32), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Attach a texture image to a framebuffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the framebuffer target. The symbolic constant must be Framebuffer.
        /// </param>
        /// <param name="attachment"> 
        /// Specifies the attachment point to which an image from texture should be attached. Must be one of the following symbolic constants: ColorAttachment0, DepthAttachment, or StencilAttachment.
        /// </param>
        /// <param name="textarget"> 
        /// Specifies the texture target. Must be one of the following symbolic constants: Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="texture"> 
        /// Specifies the texture object whose image is to be attached.
        /// </param>
        /// <param name="level"> 
        /// Specifies the mipmap level of the texture image to be attached, which must be 0.
        /// </param>
        [Obsolete("Use TextureTarget2d overload instead")]
        [CLSCompliant(false)]
        public static void FramebufferTexture2D(OpenTK.Graphics.ES20.FramebufferTarget target, OpenTK.Graphics.ES20.FramebufferSlot attachment, OpenTK.Graphics.ES20.TextureTarget textarget, Int32 texture, Int32 level)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(126);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.FramebufferTarget), typeof(OpenTK.Graphics.ES20.All), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(UInt32), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Attach a texture image to a framebuffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the framebuffer target. The symbolic constant must be Framebuffer.
        /// </param>
        /// <param name="attachment"> 
        /// Specifies the attachment point to which an image from texture should be attached. Must be one of the following symbolic constants: ColorAttachment0, DepthAttachment, or StencilAttachment.
        /// </param>
        /// <param name="textarget"> 
        /// Specifies the texture target. Must be one of the following symbolic constants: Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="texture"> 
        /// Specifies the texture object whose image is to be attached.
        /// </param>
        /// <param name="level"> 
        /// Specifies the mipmap level of the texture image to be attached, which must be 0.
        /// </param>
        [Obsolete("Use TextureTarget2d overload instead")]
        [CLSCompliant(false)]
        public static void FramebufferTexture2D(OpenTK.Graphics.ES20.FramebufferTarget target, OpenTK.Graphics.ES20.FramebufferSlot attachment, OpenTK.Graphics.ES20.TextureTarget textarget, UInt32 texture, Int32 level)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(126);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.FramebufferTarget), typeof(OpenTK.Graphics.ES20.All), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(UInt32), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Define front- and back-facing polygons
        /// </summary>
        /// <param name="mode"> 
        /// Specifies the orientation of front-facing polygons. Cw and Ccw are accepted. The initial value is Ccw.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void FrontFace(OpenTK.Graphics.ES20.All mode)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(131);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.FrontFaceDirection));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Define front- and back-facing polygons
        /// </summary>
        /// <param name="mode"> 
        /// Specifies the orientation of front-facing polygons. Cw and Ccw are accepted. The initial value is Ccw.
        /// </param>
        public static void FrontFace(OpenTK.Graphics.ES20.FrontFaceDirection mode)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(131);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.FrontFaceDirection));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate buffer object names
        /// </summary>
        [CLSCompliant(false)]
        public static Int32 GenBuffer()
        {
            unsafe
            {
                Int32 __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Int32 __result = default(Int32);
                    Silk.Cil.Ldc_I4(1);
                    Silk.Cil.LoadAddress(__result);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(132);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    Silk.Cil.Load(__result);
                    Silk.Cil.Store(out __return_result);
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate buffer object names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of buffer object names to be generated.
        /// </param>
        /// <param name="buffers">[length: n] 
        /// Specifies an array in which the generated buffer object names are stored.
        /// </param>
        [CLSCompliant(false)]
        public static void GenBuffers(Int32 n, [OutAttribute] Int32[] buffers)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "buffers_pinned");
                    if(buffers != null && buffers.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("buffers_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("buffers_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("buffers_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(132);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate buffer object names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of buffer object names to be generated.
        /// </param>
        /// <param name="buffers">[length: n] 
        /// Specifies an array in which the generated buffer object names are stored.
        /// </param>
        [CLSCompliant(false)]
        public static void GenBuffers(Int32 n, [OutAttribute] out Int32 buffers)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "buffers_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("buffers_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("buffers_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(132);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate buffer object names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of buffer object names to be generated.
        /// </param>
        /// <param name="buffers">[length: n] 
        /// Specifies an array in which the generated buffer object names are stored.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void GenBuffers(Int32 n, [OutAttribute] Int32* buffers)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(132);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate buffer object names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of buffer object names to be generated.
        /// </param>
        /// <param name="buffers">[length: n] 
        /// Specifies an array in which the generated buffer object names are stored.
        /// </param>
        [CLSCompliant(false)]
        public static void GenBuffers(Int32 n, [OutAttribute] UInt32[] buffers)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.UInt32& pinned", "buffers_pinned");
                    if(buffers != null && buffers.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.UInt32");
                        Silk.Cil.StoreByName("buffers_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("buffers_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("buffers_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(132);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate buffer object names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of buffer object names to be generated.
        /// </param>
        /// <param name="buffers">[length: n] 
        /// Specifies an array in which the generated buffer object names are stored.
        /// </param>
        [CLSCompliant(false)]
        public static void GenBuffers(Int32 n, [OutAttribute] out UInt32 buffers)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.UInt32& pinned", "buffers_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("buffers_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("buffers_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(132);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate buffer object names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of buffer object names to be generated.
        /// </param>
        /// <param name="buffers">[length: n] 
        /// Specifies an array in which the generated buffer object names are stored.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void GenBuffers(Int32 n, [OutAttribute] UInt32* buffers)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(132);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate a complete set of mipmaps for a texture object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the texture target of the active texture unit to which the texture object is bound whose mipmaps will be generated.  Must be one of the following symbolic constants: Texture2D or TextureCubeMap.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void GenerateMipmap(OpenTK.Graphics.ES20.All target)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(133);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate a complete set of mipmaps for a texture object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the texture target of the active texture unit to which the texture object is bound whose mipmaps will be generated.  Must be one of the following symbolic constants: Texture2D or TextureCubeMap.
        /// </param>
        public static void GenerateMipmap(OpenTK.Graphics.ES20.TextureTarget target)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(133);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate framebuffer object names
        /// </summary>
        [CLSCompliant(false)]
        public static Int32 GenFramebuffer()
        {
            unsafe
            {
                Int32 __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Int32 __result = default(Int32);
                    Silk.Cil.Ldc_I4(1);
                    Silk.Cil.LoadAddress(__result);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(135);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    Silk.Cil.Load(__result);
                    Silk.Cil.Store(out __return_result);
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate framebuffer object names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of framebuffer object names to be generated.
        /// </param>
        /// <param name="framebuffers">[length: n] 
        /// Specifies an array in which the generated framebuffer object names are stored.
        /// </param>
        [CLSCompliant(false)]
        public static void GenFramebuffers(Int32 n, [OutAttribute] Int32[] framebuffers)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "framebuffers_pinned");
                    if(framebuffers != null && framebuffers.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("framebuffers_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("framebuffers_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("framebuffers_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(135);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate framebuffer object names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of framebuffer object names to be generated.
        /// </param>
        /// <param name="framebuffers">[length: n] 
        /// Specifies an array in which the generated framebuffer object names are stored.
        /// </param>
        [CLSCompliant(false)]
        public static void GenFramebuffers(Int32 n, [OutAttribute] out Int32 framebuffers)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "framebuffers_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("framebuffers_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("framebuffers_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(135);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate framebuffer object names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of framebuffer object names to be generated.
        /// </param>
        /// <param name="framebuffers">[length: n] 
        /// Specifies an array in which the generated framebuffer object names are stored.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void GenFramebuffers(Int32 n, [OutAttribute] Int32* framebuffers)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(135);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate framebuffer object names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of framebuffer object names to be generated.
        /// </param>
        /// <param name="framebuffers">[length: n] 
        /// Specifies an array in which the generated framebuffer object names are stored.
        /// </param>
        [CLSCompliant(false)]
        public static void GenFramebuffers(Int32 n, [OutAttribute] UInt32[] framebuffers)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.UInt32& pinned", "framebuffers_pinned");
                    if(framebuffers != null && framebuffers.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.UInt32");
                        Silk.Cil.StoreByName("framebuffers_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("framebuffers_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("framebuffers_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(135);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate framebuffer object names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of framebuffer object names to be generated.
        /// </param>
        /// <param name="framebuffers">[length: n] 
        /// Specifies an array in which the generated framebuffer object names are stored.
        /// </param>
        [CLSCompliant(false)]
        public static void GenFramebuffers(Int32 n, [OutAttribute] out UInt32 framebuffers)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.UInt32& pinned", "framebuffers_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("framebuffers_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("framebuffers_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(135);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate framebuffer object names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of framebuffer object names to be generated.
        /// </param>
        /// <param name="framebuffers">[length: n] 
        /// Specifies an array in which the generated framebuffer object names are stored.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void GenFramebuffers(Int32 n, [OutAttribute] UInt32* framebuffers)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(135);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate renderbuffer object names
        /// </summary>
        [CLSCompliant(false)]
        public static Int32 GenRenderbuffer()
        {
            unsafe
            {
                Int32 __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Int32 __result = default(Int32);
                    Silk.Cil.Ldc_I4(1);
                    Silk.Cil.LoadAddress(__result);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(139);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    Silk.Cil.Load(__result);
                    Silk.Cil.Store(out __return_result);
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate renderbuffer object names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of renderbuffer object names to be generated.
        /// </param>
        /// <param name="renderbuffers">[length: n] 
        /// Specifies an array in which the generated renderbuffer object names are stored.
        /// </param>
        [CLSCompliant(false)]
        public static void GenRenderbuffers(Int32 n, [OutAttribute] Int32[] renderbuffers)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "renderbuffers_pinned");
                    if(renderbuffers != null && renderbuffers.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("renderbuffers_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("renderbuffers_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("renderbuffers_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(139);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate renderbuffer object names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of renderbuffer object names to be generated.
        /// </param>
        /// <param name="renderbuffers">[length: n] 
        /// Specifies an array in which the generated renderbuffer object names are stored.
        /// </param>
        [CLSCompliant(false)]
        public static void GenRenderbuffers(Int32 n, [OutAttribute] out Int32 renderbuffers)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "renderbuffers_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("renderbuffers_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("renderbuffers_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(139);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate renderbuffer object names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of renderbuffer object names to be generated.
        /// </param>
        /// <param name="renderbuffers">[length: n] 
        /// Specifies an array in which the generated renderbuffer object names are stored.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void GenRenderbuffers(Int32 n, [OutAttribute] Int32* renderbuffers)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(139);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate renderbuffer object names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of renderbuffer object names to be generated.
        /// </param>
        /// <param name="renderbuffers">[length: n] 
        /// Specifies an array in which the generated renderbuffer object names are stored.
        /// </param>
        [CLSCompliant(false)]
        public static void GenRenderbuffers(Int32 n, [OutAttribute] UInt32[] renderbuffers)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.UInt32& pinned", "renderbuffers_pinned");
                    if(renderbuffers != null && renderbuffers.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.UInt32");
                        Silk.Cil.StoreByName("renderbuffers_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("renderbuffers_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("renderbuffers_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(139);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate renderbuffer object names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of renderbuffer object names to be generated.
        /// </param>
        /// <param name="renderbuffers">[length: n] 
        /// Specifies an array in which the generated renderbuffer object names are stored.
        /// </param>
        [CLSCompliant(false)]
        public static void GenRenderbuffers(Int32 n, [OutAttribute] out UInt32 renderbuffers)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.UInt32& pinned", "renderbuffers_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("renderbuffers_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("renderbuffers_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(139);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate renderbuffer object names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of renderbuffer object names to be generated.
        /// </param>
        /// <param name="renderbuffers">[length: n] 
        /// Specifies an array in which the generated renderbuffer object names are stored.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void GenRenderbuffers(Int32 n, [OutAttribute] UInt32* renderbuffers)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(139);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate texture names
        /// </summary>
        [CLSCompliant(false)]
        public static Int32 GenTexture()
        {
            unsafe
            {
                Int32 __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Int32 __result = default(Int32);
                    Silk.Cil.Ldc_I4(1);
                    Silk.Cil.LoadAddress(__result);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(140);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    Silk.Cil.Load(__result);
                    Silk.Cil.Store(out __return_result);
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate texture names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of texture names to be generated.
        /// </param>
        /// <param name="textures">[length: n] 
        /// Specifies an array in which the generated texture names are stored.
        /// </param>
        [CLSCompliant(false)]
        public static void GenTextures(Int32 n, [OutAttribute] Int32[] textures)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "textures_pinned");
                    if(textures != null && textures.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("textures_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("textures_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("textures_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(140);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate texture names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of texture names to be generated.
        /// </param>
        /// <param name="textures">[length: n] 
        /// Specifies an array in which the generated texture names are stored.
        /// </param>
        [CLSCompliant(false)]
        public static void GenTextures(Int32 n, [OutAttribute] out Int32 textures)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "textures_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("textures_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("textures_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(140);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate texture names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of texture names to be generated.
        /// </param>
        /// <param name="textures">[length: n] 
        /// Specifies an array in which the generated texture names are stored.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void GenTextures(Int32 n, [OutAttribute] Int32* textures)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(140);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate texture names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of texture names to be generated.
        /// </param>
        /// <param name="textures">[length: n] 
        /// Specifies an array in which the generated texture names are stored.
        /// </param>
        [CLSCompliant(false)]
        public static void GenTextures(Int32 n, [OutAttribute] UInt32[] textures)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.UInt32& pinned", "textures_pinned");
                    if(textures != null && textures.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.UInt32");
                        Silk.Cil.StoreByName("textures_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("textures_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("textures_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(140);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate texture names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of texture names to be generated.
        /// </param>
        /// <param name="textures">[length: n] 
        /// Specifies an array in which the generated texture names are stored.
        /// </param>
        [CLSCompliant(false)]
        public static void GenTextures(Int32 n, [OutAttribute] out UInt32 textures)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.UInt32& pinned", "textures_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("textures_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("textures_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(140);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate texture names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of texture names to be generated.
        /// </param>
        /// <param name="textures">[length: n] 
        /// Specifies an array in which the generated texture names are stored.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void GenTextures(Int32 n, [OutAttribute] UInt32* textures)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(140);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return information about an active attribute variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="index"> 
        /// Specifies the index of the attribute variable to be queried.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.
        /// </param>
        /// <param name="size">[length: 1] 
        /// Returns the size of the attribute variable.
        /// </param>
        /// <param name="type">[length: 1] 
        /// Returns the data type of the attribute variable.
        /// </param>
        /// <param name="name">[length: bufSize] 
        /// Returns a null terminated string containing the name of the attribute variable.
        /// </param>
        [CLSCompliant(false)]
        public static void GetActiveAttrib(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out OpenTK.Graphics.ES20.ActiveAttribType type, [OutAttribute] StringBuilder name)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.StoreByName("length_pinned");
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "size_pinned");
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.StoreByName("size_pinned");
                    Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.ActiveAttribType& pinned", "type_pinned");
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.StoreByName("type_pinned");
                    IntPtr name_sb_ptr = IntPtr.Zero;
                    try
                    {
                        name_sb_ptr = Marshal.AllocHGlobal(name.Capacity + 1);
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("length_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("size_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("type_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(name_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(142);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(Int32*), typeof(OpenTK.Graphics.ES20.ActiveAttribType*), typeof(IntPtr));
                        MarshalPtrToStringBuilder(name_sb_ptr, name);
                    } finally {
                        Marshal.FreeHGlobal(name_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return information about an active attribute variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="index"> 
        /// Specifies the index of the attribute variable to be queried.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.
        /// </param>
        /// <param name="size">[length: 1] 
        /// Returns the size of the attribute variable.
        /// </param>
        /// <param name="type">[length: 1] 
        /// Returns the data type of the attribute variable.
        /// </param>
        /// <param name="name">[length: bufSize] 
        /// Returns a null terminated string containing the name of the attribute variable.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetActiveAttrib(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out OpenTK.Graphics.ES20.All type, [OutAttribute] StringBuilder name)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.StoreByName("length_pinned");
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "size_pinned");
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.StoreByName("size_pinned");
                    Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.All& pinned", "type_pinned");
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.StoreByName("type_pinned");
                    IntPtr name_sb_ptr = IntPtr.Zero;
                    try
                    {
                        name_sb_ptr = Marshal.AllocHGlobal(name.Capacity + 1);
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("length_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("size_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("type_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(name_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(142);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(Int32*), typeof(OpenTK.Graphics.ES20.ActiveAttribType*), typeof(IntPtr));
                        MarshalPtrToStringBuilder(name_sb_ptr, name);
                    } finally {
                        Marshal.FreeHGlobal(name_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return information about an active attribute variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="index"> 
        /// Specifies the index of the attribute variable to be queried.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.
        /// </param>
        /// <param name="size">[length: 1] 
        /// Returns the size of the attribute variable.
        /// </param>
        /// <param name="type">[length: 1] 
        /// Returns the data type of the attribute variable.
        /// </param>
        /// <param name="name">[length: bufSize] 
        /// Returns a null terminated string containing the name of the attribute variable.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void GetActiveAttrib(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] OpenTK.Graphics.ES20.ActiveAttribType* type, [OutAttribute] StringBuilder name)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    IntPtr name_sb_ptr = IntPtr.Zero;
                    try
                    {
                        name_sb_ptr = Marshal.AllocHGlobal(name.Capacity + 1);
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Load(name_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(142);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(Int32*), typeof(OpenTK.Graphics.ES20.ActiveAttribType*), typeof(IntPtr));
                        MarshalPtrToStringBuilder(name_sb_ptr, name);
                    } finally {
                        Marshal.FreeHGlobal(name_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return information about an active attribute variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="index"> 
        /// Specifies the index of the attribute variable to be queried.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.
        /// </param>
        /// <param name="size">[length: 1] 
        /// Returns the size of the attribute variable.
        /// </param>
        /// <param name="type">[length: 1] 
        /// Returns the data type of the attribute variable.
        /// </param>
        /// <param name="name">[length: bufSize] 
        /// Returns a null terminated string containing the name of the attribute variable.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static unsafe void GetActiveAttrib(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] OpenTK.Graphics.ES20.All* type, [OutAttribute] StringBuilder name)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    IntPtr name_sb_ptr = IntPtr.Zero;
                    try
                    {
                        name_sb_ptr = Marshal.AllocHGlobal(name.Capacity + 1);
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Load(name_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(142);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(Int32*), typeof(OpenTK.Graphics.ES20.ActiveAttribType*), typeof(IntPtr));
                        MarshalPtrToStringBuilder(name_sb_ptr, name);
                    } finally {
                        Marshal.FreeHGlobal(name_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return information about an active attribute variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="index"> 
        /// Specifies the index of the attribute variable to be queried.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.
        /// </param>
        /// <param name="size">[length: 1] 
        /// Returns the size of the attribute variable.
        /// </param>
        /// <param name="type">[length: 1] 
        /// Returns the data type of the attribute variable.
        /// </param>
        /// <param name="name">[length: bufSize] 
        /// Returns a null terminated string containing the name of the attribute variable.
        /// </param>
        [CLSCompliant(false)]
        public static void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out OpenTK.Graphics.ES20.ActiveAttribType type, [OutAttribute] StringBuilder name)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.StoreByName("length_pinned");
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "size_pinned");
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.StoreByName("size_pinned");
                    Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.ActiveAttribType& pinned", "type_pinned");
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.StoreByName("type_pinned");
                    IntPtr name_sb_ptr = IntPtr.Zero;
                    try
                    {
                        name_sb_ptr = Marshal.AllocHGlobal(name.Capacity + 1);
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("length_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("size_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("type_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(name_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(142);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(Int32*), typeof(OpenTK.Graphics.ES20.ActiveAttribType*), typeof(IntPtr));
                        MarshalPtrToStringBuilder(name_sb_ptr, name);
                    } finally {
                        Marshal.FreeHGlobal(name_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return information about an active attribute variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="index"> 
        /// Specifies the index of the attribute variable to be queried.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.
        /// </param>
        /// <param name="size">[length: 1] 
        /// Returns the size of the attribute variable.
        /// </param>
        /// <param name="type">[length: 1] 
        /// Returns the data type of the attribute variable.
        /// </param>
        /// <param name="name">[length: bufSize] 
        /// Returns a null terminated string containing the name of the attribute variable.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out OpenTK.Graphics.ES20.All type, [OutAttribute] StringBuilder name)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.StoreByName("length_pinned");
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "size_pinned");
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.StoreByName("size_pinned");
                    Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.All& pinned", "type_pinned");
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.StoreByName("type_pinned");
                    IntPtr name_sb_ptr = IntPtr.Zero;
                    try
                    {
                        name_sb_ptr = Marshal.AllocHGlobal(name.Capacity + 1);
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("length_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("size_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("type_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(name_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(142);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(Int32*), typeof(OpenTK.Graphics.ES20.ActiveAttribType*), typeof(IntPtr));
                        MarshalPtrToStringBuilder(name_sb_ptr, name);
                    } finally {
                        Marshal.FreeHGlobal(name_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return information about an active attribute variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="index"> 
        /// Specifies the index of the attribute variable to be queried.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.
        /// </param>
        /// <param name="size">[length: 1] 
        /// Returns the size of the attribute variable.
        /// </param>
        /// <param name="type">[length: 1] 
        /// Returns the data type of the attribute variable.
        /// </param>
        /// <param name="name">[length: bufSize] 
        /// Returns a null terminated string containing the name of the attribute variable.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] OpenTK.Graphics.ES20.ActiveAttribType* type, [OutAttribute] StringBuilder name)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    IntPtr name_sb_ptr = IntPtr.Zero;
                    try
                    {
                        name_sb_ptr = Marshal.AllocHGlobal(name.Capacity + 1);
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Load(name_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(142);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(Int32*), typeof(OpenTK.Graphics.ES20.ActiveAttribType*), typeof(IntPtr));
                        MarshalPtrToStringBuilder(name_sb_ptr, name);
                    } finally {
                        Marshal.FreeHGlobal(name_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return information about an active attribute variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="index"> 
        /// Specifies the index of the attribute variable to be queried.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.
        /// </param>
        /// <param name="size">[length: 1] 
        /// Returns the size of the attribute variable.
        /// </param>
        /// <param name="type">[length: 1] 
        /// Returns the data type of the attribute variable.
        /// </param>
        /// <param name="name">[length: bufSize] 
        /// Returns a null terminated string containing the name of the attribute variable.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static unsafe void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] OpenTK.Graphics.ES20.All* type, [OutAttribute] StringBuilder name)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    IntPtr name_sb_ptr = IntPtr.Zero;
                    try
                    {
                        name_sb_ptr = Marshal.AllocHGlobal(name.Capacity + 1);
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Load(name_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(142);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(Int32*), typeof(OpenTK.Graphics.ES20.ActiveAttribType*), typeof(IntPtr));
                        MarshalPtrToStringBuilder(name_sb_ptr, name);
                    } finally {
                        Marshal.FreeHGlobal(name_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return information about an active uniform variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="index"> 
        /// Specifies the index of the uniform variable to be queried.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.
        /// </param>
        /// <param name="size">[length: 1] 
        /// Returns the size of the uniform variable.
        /// </param>
        /// <param name="type">[length: 1] 
        /// Returns the data type of the uniform variable.
        /// </param>
        /// <param name="name">[length: bufSize] 
        /// Returns a null terminated string containing the name of the uniform variable.
        /// </param>
        [CLSCompliant(false)]
        public static void GetActiveUniform(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out OpenTK.Graphics.ES20.ActiveUniformType type, [OutAttribute] StringBuilder name)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.StoreByName("length_pinned");
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "size_pinned");
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.StoreByName("size_pinned");
                    Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.ActiveUniformType& pinned", "type_pinned");
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.StoreByName("type_pinned");
                    IntPtr name_sb_ptr = IntPtr.Zero;
                    try
                    {
                        name_sb_ptr = Marshal.AllocHGlobal(name.Capacity + 1);
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("length_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("size_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("type_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(name_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(143);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(Int32*), typeof(OpenTK.Graphics.ES20.ActiveUniformType*), typeof(IntPtr));
                        MarshalPtrToStringBuilder(name_sb_ptr, name);
                    } finally {
                        Marshal.FreeHGlobal(name_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return information about an active uniform variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="index"> 
        /// Specifies the index of the uniform variable to be queried.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.
        /// </param>
        /// <param name="size">[length: 1] 
        /// Returns the size of the uniform variable.
        /// </param>
        /// <param name="type">[length: 1] 
        /// Returns the data type of the uniform variable.
        /// </param>
        /// <param name="name">[length: bufSize] 
        /// Returns a null terminated string containing the name of the uniform variable.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetActiveUniform(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out OpenTK.Graphics.ES20.All type, [OutAttribute] StringBuilder name)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.StoreByName("length_pinned");
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "size_pinned");
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.StoreByName("size_pinned");
                    Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.All& pinned", "type_pinned");
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.StoreByName("type_pinned");
                    IntPtr name_sb_ptr = IntPtr.Zero;
                    try
                    {
                        name_sb_ptr = Marshal.AllocHGlobal(name.Capacity + 1);
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("length_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("size_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("type_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(name_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(143);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(Int32*), typeof(OpenTK.Graphics.ES20.ActiveUniformType*), typeof(IntPtr));
                        MarshalPtrToStringBuilder(name_sb_ptr, name);
                    } finally {
                        Marshal.FreeHGlobal(name_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return information about an active uniform variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="index"> 
        /// Specifies the index of the uniform variable to be queried.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.
        /// </param>
        /// <param name="size">[length: 1] 
        /// Returns the size of the uniform variable.
        /// </param>
        /// <param name="type">[length: 1] 
        /// Returns the data type of the uniform variable.
        /// </param>
        /// <param name="name">[length: bufSize] 
        /// Returns a null terminated string containing the name of the uniform variable.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void GetActiveUniform(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] OpenTK.Graphics.ES20.ActiveUniformType* type, [OutAttribute] StringBuilder name)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    IntPtr name_sb_ptr = IntPtr.Zero;
                    try
                    {
                        name_sb_ptr = Marshal.AllocHGlobal(name.Capacity + 1);
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Load(name_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(143);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(Int32*), typeof(OpenTK.Graphics.ES20.ActiveUniformType*), typeof(IntPtr));
                        MarshalPtrToStringBuilder(name_sb_ptr, name);
                    } finally {
                        Marshal.FreeHGlobal(name_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return information about an active uniform variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="index"> 
        /// Specifies the index of the uniform variable to be queried.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.
        /// </param>
        /// <param name="size">[length: 1] 
        /// Returns the size of the uniform variable.
        /// </param>
        /// <param name="type">[length: 1] 
        /// Returns the data type of the uniform variable.
        /// </param>
        /// <param name="name">[length: bufSize] 
        /// Returns a null terminated string containing the name of the uniform variable.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static unsafe void GetActiveUniform(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] OpenTK.Graphics.ES20.All* type, [OutAttribute] StringBuilder name)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    IntPtr name_sb_ptr = IntPtr.Zero;
                    try
                    {
                        name_sb_ptr = Marshal.AllocHGlobal(name.Capacity + 1);
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Load(name_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(143);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(Int32*), typeof(OpenTK.Graphics.ES20.ActiveUniformType*), typeof(IntPtr));
                        MarshalPtrToStringBuilder(name_sb_ptr, name);
                    } finally {
                        Marshal.FreeHGlobal(name_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return information about an active uniform variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="index"> 
        /// Specifies the index of the uniform variable to be queried.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.
        /// </param>
        /// <param name="size">[length: 1] 
        /// Returns the size of the uniform variable.
        /// </param>
        /// <param name="type">[length: 1] 
        /// Returns the data type of the uniform variable.
        /// </param>
        /// <param name="name">[length: bufSize] 
        /// Returns a null terminated string containing the name of the uniform variable.
        /// </param>
        [CLSCompliant(false)]
        public static void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out OpenTK.Graphics.ES20.ActiveUniformType type, [OutAttribute] StringBuilder name)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.StoreByName("length_pinned");
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "size_pinned");
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.StoreByName("size_pinned");
                    Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.ActiveUniformType& pinned", "type_pinned");
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.StoreByName("type_pinned");
                    IntPtr name_sb_ptr = IntPtr.Zero;
                    try
                    {
                        name_sb_ptr = Marshal.AllocHGlobal(name.Capacity + 1);
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("length_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("size_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("type_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(name_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(143);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(Int32*), typeof(OpenTK.Graphics.ES20.ActiveUniformType*), typeof(IntPtr));
                        MarshalPtrToStringBuilder(name_sb_ptr, name);
                    } finally {
                        Marshal.FreeHGlobal(name_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return information about an active uniform variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="index"> 
        /// Specifies the index of the uniform variable to be queried.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.
        /// </param>
        /// <param name="size">[length: 1] 
        /// Returns the size of the uniform variable.
        /// </param>
        /// <param name="type">[length: 1] 
        /// Returns the data type of the uniform variable.
        /// </param>
        /// <param name="name">[length: bufSize] 
        /// Returns a null terminated string containing the name of the uniform variable.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out OpenTK.Graphics.ES20.All type, [OutAttribute] StringBuilder name)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.StoreByName("length_pinned");
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "size_pinned");
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.StoreByName("size_pinned");
                    Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.All& pinned", "type_pinned");
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.StoreByName("type_pinned");
                    IntPtr name_sb_ptr = IntPtr.Zero;
                    try
                    {
                        name_sb_ptr = Marshal.AllocHGlobal(name.Capacity + 1);
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("length_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("size_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("type_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(name_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(143);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(Int32*), typeof(OpenTK.Graphics.ES20.ActiveUniformType*), typeof(IntPtr));
                        MarshalPtrToStringBuilder(name_sb_ptr, name);
                    } finally {
                        Marshal.FreeHGlobal(name_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return information about an active uniform variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="index"> 
        /// Specifies the index of the uniform variable to be queried.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.
        /// </param>
        /// <param name="size">[length: 1] 
        /// Returns the size of the uniform variable.
        /// </param>
        /// <param name="type">[length: 1] 
        /// Returns the data type of the uniform variable.
        /// </param>
        /// <param name="name">[length: bufSize] 
        /// Returns a null terminated string containing the name of the uniform variable.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] OpenTK.Graphics.ES20.ActiveUniformType* type, [OutAttribute] StringBuilder name)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    IntPtr name_sb_ptr = IntPtr.Zero;
                    try
                    {
                        name_sb_ptr = Marshal.AllocHGlobal(name.Capacity + 1);
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Load(name_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(143);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(Int32*), typeof(OpenTK.Graphics.ES20.ActiveUniformType*), typeof(IntPtr));
                        MarshalPtrToStringBuilder(name_sb_ptr, name);
                    } finally {
                        Marshal.FreeHGlobal(name_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return information about an active uniform variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="index"> 
        /// Specifies the index of the uniform variable to be queried.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.
        /// </param>
        /// <param name="size">[length: 1] 
        /// Returns the size of the uniform variable.
        /// </param>
        /// <param name="type">[length: 1] 
        /// Returns the data type of the uniform variable.
        /// </param>
        /// <param name="name">[length: bufSize] 
        /// Returns a null terminated string containing the name of the uniform variable.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static unsafe void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] OpenTK.Graphics.ES20.All* type, [OutAttribute] StringBuilder name)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    IntPtr name_sb_ptr = IntPtr.Zero;
                    try
                    {
                        name_sb_ptr = Marshal.AllocHGlobal(name.Capacity + 1);
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Load(name_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(143);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(Int32*), typeof(OpenTK.Graphics.ES20.ActiveUniformType*), typeof(IntPtr));
                        MarshalPtrToStringBuilder(name_sb_ptr, name);
                    } finally {
                        Marshal.FreeHGlobal(name_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the handles of the shader objects attached to a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="maxCount"> 
        /// Specifies the size of the array for storing the returned object names.
        /// </param>
        /// <param name="count">[length: 1] 
        /// Returns the number of names actually returned in shaders.
        /// </param>
        /// <param name="shaders">[length: maxCount] 
        /// Specifies an array that is used to return the names of attached shader objects.
        /// </param>
        [CLSCompliant(false)]
        public static void GetAttachedShaders(Int32 program, Int32 maxCount, [OutAttribute] out Int32 count, [OutAttribute] Int32[] shaders)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "count_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("count_pinned");
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "shaders_pinned");
                    if(shaders != null && shaders.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("shaders_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("shaders_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("count_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.LoadByName("shaders_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(144);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the handles of the shader objects attached to a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="maxCount"> 
        /// Specifies the size of the array for storing the returned object names.
        /// </param>
        /// <param name="count">[length: 1] 
        /// Returns the number of names actually returned in shaders.
        /// </param>
        /// <param name="shaders">[length: maxCount] 
        /// Specifies an array that is used to return the names of attached shader objects.
        /// </param>
        [CLSCompliant(false)]
        public static void GetAttachedShaders(Int32 program, Int32 maxCount, [OutAttribute] out Int32 count, [OutAttribute] out Int32 shaders)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "count_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("count_pinned");
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "shaders_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.StoreByName("shaders_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("count_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.LoadByName("shaders_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(144);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the handles of the shader objects attached to a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="maxCount"> 
        /// Specifies the size of the array for storing the returned object names.
        /// </param>
        /// <param name="count">[length: 1] 
        /// Returns the number of names actually returned in shaders.
        /// </param>
        /// <param name="shaders">[length: maxCount] 
        /// Specifies an array that is used to return the names of attached shader objects.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void GetAttachedShaders(Int32 program, Int32 maxCount, [OutAttribute] Int32* count, [OutAttribute] Int32* shaders)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(144);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the handles of the shader objects attached to a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="maxCount"> 
        /// Specifies the size of the array for storing the returned object names.
        /// </param>
        /// <param name="count">[length: 1] 
        /// Returns the number of names actually returned in shaders.
        /// </param>
        /// <param name="shaders">[length: maxCount] 
        /// Specifies an array that is used to return the names of attached shader objects.
        /// </param>
        [CLSCompliant(false)]
        public static void GetAttachedShaders(UInt32 program, Int32 maxCount, [OutAttribute] out Int32 count, [OutAttribute] UInt32[] shaders)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "count_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("count_pinned");
                    Silk.Cil.DeclareLocal("System.UInt32& pinned", "shaders_pinned");
                    if(shaders != null && shaders.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.UInt32");
                        Silk.Cil.StoreByName("shaders_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("shaders_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("count_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.LoadByName("shaders_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(144);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the handles of the shader objects attached to a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="maxCount"> 
        /// Specifies the size of the array for storing the returned object names.
        /// </param>
        /// <param name="count">[length: 1] 
        /// Returns the number of names actually returned in shaders.
        /// </param>
        /// <param name="shaders">[length: maxCount] 
        /// Specifies an array that is used to return the names of attached shader objects.
        /// </param>
        [CLSCompliant(false)]
        public static void GetAttachedShaders(UInt32 program, Int32 maxCount, [OutAttribute] out Int32 count, [OutAttribute] out UInt32 shaders)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "count_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("count_pinned");
                    Silk.Cil.DeclareLocal("System.UInt32& pinned", "shaders_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.StoreByName("shaders_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("count_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.LoadByName("shaders_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(144);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the handles of the shader objects attached to a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="maxCount"> 
        /// Specifies the size of the array for storing the returned object names.
        /// </param>
        /// <param name="count">[length: 1] 
        /// Returns the number of names actually returned in shaders.
        /// </param>
        /// <param name="shaders">[length: maxCount] 
        /// Specifies an array that is used to return the names of attached shader objects.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void GetAttachedShaders(UInt32 program, Int32 maxCount, [OutAttribute] Int32* count, [OutAttribute] UInt32* shaders)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(144);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the location of an attribute variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="name"> 
        /// Points to a null terminated string containing the name of the attribute variable whose location is to be queried.
        /// </param>
        [CLSCompliant(false)]
        public static Int32 GetAttribLocation(Int32 program, String name)
        {
            unsafe
            {
                Int32 __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    IntPtr name_string_ptr = MarshalStringToPtr(name);
                    try {
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(name_string_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(145);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(Int32), typeof(UInt32), typeof(IntPtr));
                        Silk.Cil.Store(out __return_result);
                    } finally {
                        FreeStringPtr(name_string_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the location of an attribute variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="name"> 
        /// Points to a null terminated string containing the name of the attribute variable whose location is to be queried.
        /// </param>
        [CLSCompliant(false)]
        public static Int32 GetAttribLocation(UInt32 program, String name)
        {
            unsafe
            {
                Int32 __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    IntPtr name_string_ptr = MarshalStringToPtr(name);
                    try {
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(name_string_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(145);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(Int32), typeof(UInt32), typeof(IntPtr));
                        Silk.Cil.Store(out __return_result);
                    } finally {
                        FreeStringPtr(name_string_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="pname"></param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static bool GetBoolean(OpenTK.Graphics.ES20.All pname)
        {
            unsafe
            {
                bool __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    bool __result = default(bool);
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadAddress(__result);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(146);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.GetPName), typeof(bool*));
                    Silk.Cil.Load(__result);
                    Silk.Cil.Store(out __return_result);
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="pname"></param>
        [CLSCompliant(false)]
        public static bool GetBoolean(OpenTK.Graphics.ES20.GetPName pname)
        {
            unsafe
            {
                bool __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    bool __result = default(bool);
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadAddress(__result);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(146);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.GetPName), typeof(bool*));
                    Silk.Cil.Load(__result);
                    Silk.Cil.Store(out __return_result);
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: pname]</param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetBoolean(OpenTK.Graphics.ES20.All pname, [OutAttribute] bool[] data)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Boolean& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Boolean");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(146);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.GetPName), typeof(bool*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: pname]</param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetBoolean(OpenTK.Graphics.ES20.All pname, [OutAttribute] out bool data)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Boolean& pinned", "data_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("data_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(146);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.GetPName), typeof(bool*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: pname]</param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static unsafe void GetBoolean(OpenTK.Graphics.ES20.All pname, [OutAttribute] bool* data)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(146);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.GetPName), typeof(bool*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: pname]</param>
        [CLSCompliant(false)]
        public static void GetBoolean(OpenTK.Graphics.ES20.GetPName pname, [OutAttribute] bool[] data)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Boolean& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Boolean");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(146);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.GetPName), typeof(bool*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: pname]</param>
        [CLSCompliant(false)]
        public static void GetBoolean(OpenTK.Graphics.ES20.GetPName pname, [OutAttribute] out bool data)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Boolean& pinned", "data_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("data_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(146);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.GetPName), typeof(bool*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: pname]</param>
        [CLSCompliant(false)]
        public static unsafe void GetBoolean(OpenTK.Graphics.ES20.GetPName pname, [OutAttribute] bool* data)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(146);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.GetPName), typeof(bool*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferSize or BufferUsage.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetBufferParameter(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(147);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(OpenTK.Graphics.ES20.BufferParameterName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferSize or BufferUsage.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetBufferParameter(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("params_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(147);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(OpenTK.Graphics.ES20.BufferParameterName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferSize or BufferUsage.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static unsafe void GetBufferParameter(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All pname, [OutAttribute] Int32* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(147);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(OpenTK.Graphics.ES20.BufferParameterName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferSize or BufferUsage.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested parameter.
        /// </param>
        [CLSCompliant(false)]
        public static void GetBufferParameter(OpenTK.Graphics.ES20.BufferTarget target, OpenTK.Graphics.ES20.BufferParameterName pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(147);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(OpenTK.Graphics.ES20.BufferParameterName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferSize or BufferUsage.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested parameter.
        /// </param>
        [CLSCompliant(false)]
        public static void GetBufferParameter(OpenTK.Graphics.ES20.BufferTarget target, OpenTK.Graphics.ES20.BufferParameterName pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("params_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(147);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(OpenTK.Graphics.ES20.BufferParameterName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferSize or BufferUsage.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested parameter.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void GetBufferParameter(OpenTK.Graphics.ES20.BufferTarget target, OpenTK.Graphics.ES20.BufferParameterName pname, [OutAttribute] Int32* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(147);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(OpenTK.Graphics.ES20.BufferParameterName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count"> 
        /// The number of debug messages to retrieve from the log.
        /// </param>
        /// <param name="bufSize"> 
        /// The size of the buffer whose address is given by messageLog.
        /// </param>
        /// <param name="sources">[length: count] 
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </param>
        /// <param name="types">[length: count] 
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </param>
        /// <param name="ids">[length: count] 
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </param>
        /// <param name="severities">[length: count] 
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </param>
        /// <param name="lengths">[length: count] 
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </param>
        /// <param name="messageLog">[length: bufSize] 
        /// The address of an array of characters that will receive the messages.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static Int32 GetDebugMessageLog(Int32 count, Int32 bufSize, [OutAttribute] OpenTK.Graphics.ES20.All[] sources, [OutAttribute] OpenTK.Graphics.ES20.All[] types, [OutAttribute] Int32[] ids, [OutAttribute] OpenTK.Graphics.ES20.All[] severities, [OutAttribute] Int32[] lengths, [OutAttribute] StringBuilder messageLog)
        {
            unsafe
            {
                Int32 __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.All& pinned", "sources_pinned");
                    if(sources != null && sources.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("OpenTK.Graphics.ES20.All");
                        Silk.Cil.StoreByName("sources_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("sources_pinned");
                    }
                    Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.All& pinned", "types_pinned");
                    if(types != null && types.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("OpenTK.Graphics.ES20.All");
                        Silk.Cil.StoreByName("types_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("types_pinned");
                    }
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "ids_pinned");
                    if(ids != null && ids.Length != 0)
                    {
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("ids_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("ids_pinned");
                    }
                    Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.All& pinned", "severities_pinned");
                    if(severities != null && severities.Length != 0)
                    {
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("OpenTK.Graphics.ES20.All");
                        Silk.Cil.StoreByName("severities_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("severities_pinned");
                    }
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "lengths_pinned");
                    if(lengths != null && lengths.Length != 0)
                    {
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("lengths_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("lengths_pinned");
                    }
                    IntPtr messageLog_sb_ptr = IntPtr.Zero;
                    try
                    {
                        messageLog_sb_ptr = Marshal.AllocHGlobal(messageLog.Capacity + 1);
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("sources_pinned");
                        Silk.Cil.LoadByName("types_pinned");
                        Silk.Cil.LoadByName("ids_pinned");
                        Silk.Cil.LoadByName("severities_pinned");
                        Silk.Cil.LoadByName("lengths_pinned");
                        Silk.Cil.Load(messageLog_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(149);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(Int32), typeof(UInt32), typeof(Int32), typeof(OpenTK.Graphics.ES20.DebugSourceExternal*), typeof(OpenTK.Graphics.ES20.DebugType*), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.DebugSeverity*), typeof(Int32*), typeof(IntPtr));
                        Silk.Cil.Store(out __return_result);
                        MarshalPtrToStringBuilder(messageLog_sb_ptr, messageLog);
                    } finally {
                        Marshal.FreeHGlobal(messageLog_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count"> 
        /// The number of debug messages to retrieve from the log.
        /// </param>
        /// <param name="bufSize"> 
        /// The size of the buffer whose address is given by messageLog.
        /// </param>
        /// <param name="sources">[length: count] 
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </param>
        /// <param name="types">[length: count] 
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </param>
        /// <param name="ids">[length: count] 
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </param>
        /// <param name="severities">[length: count] 
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </param>
        /// <param name="lengths">[length: count] 
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </param>
        /// <param name="messageLog">[length: bufSize] 
        /// The address of an array of characters that will receive the messages.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static Int32 GetDebugMessageLog(Int32 count, Int32 bufSize, [OutAttribute] out OpenTK.Graphics.ES20.All sources, [OutAttribute] out OpenTK.Graphics.ES20.All types, [OutAttribute] out Int32 ids, [OutAttribute] out OpenTK.Graphics.ES20.All severities, [OutAttribute] out Int32 lengths, [OutAttribute] StringBuilder messageLog)
        {
            unsafe
            {
                Int32 __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.All& pinned", "sources_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("sources_pinned");
                    Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.All& pinned", "types_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.StoreByName("types_pinned");
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "ids_pinned");
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.StoreByName("ids_pinned");
                    Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.All& pinned", "severities_pinned");
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.StoreByName("severities_pinned");
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "lengths_pinned");
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.StoreByName("lengths_pinned");
                    IntPtr messageLog_sb_ptr = IntPtr.Zero;
                    try
                    {
                        messageLog_sb_ptr = Marshal.AllocHGlobal(messageLog.Capacity + 1);
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("sources_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("types_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("ids_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("severities_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("lengths_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(messageLog_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(149);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(Int32), typeof(UInt32), typeof(Int32), typeof(OpenTK.Graphics.ES20.DebugSourceExternal*), typeof(OpenTK.Graphics.ES20.DebugType*), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.DebugSeverity*), typeof(Int32*), typeof(IntPtr));
                        Silk.Cil.Store(out __return_result);
                        MarshalPtrToStringBuilder(messageLog_sb_ptr, messageLog);
                    } finally {
                        Marshal.FreeHGlobal(messageLog_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count"> 
        /// The number of debug messages to retrieve from the log.
        /// </param>
        /// <param name="bufSize"> 
        /// The size of the buffer whose address is given by messageLog.
        /// </param>
        /// <param name="sources">[length: count] 
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </param>
        /// <param name="types">[length: count] 
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </param>
        /// <param name="ids">[length: count] 
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </param>
        /// <param name="severities">[length: count] 
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </param>
        /// <param name="lengths">[length: count] 
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </param>
        /// <param name="messageLog">[length: bufSize] 
        /// The address of an array of characters that will receive the messages.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static unsafe Int32 GetDebugMessageLog(Int32 count, Int32 bufSize, [OutAttribute] OpenTK.Graphics.ES20.All* sources, [OutAttribute] OpenTK.Graphics.ES20.All* types, [OutAttribute] Int32* ids, [OutAttribute] OpenTK.Graphics.ES20.All* severities, [OutAttribute] Int32* lengths, [OutAttribute] StringBuilder messageLog)
        {
            unsafe
            {
                Int32 __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    IntPtr messageLog_sb_ptr = IntPtr.Zero;
                    try
                    {
                        messageLog_sb_ptr = Marshal.AllocHGlobal(messageLog.Capacity + 1);
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Load(messageLog_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(149);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(Int32), typeof(UInt32), typeof(Int32), typeof(OpenTK.Graphics.ES20.DebugSourceExternal*), typeof(OpenTK.Graphics.ES20.DebugType*), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.DebugSeverity*), typeof(Int32*), typeof(IntPtr));
                        Silk.Cil.Store(out __return_result);
                        MarshalPtrToStringBuilder(messageLog_sb_ptr, messageLog);
                    } finally {
                        Marshal.FreeHGlobal(messageLog_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count"> 
        /// The number of debug messages to retrieve from the log.
        /// </param>
        /// <param name="bufSize"> 
        /// The size of the buffer whose address is given by messageLog.
        /// </param>
        /// <param name="sources">[length: count] 
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </param>
        /// <param name="types">[length: count] 
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </param>
        /// <param name="ids">[length: count] 
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </param>
        /// <param name="severities">[length: count] 
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </param>
        /// <param name="lengths">[length: count] 
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </param>
        /// <param name="messageLog">[length: bufSize] 
        /// The address of an array of characters that will receive the messages.
        /// </param>
        [CLSCompliant(false)]
        public static Int32 GetDebugMessageLog(Int32 count, Int32 bufSize, [OutAttribute] OpenTK.Graphics.ES20.DebugSourceExternal[] sources, [OutAttribute] OpenTK.Graphics.ES20.DebugType[] types, [OutAttribute] Int32[] ids, [OutAttribute] OpenTK.Graphics.ES20.DebugSeverity[] severities, [OutAttribute] Int32[] lengths, [OutAttribute] StringBuilder messageLog)
        {
            unsafe
            {
                Int32 __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.DebugSourceExternal& pinned", "sources_pinned");
                    if(sources != null && sources.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("OpenTK.Graphics.ES20.DebugSourceExternal");
                        Silk.Cil.StoreByName("sources_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("sources_pinned");
                    }
                    Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.DebugType& pinned", "types_pinned");
                    if(types != null && types.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("OpenTK.Graphics.ES20.DebugType");
                        Silk.Cil.StoreByName("types_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("types_pinned");
                    }
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "ids_pinned");
                    if(ids != null && ids.Length != 0)
                    {
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("ids_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("ids_pinned");
                    }
                    Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.DebugSeverity& pinned", "severities_pinned");
                    if(severities != null && severities.Length != 0)
                    {
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("OpenTK.Graphics.ES20.DebugSeverity");
                        Silk.Cil.StoreByName("severities_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("severities_pinned");
                    }
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "lengths_pinned");
                    if(lengths != null && lengths.Length != 0)
                    {
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("lengths_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("lengths_pinned");
                    }
                    IntPtr messageLog_sb_ptr = IntPtr.Zero;
                    try
                    {
                        messageLog_sb_ptr = Marshal.AllocHGlobal(messageLog.Capacity + 1);
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("sources_pinned");
                        Silk.Cil.LoadByName("types_pinned");
                        Silk.Cil.LoadByName("ids_pinned");
                        Silk.Cil.LoadByName("severities_pinned");
                        Silk.Cil.LoadByName("lengths_pinned");
                        Silk.Cil.Load(messageLog_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(149);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(Int32), typeof(UInt32), typeof(Int32), typeof(OpenTK.Graphics.ES20.DebugSourceExternal*), typeof(OpenTK.Graphics.ES20.DebugType*), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.DebugSeverity*), typeof(Int32*), typeof(IntPtr));
                        Silk.Cil.Store(out __return_result);
                        MarshalPtrToStringBuilder(messageLog_sb_ptr, messageLog);
                    } finally {
                        Marshal.FreeHGlobal(messageLog_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count"> 
        /// The number of debug messages to retrieve from the log.
        /// </param>
        /// <param name="bufSize"> 
        /// The size of the buffer whose address is given by messageLog.
        /// </param>
        /// <param name="sources">[length: count] 
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </param>
        /// <param name="types">[length: count] 
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </param>
        /// <param name="ids">[length: count] 
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </param>
        /// <param name="severities">[length: count] 
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </param>
        /// <param name="lengths">[length: count] 
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </param>
        /// <param name="messageLog">[length: bufSize] 
        /// The address of an array of characters that will receive the messages.
        /// </param>
        [CLSCompliant(false)]
        public static Int32 GetDebugMessageLog(Int32 count, Int32 bufSize, [OutAttribute] out OpenTK.Graphics.ES20.DebugSourceExternal sources, [OutAttribute] out OpenTK.Graphics.ES20.DebugType types, [OutAttribute] out Int32 ids, [OutAttribute] out OpenTK.Graphics.ES20.DebugSeverity severities, [OutAttribute] out Int32 lengths, [OutAttribute] StringBuilder messageLog)
        {
            unsafe
            {
                Int32 __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.DebugSourceExternal& pinned", "sources_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("sources_pinned");
                    Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.DebugType& pinned", "types_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.StoreByName("types_pinned");
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "ids_pinned");
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.StoreByName("ids_pinned");
                    Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.DebugSeverity& pinned", "severities_pinned");
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.StoreByName("severities_pinned");
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "lengths_pinned");
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.StoreByName("lengths_pinned");
                    IntPtr messageLog_sb_ptr = IntPtr.Zero;
                    try
                    {
                        messageLog_sb_ptr = Marshal.AllocHGlobal(messageLog.Capacity + 1);
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("sources_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("types_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("ids_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("severities_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("lengths_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(messageLog_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(149);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(Int32), typeof(UInt32), typeof(Int32), typeof(OpenTK.Graphics.ES20.DebugSourceExternal*), typeof(OpenTK.Graphics.ES20.DebugType*), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.DebugSeverity*), typeof(Int32*), typeof(IntPtr));
                        Silk.Cil.Store(out __return_result);
                        MarshalPtrToStringBuilder(messageLog_sb_ptr, messageLog);
                    } finally {
                        Marshal.FreeHGlobal(messageLog_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count"> 
        /// The number of debug messages to retrieve from the log.
        /// </param>
        /// <param name="bufSize"> 
        /// The size of the buffer whose address is given by messageLog.
        /// </param>
        /// <param name="sources">[length: count] 
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </param>
        /// <param name="types">[length: count] 
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </param>
        /// <param name="ids">[length: count] 
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </param>
        /// <param name="severities">[length: count] 
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </param>
        /// <param name="lengths">[length: count] 
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </param>
        /// <param name="messageLog">[length: bufSize] 
        /// The address of an array of characters that will receive the messages.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe Int32 GetDebugMessageLog(Int32 count, Int32 bufSize, [OutAttribute] OpenTK.Graphics.ES20.DebugSourceExternal* sources, [OutAttribute] OpenTK.Graphics.ES20.DebugType* types, [OutAttribute] Int32* ids, [OutAttribute] OpenTK.Graphics.ES20.DebugSeverity* severities, [OutAttribute] Int32* lengths, [OutAttribute] StringBuilder messageLog)
        {
            unsafe
            {
                Int32 __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    IntPtr messageLog_sb_ptr = IntPtr.Zero;
                    try
                    {
                        messageLog_sb_ptr = Marshal.AllocHGlobal(messageLog.Capacity + 1);
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Load(messageLog_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(149);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(Int32), typeof(UInt32), typeof(Int32), typeof(OpenTK.Graphics.ES20.DebugSourceExternal*), typeof(OpenTK.Graphics.ES20.DebugType*), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.DebugSeverity*), typeof(Int32*), typeof(IntPtr));
                        Silk.Cil.Store(out __return_result);
                        MarshalPtrToStringBuilder(messageLog_sb_ptr, messageLog);
                    } finally {
                        Marshal.FreeHGlobal(messageLog_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count"> 
        /// The number of debug messages to retrieve from the log.
        /// </param>
        /// <param name="bufSize"> 
        /// The size of the buffer whose address is given by messageLog.
        /// </param>
        /// <param name="sources">[length: count] 
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </param>
        /// <param name="types">[length: count] 
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </param>
        /// <param name="ids">[length: count] 
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </param>
        /// <param name="severities">[length: count] 
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </param>
        /// <param name="lengths">[length: count] 
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </param>
        /// <param name="messageLog">[length: bufSize] 
        /// The address of an array of characters that will receive the messages.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static Int32 GetDebugMessageLog(UInt32 count, Int32 bufSize, [OutAttribute] OpenTK.Graphics.ES20.All[] sources, [OutAttribute] OpenTK.Graphics.ES20.All[] types, [OutAttribute] UInt32[] ids, [OutAttribute] OpenTK.Graphics.ES20.All[] severities, [OutAttribute] Int32[] lengths, [OutAttribute] StringBuilder messageLog)
        {
            unsafe
            {
                Int32 __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.All& pinned", "sources_pinned");
                    if(sources != null && sources.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("OpenTK.Graphics.ES20.All");
                        Silk.Cil.StoreByName("sources_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("sources_pinned");
                    }
                    Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.All& pinned", "types_pinned");
                    if(types != null && types.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("OpenTK.Graphics.ES20.All");
                        Silk.Cil.StoreByName("types_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("types_pinned");
                    }
                    Silk.Cil.DeclareLocal("System.UInt32& pinned", "ids_pinned");
                    if(ids != null && ids.Length != 0)
                    {
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.UInt32");
                        Silk.Cil.StoreByName("ids_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("ids_pinned");
                    }
                    Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.All& pinned", "severities_pinned");
                    if(severities != null && severities.Length != 0)
                    {
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("OpenTK.Graphics.ES20.All");
                        Silk.Cil.StoreByName("severities_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("severities_pinned");
                    }
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "lengths_pinned");
                    if(lengths != null && lengths.Length != 0)
                    {
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("lengths_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("lengths_pinned");
                    }
                    IntPtr messageLog_sb_ptr = IntPtr.Zero;
                    try
                    {
                        messageLog_sb_ptr = Marshal.AllocHGlobal(messageLog.Capacity + 1);
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("sources_pinned");
                        Silk.Cil.LoadByName("types_pinned");
                        Silk.Cil.LoadByName("ids_pinned");
                        Silk.Cil.LoadByName("severities_pinned");
                        Silk.Cil.LoadByName("lengths_pinned");
                        Silk.Cil.Load(messageLog_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(149);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(Int32), typeof(UInt32), typeof(Int32), typeof(OpenTK.Graphics.ES20.DebugSourceExternal*), typeof(OpenTK.Graphics.ES20.DebugType*), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.DebugSeverity*), typeof(Int32*), typeof(IntPtr));
                        Silk.Cil.Store(out __return_result);
                        MarshalPtrToStringBuilder(messageLog_sb_ptr, messageLog);
                    } finally {
                        Marshal.FreeHGlobal(messageLog_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count"> 
        /// The number of debug messages to retrieve from the log.
        /// </param>
        /// <param name="bufSize"> 
        /// The size of the buffer whose address is given by messageLog.
        /// </param>
        /// <param name="sources">[length: count] 
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </param>
        /// <param name="types">[length: count] 
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </param>
        /// <param name="ids">[length: count] 
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </param>
        /// <param name="severities">[length: count] 
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </param>
        /// <param name="lengths">[length: count] 
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </param>
        /// <param name="messageLog">[length: bufSize] 
        /// The address of an array of characters that will receive the messages.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static Int32 GetDebugMessageLog(UInt32 count, Int32 bufSize, [OutAttribute] out OpenTK.Graphics.ES20.All sources, [OutAttribute] out OpenTK.Graphics.ES20.All types, [OutAttribute] out UInt32 ids, [OutAttribute] out OpenTK.Graphics.ES20.All severities, [OutAttribute] out Int32 lengths, [OutAttribute] StringBuilder messageLog)
        {
            unsafe
            {
                Int32 __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.All& pinned", "sources_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("sources_pinned");
                    Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.All& pinned", "types_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.StoreByName("types_pinned");
                    Silk.Cil.DeclareLocal("System.UInt32& pinned", "ids_pinned");
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.StoreByName("ids_pinned");
                    Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.All& pinned", "severities_pinned");
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.StoreByName("severities_pinned");
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "lengths_pinned");
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.StoreByName("lengths_pinned");
                    IntPtr messageLog_sb_ptr = IntPtr.Zero;
                    try
                    {
                        messageLog_sb_ptr = Marshal.AllocHGlobal(messageLog.Capacity + 1);
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("sources_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("types_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("ids_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("severities_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("lengths_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(messageLog_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(149);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(Int32), typeof(UInt32), typeof(Int32), typeof(OpenTK.Graphics.ES20.DebugSourceExternal*), typeof(OpenTK.Graphics.ES20.DebugType*), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.DebugSeverity*), typeof(Int32*), typeof(IntPtr));
                        Silk.Cil.Store(out __return_result);
                        MarshalPtrToStringBuilder(messageLog_sb_ptr, messageLog);
                    } finally {
                        Marshal.FreeHGlobal(messageLog_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count"> 
        /// The number of debug messages to retrieve from the log.
        /// </param>
        /// <param name="bufSize"> 
        /// The size of the buffer whose address is given by messageLog.
        /// </param>
        /// <param name="sources">[length: count] 
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </param>
        /// <param name="types">[length: count] 
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </param>
        /// <param name="ids">[length: count] 
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </param>
        /// <param name="severities">[length: count] 
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </param>
        /// <param name="lengths">[length: count] 
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </param>
        /// <param name="messageLog">[length: bufSize] 
        /// The address of an array of characters that will receive the messages.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static unsafe Int32 GetDebugMessageLog(UInt32 count, Int32 bufSize, [OutAttribute] OpenTK.Graphics.ES20.All* sources, [OutAttribute] OpenTK.Graphics.ES20.All* types, [OutAttribute] UInt32* ids, [OutAttribute] OpenTK.Graphics.ES20.All* severities, [OutAttribute] Int32* lengths, [OutAttribute] StringBuilder messageLog)
        {
            unsafe
            {
                Int32 __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    IntPtr messageLog_sb_ptr = IntPtr.Zero;
                    try
                    {
                        messageLog_sb_ptr = Marshal.AllocHGlobal(messageLog.Capacity + 1);
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Load(messageLog_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(149);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(Int32), typeof(UInt32), typeof(Int32), typeof(OpenTK.Graphics.ES20.DebugSourceExternal*), typeof(OpenTK.Graphics.ES20.DebugType*), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.DebugSeverity*), typeof(Int32*), typeof(IntPtr));
                        Silk.Cil.Store(out __return_result);
                        MarshalPtrToStringBuilder(messageLog_sb_ptr, messageLog);
                    } finally {
                        Marshal.FreeHGlobal(messageLog_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count"> 
        /// The number of debug messages to retrieve from the log.
        /// </param>
        /// <param name="bufSize"> 
        /// The size of the buffer whose address is given by messageLog.
        /// </param>
        /// <param name="sources">[length: count] 
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </param>
        /// <param name="types">[length: count] 
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </param>
        /// <param name="ids">[length: count] 
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </param>
        /// <param name="severities">[length: count] 
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </param>
        /// <param name="lengths">[length: count] 
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </param>
        /// <param name="messageLog">[length: bufSize] 
        /// The address of an array of characters that will receive the messages.
        /// </param>
        [CLSCompliant(false)]
        public static Int32 GetDebugMessageLog(UInt32 count, Int32 bufSize, [OutAttribute] OpenTK.Graphics.ES20.DebugSourceExternal[] sources, [OutAttribute] OpenTK.Graphics.ES20.DebugType[] types, [OutAttribute] UInt32[] ids, [OutAttribute] OpenTK.Graphics.ES20.DebugSeverity[] severities, [OutAttribute] Int32[] lengths, [OutAttribute] StringBuilder messageLog)
        {
            unsafe
            {
                Int32 __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.DebugSourceExternal& pinned", "sources_pinned");
                    if(sources != null && sources.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("OpenTK.Graphics.ES20.DebugSourceExternal");
                        Silk.Cil.StoreByName("sources_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("sources_pinned");
                    }
                    Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.DebugType& pinned", "types_pinned");
                    if(types != null && types.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("OpenTK.Graphics.ES20.DebugType");
                        Silk.Cil.StoreByName("types_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("types_pinned");
                    }
                    Silk.Cil.DeclareLocal("System.UInt32& pinned", "ids_pinned");
                    if(ids != null && ids.Length != 0)
                    {
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.UInt32");
                        Silk.Cil.StoreByName("ids_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("ids_pinned");
                    }
                    Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.DebugSeverity& pinned", "severities_pinned");
                    if(severities != null && severities.Length != 0)
                    {
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("OpenTK.Graphics.ES20.DebugSeverity");
                        Silk.Cil.StoreByName("severities_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("severities_pinned");
                    }
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "lengths_pinned");
                    if(lengths != null && lengths.Length != 0)
                    {
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("lengths_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("lengths_pinned");
                    }
                    IntPtr messageLog_sb_ptr = IntPtr.Zero;
                    try
                    {
                        messageLog_sb_ptr = Marshal.AllocHGlobal(messageLog.Capacity + 1);
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("sources_pinned");
                        Silk.Cil.LoadByName("types_pinned");
                        Silk.Cil.LoadByName("ids_pinned");
                        Silk.Cil.LoadByName("severities_pinned");
                        Silk.Cil.LoadByName("lengths_pinned");
                        Silk.Cil.Load(messageLog_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(149);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(Int32), typeof(UInt32), typeof(Int32), typeof(OpenTK.Graphics.ES20.DebugSourceExternal*), typeof(OpenTK.Graphics.ES20.DebugType*), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.DebugSeverity*), typeof(Int32*), typeof(IntPtr));
                        Silk.Cil.Store(out __return_result);
                        MarshalPtrToStringBuilder(messageLog_sb_ptr, messageLog);
                    } finally {
                        Marshal.FreeHGlobal(messageLog_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count"> 
        /// The number of debug messages to retrieve from the log.
        /// </param>
        /// <param name="bufSize"> 
        /// The size of the buffer whose address is given by messageLog.
        /// </param>
        /// <param name="sources">[length: count] 
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </param>
        /// <param name="types">[length: count] 
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </param>
        /// <param name="ids">[length: count] 
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </param>
        /// <param name="severities">[length: count] 
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </param>
        /// <param name="lengths">[length: count] 
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </param>
        /// <param name="messageLog">[length: bufSize] 
        /// The address of an array of characters that will receive the messages.
        /// </param>
        [CLSCompliant(false)]
        public static Int32 GetDebugMessageLog(UInt32 count, Int32 bufSize, [OutAttribute] out OpenTK.Graphics.ES20.DebugSourceExternal sources, [OutAttribute] out OpenTK.Graphics.ES20.DebugType types, [OutAttribute] out UInt32 ids, [OutAttribute] out OpenTK.Graphics.ES20.DebugSeverity severities, [OutAttribute] out Int32 lengths, [OutAttribute] StringBuilder messageLog)
        {
            unsafe
            {
                Int32 __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.DebugSourceExternal& pinned", "sources_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("sources_pinned");
                    Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.DebugType& pinned", "types_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.StoreByName("types_pinned");
                    Silk.Cil.DeclareLocal("System.UInt32& pinned", "ids_pinned");
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.StoreByName("ids_pinned");
                    Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.DebugSeverity& pinned", "severities_pinned");
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.StoreByName("severities_pinned");
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "lengths_pinned");
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.StoreByName("lengths_pinned");
                    IntPtr messageLog_sb_ptr = IntPtr.Zero;
                    try
                    {
                        messageLog_sb_ptr = Marshal.AllocHGlobal(messageLog.Capacity + 1);
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("sources_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("types_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("ids_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("severities_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("lengths_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(messageLog_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(149);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(Int32), typeof(UInt32), typeof(Int32), typeof(OpenTK.Graphics.ES20.DebugSourceExternal*), typeof(OpenTK.Graphics.ES20.DebugType*), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.DebugSeverity*), typeof(Int32*), typeof(IntPtr));
                        Silk.Cil.Store(out __return_result);
                        MarshalPtrToStringBuilder(messageLog_sb_ptr, messageLog);
                    } finally {
                        Marshal.FreeHGlobal(messageLog_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count"> 
        /// The number of debug messages to retrieve from the log.
        /// </param>
        /// <param name="bufSize"> 
        /// The size of the buffer whose address is given by messageLog.
        /// </param>
        /// <param name="sources">[length: count] 
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </param>
        /// <param name="types">[length: count] 
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </param>
        /// <param name="ids">[length: count] 
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </param>
        /// <param name="severities">[length: count] 
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </param>
        /// <param name="lengths">[length: count] 
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </param>
        /// <param name="messageLog">[length: bufSize] 
        /// The address of an array of characters that will receive the messages.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe Int32 GetDebugMessageLog(UInt32 count, Int32 bufSize, [OutAttribute] OpenTK.Graphics.ES20.DebugSourceExternal* sources, [OutAttribute] OpenTK.Graphics.ES20.DebugType* types, [OutAttribute] UInt32* ids, [OutAttribute] OpenTK.Graphics.ES20.DebugSeverity* severities, [OutAttribute] Int32* lengths, [OutAttribute] StringBuilder messageLog)
        {
            unsafe
            {
                Int32 __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    IntPtr messageLog_sb_ptr = IntPtr.Zero;
                    try
                    {
                        messageLog_sb_ptr = Marshal.AllocHGlobal(messageLog.Capacity + 1);
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Load(messageLog_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(149);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(Int32), typeof(UInt32), typeof(Int32), typeof(OpenTK.Graphics.ES20.DebugSourceExternal*), typeof(OpenTK.Graphics.ES20.DebugType*), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.DebugSeverity*), typeof(Int32*), typeof(IntPtr));
                        Silk.Cil.Store(out __return_result);
                        MarshalPtrToStringBuilder(messageLog_sb_ptr, messageLog);
                    } finally {
                        Marshal.FreeHGlobal(messageLog_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return error information
        /// </summary>
        public static OpenTK.Graphics.ES20.ErrorCode GetError()
        {
            unsafe
            {
                OpenTK.Graphics.ES20.ErrorCode __return_result;
                Silk.Cil.Load(EntryPoints);
                Silk.Cil.Ldc_I4(153);
                Silk.Cil.Ldelem_I();
                Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(OpenTK.Graphics.ES20.ErrorCode));
                Silk.Cil.Store(out __return_result);
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="pname"></param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static Single GetFloat(OpenTK.Graphics.ES20.All pname)
        {
            unsafe
            {
                Single __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Single __result = default(Single);
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadAddress(__result);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(156);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.GetPName), typeof(Single*));
                    Silk.Cil.Load(__result);
                    Silk.Cil.Store(out __return_result);
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="pname"></param>
        [CLSCompliant(false)]
        public static Single GetFloat(OpenTK.Graphics.ES20.GetPName pname)
        {
            unsafe
            {
                Single __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Single __result = default(Single);
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadAddress(__result);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(156);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.GetPName), typeof(Single*));
                    Silk.Cil.Load(__result);
                    Silk.Cil.Store(out __return_result);
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: pname]</param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetFloat(OpenTK.Graphics.ES20.All pname, [OutAttribute] Single[] data)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Single");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(156);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.GetPName), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: pname]</param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetFloat(OpenTK.Graphics.ES20.All pname, [OutAttribute] out Single data)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "data_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("data_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(156);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.GetPName), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: pname]</param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static unsafe void GetFloat(OpenTK.Graphics.ES20.All pname, [OutAttribute] Single* data)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(156);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.GetPName), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: pname]</param>
        [CLSCompliant(false)]
        public static void GetFloat(OpenTK.Graphics.ES20.GetPName pname, [OutAttribute] Single[] data)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Single");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(156);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.GetPName), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: pname]</param>
        [CLSCompliant(false)]
        public static void GetFloat(OpenTK.Graphics.ES20.GetPName pname, [OutAttribute] out Single data)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "data_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("data_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(156);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.GetPName), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: pname]</param>
        [CLSCompliant(false)]
        public static unsafe void GetFloat(OpenTK.Graphics.ES20.GetPName pname, [OutAttribute] Single* data)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(156);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.GetPName), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return attachment parameters of a framebuffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target framebuffer object. The symbolic constant must be Framebuffer.
        /// </param>
        /// <param name="attachment"> 
        /// Specifies the symbolic name of a framebuffer object attachment point. Accepted values are ColorAttachment0, DepthAttachment, and StencilAttachment.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a framebuffer object attachment parameter. Accepted values are FramebufferAttachmentObjectType, FramebufferAttachmentObjectName, FramebufferAttachmentTextureLevel, and FramebufferAttachmentTextureCubeMapFace.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetFramebufferAttachmentParameter(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All attachment, OpenTK.Graphics.ES20.All pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(157);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.FramebufferTarget), typeof(OpenTK.Graphics.ES20.All), typeof(OpenTK.Graphics.ES20.FramebufferParameterName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return attachment parameters of a framebuffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target framebuffer object. The symbolic constant must be Framebuffer.
        /// </param>
        /// <param name="attachment"> 
        /// Specifies the symbolic name of a framebuffer object attachment point. Accepted values are ColorAttachment0, DepthAttachment, and StencilAttachment.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a framebuffer object attachment parameter. Accepted values are FramebufferAttachmentObjectType, FramebufferAttachmentObjectName, FramebufferAttachmentTextureLevel, and FramebufferAttachmentTextureCubeMapFace.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetFramebufferAttachmentParameter(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All attachment, OpenTK.Graphics.ES20.All pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.StoreByName("params_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(157);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.FramebufferTarget), typeof(OpenTK.Graphics.ES20.All), typeof(OpenTK.Graphics.ES20.FramebufferParameterName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return attachment parameters of a framebuffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target framebuffer object. The symbolic constant must be Framebuffer.
        /// </param>
        /// <param name="attachment"> 
        /// Specifies the symbolic name of a framebuffer object attachment point. Accepted values are ColorAttachment0, DepthAttachment, and StencilAttachment.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a framebuffer object attachment parameter. Accepted values are FramebufferAttachmentObjectType, FramebufferAttachmentObjectName, FramebufferAttachmentTextureLevel, and FramebufferAttachmentTextureCubeMapFace.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static unsafe void GetFramebufferAttachmentParameter(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All attachment, OpenTK.Graphics.ES20.All pname, [OutAttribute] Int32* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(157);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.FramebufferTarget), typeof(OpenTK.Graphics.ES20.All), typeof(OpenTK.Graphics.ES20.FramebufferParameterName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return attachment parameters of a framebuffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target framebuffer object. The symbolic constant must be Framebuffer.
        /// </param>
        /// <param name="attachment"> 
        /// Specifies the symbolic name of a framebuffer object attachment point. Accepted values are ColorAttachment0, DepthAttachment, and StencilAttachment.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a framebuffer object attachment parameter. Accepted values are FramebufferAttachmentObjectType, FramebufferAttachmentObjectName, FramebufferAttachmentTextureLevel, and FramebufferAttachmentTextureCubeMapFace.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested parameter.
        /// </param>
        [CLSCompliant(false)]
        public static void GetFramebufferAttachmentParameter(OpenTK.Graphics.ES20.FramebufferTarget target, OpenTK.Graphics.ES20.All attachment, OpenTK.Graphics.ES20.FramebufferParameterName pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(157);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.FramebufferTarget), typeof(OpenTK.Graphics.ES20.All), typeof(OpenTK.Graphics.ES20.FramebufferParameterName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return attachment parameters of a framebuffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target framebuffer object. The symbolic constant must be Framebuffer.
        /// </param>
        /// <param name="attachment"> 
        /// Specifies the symbolic name of a framebuffer object attachment point. Accepted values are ColorAttachment0, DepthAttachment, and StencilAttachment.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a framebuffer object attachment parameter. Accepted values are FramebufferAttachmentObjectType, FramebufferAttachmentObjectName, FramebufferAttachmentTextureLevel, and FramebufferAttachmentTextureCubeMapFace.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested parameter.
        /// </param>
        [CLSCompliant(false)]
        public static void GetFramebufferAttachmentParameter(OpenTK.Graphics.ES20.FramebufferTarget target, OpenTK.Graphics.ES20.All attachment, OpenTK.Graphics.ES20.FramebufferParameterName pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.StoreByName("params_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(157);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.FramebufferTarget), typeof(OpenTK.Graphics.ES20.All), typeof(OpenTK.Graphics.ES20.FramebufferParameterName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return attachment parameters of a framebuffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target framebuffer object. The symbolic constant must be Framebuffer.
        /// </param>
        /// <param name="attachment"> 
        /// Specifies the symbolic name of a framebuffer object attachment point. Accepted values are ColorAttachment0, DepthAttachment, and StencilAttachment.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a framebuffer object attachment parameter. Accepted values are FramebufferAttachmentObjectType, FramebufferAttachmentObjectName, FramebufferAttachmentTextureLevel, and FramebufferAttachmentTextureCubeMapFace.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested parameter.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void GetFramebufferAttachmentParameter(OpenTK.Graphics.ES20.FramebufferTarget target, OpenTK.Graphics.ES20.All attachment, OpenTK.Graphics.ES20.FramebufferParameterName pname, [OutAttribute] Int32* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(157);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.FramebufferTarget), typeof(OpenTK.Graphics.ES20.All), typeof(OpenTK.Graphics.ES20.FramebufferParameterName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return attachment parameters of a framebuffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target framebuffer object. The symbolic constant must be Framebuffer.
        /// </param>
        /// <param name="attachment"> 
        /// Specifies the symbolic name of a framebuffer object attachment point. Accepted values are ColorAttachment0, DepthAttachment, and StencilAttachment.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a framebuffer object attachment parameter. Accepted values are FramebufferAttachmentObjectType, FramebufferAttachmentObjectName, FramebufferAttachmentTextureLevel, and FramebufferAttachmentTextureCubeMapFace.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested parameter.
        /// </param>
        [Obsolete("Use FramebufferAttachment overload instead")]
        [CLSCompliant(false)]
        public static void GetFramebufferAttachmentParameter(OpenTK.Graphics.ES20.FramebufferTarget target, OpenTK.Graphics.ES20.FramebufferSlot attachment, OpenTK.Graphics.ES20.FramebufferParameterName pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(157);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.FramebufferTarget), typeof(OpenTK.Graphics.ES20.All), typeof(OpenTK.Graphics.ES20.FramebufferParameterName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return attachment parameters of a framebuffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target framebuffer object. The symbolic constant must be Framebuffer.
        /// </param>
        /// <param name="attachment"> 
        /// Specifies the symbolic name of a framebuffer object attachment point. Accepted values are ColorAttachment0, DepthAttachment, and StencilAttachment.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a framebuffer object attachment parameter. Accepted values are FramebufferAttachmentObjectType, FramebufferAttachmentObjectName, FramebufferAttachmentTextureLevel, and FramebufferAttachmentTextureCubeMapFace.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested parameter.
        /// </param>
        [Obsolete("Use FramebufferAttachment overload instead")]
        [CLSCompliant(false)]
        public static void GetFramebufferAttachmentParameter(OpenTK.Graphics.ES20.FramebufferTarget target, OpenTK.Graphics.ES20.FramebufferSlot attachment, OpenTK.Graphics.ES20.FramebufferParameterName pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.StoreByName("params_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(157);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.FramebufferTarget), typeof(OpenTK.Graphics.ES20.All), typeof(OpenTK.Graphics.ES20.FramebufferParameterName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return attachment parameters of a framebuffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target framebuffer object. The symbolic constant must be Framebuffer.
        /// </param>
        /// <param name="attachment"> 
        /// Specifies the symbolic name of a framebuffer object attachment point. Accepted values are ColorAttachment0, DepthAttachment, and StencilAttachment.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a framebuffer object attachment parameter. Accepted values are FramebufferAttachmentObjectType, FramebufferAttachmentObjectName, FramebufferAttachmentTextureLevel, and FramebufferAttachmentTextureCubeMapFace.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested parameter.
        /// </param>
        [Obsolete("Use FramebufferAttachment overload instead")]
        [CLSCompliant(false)]
        public static unsafe void GetFramebufferAttachmentParameter(OpenTK.Graphics.ES20.FramebufferTarget target, OpenTK.Graphics.ES20.FramebufferSlot attachment, OpenTK.Graphics.ES20.FramebufferParameterName pname, [OutAttribute] Int32* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(157);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.FramebufferTarget), typeof(OpenTK.Graphics.ES20.All), typeof(OpenTK.Graphics.ES20.FramebufferParameterName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary></summary>
        public static OpenTK.Graphics.ES20.ResetStatus GetGraphicsResetStatus()
        {
            unsafe
            {
                OpenTK.Graphics.ES20.ResetStatus __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(158);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(OpenTK.Graphics.ES20.ResetStatus));
                    Silk.Cil.Store(out __return_result);
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="pname"></param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static Int32 GetInteger(OpenTK.Graphics.ES20.All pname)
        {
            unsafe
            {
                Int32 __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Int32 __result = default(Int32);
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadAddress(__result);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(163);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.GetPName), typeof(Int32*));
                    Silk.Cil.Load(__result);
                    Silk.Cil.Store(out __return_result);
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="pname"></param>
        [CLSCompliant(false)]
        public static Int32 GetInteger(OpenTK.Graphics.ES20.GetPName pname)
        {
            unsafe
            {
                Int32 __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Int32 __result = default(Int32);
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadAddress(__result);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(163);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.GetPName), typeof(Int32*));
                    Silk.Cil.Load(__result);
                    Silk.Cil.Store(out __return_result);
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: pname]</param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetInteger(OpenTK.Graphics.ES20.All pname, [OutAttribute] Int32[] data)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(163);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.GetPName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: pname]</param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetInteger(OpenTK.Graphics.ES20.All pname, [OutAttribute] out Int32 data)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "data_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("data_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(163);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.GetPName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: pname]</param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static unsafe void GetInteger(OpenTK.Graphics.ES20.All pname, [OutAttribute] Int32* data)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(163);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.GetPName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: pname]</param>
        [CLSCompliant(false)]
        public static void GetInteger(OpenTK.Graphics.ES20.GetPName pname, [OutAttribute] Int32[] data)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(163);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.GetPName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: pname]</param>
        [CLSCompliant(false)]
        public static void GetInteger(OpenTK.Graphics.ES20.GetPName pname, [OutAttribute] out Int32 data)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "data_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("data_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(163);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.GetPName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: pname]</param>
        [CLSCompliant(false)]
        public static unsafe void GetInteger(OpenTK.Graphics.ES20.GetPName pname, [OutAttribute] Int32* data)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(163);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.GetPName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary></summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="bufSize"></param>
        /// <param name="@params"></param>
        [CLSCompliant(false)]
        public static void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] Single[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Single");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(165);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary></summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="bufSize"></param>
        /// <param name="@params"></param>
        [CLSCompliant(false)]
        public static void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] out Single @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.StoreByName("params_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(165);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary></summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="bufSize"></param>
        /// <param name="@params"></param>
        [CLSCompliant(false)]
        public static unsafe void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] Single* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(165);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary></summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="bufSize"></param>
        /// <param name="@params"></param>
        [CLSCompliant(false)]
        public static void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] Single[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Single");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(165);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary></summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="bufSize"></param>
        /// <param name="@params"></param>
        [CLSCompliant(false)]
        public static void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] out Single @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.StoreByName("params_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(165);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary></summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="bufSize"></param>
        /// <param name="@params"></param>
        [CLSCompliant(false)]
        public static unsafe void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] Single* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(165);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary></summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="bufSize"></param>
        /// <param name="@params"></param>
        [CLSCompliant(false)]
        public static void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(168);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary></summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="bufSize"></param>
        /// <param name="@params"></param>
        [CLSCompliant(false)]
        public static void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.StoreByName("params_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(168);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary></summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="bufSize"></param>
        /// <param name="@params"></param>
        [CLSCompliant(false)]
        public static unsafe void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] Int32* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(168);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary></summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="bufSize"></param>
        /// <param name="@params"></param>
        [CLSCompliant(false)]
        public static void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(168);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary></summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="bufSize"></param>
        /// <param name="@params"></param>
        [CLSCompliant(false)]
        public static void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.StoreByName("params_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(168);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary></summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="bufSize"></param>
        /// <param name="@params"></param>
        [CLSCompliant(false)]
        public static unsafe void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] Int32* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(168);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary></summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="bufSize"></param>
        /// <param name="@params"></param>
        [CLSCompliant(false)]
        public static void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] UInt32[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.UInt32& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.UInt32");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(171);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary></summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="bufSize"></param>
        /// <param name="@params"></param>
        [CLSCompliant(false)]
        public static void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] out UInt32 @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.UInt32& pinned", "params_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.StoreByName("params_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(171);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary></summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="bufSize"></param>
        /// <param name="@params"></param>
        [CLSCompliant(false)]
        public static unsafe void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] UInt32* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(171);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(UInt32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Retrieve the label of a named object identified within a namespace
        /// </summary>
        /// <param name="identifier"> 
        /// The namespace from which the name of the object is allocated.
        /// </param>
        /// <param name="name"> 
        /// The name of the object whose label to retrieve.
        /// </param>
        /// <param name="bufSize"> 
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">[length: 1] 
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">[length: bufSize] 
        /// The address of a string that will receive the object label.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetObjectLabel(OpenTK.Graphics.ES20.All identifier, Int32 name, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder label)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                    if(length != null && length.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("length_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("length_pinned");
                    }
                    IntPtr label_sb_ptr = IntPtr.Zero;
                    try
                    {
                        label_sb_ptr = Marshal.AllocHGlobal(label.Capacity + 1);
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("length_pinned");
                        Silk.Cil.Load(label_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(173);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.ObjectLabelIdentifier), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                        MarshalPtrToStringBuilder(label_sb_ptr, label);
                    } finally {
                        Marshal.FreeHGlobal(label_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Retrieve the label of a named object identified within a namespace
        /// </summary>
        /// <param name="identifier"> 
        /// The namespace from which the name of the object is allocated.
        /// </param>
        /// <param name="name"> 
        /// The name of the object whose label to retrieve.
        /// </param>
        /// <param name="bufSize"> 
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">[length: 1] 
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">[length: bufSize] 
        /// The address of a string that will receive the object label.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetObjectLabel(OpenTK.Graphics.ES20.All identifier, Int32 name, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder label)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.StoreByName("length_pinned");
                    IntPtr label_sb_ptr = IntPtr.Zero;
                    try
                    {
                        label_sb_ptr = Marshal.AllocHGlobal(label.Capacity + 1);
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("length_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(label_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(173);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.ObjectLabelIdentifier), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                        MarshalPtrToStringBuilder(label_sb_ptr, label);
                    } finally {
                        Marshal.FreeHGlobal(label_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Retrieve the label of a named object identified within a namespace
        /// </summary>
        /// <param name="identifier"> 
        /// The namespace from which the name of the object is allocated.
        /// </param>
        /// <param name="name"> 
        /// The name of the object whose label to retrieve.
        /// </param>
        /// <param name="bufSize"> 
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">[length: 1] 
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">[length: bufSize] 
        /// The address of a string that will receive the object label.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static unsafe void GetObjectLabel(OpenTK.Graphics.ES20.All identifier, Int32 name, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder label)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    IntPtr label_sb_ptr = IntPtr.Zero;
                    try
                    {
                        label_sb_ptr = Marshal.AllocHGlobal(label.Capacity + 1);
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(label_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(173);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.ObjectLabelIdentifier), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                        MarshalPtrToStringBuilder(label_sb_ptr, label);
                    } finally {
                        Marshal.FreeHGlobal(label_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Retrieve the label of a named object identified within a namespace
        /// </summary>
        /// <param name="identifier"> 
        /// The namespace from which the name of the object is allocated.
        /// </param>
        /// <param name="name"> 
        /// The name of the object whose label to retrieve.
        /// </param>
        /// <param name="bufSize"> 
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">[length: 1] 
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">[length: bufSize] 
        /// The address of a string that will receive the object label.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetObjectLabel(OpenTK.Graphics.ES20.All identifier, UInt32 name, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder label)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                    if(length != null && length.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("length_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("length_pinned");
                    }
                    IntPtr label_sb_ptr = IntPtr.Zero;
                    try
                    {
                        label_sb_ptr = Marshal.AllocHGlobal(label.Capacity + 1);
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("length_pinned");
                        Silk.Cil.Load(label_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(173);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.ObjectLabelIdentifier), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                        MarshalPtrToStringBuilder(label_sb_ptr, label);
                    } finally {
                        Marshal.FreeHGlobal(label_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Retrieve the label of a named object identified within a namespace
        /// </summary>
        /// <param name="identifier"> 
        /// The namespace from which the name of the object is allocated.
        /// </param>
        /// <param name="name"> 
        /// The name of the object whose label to retrieve.
        /// </param>
        /// <param name="bufSize"> 
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">[length: 1] 
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">[length: bufSize] 
        /// The address of a string that will receive the object label.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetObjectLabel(OpenTK.Graphics.ES20.All identifier, UInt32 name, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder label)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.StoreByName("length_pinned");
                    IntPtr label_sb_ptr = IntPtr.Zero;
                    try
                    {
                        label_sb_ptr = Marshal.AllocHGlobal(label.Capacity + 1);
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("length_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(label_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(173);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.ObjectLabelIdentifier), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                        MarshalPtrToStringBuilder(label_sb_ptr, label);
                    } finally {
                        Marshal.FreeHGlobal(label_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Retrieve the label of a named object identified within a namespace
        /// </summary>
        /// <param name="identifier"> 
        /// The namespace from which the name of the object is allocated.
        /// </param>
        /// <param name="name"> 
        /// The name of the object whose label to retrieve.
        /// </param>
        /// <param name="bufSize"> 
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">[length: 1] 
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">[length: bufSize] 
        /// The address of a string that will receive the object label.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static unsafe void GetObjectLabel(OpenTK.Graphics.ES20.All identifier, UInt32 name, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder label)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    IntPtr label_sb_ptr = IntPtr.Zero;
                    try
                    {
                        label_sb_ptr = Marshal.AllocHGlobal(label.Capacity + 1);
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(label_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(173);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.ObjectLabelIdentifier), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                        MarshalPtrToStringBuilder(label_sb_ptr, label);
                    } finally {
                        Marshal.FreeHGlobal(label_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Retrieve the label of a named object identified within a namespace
        /// </summary>
        /// <param name="identifier"> 
        /// The namespace from which the name of the object is allocated.
        /// </param>
        /// <param name="name"> 
        /// The name of the object whose label to retrieve.
        /// </param>
        /// <param name="bufSize"> 
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">[length: 1] 
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">[length: bufSize] 
        /// The address of a string that will receive the object label.
        /// </param>
        [CLSCompliant(false)]
        public static void GetObjectLabel(OpenTK.Graphics.ES20.ObjectLabelIdentifier identifier, Int32 name, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder label)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                    if(length != null && length.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("length_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("length_pinned");
                    }
                    IntPtr label_sb_ptr = IntPtr.Zero;
                    try
                    {
                        label_sb_ptr = Marshal.AllocHGlobal(label.Capacity + 1);
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("length_pinned");
                        Silk.Cil.Load(label_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(173);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.ObjectLabelIdentifier), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                        MarshalPtrToStringBuilder(label_sb_ptr, label);
                    } finally {
                        Marshal.FreeHGlobal(label_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Retrieve the label of a named object identified within a namespace
        /// </summary>
        /// <param name="identifier"> 
        /// The namespace from which the name of the object is allocated.
        /// </param>
        /// <param name="name"> 
        /// The name of the object whose label to retrieve.
        /// </param>
        /// <param name="bufSize"> 
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">[length: 1] 
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">[length: bufSize] 
        /// The address of a string that will receive the object label.
        /// </param>
        [CLSCompliant(false)]
        public static void GetObjectLabel(OpenTK.Graphics.ES20.ObjectLabelIdentifier identifier, Int32 name, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder label)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.StoreByName("length_pinned");
                    IntPtr label_sb_ptr = IntPtr.Zero;
                    try
                    {
                        label_sb_ptr = Marshal.AllocHGlobal(label.Capacity + 1);
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("length_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(label_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(173);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.ObjectLabelIdentifier), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                        MarshalPtrToStringBuilder(label_sb_ptr, label);
                    } finally {
                        Marshal.FreeHGlobal(label_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Retrieve the label of a named object identified within a namespace
        /// </summary>
        /// <param name="identifier"> 
        /// The namespace from which the name of the object is allocated.
        /// </param>
        /// <param name="name"> 
        /// The name of the object whose label to retrieve.
        /// </param>
        /// <param name="bufSize"> 
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">[length: 1] 
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">[length: bufSize] 
        /// The address of a string that will receive the object label.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void GetObjectLabel(OpenTK.Graphics.ES20.ObjectLabelIdentifier identifier, Int32 name, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder label)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    IntPtr label_sb_ptr = IntPtr.Zero;
                    try
                    {
                        label_sb_ptr = Marshal.AllocHGlobal(label.Capacity + 1);
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(label_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(173);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.ObjectLabelIdentifier), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                        MarshalPtrToStringBuilder(label_sb_ptr, label);
                    } finally {
                        Marshal.FreeHGlobal(label_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Retrieve the label of a named object identified within a namespace
        /// </summary>
        /// <param name="identifier"> 
        /// The namespace from which the name of the object is allocated.
        /// </param>
        /// <param name="name"> 
        /// The name of the object whose label to retrieve.
        /// </param>
        /// <param name="bufSize"> 
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">[length: 1] 
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">[length: bufSize] 
        /// The address of a string that will receive the object label.
        /// </param>
        [CLSCompliant(false)]
        public static void GetObjectLabel(OpenTK.Graphics.ES20.ObjectLabelIdentifier identifier, UInt32 name, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder label)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                    if(length != null && length.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("length_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("length_pinned");
                    }
                    IntPtr label_sb_ptr = IntPtr.Zero;
                    try
                    {
                        label_sb_ptr = Marshal.AllocHGlobal(label.Capacity + 1);
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("length_pinned");
                        Silk.Cil.Load(label_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(173);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.ObjectLabelIdentifier), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                        MarshalPtrToStringBuilder(label_sb_ptr, label);
                    } finally {
                        Marshal.FreeHGlobal(label_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Retrieve the label of a named object identified within a namespace
        /// </summary>
        /// <param name="identifier"> 
        /// The namespace from which the name of the object is allocated.
        /// </param>
        /// <param name="name"> 
        /// The name of the object whose label to retrieve.
        /// </param>
        /// <param name="bufSize"> 
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">[length: 1] 
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">[length: bufSize] 
        /// The address of a string that will receive the object label.
        /// </param>
        [CLSCompliant(false)]
        public static void GetObjectLabel(OpenTK.Graphics.ES20.ObjectLabelIdentifier identifier, UInt32 name, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder label)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.StoreByName("length_pinned");
                    IntPtr label_sb_ptr = IntPtr.Zero;
                    try
                    {
                        label_sb_ptr = Marshal.AllocHGlobal(label.Capacity + 1);
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("length_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(label_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(173);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.ObjectLabelIdentifier), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                        MarshalPtrToStringBuilder(label_sb_ptr, label);
                    } finally {
                        Marshal.FreeHGlobal(label_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Retrieve the label of a named object identified within a namespace
        /// </summary>
        /// <param name="identifier"> 
        /// The namespace from which the name of the object is allocated.
        /// </param>
        /// <param name="name"> 
        /// The name of the object whose label to retrieve.
        /// </param>
        /// <param name="bufSize"> 
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">[length: 1] 
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">[length: bufSize] 
        /// The address of a string that will receive the object label.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void GetObjectLabel(OpenTK.Graphics.ES20.ObjectLabelIdentifier identifier, UInt32 name, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder label)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    IntPtr label_sb_ptr = IntPtr.Zero;
                    try
                    {
                        label_sb_ptr = Marshal.AllocHGlobal(label.Capacity + 1);
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(label_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(173);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.ObjectLabelIdentifier), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                        MarshalPtrToStringBuilder(label_sb_ptr, label);
                    } finally {
                        Marshal.FreeHGlobal(label_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr"> 
        /// The name of the sync object whose label to retrieve.
        /// </param>
        /// <param name="bufSize"> 
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">[length: 1] 
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">[length: bufSize] 
        /// The address of a string that will receive the object label.
        /// </param>
        [Obsolete("Use out overload instead")]
        [CLSCompliant(false)]
        public static void GetObjectPtrLabel(IntPtr ptr, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder label)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                    if(length != null && length.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("length_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("length_pinned");
                    }
                    IntPtr label_sb_ptr = IntPtr.Zero;
                    try
                    {
                        label_sb_ptr = Marshal.AllocHGlobal(label.Capacity + 1);
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("length_pinned");
                        Silk.Cil.Load(label_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(176);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(IntPtr), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                        MarshalPtrToStringBuilder(label_sb_ptr, label);
                    } finally {
                        Marshal.FreeHGlobal(label_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr"> 
        /// The name of the sync object whose label to retrieve.
        /// </param>
        /// <param name="bufSize"> 
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">[length: 1] 
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">[length: bufSize] 
        /// The address of a string that will receive the object label.
        /// </param>
        [Obsolete("Use out overload instead")]
        [CLSCompliant(false)]
        public static void GetObjectPtrLabel(IntPtr ptr, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder label)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("length_pinned");
                    IntPtr label_sb_ptr = IntPtr.Zero;
                    try
                    {
                        label_sb_ptr = Marshal.AllocHGlobal(label.Capacity + 1);
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("length_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(label_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(176);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(IntPtr), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                        MarshalPtrToStringBuilder(label_sb_ptr, label);
                    } finally {
                        Marshal.FreeHGlobal(label_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr"> 
        /// The name of the sync object whose label to retrieve.
        /// </param>
        /// <param name="bufSize"> 
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">[length: 1] 
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">[length: bufSize] 
        /// The address of a string that will receive the object label.
        /// </param>
        [Obsolete("Use out overload instead")]
        [CLSCompliant(false)]
        public static unsafe void GetObjectPtrLabel(IntPtr ptr, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder label)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    IntPtr label_sb_ptr = IntPtr.Zero;
                    try
                    {
                        label_sb_ptr = Marshal.AllocHGlobal(label.Capacity + 1);
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(label_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(176);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(IntPtr), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                        MarshalPtrToStringBuilder(label_sb_ptr, label);
                    } finally {
                        Marshal.FreeHGlobal(label_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr"> 
        /// The name of the sync object whose label to retrieve.
        /// </param>
        /// <param name="bufSize"> 
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">[length: 1] 
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">[length: bufSize] 
        /// The address of a string that will receive the object label.
        /// </param>
        [Obsolete("Use out overload instead")]
        [CLSCompliant(false)]
        public static void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[] ptr, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder label)
            where T0 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T0& pinned", "ptr_pinned");
                    if(ptr != null && ptr.Length != 0)
                    {
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T0");
                        Silk.Cil.StoreByName("ptr_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("ptr_pinned");
                    }
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                    if(length != null && length.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("length_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("length_pinned");
                    }
                    IntPtr label_sb_ptr = IntPtr.Zero;
                    try
                    {
                        label_sb_ptr = Marshal.AllocHGlobal(label.Capacity + 1);
                        Silk.Cil.LoadByName("ptr_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("length_pinned");
                        Silk.Cil.Load(label_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(176);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(IntPtr), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                        MarshalPtrToStringBuilder(label_sb_ptr, label);
                    } finally {
                        Marshal.FreeHGlobal(label_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr"> 
        /// The name of the sync object whose label to retrieve.
        /// </param>
        /// <param name="bufSize"> 
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">[length: 1] 
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">[length: bufSize] 
        /// The address of a string that will receive the object label.
        /// </param>
        [Obsolete("Use out overload instead")]
        [CLSCompliant(false)]
        public static void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[] ptr, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder label)
            where T0 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T0& pinned", "ptr_pinned");
                    if(ptr != null && ptr.Length != 0)
                    {
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T0");
                        Silk.Cil.StoreByName("ptr_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("ptr_pinned");
                    }
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("length_pinned");
                    IntPtr label_sb_ptr = IntPtr.Zero;
                    try
                    {
                        label_sb_ptr = Marshal.AllocHGlobal(label.Capacity + 1);
                        Silk.Cil.LoadByName("ptr_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("length_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(label_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(176);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(IntPtr), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                        MarshalPtrToStringBuilder(label_sb_ptr, label);
                    } finally {
                        Marshal.FreeHGlobal(label_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr"> 
        /// The name of the sync object whose label to retrieve.
        /// </param>
        /// <param name="bufSize"> 
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">[length: 1] 
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">[length: bufSize] 
        /// The address of a string that will receive the object label.
        /// </param>
        [Obsolete("Use out overload instead")]
        [CLSCompliant(false)]
        public static unsafe void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[] ptr, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder label)
            where T0 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T0& pinned", "ptr_pinned");
                    if(ptr != null && ptr.Length != 0)
                    {
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T0");
                        Silk.Cil.StoreByName("ptr_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("ptr_pinned");
                    }
                    IntPtr label_sb_ptr = IntPtr.Zero;
                    try
                    {
                        label_sb_ptr = Marshal.AllocHGlobal(label.Capacity + 1);
                        Silk.Cil.LoadByName("ptr_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(label_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(176);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(IntPtr), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                        MarshalPtrToStringBuilder(label_sb_ptr, label);
                    } finally {
                        Marshal.FreeHGlobal(label_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr"> 
        /// The name of the sync object whose label to retrieve.
        /// </param>
        /// <param name="bufSize"> 
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">[length: 1] 
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">[length: bufSize] 
        /// The address of a string that will receive the object label.
        /// </param>
        [Obsolete("Use out overload instead")]
        [CLSCompliant(false)]
        public static void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,] ptr, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder label)
            where T0 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T0& pinned", "ptr_pinned");
                    if(ptr != null && ptr.Length != 0)
                    {
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T0[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("ptr_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("ptr_pinned");
                    }
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                    if(length != null && length.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("length_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("length_pinned");
                    }
                    IntPtr label_sb_ptr = IntPtr.Zero;
                    try
                    {
                        label_sb_ptr = Marshal.AllocHGlobal(label.Capacity + 1);
                        Silk.Cil.LoadByName("ptr_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("length_pinned");
                        Silk.Cil.Load(label_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(176);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(IntPtr), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                        MarshalPtrToStringBuilder(label_sb_ptr, label);
                    } finally {
                        Marshal.FreeHGlobal(label_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr"> 
        /// The name of the sync object whose label to retrieve.
        /// </param>
        /// <param name="bufSize"> 
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">[length: 1] 
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">[length: bufSize] 
        /// The address of a string that will receive the object label.
        /// </param>
        [Obsolete("Use out overload instead")]
        [CLSCompliant(false)]
        public static void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,] ptr, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder label)
            where T0 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T0& pinned", "ptr_pinned");
                    if(ptr != null && ptr.Length != 0)
                    {
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T0[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("ptr_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("ptr_pinned");
                    }
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("length_pinned");
                    IntPtr label_sb_ptr = IntPtr.Zero;
                    try
                    {
                        label_sb_ptr = Marshal.AllocHGlobal(label.Capacity + 1);
                        Silk.Cil.LoadByName("ptr_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("length_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(label_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(176);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(IntPtr), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                        MarshalPtrToStringBuilder(label_sb_ptr, label);
                    } finally {
                        Marshal.FreeHGlobal(label_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr"> 
        /// The name of the sync object whose label to retrieve.
        /// </param>
        /// <param name="bufSize"> 
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">[length: 1] 
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">[length: bufSize] 
        /// The address of a string that will receive the object label.
        /// </param>
        [Obsolete("Use out overload instead")]
        [CLSCompliant(false)]
        public static unsafe void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,] ptr, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder label)
            where T0 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T0& pinned", "ptr_pinned");
                    if(ptr != null && ptr.Length != 0)
                    {
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T0[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("ptr_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("ptr_pinned");
                    }
                    IntPtr label_sb_ptr = IntPtr.Zero;
                    try
                    {
                        label_sb_ptr = Marshal.AllocHGlobal(label.Capacity + 1);
                        Silk.Cil.LoadByName("ptr_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(label_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(176);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(IntPtr), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                        MarshalPtrToStringBuilder(label_sb_ptr, label);
                    } finally {
                        Marshal.FreeHGlobal(label_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr"> 
        /// The name of the sync object whose label to retrieve.
        /// </param>
        /// <param name="bufSize"> 
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">[length: 1] 
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">[length: bufSize] 
        /// The address of a string that will receive the object label.
        /// </param>
        [Obsolete("Use out overload instead")]
        [CLSCompliant(false)]
        public static void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,,] ptr, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder label)
            where T0 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T0& pinned", "ptr_pinned");
                    if(ptr != null && ptr.Length != 0)
                    {
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T0[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("ptr_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("ptr_pinned");
                    }
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                    if(length != null && length.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("length_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("length_pinned");
                    }
                    IntPtr label_sb_ptr = IntPtr.Zero;
                    try
                    {
                        label_sb_ptr = Marshal.AllocHGlobal(label.Capacity + 1);
                        Silk.Cil.LoadByName("ptr_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("length_pinned");
                        Silk.Cil.Load(label_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(176);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(IntPtr), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                        MarshalPtrToStringBuilder(label_sb_ptr, label);
                    } finally {
                        Marshal.FreeHGlobal(label_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr"> 
        /// The name of the sync object whose label to retrieve.
        /// </param>
        /// <param name="bufSize"> 
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">[length: 1] 
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">[length: bufSize] 
        /// The address of a string that will receive the object label.
        /// </param>
        [Obsolete("Use out overload instead")]
        [CLSCompliant(false)]
        public static void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,,] ptr, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder label)
            where T0 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T0& pinned", "ptr_pinned");
                    if(ptr != null && ptr.Length != 0)
                    {
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T0[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("ptr_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("ptr_pinned");
                    }
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("length_pinned");
                    IntPtr label_sb_ptr = IntPtr.Zero;
                    try
                    {
                        label_sb_ptr = Marshal.AllocHGlobal(label.Capacity + 1);
                        Silk.Cil.LoadByName("ptr_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("length_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(label_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(176);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(IntPtr), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                        MarshalPtrToStringBuilder(label_sb_ptr, label);
                    } finally {
                        Marshal.FreeHGlobal(label_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr"> 
        /// The name of the sync object whose label to retrieve.
        /// </param>
        /// <param name="bufSize"> 
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">[length: 1] 
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">[length: bufSize] 
        /// The address of a string that will receive the object label.
        /// </param>
        [Obsolete("Use out overload instead")]
        [CLSCompliant(false)]
        public static unsafe void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,,] ptr, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder label)
            where T0 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T0& pinned", "ptr_pinned");
                    if(ptr != null && ptr.Length != 0)
                    {
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T0[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("ptr_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("ptr_pinned");
                    }
                    IntPtr label_sb_ptr = IntPtr.Zero;
                    try
                    {
                        label_sb_ptr = Marshal.AllocHGlobal(label.Capacity + 1);
                        Silk.Cil.LoadByName("ptr_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(label_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(176);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(IntPtr), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                        MarshalPtrToStringBuilder(label_sb_ptr, label);
                    } finally {
                        Marshal.FreeHGlobal(label_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr"> 
        /// The name of the sync object whose label to retrieve.
        /// </param>
        /// <param name="bufSize"> 
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">[length: 1] 
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">[length: bufSize] 
        /// The address of a string that will receive the object label.
        /// </param>
        [Obsolete("Use out overload instead")]
        [CLSCompliant(false)]
        public static void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] ref T0 ptr, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder label)
            where T0 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T0& pinned", "ptr_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.StoreByName("ptr_pinned");
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                    if(length != null && length.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("length_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("length_pinned");
                    }
                    IntPtr label_sb_ptr = IntPtr.Zero;
                    try
                    {
                        label_sb_ptr = Marshal.AllocHGlobal(label.Capacity + 1);
                        Silk.Cil.LoadByName("ptr_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("length_pinned");
                        Silk.Cil.Load(label_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(176);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(IntPtr), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                        MarshalPtrToStringBuilder(label_sb_ptr, label);
                    } finally {
                        Marshal.FreeHGlobal(label_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr"> 
        /// The name of the sync object whose label to retrieve.
        /// </param>
        /// <param name="bufSize"> 
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">[length: 1] 
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">[length: bufSize] 
        /// The address of a string that will receive the object label.
        /// </param>
        [Obsolete("Use out overload instead")]
        [CLSCompliant(false)]
        public static void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] ref T0 ptr, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder label)
            where T0 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T0& pinned", "ptr_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.StoreByName("ptr_pinned");
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("length_pinned");
                    IntPtr label_sb_ptr = IntPtr.Zero;
                    try
                    {
                        label_sb_ptr = Marshal.AllocHGlobal(label.Capacity + 1);
                        Silk.Cil.LoadByName("ptr_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("length_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(label_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(176);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(IntPtr), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                        MarshalPtrToStringBuilder(label_sb_ptr, label);
                    } finally {
                        Marshal.FreeHGlobal(label_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr"> 
        /// The name of the sync object whose label to retrieve.
        /// </param>
        /// <param name="bufSize"> 
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">[length: 1] 
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">[length: bufSize] 
        /// The address of a string that will receive the object label.
        /// </param>
        [Obsolete("Use out overload instead")]
        [CLSCompliant(false)]
        public static unsafe void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] ref T0 ptr, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder label)
            where T0 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T0& pinned", "ptr_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.StoreByName("ptr_pinned");
                    IntPtr label_sb_ptr = IntPtr.Zero;
                    try
                    {
                        label_sb_ptr = Marshal.AllocHGlobal(label.Capacity + 1);
                        Silk.Cil.LoadByName("ptr_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(label_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(176);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(IntPtr), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                        MarshalPtrToStringBuilder(label_sb_ptr, label);
                    } finally {
                        Marshal.FreeHGlobal(label_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Return the address of the specified pointer
        /// </summary>
        /// <param name="pname"> 
        /// Specifies the array or buffer pointer to be returned. Symbolic constants ColorArrayPointer, EdgeFlagArrayPointer, FogCoordArrayPointer, FeedbackBufferPointer, IndexArrayPointer, NormalArrayPointer, SecondaryColorArrayPointer, SelectionBufferPointer, TextureCoordArrayPointer, or VertexArrayPointer are accepted.
        /// </param>
        /// <param name="@params">[length: 1] 
        /// Returns the pointer value specified by pname.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void GetPointer(OpenTK.Graphics.ES20.All pname, [OutAttribute] IntPtr @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(188);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.GetPointervPName), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Return the address of the specified pointer
        /// </summary>
        /// <param name="pname"> 
        /// Specifies the array or buffer pointer to be returned. Symbolic constants ColorArrayPointer, EdgeFlagArrayPointer, FogCoordArrayPointer, FeedbackBufferPointer, IndexArrayPointer, NormalArrayPointer, SecondaryColorArrayPointer, SelectionBufferPointer, TextureCoordArrayPointer, or VertexArrayPointer are accepted.
        /// </param>
        /// <param name="@params">[length: 1] 
        /// Returns the pointer value specified by pname.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetPointer<T1>(OpenTK.Graphics.ES20.All pname, [InAttribute, OutAttribute] T1[] @params)
            where T1 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T1& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T1");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(188);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.GetPointervPName), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Return the address of the specified pointer
        /// </summary>
        /// <param name="pname"> 
        /// Specifies the array or buffer pointer to be returned. Symbolic constants ColorArrayPointer, EdgeFlagArrayPointer, FogCoordArrayPointer, FeedbackBufferPointer, IndexArrayPointer, NormalArrayPointer, SecondaryColorArrayPointer, SelectionBufferPointer, TextureCoordArrayPointer, or VertexArrayPointer are accepted.
        /// </param>
        /// <param name="@params">[length: 1] 
        /// Returns the pointer value specified by pname.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetPointer<T1>(OpenTK.Graphics.ES20.All pname, [InAttribute, OutAttribute] T1[,] @params)
            where T1 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T1& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T1[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(188);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.GetPointervPName), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Return the address of the specified pointer
        /// </summary>
        /// <param name="pname"> 
        /// Specifies the array or buffer pointer to be returned. Symbolic constants ColorArrayPointer, EdgeFlagArrayPointer, FogCoordArrayPointer, FeedbackBufferPointer, IndexArrayPointer, NormalArrayPointer, SecondaryColorArrayPointer, SelectionBufferPointer, TextureCoordArrayPointer, or VertexArrayPointer are accepted.
        /// </param>
        /// <param name="@params">[length: 1] 
        /// Returns the pointer value specified by pname.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetPointer<T1>(OpenTK.Graphics.ES20.All pname, [InAttribute, OutAttribute] T1[,,] @params)
            where T1 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T1& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T1[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(188);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.GetPointervPName), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Return the address of the specified pointer
        /// </summary>
        /// <param name="pname"> 
        /// Specifies the array or buffer pointer to be returned. Symbolic constants ColorArrayPointer, EdgeFlagArrayPointer, FogCoordArrayPointer, FeedbackBufferPointer, IndexArrayPointer, NormalArrayPointer, SecondaryColorArrayPointer, SelectionBufferPointer, TextureCoordArrayPointer, or VertexArrayPointer are accepted.
        /// </param>
        /// <param name="@params">[length: 1] 
        /// Returns the pointer value specified by pname.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void GetPointer<T1>(OpenTK.Graphics.ES20.All pname, [InAttribute, OutAttribute] ref T1 @params)
            where T1 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T1& pinned", "params_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("params_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(188);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.GetPointervPName), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Return the address of the specified pointer
        /// </summary>
        /// <param name="pname"> 
        /// Specifies the array or buffer pointer to be returned. Symbolic constants ColorArrayPointer, EdgeFlagArrayPointer, FogCoordArrayPointer, FeedbackBufferPointer, IndexArrayPointer, NormalArrayPointer, SecondaryColorArrayPointer, SelectionBufferPointer, TextureCoordArrayPointer, or VertexArrayPointer are accepted.
        /// </param>
        /// <param name="@params">[length: 1] 
        /// Returns the pointer value specified by pname.
        /// </param>
        public static void GetPointer(OpenTK.Graphics.ES20.GetPointervPName pname, [OutAttribute] IntPtr @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(188);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.GetPointervPName), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Return the address of the specified pointer
        /// </summary>
        /// <param name="pname"> 
        /// Specifies the array or buffer pointer to be returned. Symbolic constants ColorArrayPointer, EdgeFlagArrayPointer, FogCoordArrayPointer, FeedbackBufferPointer, IndexArrayPointer, NormalArrayPointer, SecondaryColorArrayPointer, SelectionBufferPointer, TextureCoordArrayPointer, or VertexArrayPointer are accepted.
        /// </param>
        /// <param name="@params">[length: 1] 
        /// Returns the pointer value specified by pname.
        /// </param>
        [CLSCompliant(false)]
        public static void GetPointer<T1>(OpenTK.Graphics.ES20.GetPointervPName pname, [InAttribute, OutAttribute] T1[] @params)
            where T1 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T1& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T1");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(188);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.GetPointervPName), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Return the address of the specified pointer
        /// </summary>
        /// <param name="pname"> 
        /// Specifies the array or buffer pointer to be returned. Symbolic constants ColorArrayPointer, EdgeFlagArrayPointer, FogCoordArrayPointer, FeedbackBufferPointer, IndexArrayPointer, NormalArrayPointer, SecondaryColorArrayPointer, SelectionBufferPointer, TextureCoordArrayPointer, or VertexArrayPointer are accepted.
        /// </param>
        /// <param name="@params">[length: 1] 
        /// Returns the pointer value specified by pname.
        /// </param>
        [CLSCompliant(false)]
        public static void GetPointer<T1>(OpenTK.Graphics.ES20.GetPointervPName pname, [InAttribute, OutAttribute] T1[,] @params)
            where T1 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T1& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T1[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(188);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.GetPointervPName), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Return the address of the specified pointer
        /// </summary>
        /// <param name="pname"> 
        /// Specifies the array or buffer pointer to be returned. Symbolic constants ColorArrayPointer, EdgeFlagArrayPointer, FogCoordArrayPointer, FeedbackBufferPointer, IndexArrayPointer, NormalArrayPointer, SecondaryColorArrayPointer, SelectionBufferPointer, TextureCoordArrayPointer, or VertexArrayPointer are accepted.
        /// </param>
        /// <param name="@params">[length: 1] 
        /// Returns the pointer value specified by pname.
        /// </param>
        [CLSCompliant(false)]
        public static void GetPointer<T1>(OpenTK.Graphics.ES20.GetPointervPName pname, [InAttribute, OutAttribute] T1[,,] @params)
            where T1 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T1& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T1[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(188);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.GetPointervPName), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Return the address of the specified pointer
        /// </summary>
        /// <param name="pname"> 
        /// Specifies the array or buffer pointer to be returned. Symbolic constants ColorArrayPointer, EdgeFlagArrayPointer, FogCoordArrayPointer, FeedbackBufferPointer, IndexArrayPointer, NormalArrayPointer, SecondaryColorArrayPointer, SelectionBufferPointer, TextureCoordArrayPointer, or VertexArrayPointer are accepted.
        /// </param>
        /// <param name="@params">[length: 1] 
        /// Returns the pointer value specified by pname.
        /// </param>
        public static void GetPointer<T1>(OpenTK.Graphics.ES20.GetPointervPName pname, [InAttribute, OutAttribute] ref T1 @params)
            where T1 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T1& pinned", "params_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("params_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(188);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.GetPointervPName), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the information log for a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object whose information log is to be queried.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </param>
        /// <param name="infoLog">[length: bufSize] 
        /// Specifies an array of characters that is used to return the information log.
        /// </param>
        [CLSCompliant(false)]
        public static void GetProgramInfoLog(Int32 program, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder infoLog)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("length_pinned");
                    IntPtr infoLog_sb_ptr = IntPtr.Zero;
                    try
                    {
                        infoLog_sb_ptr = Marshal.AllocHGlobal(infoLog.Capacity + 1);
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("length_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(infoLog_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(191);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                        MarshalPtrToStringBuilder(infoLog_sb_ptr, infoLog);
                    } finally {
                        Marshal.FreeHGlobal(infoLog_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the information log for a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object whose information log is to be queried.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </param>
        /// <param name="infoLog">[length: bufSize] 
        /// Specifies an array of characters that is used to return the information log.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void GetProgramInfoLog(Int32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder infoLog)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    IntPtr infoLog_sb_ptr = IntPtr.Zero;
                    try
                    {
                        infoLog_sb_ptr = Marshal.AllocHGlobal(infoLog.Capacity + 1);
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(infoLog_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(191);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                        MarshalPtrToStringBuilder(infoLog_sb_ptr, infoLog);
                    } finally {
                        Marshal.FreeHGlobal(infoLog_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the information log for a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object whose information log is to be queried.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </param>
        /// <param name="infoLog">[length: bufSize] 
        /// Specifies an array of characters that is used to return the information log.
        /// </param>
        [CLSCompliant(false)]
        public static void GetProgramInfoLog(UInt32 program, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder infoLog)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("length_pinned");
                    IntPtr infoLog_sb_ptr = IntPtr.Zero;
                    try
                    {
                        infoLog_sb_ptr = Marshal.AllocHGlobal(infoLog.Capacity + 1);
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("length_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(infoLog_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(191);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                        MarshalPtrToStringBuilder(infoLog_sb_ptr, infoLog);
                    } finally {
                        Marshal.FreeHGlobal(infoLog_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the information log for a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object whose information log is to be queried.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </param>
        /// <param name="infoLog">[length: bufSize] 
        /// Specifies an array of characters that is used to return the information log.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void GetProgramInfoLog(UInt32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder infoLog)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    IntPtr infoLog_sb_ptr = IntPtr.Zero;
                    try
                    {
                        infoLog_sb_ptr = Marshal.AllocHGlobal(infoLog.Capacity + 1);
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(infoLog_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(191);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                        MarshalPtrToStringBuilder(infoLog_sb_ptr, infoLog);
                    } finally {
                        Marshal.FreeHGlobal(infoLog_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a parameter from a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the object parameter. Accepted symbolic names are DeleteStatus, LinkStatus, ValidateStatus, InfoLogLength, AttachedShaders, ActiveAttributes, ActiveAttributeMaxLength, ActiveUniforms, ActiveUniformMaxLength.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested object parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetProgram(Int32 program, OpenTK.Graphics.ES20.All pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(192);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.GetProgramParameterName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a parameter from a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the object parameter. Accepted symbolic names are DeleteStatus, LinkStatus, ValidateStatus, InfoLogLength, AttachedShaders, ActiveAttributes, ActiveAttributeMaxLength, ActiveUniforms, ActiveUniformMaxLength.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested object parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetProgram(Int32 program, OpenTK.Graphics.ES20.All pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("params_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(192);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.GetProgramParameterName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a parameter from a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the object parameter. Accepted symbolic names are DeleteStatus, LinkStatus, ValidateStatus, InfoLogLength, AttachedShaders, ActiveAttributes, ActiveAttributeMaxLength, ActiveUniforms, ActiveUniformMaxLength.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested object parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static unsafe void GetProgram(Int32 program, OpenTK.Graphics.ES20.All pname, [OutAttribute] Int32* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(192);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.GetProgramParameterName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a parameter from a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the object parameter. Accepted symbolic names are DeleteStatus, LinkStatus, ValidateStatus, InfoLogLength, AttachedShaders, ActiveAttributes, ActiveAttributeMaxLength, ActiveUniforms, ActiveUniformMaxLength.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested object parameter.
        /// </param>
        [CLSCompliant(false)]
        public static void GetProgram(Int32 program, OpenTK.Graphics.ES20.GetProgramParameterName pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(192);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.GetProgramParameterName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a parameter from a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the object parameter. Accepted symbolic names are DeleteStatus, LinkStatus, ValidateStatus, InfoLogLength, AttachedShaders, ActiveAttributes, ActiveAttributeMaxLength, ActiveUniforms, ActiveUniformMaxLength.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested object parameter.
        /// </param>
        [CLSCompliant(false)]
        public static void GetProgram(Int32 program, OpenTK.Graphics.ES20.GetProgramParameterName pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("params_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(192);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.GetProgramParameterName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a parameter from a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the object parameter. Accepted symbolic names are DeleteStatus, LinkStatus, ValidateStatus, InfoLogLength, AttachedShaders, ActiveAttributes, ActiveAttributeMaxLength, ActiveUniforms, ActiveUniformMaxLength.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested object parameter.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void GetProgram(Int32 program, OpenTK.Graphics.ES20.GetProgramParameterName pname, [OutAttribute] Int32* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(192);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.GetProgramParameterName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a parameter from a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the object parameter. Accepted symbolic names are DeleteStatus, LinkStatus, ValidateStatus, InfoLogLength, AttachedShaders, ActiveAttributes, ActiveAttributeMaxLength, ActiveUniforms, ActiveUniformMaxLength.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested object parameter.
        /// </param>
        [Obsolete("Use GetProgramParameterName overload instead")]
        [CLSCompliant(false)]
        public static void GetProgram(Int32 program, OpenTK.Graphics.ES20.ProgramParameter pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(192);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.GetProgramParameterName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a parameter from a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the object parameter. Accepted symbolic names are DeleteStatus, LinkStatus, ValidateStatus, InfoLogLength, AttachedShaders, ActiveAttributes, ActiveAttributeMaxLength, ActiveUniforms, ActiveUniformMaxLength.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested object parameter.
        /// </param>
        [Obsolete("Use GetProgramParameterName overload instead")]
        [CLSCompliant(false)]
        public static void GetProgram(Int32 program, OpenTK.Graphics.ES20.ProgramParameter pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("params_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(192);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.GetProgramParameterName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a parameter from a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the object parameter. Accepted symbolic names are DeleteStatus, LinkStatus, ValidateStatus, InfoLogLength, AttachedShaders, ActiveAttributes, ActiveAttributeMaxLength, ActiveUniforms, ActiveUniformMaxLength.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested object parameter.
        /// </param>
        [Obsolete("Use GetProgramParameterName overload instead")]
        [CLSCompliant(false)]
        public static unsafe void GetProgram(Int32 program, OpenTK.Graphics.ES20.ProgramParameter pname, [OutAttribute] Int32* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(192);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.GetProgramParameterName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a parameter from a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the object parameter. Accepted symbolic names are DeleteStatus, LinkStatus, ValidateStatus, InfoLogLength, AttachedShaders, ActiveAttributes, ActiveAttributeMaxLength, ActiveUniforms, ActiveUniformMaxLength.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested object parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetProgram(UInt32 program, OpenTK.Graphics.ES20.All pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(192);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.GetProgramParameterName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a parameter from a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the object parameter. Accepted symbolic names are DeleteStatus, LinkStatus, ValidateStatus, InfoLogLength, AttachedShaders, ActiveAttributes, ActiveAttributeMaxLength, ActiveUniforms, ActiveUniformMaxLength.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested object parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetProgram(UInt32 program, OpenTK.Graphics.ES20.All pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("params_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(192);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.GetProgramParameterName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a parameter from a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the object parameter. Accepted symbolic names are DeleteStatus, LinkStatus, ValidateStatus, InfoLogLength, AttachedShaders, ActiveAttributes, ActiveAttributeMaxLength, ActiveUniforms, ActiveUniformMaxLength.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested object parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static unsafe void GetProgram(UInt32 program, OpenTK.Graphics.ES20.All pname, [OutAttribute] Int32* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(192);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.GetProgramParameterName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a parameter from a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the object parameter. Accepted symbolic names are DeleteStatus, LinkStatus, ValidateStatus, InfoLogLength, AttachedShaders, ActiveAttributes, ActiveAttributeMaxLength, ActiveUniforms, ActiveUniformMaxLength.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested object parameter.
        /// </param>
        [CLSCompliant(false)]
        public static void GetProgram(UInt32 program, OpenTK.Graphics.ES20.GetProgramParameterName pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(192);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.GetProgramParameterName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a parameter from a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the object parameter. Accepted symbolic names are DeleteStatus, LinkStatus, ValidateStatus, InfoLogLength, AttachedShaders, ActiveAttributes, ActiveAttributeMaxLength, ActiveUniforms, ActiveUniformMaxLength.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested object parameter.
        /// </param>
        [CLSCompliant(false)]
        public static void GetProgram(UInt32 program, OpenTK.Graphics.ES20.GetProgramParameterName pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("params_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(192);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.GetProgramParameterName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a parameter from a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the object parameter. Accepted symbolic names are DeleteStatus, LinkStatus, ValidateStatus, InfoLogLength, AttachedShaders, ActiveAttributes, ActiveAttributeMaxLength, ActiveUniforms, ActiveUniformMaxLength.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested object parameter.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void GetProgram(UInt32 program, OpenTK.Graphics.ES20.GetProgramParameterName pname, [OutAttribute] Int32* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(192);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.GetProgramParameterName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a parameter from a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the object parameter. Accepted symbolic names are DeleteStatus, LinkStatus, ValidateStatus, InfoLogLength, AttachedShaders, ActiveAttributes, ActiveAttributeMaxLength, ActiveUniforms, ActiveUniformMaxLength.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested object parameter.
        /// </param>
        [Obsolete("Use GetProgramParameterName overload instead")]
        [CLSCompliant(false)]
        public static void GetProgram(UInt32 program, OpenTK.Graphics.ES20.ProgramParameter pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(192);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.GetProgramParameterName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a parameter from a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the object parameter. Accepted symbolic names are DeleteStatus, LinkStatus, ValidateStatus, InfoLogLength, AttachedShaders, ActiveAttributes, ActiveAttributeMaxLength, ActiveUniforms, ActiveUniformMaxLength.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested object parameter.
        /// </param>
        [Obsolete("Use GetProgramParameterName overload instead")]
        [CLSCompliant(false)]
        public static void GetProgram(UInt32 program, OpenTK.Graphics.ES20.ProgramParameter pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("params_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(192);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.GetProgramParameterName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a parameter from a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the object parameter. Accepted symbolic names are DeleteStatus, LinkStatus, ValidateStatus, InfoLogLength, AttachedShaders, ActiveAttributes, ActiveAttributeMaxLength, ActiveUniforms, ActiveUniformMaxLength.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested object parameter.
        /// </param>
        [Obsolete("Use GetProgramParameterName overload instead")]
        [CLSCompliant(false)]
        public static unsafe void GetProgram(UInt32 program, OpenTK.Graphics.ES20.ProgramParameter pname, [OutAttribute] Int32* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(192);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.GetProgramParameterName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return parameters of a renderbuffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target renderbuffer object. The symbolic constant must be Renderbuffer.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a renderbuffer object parameter. Accepted values are RenderbufferWidth, RenderbufferHeight, RenderbufferInternalFormat, RenderbufferRedSize, RenderbufferGreenSize, RenderbufferBlueSize, RenderbufferAlphaSize, RenderbufferDepthSize, or RenderbufferStencilSize.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetRenderbufferParameter(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(200);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.RenderbufferTarget), typeof(OpenTK.Graphics.ES20.RenderbufferParameterName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return parameters of a renderbuffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target renderbuffer object. The symbolic constant must be Renderbuffer.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a renderbuffer object parameter. Accepted values are RenderbufferWidth, RenderbufferHeight, RenderbufferInternalFormat, RenderbufferRedSize, RenderbufferGreenSize, RenderbufferBlueSize, RenderbufferAlphaSize, RenderbufferDepthSize, or RenderbufferStencilSize.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetRenderbufferParameter(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("params_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(200);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.RenderbufferTarget), typeof(OpenTK.Graphics.ES20.RenderbufferParameterName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return parameters of a renderbuffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target renderbuffer object. The symbolic constant must be Renderbuffer.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a renderbuffer object parameter. Accepted values are RenderbufferWidth, RenderbufferHeight, RenderbufferInternalFormat, RenderbufferRedSize, RenderbufferGreenSize, RenderbufferBlueSize, RenderbufferAlphaSize, RenderbufferDepthSize, or RenderbufferStencilSize.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static unsafe void GetRenderbufferParameter(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All pname, [OutAttribute] Int32* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(200);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.RenderbufferTarget), typeof(OpenTK.Graphics.ES20.RenderbufferParameterName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return parameters of a renderbuffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target renderbuffer object. The symbolic constant must be Renderbuffer.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a renderbuffer object parameter. Accepted values are RenderbufferWidth, RenderbufferHeight, RenderbufferInternalFormat, RenderbufferRedSize, RenderbufferGreenSize, RenderbufferBlueSize, RenderbufferAlphaSize, RenderbufferDepthSize, or RenderbufferStencilSize.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested parameter.
        /// </param>
        [CLSCompliant(false)]
        public static void GetRenderbufferParameter(OpenTK.Graphics.ES20.RenderbufferTarget target, OpenTK.Graphics.ES20.RenderbufferParameterName pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(200);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.RenderbufferTarget), typeof(OpenTK.Graphics.ES20.RenderbufferParameterName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return parameters of a renderbuffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target renderbuffer object. The symbolic constant must be Renderbuffer.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a renderbuffer object parameter. Accepted values are RenderbufferWidth, RenderbufferHeight, RenderbufferInternalFormat, RenderbufferRedSize, RenderbufferGreenSize, RenderbufferBlueSize, RenderbufferAlphaSize, RenderbufferDepthSize, or RenderbufferStencilSize.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested parameter.
        /// </param>
        [CLSCompliant(false)]
        public static void GetRenderbufferParameter(OpenTK.Graphics.ES20.RenderbufferTarget target, OpenTK.Graphics.ES20.RenderbufferParameterName pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("params_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(200);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.RenderbufferTarget), typeof(OpenTK.Graphics.ES20.RenderbufferParameterName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return parameters of a renderbuffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target renderbuffer object. The symbolic constant must be Renderbuffer.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a renderbuffer object parameter. Accepted values are RenderbufferWidth, RenderbufferHeight, RenderbufferInternalFormat, RenderbufferRedSize, RenderbufferGreenSize, RenderbufferBlueSize, RenderbufferAlphaSize, RenderbufferDepthSize, or RenderbufferStencilSize.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested parameter.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void GetRenderbufferParameter(OpenTK.Graphics.ES20.RenderbufferTarget target, OpenTK.Graphics.ES20.RenderbufferParameterName pname, [OutAttribute] Int32* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(200);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.RenderbufferTarget), typeof(OpenTK.Graphics.ES20.RenderbufferParameterName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the information log for a shader object
        /// </summary>
        /// <param name="shader"> 
        /// Specifies the shader object whose information log is to be queried.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </param>
        /// <param name="infoLog">[length: bufSize] 
        /// Specifies an array of characters that is used to return the information log.
        /// </param>
        [CLSCompliant(false)]
        public static void GetShaderInfoLog(Int32 shader, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder infoLog)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("length_pinned");
                    IntPtr infoLog_sb_ptr = IntPtr.Zero;
                    try
                    {
                        infoLog_sb_ptr = Marshal.AllocHGlobal(infoLog.Capacity + 1);
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("length_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(infoLog_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(203);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                        MarshalPtrToStringBuilder(infoLog_sb_ptr, infoLog);
                    } finally {
                        Marshal.FreeHGlobal(infoLog_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the information log for a shader object
        /// </summary>
        /// <param name="shader"> 
        /// Specifies the shader object whose information log is to be queried.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </param>
        /// <param name="infoLog">[length: bufSize] 
        /// Specifies an array of characters that is used to return the information log.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void GetShaderInfoLog(Int32 shader, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder infoLog)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    IntPtr infoLog_sb_ptr = IntPtr.Zero;
                    try
                    {
                        infoLog_sb_ptr = Marshal.AllocHGlobal(infoLog.Capacity + 1);
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(infoLog_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(203);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                        MarshalPtrToStringBuilder(infoLog_sb_ptr, infoLog);
                    } finally {
                        Marshal.FreeHGlobal(infoLog_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the information log for a shader object
        /// </summary>
        /// <param name="shader"> 
        /// Specifies the shader object whose information log is to be queried.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </param>
        /// <param name="infoLog">[length: bufSize] 
        /// Specifies an array of characters that is used to return the information log.
        /// </param>
        [CLSCompliant(false)]
        public static void GetShaderInfoLog(UInt32 shader, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder infoLog)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("length_pinned");
                    IntPtr infoLog_sb_ptr = IntPtr.Zero;
                    try
                    {
                        infoLog_sb_ptr = Marshal.AllocHGlobal(infoLog.Capacity + 1);
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("length_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(infoLog_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(203);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                        MarshalPtrToStringBuilder(infoLog_sb_ptr, infoLog);
                    } finally {
                        Marshal.FreeHGlobal(infoLog_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the information log for a shader object
        /// </summary>
        /// <param name="shader"> 
        /// Specifies the shader object whose information log is to be queried.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </param>
        /// <param name="infoLog">[length: bufSize] 
        /// Specifies an array of characters that is used to return the information log.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void GetShaderInfoLog(UInt32 shader, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder infoLog)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    IntPtr infoLog_sb_ptr = IntPtr.Zero;
                    try
                    {
                        infoLog_sb_ptr = Marshal.AllocHGlobal(infoLog.Capacity + 1);
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(infoLog_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(203);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                        MarshalPtrToStringBuilder(infoLog_sb_ptr, infoLog);
                    } finally {
                        Marshal.FreeHGlobal(infoLog_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a parameter from a shader object
        /// </summary>
        /// <param name="shader"> 
        /// Specifies the shader object to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the object parameter. Accepted symbolic names are ShaderType, DeleteStatus, CompileStatus, InfoLogLength, ShaderSourceLength.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested object parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetShader(Int32 shader, OpenTK.Graphics.ES20.All pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(204);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.ShaderParameter), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a parameter from a shader object
        /// </summary>
        /// <param name="shader"> 
        /// Specifies the shader object to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the object parameter. Accepted symbolic names are ShaderType, DeleteStatus, CompileStatus, InfoLogLength, ShaderSourceLength.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested object parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetShader(Int32 shader, OpenTK.Graphics.ES20.All pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("params_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(204);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.ShaderParameter), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a parameter from a shader object
        /// </summary>
        /// <param name="shader"> 
        /// Specifies the shader object to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the object parameter. Accepted symbolic names are ShaderType, DeleteStatus, CompileStatus, InfoLogLength, ShaderSourceLength.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested object parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static unsafe void GetShader(Int32 shader, OpenTK.Graphics.ES20.All pname, [OutAttribute] Int32* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(204);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.ShaderParameter), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a parameter from a shader object
        /// </summary>
        /// <param name="shader"> 
        /// Specifies the shader object to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the object parameter. Accepted symbolic names are ShaderType, DeleteStatus, CompileStatus, InfoLogLength, ShaderSourceLength.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested object parameter.
        /// </param>
        [CLSCompliant(false)]
        public static void GetShader(Int32 shader, OpenTK.Graphics.ES20.ShaderParameter pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(204);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.ShaderParameter), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a parameter from a shader object
        /// </summary>
        /// <param name="shader"> 
        /// Specifies the shader object to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the object parameter. Accepted symbolic names are ShaderType, DeleteStatus, CompileStatus, InfoLogLength, ShaderSourceLength.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested object parameter.
        /// </param>
        [CLSCompliant(false)]
        public static void GetShader(Int32 shader, OpenTK.Graphics.ES20.ShaderParameter pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("params_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(204);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.ShaderParameter), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a parameter from a shader object
        /// </summary>
        /// <param name="shader"> 
        /// Specifies the shader object to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the object parameter. Accepted symbolic names are ShaderType, DeleteStatus, CompileStatus, InfoLogLength, ShaderSourceLength.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested object parameter.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void GetShader(Int32 shader, OpenTK.Graphics.ES20.ShaderParameter pname, [OutAttribute] Int32* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(204);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.ShaderParameter), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a parameter from a shader object
        /// </summary>
        /// <param name="shader"> 
        /// Specifies the shader object to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the object parameter. Accepted symbolic names are ShaderType, DeleteStatus, CompileStatus, InfoLogLength, ShaderSourceLength.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested object parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetShader(UInt32 shader, OpenTK.Graphics.ES20.All pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(204);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.ShaderParameter), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a parameter from a shader object
        /// </summary>
        /// <param name="shader"> 
        /// Specifies the shader object to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the object parameter. Accepted symbolic names are ShaderType, DeleteStatus, CompileStatus, InfoLogLength, ShaderSourceLength.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested object parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetShader(UInt32 shader, OpenTK.Graphics.ES20.All pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("params_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(204);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.ShaderParameter), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a parameter from a shader object
        /// </summary>
        /// <param name="shader"> 
        /// Specifies the shader object to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the object parameter. Accepted symbolic names are ShaderType, DeleteStatus, CompileStatus, InfoLogLength, ShaderSourceLength.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested object parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static unsafe void GetShader(UInt32 shader, OpenTK.Graphics.ES20.All pname, [OutAttribute] Int32* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(204);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.ShaderParameter), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a parameter from a shader object
        /// </summary>
        /// <param name="shader"> 
        /// Specifies the shader object to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the object parameter. Accepted symbolic names are ShaderType, DeleteStatus, CompileStatus, InfoLogLength, ShaderSourceLength.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested object parameter.
        /// </param>
        [CLSCompliant(false)]
        public static void GetShader(UInt32 shader, OpenTK.Graphics.ES20.ShaderParameter pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(204);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.ShaderParameter), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a parameter from a shader object
        /// </summary>
        /// <param name="shader"> 
        /// Specifies the shader object to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the object parameter. Accepted symbolic names are ShaderType, DeleteStatus, CompileStatus, InfoLogLength, ShaderSourceLength.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested object parameter.
        /// </param>
        [CLSCompliant(false)]
        public static void GetShader(UInt32 shader, OpenTK.Graphics.ES20.ShaderParameter pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("params_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(204);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.ShaderParameter), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a parameter from a shader object
        /// </summary>
        /// <param name="shader"> 
        /// Specifies the shader object to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the object parameter. Accepted symbolic names are ShaderType, DeleteStatus, CompileStatus, InfoLogLength, ShaderSourceLength.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested object parameter.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void GetShader(UInt32 shader, OpenTK.Graphics.ES20.ShaderParameter pname, [OutAttribute] Int32* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(204);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.ShaderParameter), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the range and precision for different shader numeric formats
        /// </summary>
        /// <param name="shadertype"> 
        /// Specifies the type of shader to query. Must be either VertexShader or FragmentShader.
        /// </param>
        /// <param name="precisiontype"> 
        /// Specifies the numeric format to query, corresponding to a shader precision qualifier and variable type. Must be one of LowFloat, MediumFloat, HighFloat, LowInt, MediumInt, or HighInt.
        /// </param>
        /// <param name="range">[length: 2] 
        /// Specifies a pointer to the two-element array in which the log sub 2 of the minimum and maximum representable magnitudes of the format are returned.
        /// </param>
        /// <param name="precision">[length: 2] 
        /// Specifies a pointer to the location in which the log sub 2 of the precision of the format is returned.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetShaderPrecisionFormat(OpenTK.Graphics.ES20.All shadertype, OpenTK.Graphics.ES20.All precisiontype, [OutAttribute] Int32[] range, [OutAttribute] Int32[] precision)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "range_pinned");
                    if(range != null && range.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("range_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("range_pinned");
                    }
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "precision_pinned");
                    if(precision != null && precision.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("precision_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("precision_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("range_pinned");
                    Silk.Cil.LoadByName("precision_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(205);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.ShaderType), typeof(OpenTK.Graphics.ES20.ShaderPrecision), typeof(Int32*), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the range and precision for different shader numeric formats
        /// </summary>
        /// <param name="shadertype"> 
        /// Specifies the type of shader to query. Must be either VertexShader or FragmentShader.
        /// </param>
        /// <param name="precisiontype"> 
        /// Specifies the numeric format to query, corresponding to a shader precision qualifier and variable type. Must be one of LowFloat, MediumFloat, HighFloat, LowInt, MediumInt, or HighInt.
        /// </param>
        /// <param name="range">[length: 2] 
        /// Specifies a pointer to the two-element array in which the log sub 2 of the minimum and maximum representable magnitudes of the format are returned.
        /// </param>
        /// <param name="precision">[length: 2] 
        /// Specifies a pointer to the location in which the log sub 2 of the precision of the format is returned.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetShaderPrecisionFormat(OpenTK.Graphics.ES20.All shadertype, OpenTK.Graphics.ES20.All precisiontype, [OutAttribute] out Int32 range, [OutAttribute] out Int32 precision)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "range_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("range_pinned");
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "precision_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.StoreByName("precision_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("range_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.LoadByName("precision_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(205);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.ShaderType), typeof(OpenTK.Graphics.ES20.ShaderPrecision), typeof(Int32*), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the range and precision for different shader numeric formats
        /// </summary>
        /// <param name="shadertype"> 
        /// Specifies the type of shader to query. Must be either VertexShader or FragmentShader.
        /// </param>
        /// <param name="precisiontype"> 
        /// Specifies the numeric format to query, corresponding to a shader precision qualifier and variable type. Must be one of LowFloat, MediumFloat, HighFloat, LowInt, MediumInt, or HighInt.
        /// </param>
        /// <param name="range">[length: 2] 
        /// Specifies a pointer to the two-element array in which the log sub 2 of the minimum and maximum representable magnitudes of the format are returned.
        /// </param>
        /// <param name="precision">[length: 2] 
        /// Specifies a pointer to the location in which the log sub 2 of the precision of the format is returned.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static unsafe void GetShaderPrecisionFormat(OpenTK.Graphics.ES20.All shadertype, OpenTK.Graphics.ES20.All precisiontype, [OutAttribute] Int32* range, [OutAttribute] Int32* precision)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(205);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.ShaderType), typeof(OpenTK.Graphics.ES20.ShaderPrecision), typeof(Int32*), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the range and precision for different shader numeric formats
        /// </summary>
        /// <param name="shadertype"> 
        /// Specifies the type of shader to query. Must be either VertexShader or FragmentShader.
        /// </param>
        /// <param name="precisiontype"> 
        /// Specifies the numeric format to query, corresponding to a shader precision qualifier and variable type. Must be one of LowFloat, MediumFloat, HighFloat, LowInt, MediumInt, or HighInt.
        /// </param>
        /// <param name="range">[length: 2] 
        /// Specifies a pointer to the two-element array in which the log sub 2 of the minimum and maximum representable magnitudes of the format are returned.
        /// </param>
        /// <param name="precision">[length: 2] 
        /// Specifies a pointer to the location in which the log sub 2 of the precision of the format is returned.
        /// </param>
        [CLSCompliant(false)]
        public static void GetShaderPrecisionFormat(OpenTK.Graphics.ES20.ShaderType shadertype, OpenTK.Graphics.ES20.ShaderPrecision precisiontype, [OutAttribute] Int32[] range, [OutAttribute] Int32[] precision)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "range_pinned");
                    if(range != null && range.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("range_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("range_pinned");
                    }
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "precision_pinned");
                    if(precision != null && precision.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("precision_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("precision_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("range_pinned");
                    Silk.Cil.LoadByName("precision_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(205);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.ShaderType), typeof(OpenTK.Graphics.ES20.ShaderPrecision), typeof(Int32*), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the range and precision for different shader numeric formats
        /// </summary>
        /// <param name="shadertype"> 
        /// Specifies the type of shader to query. Must be either VertexShader or FragmentShader.
        /// </param>
        /// <param name="precisiontype"> 
        /// Specifies the numeric format to query, corresponding to a shader precision qualifier and variable type. Must be one of LowFloat, MediumFloat, HighFloat, LowInt, MediumInt, or HighInt.
        /// </param>
        /// <param name="range">[length: 2] 
        /// Specifies a pointer to the two-element array in which the log sub 2 of the minimum and maximum representable magnitudes of the format are returned.
        /// </param>
        /// <param name="precision">[length: 2] 
        /// Specifies a pointer to the location in which the log sub 2 of the precision of the format is returned.
        /// </param>
        [CLSCompliant(false)]
        public static void GetShaderPrecisionFormat(OpenTK.Graphics.ES20.ShaderType shadertype, OpenTK.Graphics.ES20.ShaderPrecision precisiontype, [OutAttribute] out Int32 range, [OutAttribute] out Int32 precision)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "range_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("range_pinned");
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "precision_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.StoreByName("precision_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("range_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.LoadByName("precision_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(205);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.ShaderType), typeof(OpenTK.Graphics.ES20.ShaderPrecision), typeof(Int32*), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the range and precision for different shader numeric formats
        /// </summary>
        /// <param name="shadertype"> 
        /// Specifies the type of shader to query. Must be either VertexShader or FragmentShader.
        /// </param>
        /// <param name="precisiontype"> 
        /// Specifies the numeric format to query, corresponding to a shader precision qualifier and variable type. Must be one of LowFloat, MediumFloat, HighFloat, LowInt, MediumInt, or HighInt.
        /// </param>
        /// <param name="range">[length: 2] 
        /// Specifies a pointer to the two-element array in which the log sub 2 of the minimum and maximum representable magnitudes of the format are returned.
        /// </param>
        /// <param name="precision">[length: 2] 
        /// Specifies a pointer to the location in which the log sub 2 of the precision of the format is returned.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void GetShaderPrecisionFormat(OpenTK.Graphics.ES20.ShaderType shadertype, OpenTK.Graphics.ES20.ShaderPrecision precisiontype, [OutAttribute] Int32* range, [OutAttribute] Int32* precision)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(205);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.ShaderType), typeof(OpenTK.Graphics.ES20.ShaderPrecision), typeof(Int32*), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the source code string from a shader object
        /// </summary>
        /// <param name="shader"> 
        /// Specifies the shader object to be queried.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the size of the character buffer for storing the returned source code string.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Returns the length of the string returned in source (excluding the null terminator).
        /// </param>
        /// <param name="source">[length: bufSize] 
        /// Specifies an array of characters that is used to return the source code string.
        /// </param>
        [CLSCompliant(false)]
        public static void GetShaderSource(Int32 shader, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder source)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("length_pinned");
                    IntPtr source_sb_ptr = IntPtr.Zero;
                    try
                    {
                        source_sb_ptr = Marshal.AllocHGlobal(source.Capacity + 1);
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("length_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(source_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(206);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                        MarshalPtrToStringBuilder(source_sb_ptr, source);
                    } finally {
                        Marshal.FreeHGlobal(source_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the source code string from a shader object
        /// </summary>
        /// <param name="shader"> 
        /// Specifies the shader object to be queried.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the size of the character buffer for storing the returned source code string.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Returns the length of the string returned in source (excluding the null terminator).
        /// </param>
        /// <param name="source">[length: bufSize] 
        /// Specifies an array of characters that is used to return the source code string.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void GetShaderSource(Int32 shader, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder source)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    IntPtr source_sb_ptr = IntPtr.Zero;
                    try
                    {
                        source_sb_ptr = Marshal.AllocHGlobal(source.Capacity + 1);
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(source_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(206);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                        MarshalPtrToStringBuilder(source_sb_ptr, source);
                    } finally {
                        Marshal.FreeHGlobal(source_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the source code string from a shader object
        /// </summary>
        /// <param name="shader"> 
        /// Specifies the shader object to be queried.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the size of the character buffer for storing the returned source code string.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Returns the length of the string returned in source (excluding the null terminator).
        /// </param>
        /// <param name="source">[length: bufSize] 
        /// Specifies an array of characters that is used to return the source code string.
        /// </param>
        [CLSCompliant(false)]
        public static void GetShaderSource(UInt32 shader, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder source)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("length_pinned");
                    IntPtr source_sb_ptr = IntPtr.Zero;
                    try
                    {
                        source_sb_ptr = Marshal.AllocHGlobal(source.Capacity + 1);
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("length_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(source_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(206);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                        MarshalPtrToStringBuilder(source_sb_ptr, source);
                    } finally {
                        Marshal.FreeHGlobal(source_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the source code string from a shader object
        /// </summary>
        /// <param name="shader"> 
        /// Specifies the shader object to be queried.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the size of the character buffer for storing the returned source code string.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Returns the length of the string returned in source (excluding the null terminator).
        /// </param>
        /// <param name="source">[length: bufSize] 
        /// Specifies an array of characters that is used to return the source code string.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void GetShaderSource(UInt32 shader, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder source)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    IntPtr source_sb_ptr = IntPtr.Zero;
                    try
                    {
                        source_sb_ptr = Marshal.AllocHGlobal(source.Capacity + 1);
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(source_sb_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(206);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                        MarshalPtrToStringBuilder(source_sb_ptr, source);
                    } finally {
                        Marshal.FreeHGlobal(source_sb_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a string describing the current GL connection
        /// </summary>
        /// <param name="name"> 
        /// Specifies a symbolic constant, one of Vendor, Renderer, Version, ShadingLanguageVersion, or Extensions.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static String GetString(OpenTK.Graphics.ES20.All name)
        {
            unsafe
            {
                String __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(207);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(IntPtr), typeof(OpenTK.Graphics.ES20.StringName));
                    Silk.Cil.Load(new string((sbyte*)((void*)Silk.Cil.Peek<IntPtr>())));
                    Silk.Cil.Store(out __return_result);
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a string describing the current GL connection
        /// </summary>
        /// <param name="name"> 
        /// Specifies a symbolic constant, one of Vendor, Renderer, Version, ShadingLanguageVersion, or Extensions.
        /// </param>
        public static String GetString(OpenTK.Graphics.ES20.StringName name)
        {
            unsafe
            {
                String __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(207);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(IntPtr), typeof(OpenTK.Graphics.ES20.StringName));
                    Silk.Cil.Load(new string((sbyte*)((void*)Silk.Cil.Peek<IntPtr>())));
                    Silk.Cil.Store(out __return_result);
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target"> 
        /// Specifies the symbolic name of the target texture of the active texture unit. Texture2D and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a texture parameter. TextureMagFilter, TextureMinFilter, TextureWrapS, and TextureWrapT are accepted.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the texture parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetTexParameter(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All pname, [OutAttribute] Single[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Single");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(209);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget), typeof(OpenTK.Graphics.ES20.GetTextureParameterName), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target"> 
        /// Specifies the symbolic name of the target texture of the active texture unit. Texture2D and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a texture parameter. TextureMagFilter, TextureMinFilter, TextureWrapS, and TextureWrapT are accepted.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the texture parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetTexParameter(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All pname, [OutAttribute] out Single @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("params_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(209);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget), typeof(OpenTK.Graphics.ES20.GetTextureParameterName), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target"> 
        /// Specifies the symbolic name of the target texture of the active texture unit. Texture2D and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a texture parameter. TextureMagFilter, TextureMinFilter, TextureWrapS, and TextureWrapT are accepted.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the texture parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static unsafe void GetTexParameter(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All pname, [OutAttribute] Single* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(209);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget), typeof(OpenTK.Graphics.ES20.GetTextureParameterName), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target"> 
        /// Specifies the symbolic name of the target texture of the active texture unit. Texture2D and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a texture parameter. TextureMagFilter, TextureMinFilter, TextureWrapS, and TextureWrapT are accepted.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the texture parameter.
        /// </param>
        [Obsolete("Use GetTextureParameterName overload instead")]
        [CLSCompliant(false)]
        public static void GetTexParameter(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.GetTextureParameter pname, [OutAttribute] Single[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Single");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(209);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget), typeof(OpenTK.Graphics.ES20.GetTextureParameterName), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target"> 
        /// Specifies the symbolic name of the target texture of the active texture unit. Texture2D and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a texture parameter. TextureMagFilter, TextureMinFilter, TextureWrapS, and TextureWrapT are accepted.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the texture parameter.
        /// </param>
        [Obsolete("Use GetTextureParameterName overload instead")]
        [CLSCompliant(false)]
        public static void GetTexParameter(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.GetTextureParameter pname, [OutAttribute] out Single @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("params_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(209);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget), typeof(OpenTK.Graphics.ES20.GetTextureParameterName), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target"> 
        /// Specifies the symbolic name of the target texture of the active texture unit. Texture2D and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a texture parameter. TextureMagFilter, TextureMinFilter, TextureWrapS, and TextureWrapT are accepted.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the texture parameter.
        /// </param>
        [Obsolete("Use GetTextureParameterName overload instead")]
        [CLSCompliant(false)]
        public static unsafe void GetTexParameter(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.GetTextureParameter pname, [OutAttribute] Single* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(209);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget), typeof(OpenTK.Graphics.ES20.GetTextureParameterName), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target"> 
        /// Specifies the symbolic name of the target texture of the active texture unit. Texture2D and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a texture parameter. TextureMagFilter, TextureMinFilter, TextureWrapS, and TextureWrapT are accepted.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the texture parameter.
        /// </param>
        [CLSCompliant(false)]
        public static void GetTexParameter(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.GetTextureParameterName pname, [OutAttribute] Single[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Single");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(209);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget), typeof(OpenTK.Graphics.ES20.GetTextureParameterName), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target"> 
        /// Specifies the symbolic name of the target texture of the active texture unit. Texture2D and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a texture parameter. TextureMagFilter, TextureMinFilter, TextureWrapS, and TextureWrapT are accepted.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the texture parameter.
        /// </param>
        [CLSCompliant(false)]
        public static void GetTexParameter(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.GetTextureParameterName pname, [OutAttribute] out Single @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("params_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(209);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget), typeof(OpenTK.Graphics.ES20.GetTextureParameterName), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target"> 
        /// Specifies the symbolic name of the target texture of the active texture unit. Texture2D and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a texture parameter. TextureMagFilter, TextureMinFilter, TextureWrapS, and TextureWrapT are accepted.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the texture parameter.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void GetTexParameter(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.GetTextureParameterName pname, [OutAttribute] Single* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(209);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget), typeof(OpenTK.Graphics.ES20.GetTextureParameterName), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target"> 
        /// Specifies the symbolic name of the target texture of the active texture unit. Texture2D and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a texture parameter. TextureMagFilter, TextureMinFilter, TextureWrapS, and TextureWrapT are accepted.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the texture parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetTexParameter(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(212);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget), typeof(OpenTK.Graphics.ES20.GetTextureParameterName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target"> 
        /// Specifies the symbolic name of the target texture of the active texture unit. Texture2D and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a texture parameter. TextureMagFilter, TextureMinFilter, TextureWrapS, and TextureWrapT are accepted.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the texture parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetTexParameter(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("params_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(212);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget), typeof(OpenTK.Graphics.ES20.GetTextureParameterName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target"> 
        /// Specifies the symbolic name of the target texture of the active texture unit. Texture2D and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a texture parameter. TextureMagFilter, TextureMinFilter, TextureWrapS, and TextureWrapT are accepted.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the texture parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static unsafe void GetTexParameter(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All pname, [OutAttribute] Int32* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(212);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget), typeof(OpenTK.Graphics.ES20.GetTextureParameterName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target"> 
        /// Specifies the symbolic name of the target texture of the active texture unit. Texture2D and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a texture parameter. TextureMagFilter, TextureMinFilter, TextureWrapS, and TextureWrapT are accepted.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the texture parameter.
        /// </param>
        [Obsolete("Use GetTextureParameterName overload instead")]
        [CLSCompliant(false)]
        public static void GetTexParameter(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.GetTextureParameter pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(212);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget), typeof(OpenTK.Graphics.ES20.GetTextureParameterName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target"> 
        /// Specifies the symbolic name of the target texture of the active texture unit. Texture2D and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a texture parameter. TextureMagFilter, TextureMinFilter, TextureWrapS, and TextureWrapT are accepted.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the texture parameter.
        /// </param>
        [Obsolete("Use GetTextureParameterName overload instead")]
        [CLSCompliant(false)]
        public static void GetTexParameter(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.GetTextureParameter pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("params_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(212);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget), typeof(OpenTK.Graphics.ES20.GetTextureParameterName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target"> 
        /// Specifies the symbolic name of the target texture of the active texture unit. Texture2D and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a texture parameter. TextureMagFilter, TextureMinFilter, TextureWrapS, and TextureWrapT are accepted.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the texture parameter.
        /// </param>
        [Obsolete("Use GetTextureParameterName overload instead")]
        [CLSCompliant(false)]
        public static unsafe void GetTexParameter(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.GetTextureParameter pname, [OutAttribute] Int32* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(212);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget), typeof(OpenTK.Graphics.ES20.GetTextureParameterName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target"> 
        /// Specifies the symbolic name of the target texture of the active texture unit. Texture2D and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a texture parameter. TextureMagFilter, TextureMinFilter, TextureWrapS, and TextureWrapT are accepted.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the texture parameter.
        /// </param>
        [CLSCompliant(false)]
        public static void GetTexParameter(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.GetTextureParameterName pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(212);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget), typeof(OpenTK.Graphics.ES20.GetTextureParameterName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target"> 
        /// Specifies the symbolic name of the target texture of the active texture unit. Texture2D and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a texture parameter. TextureMagFilter, TextureMinFilter, TextureWrapS, and TextureWrapT are accepted.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the texture parameter.
        /// </param>
        [CLSCompliant(false)]
        public static void GetTexParameter(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.GetTextureParameterName pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("params_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(212);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget), typeof(OpenTK.Graphics.ES20.GetTextureParameterName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target"> 
        /// Specifies the symbolic name of the target texture of the active texture unit. Texture2D and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a texture parameter. TextureMagFilter, TextureMinFilter, TextureWrapS, and TextureWrapT are accepted.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the texture parameter.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void GetTexParameter(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.GetTextureParameterName pname, [OutAttribute] Int32* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(212);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget), typeof(OpenTK.Graphics.ES20.GetTextureParameterName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the value of a uniform variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">[length: program,location] 
        /// Returns the value of the specified uniform variable.
        /// </param>
        [CLSCompliant(false)]
        public static void GetUniform(Int32 program, Int32 location, [OutAttribute] Single[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Single");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(214);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the value of a uniform variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">[length: program,location] 
        /// Returns the value of the specified uniform variable.
        /// </param>
        [CLSCompliant(false)]
        public static void GetUniform(Int32 program, Int32 location, [OutAttribute] out Single @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("params_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(214);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the value of a uniform variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">[length: program,location] 
        /// Returns the value of the specified uniform variable.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void GetUniform(Int32 program, Int32 location, [OutAttribute] Single* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(214);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the value of a uniform variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">[length: program,location] 
        /// Returns the value of the specified uniform variable.
        /// </param>
        [CLSCompliant(false)]
        public static void GetUniform(UInt32 program, Int32 location, [OutAttribute] Single[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Single");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(214);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the value of a uniform variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">[length: program,location] 
        /// Returns the value of the specified uniform variable.
        /// </param>
        [CLSCompliant(false)]
        public static void GetUniform(UInt32 program, Int32 location, [OutAttribute] out Single @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("params_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(214);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the value of a uniform variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">[length: program,location] 
        /// Returns the value of the specified uniform variable.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void GetUniform(UInt32 program, Int32 location, [OutAttribute] Single* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(214);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the value of a uniform variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">[length: program,location] 
        /// Returns the value of the specified uniform variable.
        /// </param>
        [CLSCompliant(false)]
        public static void GetUniform(Int32 program, Int32 location, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(215);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the value of a uniform variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">[length: program,location] 
        /// Returns the value of the specified uniform variable.
        /// </param>
        [CLSCompliant(false)]
        public static void GetUniform(Int32 program, Int32 location, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("params_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(215);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the value of a uniform variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">[length: program,location] 
        /// Returns the value of the specified uniform variable.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void GetUniform(Int32 program, Int32 location, [OutAttribute] Int32* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(215);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the value of a uniform variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">[length: program,location] 
        /// Returns the value of the specified uniform variable.
        /// </param>
        [CLSCompliant(false)]
        public static void GetUniform(UInt32 program, Int32 location, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(215);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the value of a uniform variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">[length: program,location] 
        /// Returns the value of the specified uniform variable.
        /// </param>
        [CLSCompliant(false)]
        public static void GetUniform(UInt32 program, Int32 location, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("params_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(215);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the value of a uniform variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">[length: program,location] 
        /// Returns the value of the specified uniform variable.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void GetUniform(UInt32 program, Int32 location, [OutAttribute] Int32* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(215);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the location of a uniform variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="name"> 
        /// Points to a null terminated string containing the name of the uniform variable whose location is to be queried.
        /// </param>
        [CLSCompliant(false)]
        public static Int32 GetUniformLocation(Int32 program, String name)
        {
            unsafe
            {
                Int32 __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    IntPtr name_string_ptr = MarshalStringToPtr(name);
                    try {
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(name_string_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(216);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(Int32), typeof(UInt32), typeof(IntPtr));
                        Silk.Cil.Store(out __return_result);
                    } finally {
                        FreeStringPtr(name_string_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the location of a uniform variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="name"> 
        /// Points to a null terminated string containing the name of the uniform variable whose location is to be queried.
        /// </param>
        [CLSCompliant(false)]
        public static Int32 GetUniformLocation(UInt32 program, String name)
        {
            unsafe
            {
                Int32 __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    IntPtr name_string_ptr = MarshalStringToPtr(name);
                    try {
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(name_string_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(216);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(Int32), typeof(UInt32), typeof(IntPtr));
                        Silk.Cil.Store(out __return_result);
                    } finally {
                        FreeStringPtr(name_string_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4] 
        /// Returns the requested data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetVertexAttrib(Int32 index, OpenTK.Graphics.ES20.All pname, [OutAttribute] Single[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Single");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(217);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.VertexAttribParameter), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4] 
        /// Returns the requested data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetVertexAttrib(Int32 index, OpenTK.Graphics.ES20.All pname, [OutAttribute] out Single @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("params_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(217);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.VertexAttribParameter), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4] 
        /// Returns the requested data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static unsafe void GetVertexAttrib(Int32 index, OpenTK.Graphics.ES20.All pname, [OutAttribute] Single* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(217);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.VertexAttribParameter), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4] 
        /// Returns the requested data.
        /// </param>
        [CLSCompliant(false)]
        public static void GetVertexAttrib(Int32 index, OpenTK.Graphics.ES20.VertexAttribParameter pname, [OutAttribute] Single[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Single");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(217);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.VertexAttribParameter), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4] 
        /// Returns the requested data.
        /// </param>
        [CLSCompliant(false)]
        public static void GetVertexAttrib(Int32 index, OpenTK.Graphics.ES20.VertexAttribParameter pname, [OutAttribute] out Single @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("params_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(217);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.VertexAttribParameter), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4] 
        /// Returns the requested data.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void GetVertexAttrib(Int32 index, OpenTK.Graphics.ES20.VertexAttribParameter pname, [OutAttribute] Single* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(217);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.VertexAttribParameter), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4] 
        /// Returns the requested data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetVertexAttrib(UInt32 index, OpenTK.Graphics.ES20.All pname, [OutAttribute] Single[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Single");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(217);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.VertexAttribParameter), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4] 
        /// Returns the requested data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetVertexAttrib(UInt32 index, OpenTK.Graphics.ES20.All pname, [OutAttribute] out Single @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("params_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(217);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.VertexAttribParameter), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4] 
        /// Returns the requested data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static unsafe void GetVertexAttrib(UInt32 index, OpenTK.Graphics.ES20.All pname, [OutAttribute] Single* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(217);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.VertexAttribParameter), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4] 
        /// Returns the requested data.
        /// </param>
        [CLSCompliant(false)]
        public static void GetVertexAttrib(UInt32 index, OpenTK.Graphics.ES20.VertexAttribParameter pname, [OutAttribute] Single[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Single");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(217);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.VertexAttribParameter), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4] 
        /// Returns the requested data.
        /// </param>
        [CLSCompliant(false)]
        public static void GetVertexAttrib(UInt32 index, OpenTK.Graphics.ES20.VertexAttribParameter pname, [OutAttribute] out Single @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("params_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(217);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.VertexAttribParameter), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4] 
        /// Returns the requested data.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void GetVertexAttrib(UInt32 index, OpenTK.Graphics.ES20.VertexAttribParameter pname, [OutAttribute] Single* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(217);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.VertexAttribParameter), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4] 
        /// Returns the requested data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetVertexAttrib(Int32 index, OpenTK.Graphics.ES20.All pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(218);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.VertexAttribParameter), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4] 
        /// Returns the requested data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetVertexAttrib(Int32 index, OpenTK.Graphics.ES20.All pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("params_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(218);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.VertexAttribParameter), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4] 
        /// Returns the requested data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static unsafe void GetVertexAttrib(Int32 index, OpenTK.Graphics.ES20.All pname, [OutAttribute] Int32* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(218);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.VertexAttribParameter), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4] 
        /// Returns the requested data.
        /// </param>
        [CLSCompliant(false)]
        public static void GetVertexAttrib(Int32 index, OpenTK.Graphics.ES20.VertexAttribParameter pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(218);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.VertexAttribParameter), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4] 
        /// Returns the requested data.
        /// </param>
        [CLSCompliant(false)]
        public static void GetVertexAttrib(Int32 index, OpenTK.Graphics.ES20.VertexAttribParameter pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("params_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(218);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.VertexAttribParameter), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4] 
        /// Returns the requested data.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void GetVertexAttrib(Int32 index, OpenTK.Graphics.ES20.VertexAttribParameter pname, [OutAttribute] Int32* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(218);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.VertexAttribParameter), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4] 
        /// Returns the requested data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetVertexAttrib(UInt32 index, OpenTK.Graphics.ES20.All pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(218);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.VertexAttribParameter), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4] 
        /// Returns the requested data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetVertexAttrib(UInt32 index, OpenTK.Graphics.ES20.All pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("params_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(218);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.VertexAttribParameter), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4] 
        /// Returns the requested data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static unsafe void GetVertexAttrib(UInt32 index, OpenTK.Graphics.ES20.All pname, [OutAttribute] Int32* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(218);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.VertexAttribParameter), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4] 
        /// Returns the requested data.
        /// </param>
        [CLSCompliant(false)]
        public static void GetVertexAttrib(UInt32 index, OpenTK.Graphics.ES20.VertexAttribParameter pname, [OutAttribute] Int32[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(218);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.VertexAttribParameter), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4] 
        /// Returns the requested data.
        /// </param>
        [CLSCompliant(false)]
        public static void GetVertexAttrib(UInt32 index, OpenTK.Graphics.ES20.VertexAttribParameter pname, [OutAttribute] out Int32 @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("params_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(218);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.VertexAttribParameter), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4] 
        /// Returns the requested data.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void GetVertexAttrib(UInt32 index, OpenTK.Graphics.ES20.VertexAttribParameter pname, [OutAttribute] Int32* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(218);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.VertexAttribParameter), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be VertexAttribArrayPointer.
        /// </param>
        /// <param name="pointer">[length: 1] 
        /// Returns the pointer value.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetVertexAttribPointer(Int32 index, OpenTK.Graphics.ES20.All pname, [OutAttribute] IntPtr pointer)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(219);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.VertexAttribPointerParameter), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be VertexAttribArrayPointer.
        /// </param>
        /// <param name="pointer">[length: 1] 
        /// Returns the pointer value.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetVertexAttribPointer<T2>(Int32 index, OpenTK.Graphics.ES20.All pname, [InAttribute, OutAttribute] T2[] pointer)
            where T2 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T2& pinned", "pointer_pinned");
                    if(pointer != null && pointer.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T2");
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("pointer_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(219);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.VertexAttribPointerParameter), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be VertexAttribArrayPointer.
        /// </param>
        /// <param name="pointer">[length: 1] 
        /// Returns the pointer value.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetVertexAttribPointer<T2>(Int32 index, OpenTK.Graphics.ES20.All pname, [InAttribute, OutAttribute] T2[,] pointer)
            where T2 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T2& pinned", "pointer_pinned");
                    if(pointer != null && pointer.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T2[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("pointer_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(219);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.VertexAttribPointerParameter), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be VertexAttribArrayPointer.
        /// </param>
        /// <param name="pointer">[length: 1] 
        /// Returns the pointer value.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetVertexAttribPointer<T2>(Int32 index, OpenTK.Graphics.ES20.All pname, [InAttribute, OutAttribute] T2[,,] pointer)
            where T2 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T2& pinned", "pointer_pinned");
                    if(pointer != null && pointer.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T2[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("pointer_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(219);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.VertexAttribPointerParameter), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be VertexAttribArrayPointer.
        /// </param>
        /// <param name="pointer">[length: 1] 
        /// Returns the pointer value.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetVertexAttribPointer<T2>(Int32 index, OpenTK.Graphics.ES20.All pname, [InAttribute, OutAttribute] ref T2 pointer)
            where T2 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T2& pinned", "pointer_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("pointer_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("pointer_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(219);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.VertexAttribPointerParameter), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be VertexAttribArrayPointer.
        /// </param>
        /// <param name="pointer">[length: 1] 
        /// Returns the pointer value.
        /// </param>
        [CLSCompliant(false)]
        public static void GetVertexAttribPointer(Int32 index, OpenTK.Graphics.ES20.VertexAttribPointerParameter pname, [OutAttribute] IntPtr pointer)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(219);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.VertexAttribPointerParameter), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be VertexAttribArrayPointer.
        /// </param>
        /// <param name="pointer">[length: 1] 
        /// Returns the pointer value.
        /// </param>
        [CLSCompliant(false)]
        public static void GetVertexAttribPointer<T2>(Int32 index, OpenTK.Graphics.ES20.VertexAttribPointerParameter pname, [InAttribute, OutAttribute] T2[] pointer)
            where T2 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T2& pinned", "pointer_pinned");
                    if(pointer != null && pointer.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T2");
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("pointer_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(219);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.VertexAttribPointerParameter), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be VertexAttribArrayPointer.
        /// </param>
        /// <param name="pointer">[length: 1] 
        /// Returns the pointer value.
        /// </param>
        [CLSCompliant(false)]
        public static void GetVertexAttribPointer<T2>(Int32 index, OpenTK.Graphics.ES20.VertexAttribPointerParameter pname, [InAttribute, OutAttribute] T2[,] pointer)
            where T2 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T2& pinned", "pointer_pinned");
                    if(pointer != null && pointer.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T2[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("pointer_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(219);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.VertexAttribPointerParameter), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be VertexAttribArrayPointer.
        /// </param>
        /// <param name="pointer">[length: 1] 
        /// Returns the pointer value.
        /// </param>
        [CLSCompliant(false)]
        public static void GetVertexAttribPointer<T2>(Int32 index, OpenTK.Graphics.ES20.VertexAttribPointerParameter pname, [InAttribute, OutAttribute] T2[,,] pointer)
            where T2 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T2& pinned", "pointer_pinned");
                    if(pointer != null && pointer.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T2[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("pointer_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(219);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.VertexAttribPointerParameter), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be VertexAttribArrayPointer.
        /// </param>
        /// <param name="pointer">[length: 1] 
        /// Returns the pointer value.
        /// </param>
        [CLSCompliant(false)]
        public static void GetVertexAttribPointer<T2>(Int32 index, OpenTK.Graphics.ES20.VertexAttribPointerParameter pname, [InAttribute, OutAttribute] ref T2 pointer)
            where T2 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T2& pinned", "pointer_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("pointer_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("pointer_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(219);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.VertexAttribPointerParameter), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be VertexAttribArrayPointer.
        /// </param>
        /// <param name="pointer">[length: 1] 
        /// Returns the pointer value.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetVertexAttribPointer(UInt32 index, OpenTK.Graphics.ES20.All pname, [OutAttribute] IntPtr pointer)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(219);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.VertexAttribPointerParameter), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be VertexAttribArrayPointer.
        /// </param>
        /// <param name="pointer">[length: 1] 
        /// Returns the pointer value.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetVertexAttribPointer<T2>(UInt32 index, OpenTK.Graphics.ES20.All pname, [InAttribute, OutAttribute] T2[] pointer)
            where T2 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T2& pinned", "pointer_pinned");
                    if(pointer != null && pointer.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T2");
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("pointer_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(219);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.VertexAttribPointerParameter), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be VertexAttribArrayPointer.
        /// </param>
        /// <param name="pointer">[length: 1] 
        /// Returns the pointer value.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetVertexAttribPointer<T2>(UInt32 index, OpenTK.Graphics.ES20.All pname, [InAttribute, OutAttribute] T2[,] pointer)
            where T2 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T2& pinned", "pointer_pinned");
                    if(pointer != null && pointer.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T2[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("pointer_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(219);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.VertexAttribPointerParameter), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be VertexAttribArrayPointer.
        /// </param>
        /// <param name="pointer">[length: 1] 
        /// Returns the pointer value.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetVertexAttribPointer<T2>(UInt32 index, OpenTK.Graphics.ES20.All pname, [InAttribute, OutAttribute] T2[,,] pointer)
            where T2 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T2& pinned", "pointer_pinned");
                    if(pointer != null && pointer.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T2[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("pointer_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(219);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.VertexAttribPointerParameter), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be VertexAttribArrayPointer.
        /// </param>
        /// <param name="pointer">[length: 1] 
        /// Returns the pointer value.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void GetVertexAttribPointer<T2>(UInt32 index, OpenTK.Graphics.ES20.All pname, [InAttribute, OutAttribute] ref T2 pointer)
            where T2 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T2& pinned", "pointer_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("pointer_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("pointer_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(219);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.VertexAttribPointerParameter), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be VertexAttribArrayPointer.
        /// </param>
        /// <param name="pointer">[length: 1] 
        /// Returns the pointer value.
        /// </param>
        [CLSCompliant(false)]
        public static void GetVertexAttribPointer(UInt32 index, OpenTK.Graphics.ES20.VertexAttribPointerParameter pname, [OutAttribute] IntPtr pointer)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(219);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.VertexAttribPointerParameter), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be VertexAttribArrayPointer.
        /// </param>
        /// <param name="pointer">[length: 1] 
        /// Returns the pointer value.
        /// </param>
        [CLSCompliant(false)]
        public static void GetVertexAttribPointer<T2>(UInt32 index, OpenTK.Graphics.ES20.VertexAttribPointerParameter pname, [InAttribute, OutAttribute] T2[] pointer)
            where T2 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T2& pinned", "pointer_pinned");
                    if(pointer != null && pointer.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T2");
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("pointer_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(219);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.VertexAttribPointerParameter), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be VertexAttribArrayPointer.
        /// </param>
        /// <param name="pointer">[length: 1] 
        /// Returns the pointer value.
        /// </param>
        [CLSCompliant(false)]
        public static void GetVertexAttribPointer<T2>(UInt32 index, OpenTK.Graphics.ES20.VertexAttribPointerParameter pname, [InAttribute, OutAttribute] T2[,] pointer)
            where T2 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T2& pinned", "pointer_pinned");
                    if(pointer != null && pointer.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T2[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("pointer_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(219);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.VertexAttribPointerParameter), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be VertexAttribArrayPointer.
        /// </param>
        /// <param name="pointer">[length: 1] 
        /// Returns the pointer value.
        /// </param>
        [CLSCompliant(false)]
        public static void GetVertexAttribPointer<T2>(UInt32 index, OpenTK.Graphics.ES20.VertexAttribPointerParameter pname, [InAttribute, OutAttribute] T2[,,] pointer)
            where T2 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T2& pinned", "pointer_pinned");
                    if(pointer != null && pointer.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T2[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("pointer_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(219);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.VertexAttribPointerParameter), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be VertexAttribArrayPointer.
        /// </param>
        /// <param name="pointer">[length: 1] 
        /// Returns the pointer value.
        /// </param>
        [CLSCompliant(false)]
        public static void GetVertexAttribPointer<T2>(UInt32 index, OpenTK.Graphics.ES20.VertexAttribPointerParameter pname, [InAttribute, OutAttribute] ref T2 pointer)
            where T2 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T2& pinned", "pointer_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("pointer_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("pointer_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(219);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.VertexAttribPointerParameter), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify implementation-specific hints
        /// </summary>
        /// <param name="target"> 
        /// Specifies a symbolic constant indicating the behavior to be controlled. GenerateMipmapHint is accepted.
        /// </param>
        /// <param name="mode"> 
        /// Specifies a symbolic constant indicating the desired behavior. Fastest, Nicest, and DontCare are accepted.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void Hint(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All mode)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(220);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.HintTarget), typeof(OpenTK.Graphics.ES20.HintMode));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify implementation-specific hints
        /// </summary>
        /// <param name="target"> 
        /// Specifies a symbolic constant indicating the behavior to be controlled. GenerateMipmapHint is accepted.
        /// </param>
        /// <param name="mode"> 
        /// Specifies a symbolic constant indicating the desired behavior. Fastest, Nicest, and DontCare are accepted.
        /// </param>
        public static void Hint(OpenTK.Graphics.ES20.HintTarget target, OpenTK.Graphics.ES20.HintMode mode)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(220);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.HintTarget), typeof(OpenTK.Graphics.ES20.HintMode));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Determine if a name corresponds to a buffer object
        /// </summary>
        /// <param name="buffer"> 
        /// Specifies a value that may be the name of a buffer object.
        /// </param>
        [CLSCompliant(false)]
        public static bool IsBuffer(Int32 buffer)
        {
            unsafe
            {
                bool __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(222);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(byte), typeof(UInt32));
                    Silk.Cil.Store(out __return_result);
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Determine if a name corresponds to a buffer object
        /// </summary>
        /// <param name="buffer"> 
        /// Specifies a value that may be the name of a buffer object.
        /// </param>
        [CLSCompliant(false)]
        public static bool IsBuffer(UInt32 buffer)
        {
            unsafe
            {
                bool __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(222);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(byte), typeof(UInt32));
                    Silk.Cil.Store(out __return_result);
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Test whether a capability is enabled
        /// </summary>
        /// <param name="cap"> 
        /// Specifies a symbolic constant indicating a GL capability.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static bool IsEnabled(OpenTK.Graphics.ES20.All cap)
        {
            unsafe
            {
                bool __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(223);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(byte), typeof(OpenTK.Graphics.ES20.EnableCap));
                    Silk.Cil.Store(out __return_result);
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Test whether a capability is enabled
        /// </summary>
        /// <param name="cap"> 
        /// Specifies a symbolic constant indicating a GL capability.
        /// </param>
        public static bool IsEnabled(OpenTK.Graphics.ES20.EnableCap cap)
        {
            unsafe
            {
                bool __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(223);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(byte), typeof(OpenTK.Graphics.ES20.EnableCap));
                    Silk.Cil.Store(out __return_result);
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Determine if a name corresponds to a framebuffer object
        /// </summary>
        /// <param name="framebuffer"> 
        /// Specifies a value that may be the name of a framebuffer object.
        /// </param>
        [CLSCompliant(false)]
        public static bool IsFramebuffer(Int32 framebuffer)
        {
            unsafe
            {
                bool __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(226);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(byte), typeof(UInt32));
                    Silk.Cil.Store(out __return_result);
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Determine if a name corresponds to a framebuffer object
        /// </summary>
        /// <param name="framebuffer"> 
        /// Specifies a value that may be the name of a framebuffer object.
        /// </param>
        [CLSCompliant(false)]
        public static bool IsFramebuffer(UInt32 framebuffer)
        {
            unsafe
            {
                bool __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(226);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(byte), typeof(UInt32));
                    Silk.Cil.Store(out __return_result);
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Determine if a name corresponds to a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies a potential program object.
        /// </param>
        [CLSCompliant(false)]
        public static bool IsProgram(Int32 program)
        {
            unsafe
            {
                bool __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(227);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(byte), typeof(UInt32));
                    Silk.Cil.Store(out __return_result);
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Determine if a name corresponds to a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies a potential program object.
        /// </param>
        [CLSCompliant(false)]
        public static bool IsProgram(UInt32 program)
        {
            unsafe
            {
                bool __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(227);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(byte), typeof(UInt32));
                    Silk.Cil.Store(out __return_result);
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Determine if a name corresponds to a renderbuffer object
        /// </summary>
        /// <param name="renderbuffer"> 
        /// Specifies a value that may be the name of a renderbuffer object.
        /// </param>
        [CLSCompliant(false)]
        public static bool IsRenderbuffer(Int32 renderbuffer)
        {
            unsafe
            {
                bool __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(230);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(byte), typeof(UInt32));
                    Silk.Cil.Store(out __return_result);
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Determine if a name corresponds to a renderbuffer object
        /// </summary>
        /// <param name="renderbuffer"> 
        /// Specifies a value that may be the name of a renderbuffer object.
        /// </param>
        [CLSCompliant(false)]
        public static bool IsRenderbuffer(UInt32 renderbuffer)
        {
            unsafe
            {
                bool __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(230);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(byte), typeof(UInt32));
                    Silk.Cil.Store(out __return_result);
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Determine if a name corresponds to a shader object
        /// </summary>
        /// <param name="shader"> 
        /// Specifies a potential shader object.
        /// </param>
        [CLSCompliant(false)]
        public static bool IsShader(Int32 shader)
        {
            unsafe
            {
                bool __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(231);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(byte), typeof(UInt32));
                    Silk.Cil.Store(out __return_result);
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Determine if a name corresponds to a shader object
        /// </summary>
        /// <param name="shader"> 
        /// Specifies a potential shader object.
        /// </param>
        [CLSCompliant(false)]
        public static bool IsShader(UInt32 shader)
        {
            unsafe
            {
                bool __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(231);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(byte), typeof(UInt32));
                    Silk.Cil.Store(out __return_result);
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Determine if a name corresponds to a texture
        /// </summary>
        /// <param name="texture"> 
        /// Specifies a value that may be the name of a texture.
        /// </param>
        [CLSCompliant(false)]
        public static bool IsTexture(Int32 texture)
        {
            unsafe
            {
                bool __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(233);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(byte), typeof(UInt32));
                    Silk.Cil.Store(out __return_result);
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Determine if a name corresponds to a texture
        /// </summary>
        /// <param name="texture"> 
        /// Specifies a value that may be the name of a texture.
        /// </param>
        [CLSCompliant(false)]
        public static bool IsTexture(UInt32 texture)
        {
            unsafe
            {
                bool __return_result;
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(233);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(byte), typeof(UInt32));
                    Silk.Cil.Store(out __return_result);
                #if DEBUG
                }
                #endif
                Silk.Cil.Load(__return_result);
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the width of rasterized lines
        /// </summary>
        /// <param name="width"> 
        /// Specifies the width of rasterized lines. The initial value is 1.
        /// </param>
        public static void LineWidth(Single width)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(236);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Single));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Link a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the handle of the program object to be linked.
        /// </param>
        [CLSCompliant(false)]
        public static void LinkProgram(Int32 program)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(237);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Link a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the handle of the program object to be linked.
        /// </param>
        [CLSCompliant(false)]
        public static void LinkProgram(UInt32 program)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(237);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Label a named object identified within a namespace
        /// </summary>
        /// <param name="identifier"> 
        /// The namespace from which the name of the object is allocated.
        /// </param>
        /// <param name="name"> 
        /// The name of the object to label.
        /// </param>
        /// <param name="length"> 
        /// The length of the label to be used for the object.
        /// </param>
        /// <param name="label">[length: label,length] 
        /// The address of a string containing the label to assign to the object.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void ObjectLabel(OpenTK.Graphics.ES20.All identifier, Int32 name, Int32 length, String label)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    IntPtr label_string_ptr = MarshalStringToPtr(label);
                    try {
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(label_string_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(243);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.ObjectLabelIdentifier), typeof(UInt32), typeof(Int32), typeof(IntPtr));
                    } finally {
                        FreeStringPtr(label_string_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Label a named object identified within a namespace
        /// </summary>
        /// <param name="identifier"> 
        /// The namespace from which the name of the object is allocated.
        /// </param>
        /// <param name="name"> 
        /// The name of the object to label.
        /// </param>
        /// <param name="length"> 
        /// The length of the label to be used for the object.
        /// </param>
        /// <param name="label">[length: label,length] 
        /// The address of a string containing the label to assign to the object.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void ObjectLabel(OpenTK.Graphics.ES20.All identifier, UInt32 name, Int32 length, String label)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    IntPtr label_string_ptr = MarshalStringToPtr(label);
                    try {
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(label_string_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(243);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.ObjectLabelIdentifier), typeof(UInt32), typeof(Int32), typeof(IntPtr));
                    } finally {
                        FreeStringPtr(label_string_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Label a named object identified within a namespace
        /// </summary>
        /// <param name="identifier"> 
        /// The namespace from which the name of the object is allocated.
        /// </param>
        /// <param name="name"> 
        /// The name of the object to label.
        /// </param>
        /// <param name="length"> 
        /// The length of the label to be used for the object.
        /// </param>
        /// <param name="label">[length: label,length] 
        /// The address of a string containing the label to assign to the object.
        /// </param>
        [CLSCompliant(false)]
        public static void ObjectLabel(OpenTK.Graphics.ES20.ObjectLabelIdentifier identifier, Int32 name, Int32 length, String label)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    IntPtr label_string_ptr = MarshalStringToPtr(label);
                    try {
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(label_string_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(243);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.ObjectLabelIdentifier), typeof(UInt32), typeof(Int32), typeof(IntPtr));
                    } finally {
                        FreeStringPtr(label_string_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Label a named object identified within a namespace
        /// </summary>
        /// <param name="identifier"> 
        /// The namespace from which the name of the object is allocated.
        /// </param>
        /// <param name="name"> 
        /// The name of the object to label.
        /// </param>
        /// <param name="length"> 
        /// The length of the label to be used for the object.
        /// </param>
        /// <param name="label">[length: label,length] 
        /// The address of a string containing the label to assign to the object.
        /// </param>
        [CLSCompliant(false)]
        public static void ObjectLabel(OpenTK.Graphics.ES20.ObjectLabelIdentifier identifier, UInt32 name, Int32 length, String label)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    IntPtr label_string_ptr = MarshalStringToPtr(label);
                    try {
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(label_string_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(243);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.ObjectLabelIdentifier), typeof(UInt32), typeof(Int32), typeof(IntPtr));
                    } finally {
                        FreeStringPtr(label_string_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Label a a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr"> 
        /// A pointer identifying a sync object.
        /// </param>
        /// <param name="length"> 
        /// The length of the label to be used for the object.
        /// </param>
        /// <param name="label">[length: label,length] 
        /// The address of a string containing the label to assign to the object.
        /// </param>
        public static void ObjectPtrLabel(IntPtr ptr, Int32 length, String label)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    IntPtr label_string_ptr = MarshalStringToPtr(label);
                    try {
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(label_string_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(245);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(IntPtr), typeof(Int32), typeof(IntPtr));
                    } finally {
                        FreeStringPtr(label_string_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Label a a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr"> 
        /// A pointer identifying a sync object.
        /// </param>
        /// <param name="length"> 
        /// The length of the label to be used for the object.
        /// </param>
        /// <param name="label">[length: label,length] 
        /// The address of a string containing the label to assign to the object.
        /// </param>
        [CLSCompliant(false)]
        public static void ObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[] ptr, Int32 length, String label)
            where T0 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T0& pinned", "ptr_pinned");
                    if(ptr != null && ptr.Length != 0)
                    {
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T0");
                        Silk.Cil.StoreByName("ptr_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("ptr_pinned");
                    }
                    IntPtr label_string_ptr = MarshalStringToPtr(label);
                    try {
                        Silk.Cil.LoadByName("ptr_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(label_string_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(245);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(IntPtr), typeof(Int32), typeof(IntPtr));
                    } finally {
                        FreeStringPtr(label_string_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Label a a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr"> 
        /// A pointer identifying a sync object.
        /// </param>
        /// <param name="length"> 
        /// The length of the label to be used for the object.
        /// </param>
        /// <param name="label">[length: label,length] 
        /// The address of a string containing the label to assign to the object.
        /// </param>
        [CLSCompliant(false)]
        public static void ObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,] ptr, Int32 length, String label)
            where T0 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T0& pinned", "ptr_pinned");
                    if(ptr != null && ptr.Length != 0)
                    {
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T0[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("ptr_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("ptr_pinned");
                    }
                    IntPtr label_string_ptr = MarshalStringToPtr(label);
                    try {
                        Silk.Cil.LoadByName("ptr_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(label_string_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(245);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(IntPtr), typeof(Int32), typeof(IntPtr));
                    } finally {
                        FreeStringPtr(label_string_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Label a a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr"> 
        /// A pointer identifying a sync object.
        /// </param>
        /// <param name="length"> 
        /// The length of the label to be used for the object.
        /// </param>
        /// <param name="label">[length: label,length] 
        /// The address of a string containing the label to assign to the object.
        /// </param>
        [CLSCompliant(false)]
        public static void ObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,,] ptr, Int32 length, String label)
            where T0 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T0& pinned", "ptr_pinned");
                    if(ptr != null && ptr.Length != 0)
                    {
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T0[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("ptr_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("ptr_pinned");
                    }
                    IntPtr label_string_ptr = MarshalStringToPtr(label);
                    try {
                        Silk.Cil.LoadByName("ptr_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(label_string_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(245);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(IntPtr), typeof(Int32), typeof(IntPtr));
                    } finally {
                        FreeStringPtr(label_string_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Label a a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr"> 
        /// A pointer identifying a sync object.
        /// </param>
        /// <param name="length"> 
        /// The length of the label to be used for the object.
        /// </param>
        /// <param name="label">[length: label,length] 
        /// The address of a string containing the label to assign to the object.
        /// </param>
        public static void ObjectPtrLabel<T0>([InAttribute, OutAttribute] ref T0 ptr, Int32 length, String label)
            where T0 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T0& pinned", "ptr_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.StoreByName("ptr_pinned");
                    IntPtr label_string_ptr = MarshalStringToPtr(label);
                    try {
                        Silk.Cil.LoadByName("ptr_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(label_string_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(245);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(IntPtr), typeof(Int32), typeof(IntPtr));
                    } finally {
                        FreeStringPtr(label_string_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set pixel storage modes
        /// </summary>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the parameter to be set. One value affects the packing of pixel data into memory: PackAlignment. The other affects the unpacking of pixel data from memory: UnpackAlignment.
        /// </param>
        /// <param name="param"> 
        /// Specifies the value that pname is set to.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void PixelStore(OpenTK.Graphics.ES20.All pname, Int32 param)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(248);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PixelStoreParameter), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set pixel storage modes
        /// </summary>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the parameter to be set. One value affects the packing of pixel data into memory: PackAlignment. The other affects the unpacking of pixel data from memory: UnpackAlignment.
        /// </param>
        /// <param name="param"> 
        /// Specifies the value that pname is set to.
        /// </param>
        public static void PixelStore(OpenTK.Graphics.ES20.PixelStoreParameter pname, Int32 param)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(248);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PixelStoreParameter), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set the scale and units used to calculate depth values
        /// </summary>
        /// <param name="factor"> 
        /// Specifies a scale factor that is used to create a variable depth offset for each polygon. The initial value is 0.
        /// </param>
        /// <param name="units"> 
        /// Is multiplied by an implementation-specific value to create a constant depth offset. The initial value is 0.
        /// </param>
        public static void PolygonOffset(Single factor, Single units)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(249);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Single), typeof(Single));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Pop the active debug group
        /// </summary>
        public static void PopDebugGroup()
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(250);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Push a named debug group into the command stream
        /// </summary>
        /// <param name="source"> 
        /// The source of the debug message.
        /// </param>
        /// <param name="id"> 
        /// The identifier of the message.
        /// </param>
        /// <param name="length"> 
        /// The length of the message to be sent to the debug output stream.
        /// </param>
        /// <param name="message">[length: message,length] 
        /// The a string containing the message to be sent to the debug output stream.
        /// </param>
        [CLSCompliant(false)]
        public static void PushDebugGroup(OpenTK.Graphics.ES20.All source, Int32 id, Int32 length, String message)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    IntPtr message_string_ptr = MarshalStringToPtr(message);
                    try {
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(message_string_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(289);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.All), typeof(UInt32), typeof(Int32), typeof(IntPtr));
                    } finally {
                        FreeStringPtr(message_string_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>
        /// Push a named debug group into the command stream
        /// </summary>
        /// <param name="source"> 
        /// The source of the debug message.
        /// </param>
        /// <param name="id"> 
        /// The identifier of the message.
        /// </param>
        /// <param name="length"> 
        /// The length of the message to be sent to the debug output stream.
        /// </param>
        /// <param name="message">[length: message,length] 
        /// The a string containing the message to be sent to the debug output stream.
        /// </param>
        [CLSCompliant(false)]
        public static void PushDebugGroup(OpenTK.Graphics.ES20.All source, UInt32 id, Int32 length, String message)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    IntPtr message_string_ptr = MarshalStringToPtr(message);
                    try {
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(message_string_ptr);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(289);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.All), typeof(UInt32), typeof(Int32), typeof(IntPtr));
                    } finally {
                        FreeStringPtr(message_string_ptr);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary></summary>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="bufSize"></param>
        /// <param name="data"></param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void ReadnPixels(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, Int32 bufSize, [OutAttribute] IntPtr data)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(295);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary></summary>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="bufSize"></param>
        /// <param name="data"></param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void ReadnPixels<T7>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, Int32 bufSize, [InAttribute, OutAttribute] T7[] data)
            where T7 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T7& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T7");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(295);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary></summary>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="bufSize"></param>
        /// <param name="data"></param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void ReadnPixels<T7>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, Int32 bufSize, [InAttribute, OutAttribute] T7[,] data)
            where T7 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T7& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T7[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(295);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary></summary>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="bufSize"></param>
        /// <param name="data"></param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void ReadnPixels<T7>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, Int32 bufSize, [InAttribute, OutAttribute] T7[,,] data)
            where T7 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T7& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T7[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(295);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary></summary>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="bufSize"></param>
        /// <param name="data"></param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void ReadnPixels<T7>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, Int32 bufSize, [InAttribute, OutAttribute] ref T7 data)
            where T7 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T7& pinned", "data_pinned");
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.StoreByName("data_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(295);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary></summary>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="bufSize"></param>
        /// <param name="data"></param>
        public static void ReadnPixels(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, Int32 bufSize, [OutAttribute] IntPtr data)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(295);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary></summary>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="bufSize"></param>
        /// <param name="data"></param>
        [CLSCompliant(false)]
        public static void ReadnPixels<T7>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, Int32 bufSize, [InAttribute, OutAttribute] T7[] data)
            where T7 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T7& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T7");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(295);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary></summary>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="bufSize"></param>
        /// <param name="data"></param>
        [CLSCompliant(false)]
        public static void ReadnPixels<T7>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, Int32 bufSize, [InAttribute, OutAttribute] T7[,] data)
            where T7 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T7& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T7[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(295);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary></summary>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="bufSize"></param>
        /// <param name="data"></param>
        [CLSCompliant(false)]
        public static void ReadnPixels<T7>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, Int32 bufSize, [InAttribute, OutAttribute] T7[,,] data)
            where T7 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T7& pinned", "data_pinned");
                    if(data != null && data.Length != 0)
                    {
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T7[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("data_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(295);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary></summary>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="bufSize"></param>
        /// <param name="data"></param>
        public static void ReadnPixels<T7>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, Int32 bufSize, [InAttribute, OutAttribute] ref T7 data)
            where T7 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T7& pinned", "data_pinned");
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.StoreByName("data_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.LoadByName("data_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(295);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x"> 
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="y"> 
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="width"> 
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="height"> 
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, and Rgba.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the pixel data. Must be one of UnsignedByte, UnsignedShort565, UnsignedShort4444, or UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Returns the pixel data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void ReadPixels(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, [OutAttribute] IntPtr pixels)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(298);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x"> 
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="y"> 
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="width"> 
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="height"> 
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, and Rgba.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the pixel data. Must be one of UnsignedByte, UnsignedShort565, UnsignedShort4444, or UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Returns the pixel data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void ReadPixels<T6>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, [InAttribute, OutAttribute] T6[] pixels)
            where T6 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T6& pinned", "pixels_pinned");
                    if(pixels != null && pixels.Length != 0)
                    {
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T6");
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.LoadByName("pixels_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(298);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x"> 
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="y"> 
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="width"> 
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="height"> 
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, and Rgba.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the pixel data. Must be one of UnsignedByte, UnsignedShort565, UnsignedShort4444, or UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Returns the pixel data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void ReadPixels<T6>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, [InAttribute, OutAttribute] T6[,] pixels)
            where T6 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T6& pinned", "pixels_pinned");
                    if(pixels != null && pixels.Length != 0)
                    {
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T6[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.LoadByName("pixels_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(298);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x"> 
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="y"> 
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="width"> 
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="height"> 
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, and Rgba.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the pixel data. Must be one of UnsignedByte, UnsignedShort565, UnsignedShort4444, or UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Returns the pixel data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void ReadPixels<T6>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, [InAttribute, OutAttribute] T6[,,] pixels)
            where T6 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T6& pinned", "pixels_pinned");
                    if(pixels != null && pixels.Length != 0)
                    {
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T6[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.LoadByName("pixels_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(298);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x"> 
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="y"> 
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="width"> 
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="height"> 
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, and Rgba.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the pixel data. Must be one of UnsignedByte, UnsignedShort565, UnsignedShort4444, or UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Returns the pixel data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void ReadPixels<T6>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, [InAttribute, OutAttribute] ref T6 pixels)
            where T6 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T6& pinned", "pixels_pinned");
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.StoreByName("pixels_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.LoadByName("pixels_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(298);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x"> 
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="y"> 
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="width"> 
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="height"> 
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, and Rgba.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the pixel data. Must be one of UnsignedByte, UnsignedShort565, UnsignedShort4444, or UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Returns the pixel data.
        /// </param>
        public static void ReadPixels(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, [OutAttribute] IntPtr pixels)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(298);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x"> 
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="y"> 
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="width"> 
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="height"> 
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, and Rgba.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the pixel data. Must be one of UnsignedByte, UnsignedShort565, UnsignedShort4444, or UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Returns the pixel data.
        /// </param>
        [CLSCompliant(false)]
        public static void ReadPixels<T6>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, [InAttribute, OutAttribute] T6[] pixels)
            where T6 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T6& pinned", "pixels_pinned");
                    if(pixels != null && pixels.Length != 0)
                    {
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T6");
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.LoadByName("pixels_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(298);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x"> 
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="y"> 
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="width"> 
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="height"> 
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, and Rgba.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the pixel data. Must be one of UnsignedByte, UnsignedShort565, UnsignedShort4444, or UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Returns the pixel data.
        /// </param>
        [CLSCompliant(false)]
        public static void ReadPixels<T6>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, [InAttribute, OutAttribute] T6[,] pixels)
            where T6 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T6& pinned", "pixels_pinned");
                    if(pixels != null && pixels.Length != 0)
                    {
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T6[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.LoadByName("pixels_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(298);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x"> 
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="y"> 
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="width"> 
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="height"> 
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, and Rgba.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the pixel data. Must be one of UnsignedByte, UnsignedShort565, UnsignedShort4444, or UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Returns the pixel data.
        /// </param>
        [CLSCompliant(false)]
        public static void ReadPixels<T6>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, [InAttribute, OutAttribute] T6[,,] pixels)
            where T6 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T6& pinned", "pixels_pinned");
                    if(pixels != null && pixels.Length != 0)
                    {
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T6[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.LoadByName("pixels_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(298);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x"> 
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="y"> 
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="width"> 
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="height"> 
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, and Rgba.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the pixel data. Must be one of UnsignedByte, UnsignedShort565, UnsignedShort4444, or UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Returns the pixel data.
        /// </param>
        public static void ReadPixels<T6>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, [InAttribute, OutAttribute] ref T6 pixels)
            where T6 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T6& pinned", "pixels_pinned");
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.StoreByName("pixels_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.LoadByName("pixels_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(298);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Release resources allocated by the shader compiler
        /// </summary>
        public static void ReleaseShaderCompiler()
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(299);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Create and initialize a renderbuffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the renderbuffer target.  The symbolic constant must be Renderbuffer.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the color-renderable, depth-renderable, or stencil-renderable format of the renderbuffer. Must be one of the following symbolic constants: Rgba4, Rgb565, Rgb5A1, DepthComponent16, or StencilIndex8.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the renderbuffer in pixels.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the renderbuffer in pixels.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void RenderbufferStorage(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All internalformat, Int32 width, Int32 height)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(300);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.RenderbufferTarget), typeof(OpenTK.Graphics.ES20.RenderbufferInternalFormat), typeof(Int32), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Create and initialize a renderbuffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the renderbuffer target.  The symbolic constant must be Renderbuffer.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the color-renderable, depth-renderable, or stencil-renderable format of the renderbuffer. Must be one of the following symbolic constants: Rgba4, Rgb565, Rgb5A1, DepthComponent16, or StencilIndex8.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the renderbuffer in pixels.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the renderbuffer in pixels.
        /// </param>
        public static void RenderbufferStorage(OpenTK.Graphics.ES20.RenderbufferTarget target, OpenTK.Graphics.ES20.RenderbufferInternalFormat internalformat, Int32 width, Int32 height)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(300);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.RenderbufferTarget), typeof(OpenTK.Graphics.ES20.RenderbufferInternalFormat), typeof(Int32), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify multisample coverage parameters
        /// </summary>
        /// <param name="value"> 
        /// Specify a single floating-point sample coverage value.  The value is clamped to the range [0 ,1]. The initial value is 1.0.
        /// </param>
        /// <param name="invert"> 
        /// Specify a single boolean value representing if the coverage masks should be inverted.  True and False are accepted.  The initial value is False.
        /// </param>
        public static void SampleCoverage(Single value, bool invert)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(307);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Single), typeof(bool));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Define the scissor box
        /// </summary>
        /// <param name="x"> 
        /// Specify the lower left corner of the scissor box. Initially (0, 0).
        /// </param>
        /// <param name="y"> 
        /// Specify the lower left corner of the scissor box. Initially (0, 0).
        /// </param>
        /// <param name="width"> 
        /// Specify the width and height of the scissor box. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
        /// </param>
        /// <param name="height"> 
        /// Specify the width and height of the scissor box. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
        /// </param>
        public static void Scissor(Int32 x, Int32 y, Int32 width, Int32 height)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(310);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void ShaderBinary(Int32 count, Int32[] shaders, OpenTK.Graphics.ES20.All binaryformat, IntPtr binary, Int32 length)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "shaders_pinned");
                    if(shaders != null && shaders.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("shaders_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("shaders_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("shaders_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(313);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.ShaderBinaryFormat), typeof(IntPtr), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, Int32[] shaders, OpenTK.Graphics.ES20.All binaryformat, [InAttribute, OutAttribute] T3[] binary, Int32 length)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "shaders_pinned");
                    if(shaders != null && shaders.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("shaders_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("shaders_pinned");
                    }
                    Silk.Cil.DeclareLocal("T3& pinned", "binary_pinned");
                    if(binary != null && binary.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T3");
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("shaders_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("binary_pinned");
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(313);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.ShaderBinaryFormat), typeof(IntPtr), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, Int32[] shaders, OpenTK.Graphics.ES20.All binaryformat, [InAttribute, OutAttribute] T3[,] binary, Int32 length)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "shaders_pinned");
                    if(shaders != null && shaders.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("shaders_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("shaders_pinned");
                    }
                    Silk.Cil.DeclareLocal("T3& pinned", "binary_pinned");
                    if(binary != null && binary.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T3[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("shaders_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("binary_pinned");
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(313);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.ShaderBinaryFormat), typeof(IntPtr), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, Int32[] shaders, OpenTK.Graphics.ES20.All binaryformat, [InAttribute, OutAttribute] T3[,,] binary, Int32 length)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "shaders_pinned");
                    if(shaders != null && shaders.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("shaders_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("shaders_pinned");
                    }
                    Silk.Cil.DeclareLocal("T3& pinned", "binary_pinned");
                    if(binary != null && binary.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T3[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("shaders_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("binary_pinned");
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(313);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.ShaderBinaryFormat), typeof(IntPtr), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, Int32[] shaders, OpenTK.Graphics.ES20.All binaryformat, [InAttribute, OutAttribute] ref T3 binary, Int32 length)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "shaders_pinned");
                    if(shaders != null && shaders.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("shaders_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("shaders_pinned");
                    }
                    Silk.Cil.DeclareLocal("T3& pinned", "binary_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.StoreByName("binary_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("shaders_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("binary_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(313);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.ShaderBinaryFormat), typeof(IntPtr), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [CLSCompliant(false)]
        public static void ShaderBinary(Int32 count, Int32[] shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, IntPtr binary, Int32 length)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "shaders_pinned");
                    if(shaders != null && shaders.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("shaders_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("shaders_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("shaders_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(313);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.ShaderBinaryFormat), typeof(IntPtr), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, Int32[] shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] T3[] binary, Int32 length)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "shaders_pinned");
                    if(shaders != null && shaders.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("shaders_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("shaders_pinned");
                    }
                    Silk.Cil.DeclareLocal("T3& pinned", "binary_pinned");
                    if(binary != null && binary.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T3");
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("shaders_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("binary_pinned");
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(313);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.ShaderBinaryFormat), typeof(IntPtr), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, Int32[] shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] T3[,] binary, Int32 length)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "shaders_pinned");
                    if(shaders != null && shaders.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("shaders_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("shaders_pinned");
                    }
                    Silk.Cil.DeclareLocal("T3& pinned", "binary_pinned");
                    if(binary != null && binary.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T3[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("shaders_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("binary_pinned");
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(313);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.ShaderBinaryFormat), typeof(IntPtr), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, Int32[] shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] T3[,,] binary, Int32 length)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "shaders_pinned");
                    if(shaders != null && shaders.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("shaders_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("shaders_pinned");
                    }
                    Silk.Cil.DeclareLocal("T3& pinned", "binary_pinned");
                    if(binary != null && binary.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T3[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("shaders_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("binary_pinned");
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(313);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.ShaderBinaryFormat), typeof(IntPtr), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, Int32[] shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] ref T3 binary, Int32 length)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "shaders_pinned");
                    if(shaders != null && shaders.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("shaders_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("shaders_pinned");
                    }
                    Silk.Cil.DeclareLocal("T3& pinned", "binary_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.StoreByName("binary_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("shaders_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("binary_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(313);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.ShaderBinaryFormat), typeof(IntPtr), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void ShaderBinary(Int32 count, ref Int32 shaders, OpenTK.Graphics.ES20.All binaryformat, IntPtr binary, Int32 length)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "shaders_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("shaders_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("shaders_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(313);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.ShaderBinaryFormat), typeof(IntPtr), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, ref Int32 shaders, OpenTK.Graphics.ES20.All binaryformat, [InAttribute, OutAttribute] T3[] binary, Int32 length)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "shaders_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("shaders_pinned");
                    Silk.Cil.DeclareLocal("T3& pinned", "binary_pinned");
                    if(binary != null && binary.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T3");
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("shaders_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("binary_pinned");
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(313);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.ShaderBinaryFormat), typeof(IntPtr), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, ref Int32 shaders, OpenTK.Graphics.ES20.All binaryformat, [InAttribute, OutAttribute] T3[,] binary, Int32 length)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "shaders_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("shaders_pinned");
                    Silk.Cil.DeclareLocal("T3& pinned", "binary_pinned");
                    if(binary != null && binary.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T3[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("shaders_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("binary_pinned");
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(313);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.ShaderBinaryFormat), typeof(IntPtr), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, ref Int32 shaders, OpenTK.Graphics.ES20.All binaryformat, [InAttribute, OutAttribute] T3[,,] binary, Int32 length)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "shaders_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("shaders_pinned");
                    Silk.Cil.DeclareLocal("T3& pinned", "binary_pinned");
                    if(binary != null && binary.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T3[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("shaders_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("binary_pinned");
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(313);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.ShaderBinaryFormat), typeof(IntPtr), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, ref Int32 shaders, OpenTK.Graphics.ES20.All binaryformat, [InAttribute, OutAttribute] ref T3 binary, Int32 length)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "shaders_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("shaders_pinned");
                    Silk.Cil.DeclareLocal("T3& pinned", "binary_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.StoreByName("binary_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("shaders_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("binary_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(313);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.ShaderBinaryFormat), typeof(IntPtr), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [CLSCompliant(false)]
        public static void ShaderBinary(Int32 count, ref Int32 shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, IntPtr binary, Int32 length)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "shaders_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("shaders_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("shaders_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(313);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.ShaderBinaryFormat), typeof(IntPtr), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, ref Int32 shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] T3[] binary, Int32 length)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "shaders_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("shaders_pinned");
                    Silk.Cil.DeclareLocal("T3& pinned", "binary_pinned");
                    if(binary != null && binary.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T3");
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("shaders_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("binary_pinned");
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(313);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.ShaderBinaryFormat), typeof(IntPtr), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, ref Int32 shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] T3[,] binary, Int32 length)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "shaders_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("shaders_pinned");
                    Silk.Cil.DeclareLocal("T3& pinned", "binary_pinned");
                    if(binary != null && binary.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T3[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("shaders_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("binary_pinned");
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(313);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.ShaderBinaryFormat), typeof(IntPtr), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, ref Int32 shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] T3[,,] binary, Int32 length)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "shaders_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("shaders_pinned");
                    Silk.Cil.DeclareLocal("T3& pinned", "binary_pinned");
                    if(binary != null && binary.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T3[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("shaders_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("binary_pinned");
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(313);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.ShaderBinaryFormat), typeof(IntPtr), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, ref Int32 shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] ref T3 binary, Int32 length)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "shaders_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("shaders_pinned");
                    Silk.Cil.DeclareLocal("T3& pinned", "binary_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.StoreByName("binary_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("shaders_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("binary_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(313);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.ShaderBinaryFormat), typeof(IntPtr), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static unsafe void ShaderBinary(Int32 count, Int32* shaders, OpenTK.Graphics.ES20.All binaryformat, IntPtr binary, Int32 length)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(313);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.ShaderBinaryFormat), typeof(IntPtr), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static unsafe void ShaderBinary<T3>(Int32 count, Int32* shaders, OpenTK.Graphics.ES20.All binaryformat, [InAttribute, OutAttribute] T3[] binary, Int32 length)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "binary_pinned");
                    if(binary != null && binary.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T3");
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("binary_pinned");
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(313);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.ShaderBinaryFormat), typeof(IntPtr), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static unsafe void ShaderBinary<T3>(Int32 count, Int32* shaders, OpenTK.Graphics.ES20.All binaryformat, [InAttribute, OutAttribute] T3[,] binary, Int32 length)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "binary_pinned");
                    if(binary != null && binary.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T3[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("binary_pinned");
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(313);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.ShaderBinaryFormat), typeof(IntPtr), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static unsafe void ShaderBinary<T3>(Int32 count, Int32* shaders, OpenTK.Graphics.ES20.All binaryformat, [InAttribute, OutAttribute] T3[,,] binary, Int32 length)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "binary_pinned");
                    if(binary != null && binary.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T3[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("binary_pinned");
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(313);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.ShaderBinaryFormat), typeof(IntPtr), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static unsafe void ShaderBinary<T3>(Int32 count, Int32* shaders, OpenTK.Graphics.ES20.All binaryformat, [InAttribute, OutAttribute] ref T3 binary, Int32 length)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "binary_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.StoreByName("binary_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("binary_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(313);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.ShaderBinaryFormat), typeof(IntPtr), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void ShaderBinary(Int32 count, Int32* shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, IntPtr binary, Int32 length)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(313);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.ShaderBinaryFormat), typeof(IntPtr), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void ShaderBinary<T3>(Int32 count, Int32* shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] T3[] binary, Int32 length)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "binary_pinned");
                    if(binary != null && binary.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T3");
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("binary_pinned");
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(313);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.ShaderBinaryFormat), typeof(IntPtr), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void ShaderBinary<T3>(Int32 count, Int32* shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] T3[,] binary, Int32 length)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "binary_pinned");
                    if(binary != null && binary.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T3[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("binary_pinned");
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(313);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.ShaderBinaryFormat), typeof(IntPtr), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void ShaderBinary<T3>(Int32 count, Int32* shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] T3[,,] binary, Int32 length)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "binary_pinned");
                    if(binary != null && binary.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T3[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("binary_pinned");
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(313);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.ShaderBinaryFormat), typeof(IntPtr), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void ShaderBinary<T3>(Int32 count, Int32* shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] ref T3 binary, Int32 length)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "binary_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.StoreByName("binary_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("binary_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(313);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.ShaderBinaryFormat), typeof(IntPtr), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void ShaderBinary(Int32 count, UInt32[] shaders, OpenTK.Graphics.ES20.All binaryformat, IntPtr binary, Int32 length)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.UInt32& pinned", "shaders_pinned");
                    if(shaders != null && shaders.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.UInt32");
                        Silk.Cil.StoreByName("shaders_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("shaders_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("shaders_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(313);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.ShaderBinaryFormat), typeof(IntPtr), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, UInt32[] shaders, OpenTK.Graphics.ES20.All binaryformat, [InAttribute, OutAttribute] T3[] binary, Int32 length)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.UInt32& pinned", "shaders_pinned");
                    if(shaders != null && shaders.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.UInt32");
                        Silk.Cil.StoreByName("shaders_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("shaders_pinned");
                    }
                    Silk.Cil.DeclareLocal("T3& pinned", "binary_pinned");
                    if(binary != null && binary.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T3");
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("shaders_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("binary_pinned");
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(313);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.ShaderBinaryFormat), typeof(IntPtr), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, UInt32[] shaders, OpenTK.Graphics.ES20.All binaryformat, [InAttribute, OutAttribute] T3[,] binary, Int32 length)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.UInt32& pinned", "shaders_pinned");
                    if(shaders != null && shaders.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.UInt32");
                        Silk.Cil.StoreByName("shaders_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("shaders_pinned");
                    }
                    Silk.Cil.DeclareLocal("T3& pinned", "binary_pinned");
                    if(binary != null && binary.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T3[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("shaders_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("binary_pinned");
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(313);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.ShaderBinaryFormat), typeof(IntPtr), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, UInt32[] shaders, OpenTK.Graphics.ES20.All binaryformat, [InAttribute, OutAttribute] T3[,,] binary, Int32 length)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.UInt32& pinned", "shaders_pinned");
                    if(shaders != null && shaders.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.UInt32");
                        Silk.Cil.StoreByName("shaders_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("shaders_pinned");
                    }
                    Silk.Cil.DeclareLocal("T3& pinned", "binary_pinned");
                    if(binary != null && binary.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T3[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("shaders_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("binary_pinned");
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(313);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.ShaderBinaryFormat), typeof(IntPtr), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, UInt32[] shaders, OpenTK.Graphics.ES20.All binaryformat, [InAttribute, OutAttribute] ref T3 binary, Int32 length)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.UInt32& pinned", "shaders_pinned");
                    if(shaders != null && shaders.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.UInt32");
                        Silk.Cil.StoreByName("shaders_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("shaders_pinned");
                    }
                    Silk.Cil.DeclareLocal("T3& pinned", "binary_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.StoreByName("binary_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("shaders_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("binary_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(313);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.ShaderBinaryFormat), typeof(IntPtr), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [CLSCompliant(false)]
        public static void ShaderBinary(Int32 count, UInt32[] shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, IntPtr binary, Int32 length)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.UInt32& pinned", "shaders_pinned");
                    if(shaders != null && shaders.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.UInt32");
                        Silk.Cil.StoreByName("shaders_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("shaders_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("shaders_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(313);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.ShaderBinaryFormat), typeof(IntPtr), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, UInt32[] shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] T3[] binary, Int32 length)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.UInt32& pinned", "shaders_pinned");
                    if(shaders != null && shaders.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.UInt32");
                        Silk.Cil.StoreByName("shaders_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("shaders_pinned");
                    }
                    Silk.Cil.DeclareLocal("T3& pinned", "binary_pinned");
                    if(binary != null && binary.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T3");
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("shaders_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("binary_pinned");
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(313);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.ShaderBinaryFormat), typeof(IntPtr), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, UInt32[] shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] T3[,] binary, Int32 length)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.UInt32& pinned", "shaders_pinned");
                    if(shaders != null && shaders.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.UInt32");
                        Silk.Cil.StoreByName("shaders_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("shaders_pinned");
                    }
                    Silk.Cil.DeclareLocal("T3& pinned", "binary_pinned");
                    if(binary != null && binary.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T3[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("shaders_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("binary_pinned");
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(313);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.ShaderBinaryFormat), typeof(IntPtr), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, UInt32[] shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] T3[,,] binary, Int32 length)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.UInt32& pinned", "shaders_pinned");
                    if(shaders != null && shaders.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.UInt32");
                        Silk.Cil.StoreByName("shaders_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("shaders_pinned");
                    }
                    Silk.Cil.DeclareLocal("T3& pinned", "binary_pinned");
                    if(binary != null && binary.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T3[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("shaders_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("binary_pinned");
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(313);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.ShaderBinaryFormat), typeof(IntPtr), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, UInt32[] shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] ref T3 binary, Int32 length)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.UInt32& pinned", "shaders_pinned");
                    if(shaders != null && shaders.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.UInt32");
                        Silk.Cil.StoreByName("shaders_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("shaders_pinned");
                    }
                    Silk.Cil.DeclareLocal("T3& pinned", "binary_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.StoreByName("binary_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("shaders_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("binary_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(313);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.ShaderBinaryFormat), typeof(IntPtr), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void ShaderBinary(Int32 count, ref UInt32 shaders, OpenTK.Graphics.ES20.All binaryformat, IntPtr binary, Int32 length)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.UInt32& pinned", "shaders_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("shaders_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("shaders_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(313);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.ShaderBinaryFormat), typeof(IntPtr), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, ref UInt32 shaders, OpenTK.Graphics.ES20.All binaryformat, [InAttribute, OutAttribute] T3[] binary, Int32 length)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.UInt32& pinned", "shaders_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("shaders_pinned");
                    Silk.Cil.DeclareLocal("T3& pinned", "binary_pinned");
                    if(binary != null && binary.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T3");
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("shaders_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("binary_pinned");
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(313);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.ShaderBinaryFormat), typeof(IntPtr), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, ref UInt32 shaders, OpenTK.Graphics.ES20.All binaryformat, [InAttribute, OutAttribute] T3[,] binary, Int32 length)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.UInt32& pinned", "shaders_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("shaders_pinned");
                    Silk.Cil.DeclareLocal("T3& pinned", "binary_pinned");
                    if(binary != null && binary.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T3[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("shaders_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("binary_pinned");
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(313);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.ShaderBinaryFormat), typeof(IntPtr), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, ref UInt32 shaders, OpenTK.Graphics.ES20.All binaryformat, [InAttribute, OutAttribute] T3[,,] binary, Int32 length)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.UInt32& pinned", "shaders_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("shaders_pinned");
                    Silk.Cil.DeclareLocal("T3& pinned", "binary_pinned");
                    if(binary != null && binary.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T3[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("shaders_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("binary_pinned");
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(313);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.ShaderBinaryFormat), typeof(IntPtr), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, ref UInt32 shaders, OpenTK.Graphics.ES20.All binaryformat, [InAttribute, OutAttribute] ref T3 binary, Int32 length)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.UInt32& pinned", "shaders_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("shaders_pinned");
                    Silk.Cil.DeclareLocal("T3& pinned", "binary_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.StoreByName("binary_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("shaders_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("binary_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(313);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.ShaderBinaryFormat), typeof(IntPtr), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [CLSCompliant(false)]
        public static void ShaderBinary(Int32 count, ref UInt32 shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, IntPtr binary, Int32 length)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.UInt32& pinned", "shaders_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("shaders_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("shaders_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(313);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.ShaderBinaryFormat), typeof(IntPtr), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, ref UInt32 shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] T3[] binary, Int32 length)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.UInt32& pinned", "shaders_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("shaders_pinned");
                    Silk.Cil.DeclareLocal("T3& pinned", "binary_pinned");
                    if(binary != null && binary.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T3");
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("shaders_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("binary_pinned");
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(313);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.ShaderBinaryFormat), typeof(IntPtr), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, ref UInt32 shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] T3[,] binary, Int32 length)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.UInt32& pinned", "shaders_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("shaders_pinned");
                    Silk.Cil.DeclareLocal("T3& pinned", "binary_pinned");
                    if(binary != null && binary.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T3[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("shaders_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("binary_pinned");
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(313);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.ShaderBinaryFormat), typeof(IntPtr), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, ref UInt32 shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] T3[,,] binary, Int32 length)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.UInt32& pinned", "shaders_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("shaders_pinned");
                    Silk.Cil.DeclareLocal("T3& pinned", "binary_pinned");
                    if(binary != null && binary.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T3[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("shaders_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("binary_pinned");
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(313);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.ShaderBinaryFormat), typeof(IntPtr), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, ref UInt32 shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] ref T3 binary, Int32 length)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.UInt32& pinned", "shaders_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("shaders_pinned");
                    Silk.Cil.DeclareLocal("T3& pinned", "binary_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.StoreByName("binary_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("shaders_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("binary_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(313);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.ShaderBinaryFormat), typeof(IntPtr), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static unsafe void ShaderBinary(Int32 count, UInt32* shaders, OpenTK.Graphics.ES20.All binaryformat, IntPtr binary, Int32 length)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(313);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.ShaderBinaryFormat), typeof(IntPtr), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static unsafe void ShaderBinary<T3>(Int32 count, UInt32* shaders, OpenTK.Graphics.ES20.All binaryformat, [InAttribute, OutAttribute] T3[] binary, Int32 length)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "binary_pinned");
                    if(binary != null && binary.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T3");
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("binary_pinned");
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(313);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.ShaderBinaryFormat), typeof(IntPtr), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static unsafe void ShaderBinary<T3>(Int32 count, UInt32* shaders, OpenTK.Graphics.ES20.All binaryformat, [InAttribute, OutAttribute] T3[,] binary, Int32 length)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "binary_pinned");
                    if(binary != null && binary.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T3[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("binary_pinned");
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(313);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.ShaderBinaryFormat), typeof(IntPtr), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static unsafe void ShaderBinary<T3>(Int32 count, UInt32* shaders, OpenTK.Graphics.ES20.All binaryformat, [InAttribute, OutAttribute] T3[,,] binary, Int32 length)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "binary_pinned");
                    if(binary != null && binary.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T3[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("binary_pinned");
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(313);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.ShaderBinaryFormat), typeof(IntPtr), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static unsafe void ShaderBinary<T3>(Int32 count, UInt32* shaders, OpenTK.Graphics.ES20.All binaryformat, [InAttribute, OutAttribute] ref T3 binary, Int32 length)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "binary_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.StoreByName("binary_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("binary_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(313);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.ShaderBinaryFormat), typeof(IntPtr), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void ShaderBinary(Int32 count, UInt32* shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, IntPtr binary, Int32 length)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(313);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.ShaderBinaryFormat), typeof(IntPtr), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void ShaderBinary<T3>(Int32 count, UInt32* shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] T3[] binary, Int32 length)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "binary_pinned");
                    if(binary != null && binary.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T3");
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("binary_pinned");
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(313);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.ShaderBinaryFormat), typeof(IntPtr), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void ShaderBinary<T3>(Int32 count, UInt32* shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] T3[,] binary, Int32 length)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "binary_pinned");
                    if(binary != null && binary.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T3[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("binary_pinned");
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(313);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.ShaderBinaryFormat), typeof(IntPtr), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void ShaderBinary<T3>(Int32 count, UInt32* shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] T3[,,] binary, Int32 length)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "binary_pinned");
                    if(binary != null && binary.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T3[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("binary_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("binary_pinned");
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(313);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.ShaderBinaryFormat), typeof(IntPtr), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void ShaderBinary<T3>(Int32 count, UInt32* shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] ref T3 binary, Int32 length)
            where T3 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T3& pinned", "binary_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.StoreByName("binary_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("binary_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(313);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.ShaderBinaryFormat), typeof(IntPtr), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Replace the source code in a shader object
        /// </summary>
        /// <param name="shader"> 
        /// Specifies the handle of the shader object whose source code is to be replaced.
        /// </param>
        /// <param name="count"> 
        /// Specifies the number of elements in the string and length arrays.
        /// </param>
        /// <param name="@string">[length: count] 
        /// Specifies an array of pointers to strings containing the source code to be loaded into the shader.
        /// </param>
        /// <param name="length">[length: count] 
        /// Specifies an array of string lengths.
        /// </param>
        [CLSCompliant(false)]
        public static void ShaderSource(Int32 shader, Int32 count, String[] @string, Int32[] length)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    IntPtr @string_string_array_ptr = MarshalStringArrayToPtr(@string);
                    try {
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        if(length != null && length.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(@string_string_array_ptr);
                        Silk.Cil.LoadByName("length_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(314);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(IntPtr), typeof(Int32*));
                    } finally {
                        FreeStringArrayPtr(@string_string_array_ptr, @string.Length);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Replace the source code in a shader object
        /// </summary>
        /// <param name="shader"> 
        /// Specifies the handle of the shader object whose source code is to be replaced.
        /// </param>
        /// <param name="count"> 
        /// Specifies the number of elements in the string and length arrays.
        /// </param>
        /// <param name="@string">[length: count] 
        /// Specifies an array of pointers to strings containing the source code to be loaded into the shader.
        /// </param>
        /// <param name="length">[length: count] 
        /// Specifies an array of string lengths.
        /// </param>
        [CLSCompliant(false)]
        public static void ShaderSource(Int32 shader, Int32 count, String[] @string, ref Int32 length)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    IntPtr @string_string_array_ptr = MarshalStringArrayToPtr(@string);
                    try {
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("length_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(@string_string_array_ptr);
                        Silk.Cil.LoadByName("length_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(314);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(IntPtr), typeof(Int32*));
                    } finally {
                        FreeStringArrayPtr(@string_string_array_ptr, @string.Length);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Replace the source code in a shader object
        /// </summary>
        /// <param name="shader"> 
        /// Specifies the handle of the shader object whose source code is to be replaced.
        /// </param>
        /// <param name="count"> 
        /// Specifies the number of elements in the string and length arrays.
        /// </param>
        /// <param name="@string">[length: count] 
        /// Specifies an array of pointers to strings containing the source code to be loaded into the shader.
        /// </param>
        /// <param name="length">[length: count] 
        /// Specifies an array of string lengths.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void ShaderSource(Int32 shader, Int32 count, String[] @string, Int32* length)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    IntPtr @string_string_array_ptr = MarshalStringArrayToPtr(@string);
                    try {
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(@string_string_array_ptr);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(314);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(IntPtr), typeof(Int32*));
                    } finally {
                        FreeStringArrayPtr(@string_string_array_ptr, @string.Length);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Replace the source code in a shader object
        /// </summary>
        /// <param name="shader"> 
        /// Specifies the handle of the shader object whose source code is to be replaced.
        /// </param>
        /// <param name="count"> 
        /// Specifies the number of elements in the string and length arrays.
        /// </param>
        /// <param name="@string">[length: count] 
        /// Specifies an array of pointers to strings containing the source code to be loaded into the shader.
        /// </param>
        /// <param name="length">[length: count] 
        /// Specifies an array of string lengths.
        /// </param>
        [CLSCompliant(false)]
        public static void ShaderSource(UInt32 shader, Int32 count, String[] @string, Int32[] length)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    IntPtr @string_string_array_ptr = MarshalStringArrayToPtr(@string);
                    try {
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        if(length != null && length.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(@string_string_array_ptr);
                        Silk.Cil.LoadByName("length_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(314);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(IntPtr), typeof(Int32*));
                    } finally {
                        FreeStringArrayPtr(@string_string_array_ptr, @string.Length);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Replace the source code in a shader object
        /// </summary>
        /// <param name="shader"> 
        /// Specifies the handle of the shader object whose source code is to be replaced.
        /// </param>
        /// <param name="count"> 
        /// Specifies the number of elements in the string and length arrays.
        /// </param>
        /// <param name="@string">[length: count] 
        /// Specifies an array of pointers to strings containing the source code to be loaded into the shader.
        /// </param>
        /// <param name="length">[length: count] 
        /// Specifies an array of string lengths.
        /// </param>
        [CLSCompliant(false)]
        public static void ShaderSource(UInt32 shader, Int32 count, String[] @string, ref Int32 length)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    IntPtr @string_string_array_ptr = MarshalStringArrayToPtr(@string);
                    try {
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("length_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(@string_string_array_ptr);
                        Silk.Cil.LoadByName("length_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(314);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(IntPtr), typeof(Int32*));
                    } finally {
                        FreeStringArrayPtr(@string_string_array_ptr, @string.Length);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Replace the source code in a shader object
        /// </summary>
        /// <param name="shader"> 
        /// Specifies the handle of the shader object whose source code is to be replaced.
        /// </param>
        /// <param name="count"> 
        /// Specifies the number of elements in the string and length arrays.
        /// </param>
        /// <param name="@string">[length: count] 
        /// Specifies an array of pointers to strings containing the source code to be loaded into the shader.
        /// </param>
        /// <param name="length">[length: count] 
        /// Specifies an array of string lengths.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void ShaderSource(UInt32 shader, Int32 count, String[] @string, Int32* length)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    IntPtr @string_string_array_ptr = MarshalStringArrayToPtr(@string);
                    try {
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(@string_string_array_ptr);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(314);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(IntPtr), typeof(Int32*));
                    } finally {
                        FreeStringArrayPtr(@string_string_array_ptr, @string.Length);
                    }
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set front and back function and reference value for stencil testing
        /// </summary>
        /// <param name="func"> 
        /// Specifies the test function. Eight symbolic constants are valid: Never, Less, Lequal, Greater, Gequal, Equal, Notequal, and Always. The initial value is Always.
        /// </param>
        /// <param name="@ref"> 
        /// Specifies the reference value for the stencil test. ref is clamped to the range [0, 2 sup n - 1], where  is the number of bitplanes in the stencil buffer. The initial value is 0.
        /// </param>
        /// <param name="mask"> 
        /// Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void StencilFunc(OpenTK.Graphics.ES20.All func, Int32 @ref, Int32 mask)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(316);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.StencilFunction), typeof(Int32), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set front and back function and reference value for stencil testing
        /// </summary>
        /// <param name="func"> 
        /// Specifies the test function. Eight symbolic constants are valid: Never, Less, Lequal, Greater, Gequal, Equal, Notequal, and Always. The initial value is Always.
        /// </param>
        /// <param name="@ref"> 
        /// Specifies the reference value for the stencil test. ref is clamped to the range [0, 2 sup n - 1], where  is the number of bitplanes in the stencil buffer. The initial value is 0.
        /// </param>
        /// <param name="mask"> 
        /// Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void StencilFunc(OpenTK.Graphics.ES20.All func, Int32 @ref, UInt32 mask)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(316);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.StencilFunction), typeof(Int32), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set front and back function and reference value for stencil testing
        /// </summary>
        /// <param name="func"> 
        /// Specifies the test function. Eight symbolic constants are valid: Never, Less, Lequal, Greater, Gequal, Equal, Notequal, and Always. The initial value is Always.
        /// </param>
        /// <param name="@ref"> 
        /// Specifies the reference value for the stencil test. ref is clamped to the range [0, 2 sup n - 1], where  is the number of bitplanes in the stencil buffer. The initial value is 0.
        /// </param>
        /// <param name="mask"> 
        /// Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
        /// </param>
        [CLSCompliant(false)]
        public static void StencilFunc(OpenTK.Graphics.ES20.StencilFunction func, Int32 @ref, Int32 mask)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(316);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.StencilFunction), typeof(Int32), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set front and back function and reference value for stencil testing
        /// </summary>
        /// <param name="func"> 
        /// Specifies the test function. Eight symbolic constants are valid: Never, Less, Lequal, Greater, Gequal, Equal, Notequal, and Always. The initial value is Always.
        /// </param>
        /// <param name="@ref"> 
        /// Specifies the reference value for the stencil test. ref is clamped to the range [0, 2 sup n - 1], where  is the number of bitplanes in the stencil buffer. The initial value is 0.
        /// </param>
        /// <param name="mask"> 
        /// Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
        /// </param>
        [CLSCompliant(false)]
        public static void StencilFunc(OpenTK.Graphics.ES20.StencilFunction func, Int32 @ref, UInt32 mask)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(316);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.StencilFunction), typeof(Int32), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set front and/or back function and reference value for stencil testing
        /// </summary>
        /// <param name="face"> 
        /// Specifies whether front and/or back stencil state is updated. Three symbolic constants are valid: Front, Back, and FrontAndBack.
        /// </param>
        /// <param name="func"> 
        /// Specifies the test function. Eight symbolic constants are valid: Never, Less, Lequal, Greater, Gequal, Equal, Notequal, and Always. The initial value is Always.
        /// </param>
        /// <param name="@ref"> 
        /// Specifies the reference value for the stencil test. ref is clamped to the range [0, 2 sup n - 1], where  is the number of bitplanes in the stencil buffer. The initial value is 0.
        /// </param>
        /// <param name="mask"> 
        /// Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void StencilFuncSeparate(OpenTK.Graphics.ES20.All face, OpenTK.Graphics.ES20.All func, Int32 @ref, Int32 mask)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(317);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.StencilFace), typeof(OpenTK.Graphics.ES20.StencilFunction), typeof(Int32), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set front and/or back function and reference value for stencil testing
        /// </summary>
        /// <param name="face"> 
        /// Specifies whether front and/or back stencil state is updated. Three symbolic constants are valid: Front, Back, and FrontAndBack.
        /// </param>
        /// <param name="func"> 
        /// Specifies the test function. Eight symbolic constants are valid: Never, Less, Lequal, Greater, Gequal, Equal, Notequal, and Always. The initial value is Always.
        /// </param>
        /// <param name="@ref"> 
        /// Specifies the reference value for the stencil test. ref is clamped to the range [0, 2 sup n - 1], where  is the number of bitplanes in the stencil buffer. The initial value is 0.
        /// </param>
        /// <param name="mask"> 
        /// Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void StencilFuncSeparate(OpenTK.Graphics.ES20.All face, OpenTK.Graphics.ES20.All func, Int32 @ref, UInt32 mask)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(317);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.StencilFace), typeof(OpenTK.Graphics.ES20.StencilFunction), typeof(Int32), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set front and/or back function and reference value for stencil testing
        /// </summary>
        /// <param name="face"> 
        /// Specifies whether front and/or back stencil state is updated. Three symbolic constants are valid: Front, Back, and FrontAndBack.
        /// </param>
        /// <param name="func"> 
        /// Specifies the test function. Eight symbolic constants are valid: Never, Less, Lequal, Greater, Gequal, Equal, Notequal, and Always. The initial value is Always.
        /// </param>
        /// <param name="@ref"> 
        /// Specifies the reference value for the stencil test. ref is clamped to the range [0, 2 sup n - 1], where  is the number of bitplanes in the stencil buffer. The initial value is 0.
        /// </param>
        /// <param name="mask"> 
        /// Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
        /// </param>
        [Obsolete("Use StencilFace overload instead")]
        [CLSCompliant(false)]
        public static void StencilFuncSeparate(OpenTK.Graphics.ES20.CullFaceMode face, OpenTK.Graphics.ES20.StencilFunction func, Int32 @ref, Int32 mask)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(317);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.StencilFace), typeof(OpenTK.Graphics.ES20.StencilFunction), typeof(Int32), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set front and/or back function and reference value for stencil testing
        /// </summary>
        /// <param name="face"> 
        /// Specifies whether front and/or back stencil state is updated. Three symbolic constants are valid: Front, Back, and FrontAndBack.
        /// </param>
        /// <param name="func"> 
        /// Specifies the test function. Eight symbolic constants are valid: Never, Less, Lequal, Greater, Gequal, Equal, Notequal, and Always. The initial value is Always.
        /// </param>
        /// <param name="@ref"> 
        /// Specifies the reference value for the stencil test. ref is clamped to the range [0, 2 sup n - 1], where  is the number of bitplanes in the stencil buffer. The initial value is 0.
        /// </param>
        /// <param name="mask"> 
        /// Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
        /// </param>
        [Obsolete("Use StencilFace overload instead")]
        [CLSCompliant(false)]
        public static void StencilFuncSeparate(OpenTK.Graphics.ES20.CullFaceMode face, OpenTK.Graphics.ES20.StencilFunction func, Int32 @ref, UInt32 mask)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(317);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.StencilFace), typeof(OpenTK.Graphics.ES20.StencilFunction), typeof(Int32), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set front and/or back function and reference value for stencil testing
        /// </summary>
        /// <param name="face"> 
        /// Specifies whether front and/or back stencil state is updated. Three symbolic constants are valid: Front, Back, and FrontAndBack.
        /// </param>
        /// <param name="func"> 
        /// Specifies the test function. Eight symbolic constants are valid: Never, Less, Lequal, Greater, Gequal, Equal, Notequal, and Always. The initial value is Always.
        /// </param>
        /// <param name="@ref"> 
        /// Specifies the reference value for the stencil test. ref is clamped to the range [0, 2 sup n - 1], where  is the number of bitplanes in the stencil buffer. The initial value is 0.
        /// </param>
        /// <param name="mask"> 
        /// Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
        /// </param>
        [CLSCompliant(false)]
        public static void StencilFuncSeparate(OpenTK.Graphics.ES20.StencilFace face, OpenTK.Graphics.ES20.StencilFunction func, Int32 @ref, Int32 mask)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(317);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.StencilFace), typeof(OpenTK.Graphics.ES20.StencilFunction), typeof(Int32), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set front and/or back function and reference value for stencil testing
        /// </summary>
        /// <param name="face"> 
        /// Specifies whether front and/or back stencil state is updated. Three symbolic constants are valid: Front, Back, and FrontAndBack.
        /// </param>
        /// <param name="func"> 
        /// Specifies the test function. Eight symbolic constants are valid: Never, Less, Lequal, Greater, Gequal, Equal, Notequal, and Always. The initial value is Always.
        /// </param>
        /// <param name="@ref"> 
        /// Specifies the reference value for the stencil test. ref is clamped to the range [0, 2 sup n - 1], where  is the number of bitplanes in the stencil buffer. The initial value is 0.
        /// </param>
        /// <param name="mask"> 
        /// Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
        /// </param>
        [CLSCompliant(false)]
        public static void StencilFuncSeparate(OpenTK.Graphics.ES20.StencilFace face, OpenTK.Graphics.ES20.StencilFunction func, Int32 @ref, UInt32 mask)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(317);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.StencilFace), typeof(OpenTK.Graphics.ES20.StencilFunction), typeof(Int32), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Control the front and back writing of individual bits in the stencil planes
        /// </summary>
        /// <param name="mask"> 
        /// Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all 1's.
        /// </param>
        [CLSCompliant(false)]
        public static void StencilMask(Int32 mask)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(318);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Control the front and back writing of individual bits in the stencil planes
        /// </summary>
        /// <param name="mask"> 
        /// Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all 1's.
        /// </param>
        [CLSCompliant(false)]
        public static void StencilMask(UInt32 mask)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(318);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Control the front and/or back writing of individual bits in the stencil planes
        /// </summary>
        /// <param name="face"> 
        /// Specifies whether the front and/or back stencil writemask is updated. Three symbolic constants are valid: Front, Back, and FrontAndBack.
        /// </param>
        /// <param name="mask"> 
        /// Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all 1's.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void StencilMaskSeparate(OpenTK.Graphics.ES20.All face, Int32 mask)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(319);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.StencilFace), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Control the front and/or back writing of individual bits in the stencil planes
        /// </summary>
        /// <param name="face"> 
        /// Specifies whether the front and/or back stencil writemask is updated. Three symbolic constants are valid: Front, Back, and FrontAndBack.
        /// </param>
        /// <param name="mask"> 
        /// Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all 1's.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void StencilMaskSeparate(OpenTK.Graphics.ES20.All face, UInt32 mask)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(319);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.StencilFace), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Control the front and/or back writing of individual bits in the stencil planes
        /// </summary>
        /// <param name="face"> 
        /// Specifies whether the front and/or back stencil writemask is updated. Three symbolic constants are valid: Front, Back, and FrontAndBack.
        /// </param>
        /// <param name="mask"> 
        /// Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all 1's.
        /// </param>
        [Obsolete("Use StencilFace overload instead")]
        [CLSCompliant(false)]
        public static void StencilMaskSeparate(OpenTK.Graphics.ES20.CullFaceMode face, Int32 mask)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(319);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.StencilFace), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Control the front and/or back writing of individual bits in the stencil planes
        /// </summary>
        /// <param name="face"> 
        /// Specifies whether the front and/or back stencil writemask is updated. Three symbolic constants are valid: Front, Back, and FrontAndBack.
        /// </param>
        /// <param name="mask"> 
        /// Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all 1's.
        /// </param>
        [Obsolete("Use StencilFace overload instead")]
        [CLSCompliant(false)]
        public static void StencilMaskSeparate(OpenTK.Graphics.ES20.CullFaceMode face, UInt32 mask)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(319);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.StencilFace), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Control the front and/or back writing of individual bits in the stencil planes
        /// </summary>
        /// <param name="face"> 
        /// Specifies whether the front and/or back stencil writemask is updated. Three symbolic constants are valid: Front, Back, and FrontAndBack.
        /// </param>
        /// <param name="mask"> 
        /// Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all 1's.
        /// </param>
        [CLSCompliant(false)]
        public static void StencilMaskSeparate(OpenTK.Graphics.ES20.StencilFace face, Int32 mask)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(319);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.StencilFace), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Control the front and/or back writing of individual bits in the stencil planes
        /// </summary>
        /// <param name="face"> 
        /// Specifies whether the front and/or back stencil writemask is updated. Three symbolic constants are valid: Front, Back, and FrontAndBack.
        /// </param>
        /// <param name="mask"> 
        /// Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all 1's.
        /// </param>
        [CLSCompliant(false)]
        public static void StencilMaskSeparate(OpenTK.Graphics.ES20.StencilFace face, UInt32 mask)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(319);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.StencilFace), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set front and back stencil test actions
        /// </summary>
        /// <param name="fail"> 
        /// Specifies the action to take when the stencil test fails. Eight symbolic constants are accepted: Keep, Zero, Replace, Incr, IncrWrap, Decr, DecrWrap, and Invert. The initial value is Keep.
        /// </param>
        /// <param name="zfail"> 
        /// Specifies the stencil action when the stencil test passes, but the depth test fails. dpfail accepts the same symbolic constants as sfail. The initial value is Keep.
        /// </param>
        /// <param name="zpass"> 
        /// Specifies the stencil action when both the stencil test and the depth test pass, or when the stencil test passes and either there is no depth buffer or depth testing is not enabled. dppass accepts the same symbolic constants as sfail. The initial value is Keep.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void StencilOp(OpenTK.Graphics.ES20.All fail, OpenTK.Graphics.ES20.All zfail, OpenTK.Graphics.ES20.All zpass)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(320);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.StencilOp), typeof(OpenTK.Graphics.ES20.StencilOp), typeof(OpenTK.Graphics.ES20.StencilOp));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set front and back stencil test actions
        /// </summary>
        /// <param name="fail"> 
        /// Specifies the action to take when the stencil test fails. Eight symbolic constants are accepted: Keep, Zero, Replace, Incr, IncrWrap, Decr, DecrWrap, and Invert. The initial value is Keep.
        /// </param>
        /// <param name="zfail"> 
        /// Specifies the stencil action when the stencil test passes, but the depth test fails. dpfail accepts the same symbolic constants as sfail. The initial value is Keep.
        /// </param>
        /// <param name="zpass"> 
        /// Specifies the stencil action when both the stencil test and the depth test pass, or when the stencil test passes and either there is no depth buffer or depth testing is not enabled. dppass accepts the same symbolic constants as sfail. The initial value is Keep.
        /// </param>
        public static void StencilOp(OpenTK.Graphics.ES20.StencilOp fail, OpenTK.Graphics.ES20.StencilOp zfail, OpenTK.Graphics.ES20.StencilOp zpass)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(320);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.StencilOp), typeof(OpenTK.Graphics.ES20.StencilOp), typeof(OpenTK.Graphics.ES20.StencilOp));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set front and/or back stencil test actions
        /// </summary>
        /// <param name="face"> 
        /// Specifies whether front and/or back stencil state is updated. Three symbolic constants are valid: Front, Back, and FrontAndBack.
        /// </param>
        /// <param name="sfail"> 
        /// Specifies the action to take when the stencil test fails. Eight symbolic constants are accepted: Keep, Zero, Replace, Incr, IncrWrap, Decr, DecrWrap, and Invert. The initial value is Keep.
        /// </param>
        /// <param name="dpfail"> 
        /// Specifies the stencil action when the stencil test passes, but the depth test fails. dpfail accepts the same symbolic constants as sfail. The initial value is Keep.
        /// </param>
        /// <param name="dppass"> 
        /// Specifies the stencil action when both the stencil test and the depth test pass, or when the stencil test passes and either there is no depth buffer or depth testing is not enabled. dppass accepts the same symbolic constants as sfail. The initial value is Keep.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void StencilOpSeparate(OpenTK.Graphics.ES20.All face, OpenTK.Graphics.ES20.All sfail, OpenTK.Graphics.ES20.All dpfail, OpenTK.Graphics.ES20.All dppass)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(321);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.StencilFace), typeof(OpenTK.Graphics.ES20.StencilOp), typeof(OpenTK.Graphics.ES20.StencilOp), typeof(OpenTK.Graphics.ES20.StencilOp));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set front and/or back stencil test actions
        /// </summary>
        /// <param name="face"> 
        /// Specifies whether front and/or back stencil state is updated. Three symbolic constants are valid: Front, Back, and FrontAndBack.
        /// </param>
        /// <param name="sfail"> 
        /// Specifies the action to take when the stencil test fails. Eight symbolic constants are accepted: Keep, Zero, Replace, Incr, IncrWrap, Decr, DecrWrap, and Invert. The initial value is Keep.
        /// </param>
        /// <param name="dpfail"> 
        /// Specifies the stencil action when the stencil test passes, but the depth test fails. dpfail accepts the same symbolic constants as sfail. The initial value is Keep.
        /// </param>
        /// <param name="dppass"> 
        /// Specifies the stencil action when both the stencil test and the depth test pass, or when the stencil test passes and either there is no depth buffer or depth testing is not enabled. dppass accepts the same symbolic constants as sfail. The initial value is Keep.
        /// </param>
        [Obsolete("Use StencilFace overload instead")]
        public static void StencilOpSeparate(OpenTK.Graphics.ES20.CullFaceMode face, OpenTK.Graphics.ES20.StencilOp sfail, OpenTK.Graphics.ES20.StencilOp dpfail, OpenTK.Graphics.ES20.StencilOp dppass)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(321);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.StencilFace), typeof(OpenTK.Graphics.ES20.StencilOp), typeof(OpenTK.Graphics.ES20.StencilOp), typeof(OpenTK.Graphics.ES20.StencilOp));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set front and/or back stencil test actions
        /// </summary>
        /// <param name="face"> 
        /// Specifies whether front and/or back stencil state is updated. Three symbolic constants are valid: Front, Back, and FrontAndBack.
        /// </param>
        /// <param name="sfail"> 
        /// Specifies the action to take when the stencil test fails. Eight symbolic constants are accepted: Keep, Zero, Replace, Incr, IncrWrap, Decr, DecrWrap, and Invert. The initial value is Keep.
        /// </param>
        /// <param name="dpfail"> 
        /// Specifies the stencil action when the stencil test passes, but the depth test fails. dpfail accepts the same symbolic constants as sfail. The initial value is Keep.
        /// </param>
        /// <param name="dppass"> 
        /// Specifies the stencil action when both the stencil test and the depth test pass, or when the stencil test passes and either there is no depth buffer or depth testing is not enabled. dppass accepts the same symbolic constants as sfail. The initial value is Keep.
        /// </param>
        public static void StencilOpSeparate(OpenTK.Graphics.ES20.StencilFace face, OpenTK.Graphics.ES20.StencilOp sfail, OpenTK.Graphics.ES20.StencilOp dpfail, OpenTK.Graphics.ES20.StencilOp dppass)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(321);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.StencilFace), typeof(OpenTK.Graphics.ES20.StencilOp), typeof(OpenTK.Graphics.ES20.StencilOp), typeof(OpenTK.Graphics.ES20.StencilOp));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, Rgba.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the texel data.  Must match internalformat. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the texel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void TexImage2D(OpenTK.Graphics.ES20.All target, Int32 level, OpenTK.Graphics.ES20.All internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, IntPtr pixels)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.Ldarg(8);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(325);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(OpenTK.Graphics.ES20.TextureComponentCount), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, Rgba.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the texel data.  Must match internalformat. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the texel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void TexImage2D<T8>(OpenTK.Graphics.ES20.All target, Int32 level, OpenTK.Graphics.ES20.All internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, [InAttribute, OutAttribute] T8[] pixels)
            where T8 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T8& pinned", "pixels_pinned");
                    if(pixels != null && pixels.Length != 0)
                    {
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T8");
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.LoadByName("pixels_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(325);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(OpenTK.Graphics.ES20.TextureComponentCount), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, Rgba.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the texel data.  Must match internalformat. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the texel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void TexImage2D<T8>(OpenTK.Graphics.ES20.All target, Int32 level, OpenTK.Graphics.ES20.All internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, [InAttribute, OutAttribute] T8[,] pixels)
            where T8 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T8& pinned", "pixels_pinned");
                    if(pixels != null && pixels.Length != 0)
                    {
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T8[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.LoadByName("pixels_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(325);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(OpenTK.Graphics.ES20.TextureComponentCount), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, Rgba.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the texel data.  Must match internalformat. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the texel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void TexImage2D<T8>(OpenTK.Graphics.ES20.All target, Int32 level, OpenTK.Graphics.ES20.All internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, [InAttribute, OutAttribute] T8[,,] pixels)
            where T8 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T8& pinned", "pixels_pinned");
                    if(pixels != null && pixels.Length != 0)
                    {
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T8[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.LoadByName("pixels_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(325);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(OpenTK.Graphics.ES20.TextureComponentCount), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, Rgba.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the texel data.  Must match internalformat. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the texel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void TexImage2D<T8>(OpenTK.Graphics.ES20.All target, Int32 level, OpenTK.Graphics.ES20.All internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, [InAttribute, OutAttribute] ref T8 pixels)
            where T8 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T8& pinned", "pixels_pinned");
                    Silk.Cil.Ldarg(8);
                    Silk.Cil.StoreByName("pixels_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.LoadByName("pixels_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(325);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(OpenTK.Graphics.ES20.TextureComponentCount), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, Rgba.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the texel data.  Must match internalformat. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the texel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [Obsolete("Use TextureTarget2d overload instead")]
        public static void TexImage2D(OpenTK.Graphics.ES20.TextureTarget target, Int32 level, OpenTK.Graphics.ES20.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, IntPtr pixels)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.Ldarg(8);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(325);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(OpenTK.Graphics.ES20.TextureComponentCount), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, Rgba.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the texel data.  Must match internalformat. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the texel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [Obsolete("Use TextureTarget2d overload instead")]
        [CLSCompliant(false)]
        public static void TexImage2D<T8>(OpenTK.Graphics.ES20.TextureTarget target, Int32 level, OpenTK.Graphics.ES20.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, [InAttribute, OutAttribute] T8[] pixels)
            where T8 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T8& pinned", "pixels_pinned");
                    if(pixels != null && pixels.Length != 0)
                    {
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T8");
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.LoadByName("pixels_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(325);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(OpenTK.Graphics.ES20.TextureComponentCount), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, Rgba.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the texel data.  Must match internalformat. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the texel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [Obsolete("Use TextureTarget2d overload instead")]
        [CLSCompliant(false)]
        public static void TexImage2D<T8>(OpenTK.Graphics.ES20.TextureTarget target, Int32 level, OpenTK.Graphics.ES20.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, [InAttribute, OutAttribute] T8[,] pixels)
            where T8 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T8& pinned", "pixels_pinned");
                    if(pixels != null && pixels.Length != 0)
                    {
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T8[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.LoadByName("pixels_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(325);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(OpenTK.Graphics.ES20.TextureComponentCount), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, Rgba.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the texel data.  Must match internalformat. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the texel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [Obsolete("Use TextureTarget2d overload instead")]
        [CLSCompliant(false)]
        public static void TexImage2D<T8>(OpenTK.Graphics.ES20.TextureTarget target, Int32 level, OpenTK.Graphics.ES20.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, [InAttribute, OutAttribute] T8[,,] pixels)
            where T8 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T8& pinned", "pixels_pinned");
                    if(pixels != null && pixels.Length != 0)
                    {
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T8[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.LoadByName("pixels_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(325);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(OpenTK.Graphics.ES20.TextureComponentCount), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, Rgba.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the texel data.  Must match internalformat. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the texel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [Obsolete("Use TextureTarget2d overload instead")]
        public static void TexImage2D<T8>(OpenTK.Graphics.ES20.TextureTarget target, Int32 level, OpenTK.Graphics.ES20.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, [InAttribute, OutAttribute] ref T8 pixels)
            where T8 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T8& pinned", "pixels_pinned");
                    Silk.Cil.Ldarg(8);
                    Silk.Cil.StoreByName("pixels_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.LoadByName("pixels_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(325);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(OpenTK.Graphics.ES20.TextureComponentCount), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, Rgba.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the texel data.  Must match internalformat. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the texel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        public static void TexImage2D(OpenTK.Graphics.ES20.TextureTarget2d target, Int32 level, OpenTK.Graphics.ES20.TextureComponentCount internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, IntPtr pixels)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.Ldarg(8);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(325);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(OpenTK.Graphics.ES20.TextureComponentCount), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, Rgba.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the texel data.  Must match internalformat. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the texel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [CLSCompliant(false)]
        public static void TexImage2D<T8>(OpenTK.Graphics.ES20.TextureTarget2d target, Int32 level, OpenTK.Graphics.ES20.TextureComponentCount internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, [InAttribute, OutAttribute] T8[] pixels)
            where T8 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T8& pinned", "pixels_pinned");
                    if(pixels != null && pixels.Length != 0)
                    {
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T8");
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.LoadByName("pixels_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(325);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(OpenTK.Graphics.ES20.TextureComponentCount), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, Rgba.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the texel data.  Must match internalformat. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the texel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [CLSCompliant(false)]
        public static void TexImage2D<T8>(OpenTK.Graphics.ES20.TextureTarget2d target, Int32 level, OpenTK.Graphics.ES20.TextureComponentCount internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, [InAttribute, OutAttribute] T8[,] pixels)
            where T8 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T8& pinned", "pixels_pinned");
                    if(pixels != null && pixels.Length != 0)
                    {
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T8[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.LoadByName("pixels_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(325);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(OpenTK.Graphics.ES20.TextureComponentCount), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, Rgba.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the texel data.  Must match internalformat. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the texel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [CLSCompliant(false)]
        public static void TexImage2D<T8>(OpenTK.Graphics.ES20.TextureTarget2d target, Int32 level, OpenTK.Graphics.ES20.TextureComponentCount internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, [InAttribute, OutAttribute] T8[,,] pixels)
            where T8 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T8& pinned", "pixels_pinned");
                    if(pixels != null && pixels.Length != 0)
                    {
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T8[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.LoadByName("pixels_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(325);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(OpenTK.Graphics.ES20.TextureComponentCount), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, Rgba.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the texel data.  Must match internalformat. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the texel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        public static void TexImage2D<T8>(OpenTK.Graphics.ES20.TextureTarget2d target, Int32 level, OpenTK.Graphics.ES20.TextureComponentCount internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, [InAttribute, OutAttribute] ref T8 pixels)
            where T8 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T8& pinned", "pixels_pinned");
                    Silk.Cil.Ldarg(8);
                    Silk.Cil.StoreByName("pixels_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.LoadByName("pixels_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(325);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(OpenTK.Graphics.ES20.TextureComponentCount), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit, which must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureMinFilter, TextureMagFilter, TextureWrapS, or TextureWrapT.
        /// </param>
        /// <param name="param"> 
        /// Specifies the value of pname.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void TexParameter(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All pname, Single param)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(327);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget), typeof(OpenTK.Graphics.ES20.TextureParameterName), typeof(Single));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit, which must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureMinFilter, TextureMagFilter, TextureWrapS, or TextureWrapT.
        /// </param>
        /// <param name="param"> 
        /// Specifies the value of pname.
        /// </param>
        public static void TexParameter(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.TextureParameterName pname, Single param)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(327);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget), typeof(OpenTK.Graphics.ES20.TextureParameterName), typeof(Single));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit, which must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureMinFilter, TextureMagFilter, TextureWrapS, or TextureWrapT.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Specifies the value of pname.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void TexParameter(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All pname, Single[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Single");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(328);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget), typeof(OpenTK.Graphics.ES20.TextureParameterName), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit, which must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureMinFilter, TextureMagFilter, TextureWrapS, or TextureWrapT.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Specifies the value of pname.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static unsafe void TexParameter(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All pname, Single* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(328);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget), typeof(OpenTK.Graphics.ES20.TextureParameterName), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit, which must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureMinFilter, TextureMagFilter, TextureWrapS, or TextureWrapT.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Specifies the value of pname.
        /// </param>
        [CLSCompliant(false)]
        public static void TexParameter(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.TextureParameterName pname, Single[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Single");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(328);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget), typeof(OpenTK.Graphics.ES20.TextureParameterName), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit, which must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureMinFilter, TextureMagFilter, TextureWrapS, or TextureWrapT.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Specifies the value of pname.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void TexParameter(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.TextureParameterName pname, Single* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(328);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget), typeof(OpenTK.Graphics.ES20.TextureParameterName), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit, which must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureMinFilter, TextureMagFilter, TextureWrapS, or TextureWrapT.
        /// </param>
        /// <param name="param"> 
        /// Specifies the value of pname.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void TexParameter(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All pname, Int32 param)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(329);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget), typeof(OpenTK.Graphics.ES20.TextureParameterName), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit, which must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureMinFilter, TextureMagFilter, TextureWrapS, or TextureWrapT.
        /// </param>
        /// <param name="param"> 
        /// Specifies the value of pname.
        /// </param>
        public static void TexParameter(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.TextureParameterName pname, Int32 param)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(329);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget), typeof(OpenTK.Graphics.ES20.TextureParameterName), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit, which must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureMinFilter, TextureMagFilter, TextureWrapS, or TextureWrapT.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Specifies the value of pname.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void TexParameter(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All pname, Int32[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(332);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget), typeof(OpenTK.Graphics.ES20.TextureParameterName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit, which must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureMinFilter, TextureMagFilter, TextureWrapS, or TextureWrapT.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Specifies the value of pname.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static unsafe void TexParameter(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All pname, Int32* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(332);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget), typeof(OpenTK.Graphics.ES20.TextureParameterName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit, which must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureMinFilter, TextureMagFilter, TextureWrapS, or TextureWrapT.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Specifies the value of pname.
        /// </param>
        [CLSCompliant(false)]
        public static void TexParameter(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.TextureParameterName pname, Int32[] @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                    if(@params != null && @params.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("params_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("params_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(332);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget), typeof(OpenTK.Graphics.ES20.TextureParameterName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit, which must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureMinFilter, TextureMagFilter, TextureWrapS, or TextureWrapT.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Specifies the value of pname.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void TexParameter(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.TextureParameterName pname, Int32* @params)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(332);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget), typeof(OpenTK.Graphics.ES20.TextureParameterName), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void TexSubImage2D(OpenTK.Graphics.ES20.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, IntPtr pixels)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.Ldarg(8);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(337);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void TexSubImage2D<T8>(OpenTK.Graphics.ES20.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, [InAttribute, OutAttribute] T8[] pixels)
            where T8 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T8& pinned", "pixels_pinned");
                    if(pixels != null && pixels.Length != 0)
                    {
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T8");
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.LoadByName("pixels_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(337);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void TexSubImage2D<T8>(OpenTK.Graphics.ES20.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, [InAttribute, OutAttribute] T8[,] pixels)
            where T8 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T8& pinned", "pixels_pinned");
                    if(pixels != null && pixels.Length != 0)
                    {
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T8[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.LoadByName("pixels_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(337);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void TexSubImage2D<T8>(OpenTK.Graphics.ES20.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, [InAttribute, OutAttribute] T8[,,] pixels)
            where T8 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T8& pinned", "pixels_pinned");
                    if(pixels != null && pixels.Length != 0)
                    {
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T8[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.LoadByName("pixels_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(337);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void TexSubImage2D<T8>(OpenTK.Graphics.ES20.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, [InAttribute, OutAttribute] ref T8 pixels)
            where T8 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T8& pinned", "pixels_pinned");
                    Silk.Cil.Ldarg(8);
                    Silk.Cil.StoreByName("pixels_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.LoadByName("pixels_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(337);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [Obsolete("Use TextureTarget2d overload instead")]
        public static void TexSubImage2D(OpenTK.Graphics.ES20.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, IntPtr pixels)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.Ldarg(8);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(337);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [Obsolete("Use TextureTarget2d overload instead")]
        [CLSCompliant(false)]
        public static void TexSubImage2D<T8>(OpenTK.Graphics.ES20.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, [InAttribute, OutAttribute] T8[] pixels)
            where T8 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T8& pinned", "pixels_pinned");
                    if(pixels != null && pixels.Length != 0)
                    {
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T8");
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.LoadByName("pixels_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(337);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [Obsolete("Use TextureTarget2d overload instead")]
        [CLSCompliant(false)]
        public static void TexSubImage2D<T8>(OpenTK.Graphics.ES20.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, [InAttribute, OutAttribute] T8[,] pixels)
            where T8 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T8& pinned", "pixels_pinned");
                    if(pixels != null && pixels.Length != 0)
                    {
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T8[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.LoadByName("pixels_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(337);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [Obsolete("Use TextureTarget2d overload instead")]
        [CLSCompliant(false)]
        public static void TexSubImage2D<T8>(OpenTK.Graphics.ES20.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, [InAttribute, OutAttribute] T8[,,] pixels)
            where T8 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T8& pinned", "pixels_pinned");
                    if(pixels != null && pixels.Length != 0)
                    {
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T8[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.LoadByName("pixels_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(337);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [Obsolete("Use TextureTarget2d overload instead")]
        public static void TexSubImage2D<T8>(OpenTK.Graphics.ES20.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, [InAttribute, OutAttribute] ref T8 pixels)
            where T8 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T8& pinned", "pixels_pinned");
                    Silk.Cil.Ldarg(8);
                    Silk.Cil.StoreByName("pixels_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.LoadByName("pixels_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(337);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        public static void TexSubImage2D(OpenTK.Graphics.ES20.TextureTarget2d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, IntPtr pixels)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.Ldarg(8);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(337);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [CLSCompliant(false)]
        public static void TexSubImage2D<T8>(OpenTK.Graphics.ES20.TextureTarget2d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, [InAttribute, OutAttribute] T8[] pixels)
            where T8 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T8& pinned", "pixels_pinned");
                    if(pixels != null && pixels.Length != 0)
                    {
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T8");
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.LoadByName("pixels_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(337);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [CLSCompliant(false)]
        public static void TexSubImage2D<T8>(OpenTK.Graphics.ES20.TextureTarget2d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, [InAttribute, OutAttribute] T8[,] pixels)
            where T8 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T8& pinned", "pixels_pinned");
                    if(pixels != null && pixels.Length != 0)
                    {
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T8[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.LoadByName("pixels_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(337);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [CLSCompliant(false)]
        public static void TexSubImage2D<T8>(OpenTK.Graphics.ES20.TextureTarget2d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, [InAttribute, OutAttribute] T8[,,] pixels)
            where T8 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T8& pinned", "pixels_pinned");
                    if(pixels != null && pixels.Length != 0)
                    {
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T8[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pixels_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.LoadByName("pixels_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(337);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        public static void TexSubImage2D<T8>(OpenTK.Graphics.ES20.TextureTarget2d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, [InAttribute, OutAttribute] ref T8 pixels)
            where T8 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T8& pinned", "pixels_pinned");
                    Silk.Cil.Ldarg(8);
                    Silk.Cil.StoreByName("pixels_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Ldarg(6);
                    Silk.Cil.Ldarg(7);
                    Silk.Cil.LoadByName("pixels_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(337);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        public static void Uniform1(Int32 location, Single v0)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(343);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Single));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">[length: count*1] 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [CLSCompliant(false)]
        public static void Uniform1(Int32 location, Int32 count, Single[] value)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                    if(value != null && value.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Single");
                        Silk.Cil.StoreByName("value_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("value_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("value_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(344);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">[length: count*1] 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [CLSCompliant(false)]
        public static void Uniform1(Int32 location, Int32 count, ref Single value)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("value_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("value_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(344);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">[length: count*1] 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void Uniform1(Int32 location, Int32 count, Single* value)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(344);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        public static void Uniform1(Int32 location, Int32 v0)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(345);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">[length: count*1] 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [CLSCompliant(false)]
        public static void Uniform1(Int32 location, Int32 count, Int32[] value)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "value_pinned");
                    if(value != null && value.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("value_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("value_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("value_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(346);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">[length: count*1] 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [CLSCompliant(false)]
        public static void Uniform1(Int32 location, Int32 count, ref Int32 value)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "value_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("value_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("value_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(346);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">[length: count*1] 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void Uniform1(Int32 location, Int32 count, Int32* value)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(346);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        public static void Uniform2(Int32 location, Single v0, Single v1)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(347);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Single), typeof(Single));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">[length: count*2] 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [CLSCompliant(false)]
        public static void Uniform2(Int32 location, Int32 count, Single[] value)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                    if(value != null && value.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Single");
                        Silk.Cil.StoreByName("value_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("value_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("value_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(348);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">[length: count*2] 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [CLSCompliant(false)]
        public static void Uniform2(Int32 location, Int32 count, ref Single value)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("value_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("value_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(348);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">[length: count*2] 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void Uniform2(Int32 location, Int32 count, Single* value)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(348);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        public static void Uniform2(Int32 location, Int32 v0, Int32 v1)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(349);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">[length: count*2] 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [CLSCompliant(false)]
        public static void Uniform2(Int32 location, Int32 count, Int32[] value)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "value_pinned");
                    if(value != null && value.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("value_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("value_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("value_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(350);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">[length: count*2] 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void Uniform2(Int32 location, Int32 count, Int32* value)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(350);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v2"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        public static void Uniform3(Int32 location, Single v0, Single v1, Single v2)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(351);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Single), typeof(Single), typeof(Single));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">[length: count*3] 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [CLSCompliant(false)]
        public static void Uniform3(Int32 location, Int32 count, Single[] value)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                    if(value != null && value.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Single");
                        Silk.Cil.StoreByName("value_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("value_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("value_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(352);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">[length: count*3] 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [CLSCompliant(false)]
        public static void Uniform3(Int32 location, Int32 count, ref Single value)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("value_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("value_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(352);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">[length: count*3] 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void Uniform3(Int32 location, Int32 count, Single* value)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(352);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v2"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        public static void Uniform3(Int32 location, Int32 v0, Int32 v1, Int32 v2)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(353);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">[length: count*3] 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [CLSCompliant(false)]
        public static void Uniform3(Int32 location, Int32 count, Int32[] value)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "value_pinned");
                    if(value != null && value.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("value_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("value_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("value_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(354);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">[length: count*3] 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [CLSCompliant(false)]
        public static void Uniform3(Int32 location, Int32 count, ref Int32 value)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "value_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("value_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("value_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(354);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">[length: count*3] 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void Uniform3(Int32 location, Int32 count, Int32* value)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(354);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v2"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v3"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        public static void Uniform4(Int32 location, Single v0, Single v1, Single v2, Single v3)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(355);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Single), typeof(Single), typeof(Single), typeof(Single));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">[length: count*4] 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [CLSCompliant(false)]
        public static void Uniform4(Int32 location, Int32 count, Single[] value)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                    if(value != null && value.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Single");
                        Silk.Cil.StoreByName("value_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("value_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("value_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(356);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">[length: count*4] 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [CLSCompliant(false)]
        public static void Uniform4(Int32 location, Int32 count, ref Single value)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("value_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("value_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(356);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">[length: count*4] 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void Uniform4(Int32 location, Int32 count, Single* value)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(356);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v2"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v3"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        public static void Uniform4(Int32 location, Int32 v0, Int32 v1, Int32 v2, Int32 v3)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(357);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">[length: count*4] 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [CLSCompliant(false)]
        public static void Uniform4(Int32 location, Int32 count, Int32[] value)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "value_pinned");
                    if(value != null && value.Length != 0)
                    {
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Int32");
                        Silk.Cil.StoreByName("value_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("value_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("value_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(358);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">[length: count*4] 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [CLSCompliant(false)]
        public static void Uniform4(Int32 location, Int32 count, ref Int32 value)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Int32& pinned", "value_pinned");
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.StoreByName("value_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.LoadByName("value_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(358);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">[length: count*4] 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void Uniform4(Int32 location, Int32 count, Int32* value)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(358);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*4]</param>
        [CLSCompliant(false)]
        public static void UniformMatrix2(Int32 location, Int32 count, bool transpose, Single[] value)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                    if(value != null && value.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Single");
                        Silk.Cil.StoreByName("value_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("value_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("value_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(359);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*4]</param>
        [CLSCompliant(false)]
        public static void UniformMatrix2(Int32 location, Int32 count, bool transpose, ref Single value)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.StoreByName("value_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("value_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(359);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*4]</param>
        [CLSCompliant(false)]
        public static unsafe void UniformMatrix2(Int32 location, Int32 count, bool transpose, Single* value)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(359);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*9]</param>
        [CLSCompliant(false)]
        public static void UniformMatrix3(Int32 location, Int32 count, bool transpose, Single[] value)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                    if(value != null && value.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Single");
                        Silk.Cil.StoreByName("value_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("value_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("value_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(362);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*9]</param>
        [CLSCompliant(false)]
        public static void UniformMatrix3(Int32 location, Int32 count, bool transpose, ref Single value)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.StoreByName("value_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("value_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(362);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*9]</param>
        [CLSCompliant(false)]
        public static unsafe void UniformMatrix3(Int32 location, Int32 count, bool transpose, Single* value)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(362);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*16]</param>
        [CLSCompliant(false)]
        public static void UniformMatrix4(Int32 location, Int32 count, bool transpose, Single[] value)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                    if(value != null && value.Length != 0)
                    {
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Single");
                        Silk.Cil.StoreByName("value_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("value_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("value_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(365);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*16]</param>
        [CLSCompliant(false)]
        public static void UniformMatrix4(Int32 location, Int32 count, bool transpose, ref Single value)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.StoreByName("value_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.LoadByName("value_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(365);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*16]</param>
        [CLSCompliant(false)]
        public static unsafe void UniformMatrix4(Int32 location, Int32 count, bool transpose, Single* value)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(365);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Install a program object as part of current rendering state
        /// </summary>
        /// <param name="program"> 
        /// Specifies the handle of the program object whose executables are to be used as part of current rendering state.
        /// </param>
        [CLSCompliant(false)]
        public static void UseProgram(Int32 program)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(369);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Install a program object as part of current rendering state
        /// </summary>
        /// <param name="program"> 
        /// Specifies the handle of the program object whose executables are to be used as part of current rendering state.
        /// </param>
        [CLSCompliant(false)]
        public static void UseProgram(UInt32 program)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(369);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Validate a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the handle of the program object to be validated.
        /// </param>
        [CLSCompliant(false)]
        public static void ValidateProgram(Int32 program)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(372);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Validate a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the handle of the program object to be validated.
        /// </param>
        [CLSCompliant(false)]
        public static void ValidateProgram(UInt32 program)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(372);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="x"> 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [CLSCompliant(false)]
        public static void VertexAttrib1(Int32 index, Single x)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(374);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Single));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="x"> 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [CLSCompliant(false)]
        public static void VertexAttrib1(UInt32 index, Single x)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(374);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Single));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 1] 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [CLSCompliant(false)]
        public static void VertexAttrib1(Int32 index, Single[] v)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "v_pinned");
                    if(v != null && v.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Single");
                        Silk.Cil.StoreByName("v_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("v_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("v_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(375);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 1] 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib1(Int32 index, Single* v)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(375);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 1] 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [CLSCompliant(false)]
        public static void VertexAttrib1(UInt32 index, Single[] v)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "v_pinned");
                    if(v != null && v.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Single");
                        Silk.Cil.StoreByName("v_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("v_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("v_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(375);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 1] 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib1(UInt32 index, Single* v)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(375);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="x"> 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="y"> 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [CLSCompliant(false)]
        public static void VertexAttrib2(Int32 index, Single x, Single y)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(376);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Single), typeof(Single));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="x"> 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="y"> 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [CLSCompliant(false)]
        public static void VertexAttrib2(UInt32 index, Single x, Single y)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(376);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Single), typeof(Single));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 2] 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [CLSCompliant(false)]
        public static void VertexAttrib2(Int32 index, Single[] v)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "v_pinned");
                    if(v != null && v.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Single");
                        Silk.Cil.StoreByName("v_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("v_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("v_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(377);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 2] 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [CLSCompliant(false)]
        public static void VertexAttrib2(Int32 index, ref Single v)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "v_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("v_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("v_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(377);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 2] 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib2(Int32 index, Single* v)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(377);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 2] 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [CLSCompliant(false)]
        public static void VertexAttrib2(UInt32 index, Single[] v)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "v_pinned");
                    if(v != null && v.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Single");
                        Silk.Cil.StoreByName("v_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("v_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("v_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(377);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 2] 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [CLSCompliant(false)]
        public static void VertexAttrib2(UInt32 index, ref Single v)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "v_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("v_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("v_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(377);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 2] 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib2(UInt32 index, Single* v)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(377);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="x"> 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="y"> 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="z"> 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [CLSCompliant(false)]
        public static void VertexAttrib3(Int32 index, Single x, Single y, Single z)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(378);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Single), typeof(Single), typeof(Single));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="x"> 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="y"> 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="z"> 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [CLSCompliant(false)]
        public static void VertexAttrib3(UInt32 index, Single x, Single y, Single z)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(378);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Single), typeof(Single), typeof(Single));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 3] 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [CLSCompliant(false)]
        public static void VertexAttrib3(Int32 index, Single[] v)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "v_pinned");
                    if(v != null && v.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Single");
                        Silk.Cil.StoreByName("v_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("v_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("v_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(379);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 3] 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [CLSCompliant(false)]
        public static void VertexAttrib3(Int32 index, ref Single v)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "v_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("v_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("v_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(379);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 3] 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib3(Int32 index, Single* v)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(379);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 3] 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [CLSCompliant(false)]
        public static void VertexAttrib3(UInt32 index, Single[] v)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "v_pinned");
                    if(v != null && v.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Single");
                        Silk.Cil.StoreByName("v_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("v_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("v_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(379);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 3] 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [CLSCompliant(false)]
        public static void VertexAttrib3(UInt32 index, ref Single v)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "v_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("v_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("v_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(379);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 3] 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib3(UInt32 index, Single* v)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(379);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="x"> 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="y"> 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="z"> 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="w"> 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [CLSCompliant(false)]
        public static void VertexAttrib4(Int32 index, Single x, Single y, Single z, Single w)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(380);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Single), typeof(Single), typeof(Single), typeof(Single));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="x"> 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="y"> 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="z"> 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="w"> 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [CLSCompliant(false)]
        public static void VertexAttrib4(UInt32 index, Single x, Single y, Single z, Single w)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(380);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Single), typeof(Single), typeof(Single), typeof(Single));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 4] 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [CLSCompliant(false)]
        public static void VertexAttrib4(Int32 index, Single[] v)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "v_pinned");
                    if(v != null && v.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Single");
                        Silk.Cil.StoreByName("v_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("v_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("v_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(381);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 4] 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [CLSCompliant(false)]
        public static void VertexAttrib4(Int32 index, ref Single v)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "v_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("v_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("v_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(381);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 4] 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib4(Int32 index, Single* v)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(381);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 4] 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [CLSCompliant(false)]
        public static void VertexAttrib4(UInt32 index, Single[] v)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "v_pinned");
                    if(v != null && v.Length != 0)
                    {
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("System.Single");
                        Silk.Cil.StoreByName("v_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("v_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("v_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(381);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 4] 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [CLSCompliant(false)]
        public static void VertexAttrib4(UInt32 index, ref Single v)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("System.Single& pinned", "v_pinned");
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.StoreByName("v_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.LoadByName("v_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(381);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 4] 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib4(UInt32 index, Single* v)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(381);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Single*));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="size"> 
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of each component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Fixed, or Float are accepted. The initial value is Float.
        /// </param>
        /// <param name="normalized"> 
        /// Specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: size,type,stride] 
        /// Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void VertexAttribPointer(Int32 index, Int32 size, OpenTK.Graphics.ES20.All type, bool normalized, Int32 stride, IntPtr pointer)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(385);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(OpenTK.Graphics.ES20.VertexAttribPointerType), typeof(bool), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="size"> 
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of each component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Fixed, or Float are accepted. The initial value is Float.
        /// </param>
        /// <param name="normalized"> 
        /// Specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: size,type,stride] 
        /// Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void VertexAttribPointer<T5>(Int32 index, Int32 size, OpenTK.Graphics.ES20.All type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[] pointer)
            where T5 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T5& pinned", "pointer_pinned");
                    if(pointer != null && pointer.Length != 0)
                    {
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T5");
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.LoadByName("pointer_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(385);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(OpenTK.Graphics.ES20.VertexAttribPointerType), typeof(bool), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="size"> 
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of each component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Fixed, or Float are accepted. The initial value is Float.
        /// </param>
        /// <param name="normalized"> 
        /// Specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: size,type,stride] 
        /// Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void VertexAttribPointer<T5>(Int32 index, Int32 size, OpenTK.Graphics.ES20.All type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[,] pointer)
            where T5 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T5& pinned", "pointer_pinned");
                    if(pointer != null && pointer.Length != 0)
                    {
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T5[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.LoadByName("pointer_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(385);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(OpenTK.Graphics.ES20.VertexAttribPointerType), typeof(bool), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="size"> 
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of each component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Fixed, or Float are accepted. The initial value is Float.
        /// </param>
        /// <param name="normalized"> 
        /// Specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: size,type,stride] 
        /// Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void VertexAttribPointer<T5>(Int32 index, Int32 size, OpenTK.Graphics.ES20.All type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[,,] pointer)
            where T5 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T5& pinned", "pointer_pinned");
                    if(pointer != null && pointer.Length != 0)
                    {
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T5[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.LoadByName("pointer_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(385);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(OpenTK.Graphics.ES20.VertexAttribPointerType), typeof(bool), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="size"> 
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of each component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Fixed, or Float are accepted. The initial value is Float.
        /// </param>
        /// <param name="normalized"> 
        /// Specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: size,type,stride] 
        /// Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void VertexAttribPointer<T5>(Int32 index, Int32 size, OpenTK.Graphics.ES20.All type, bool normalized, Int32 stride, [InAttribute, OutAttribute] ref T5 pointer)
            where T5 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T5& pinned", "pointer_pinned");
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.StoreByName("pointer_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.LoadByName("pointer_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(385);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(OpenTK.Graphics.ES20.VertexAttribPointerType), typeof(bool), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="size"> 
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of each component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Fixed, or Float are accepted. The initial value is Float.
        /// </param>
        /// <param name="normalized"> 
        /// Specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: size,type,stride] 
        /// Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
        /// </param>
        [CLSCompliant(false)]
        public static void VertexAttribPointer(Int32 index, Int32 size, OpenTK.Graphics.ES20.VertexAttribPointerType type, bool normalized, Int32 stride, IntPtr pointer)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(385);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(OpenTK.Graphics.ES20.VertexAttribPointerType), typeof(bool), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="size"> 
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of each component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Fixed, or Float are accepted. The initial value is Float.
        /// </param>
        /// <param name="normalized"> 
        /// Specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: size,type,stride] 
        /// Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
        /// </param>
        [CLSCompliant(false)]
        public static void VertexAttribPointer<T5>(Int32 index, Int32 size, OpenTK.Graphics.ES20.VertexAttribPointerType type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[] pointer)
            where T5 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T5& pinned", "pointer_pinned");
                    if(pointer != null && pointer.Length != 0)
                    {
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T5");
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.LoadByName("pointer_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(385);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(OpenTK.Graphics.ES20.VertexAttribPointerType), typeof(bool), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="size"> 
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of each component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Fixed, or Float are accepted. The initial value is Float.
        /// </param>
        /// <param name="normalized"> 
        /// Specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: size,type,stride] 
        /// Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
        /// </param>
        [CLSCompliant(false)]
        public static void VertexAttribPointer<T5>(Int32 index, Int32 size, OpenTK.Graphics.ES20.VertexAttribPointerType type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[,] pointer)
            where T5 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T5& pinned", "pointer_pinned");
                    if(pointer != null && pointer.Length != 0)
                    {
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T5[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.LoadByName("pointer_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(385);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(OpenTK.Graphics.ES20.VertexAttribPointerType), typeof(bool), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="size"> 
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of each component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Fixed, or Float are accepted. The initial value is Float.
        /// </param>
        /// <param name="normalized"> 
        /// Specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: size,type,stride] 
        /// Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
        /// </param>
        [CLSCompliant(false)]
        public static void VertexAttribPointer<T5>(Int32 index, Int32 size, OpenTK.Graphics.ES20.VertexAttribPointerType type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[,,] pointer)
            where T5 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T5& pinned", "pointer_pinned");
                    if(pointer != null && pointer.Length != 0)
                    {
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T5[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.LoadByName("pointer_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(385);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(OpenTK.Graphics.ES20.VertexAttribPointerType), typeof(bool), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="size"> 
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of each component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Fixed, or Float are accepted. The initial value is Float.
        /// </param>
        /// <param name="normalized"> 
        /// Specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: size,type,stride] 
        /// Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
        /// </param>
        [CLSCompliant(false)]
        public static void VertexAttribPointer<T5>(Int32 index, Int32 size, OpenTK.Graphics.ES20.VertexAttribPointerType type, bool normalized, Int32 stride, [InAttribute, OutAttribute] ref T5 pointer)
            where T5 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T5& pinned", "pointer_pinned");
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.StoreByName("pointer_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.LoadByName("pointer_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(385);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(OpenTK.Graphics.ES20.VertexAttribPointerType), typeof(bool), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="size"> 
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of each component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Fixed, or Float are accepted. The initial value is Float.
        /// </param>
        /// <param name="normalized"> 
        /// Specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: size,type,stride] 
        /// Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void VertexAttribPointer(UInt32 index, Int32 size, OpenTK.Graphics.ES20.All type, bool normalized, Int32 stride, IntPtr pointer)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(385);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(OpenTK.Graphics.ES20.VertexAttribPointerType), typeof(bool), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="size"> 
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of each component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Fixed, or Float are accepted. The initial value is Float.
        /// </param>
        /// <param name="normalized"> 
        /// Specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: size,type,stride] 
        /// Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void VertexAttribPointer<T5>(UInt32 index, Int32 size, OpenTK.Graphics.ES20.All type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[] pointer)
            where T5 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T5& pinned", "pointer_pinned");
                    if(pointer != null && pointer.Length != 0)
                    {
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T5");
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.LoadByName("pointer_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(385);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(OpenTK.Graphics.ES20.VertexAttribPointerType), typeof(bool), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="size"> 
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of each component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Fixed, or Float are accepted. The initial value is Float.
        /// </param>
        /// <param name="normalized"> 
        /// Specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: size,type,stride] 
        /// Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void VertexAttribPointer<T5>(UInt32 index, Int32 size, OpenTK.Graphics.ES20.All type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[,] pointer)
            where T5 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T5& pinned", "pointer_pinned");
                    if(pointer != null && pointer.Length != 0)
                    {
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T5[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.LoadByName("pointer_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(385);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(OpenTK.Graphics.ES20.VertexAttribPointerType), typeof(bool), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="size"> 
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of each component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Fixed, or Float are accepted. The initial value is Float.
        /// </param>
        /// <param name="normalized"> 
        /// Specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: size,type,stride] 
        /// Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void VertexAttribPointer<T5>(UInt32 index, Int32 size, OpenTK.Graphics.ES20.All type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[,,] pointer)
            where T5 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T5& pinned", "pointer_pinned");
                    if(pointer != null && pointer.Length != 0)
                    {
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T5[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.LoadByName("pointer_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(385);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(OpenTK.Graphics.ES20.VertexAttribPointerType), typeof(bool), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="size"> 
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of each component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Fixed, or Float are accepted. The initial value is Float.
        /// </param>
        /// <param name="normalized"> 
        /// Specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: size,type,stride] 
        /// Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [CLSCompliant(false)]
        public static void VertexAttribPointer<T5>(UInt32 index, Int32 size, OpenTK.Graphics.ES20.All type, bool normalized, Int32 stride, [InAttribute, OutAttribute] ref T5 pointer)
            where T5 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T5& pinned", "pointer_pinned");
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.StoreByName("pointer_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.LoadByName("pointer_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(385);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(OpenTK.Graphics.ES20.VertexAttribPointerType), typeof(bool), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="size"> 
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of each component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Fixed, or Float are accepted. The initial value is Float.
        /// </param>
        /// <param name="normalized"> 
        /// Specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: size,type,stride] 
        /// Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
        /// </param>
        [CLSCompliant(false)]
        public static void VertexAttribPointer(UInt32 index, Int32 size, OpenTK.Graphics.ES20.VertexAttribPointerType type, bool normalized, Int32 stride, IntPtr pointer)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(385);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(OpenTK.Graphics.ES20.VertexAttribPointerType), typeof(bool), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="size"> 
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of each component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Fixed, or Float are accepted. The initial value is Float.
        /// </param>
        /// <param name="normalized"> 
        /// Specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: size,type,stride] 
        /// Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
        /// </param>
        [CLSCompliant(false)]
        public static void VertexAttribPointer<T5>(UInt32 index, Int32 size, OpenTK.Graphics.ES20.VertexAttribPointerType type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[] pointer)
            where T5 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T5& pinned", "pointer_pinned");
                    if(pointer != null && pointer.Length != 0)
                    {
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelema("T5");
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.LoadByName("pointer_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(385);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(OpenTK.Graphics.ES20.VertexAttribPointerType), typeof(bool), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="size"> 
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of each component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Fixed, or Float are accepted. The initial value is Float.
        /// </param>
        /// <param name="normalized"> 
        /// Specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: size,type,stride] 
        /// Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
        /// </param>
        [CLSCompliant(false)]
        public static void VertexAttribPointer<T5>(UInt32 index, Int32 size, OpenTK.Graphics.ES20.VertexAttribPointerType type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[,] pointer)
            where T5 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T5& pinned", "pointer_pinned");
                    if(pointer != null && pointer.Length != 0)
                    {
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T5[,]::Address(System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.LoadByName("pointer_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(385);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(OpenTK.Graphics.ES20.VertexAttribPointerType), typeof(bool), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="size"> 
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of each component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Fixed, or Float are accepted. The initial value is Float.
        /// </param>
        /// <param name="normalized"> 
        /// Specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: size,type,stride] 
        /// Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
        /// </param>
        [CLSCompliant(false)]
        public static void VertexAttribPointer<T5>(UInt32 index, Int32 size, OpenTK.Graphics.ES20.VertexAttribPointerType type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[,,] pointer)
            where T5 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T5& pinned", "pointer_pinned");
                    if(pointer != null && pointer.Length != 0)
                    {
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Call("T5[,,]::Address(System.Int32,System.Int32,System.Int32)");
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    else
                    {
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Conv_U();
                        Silk.Cil.StoreByName("pointer_pinned");
                    }
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.LoadByName("pointer_pinned");
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(385);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(OpenTK.Graphics.ES20.VertexAttribPointerType), typeof(bool), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="size"> 
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of each component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Fixed, or Float are accepted. The initial value is Float.
        /// </param>
        /// <param name="normalized"> 
        /// Specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: size,type,stride] 
        /// Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
        /// </param>
        [CLSCompliant(false)]
        public static void VertexAttribPointer<T5>(UInt32 index, Int32 size, OpenTK.Graphics.ES20.VertexAttribPointerType type, bool normalized, Int32 stride, [InAttribute, OutAttribute] ref T5 pointer)
            where T5 : struct

        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.DeclareLocal("T5& pinned", "pointer_pinned");
                    Silk.Cil.Ldarg(5);
                    Silk.Cil.StoreByName("pointer_pinned");
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Ldarg(4);
                    Silk.Cil.LoadByName("pointer_pinned");
                    Silk.Cil.Conv_I();
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(385);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(OpenTK.Graphics.ES20.VertexAttribPointerType), typeof(bool), typeof(Int32), typeof(IntPtr));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set the viewport
        /// </summary>
        /// <param name="x"> 
        /// Specify the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0).
        /// </param>
        /// <param name="y"> 
        /// Specify the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0).
        /// </param>
        /// <param name="width"> 
        /// Specify the width and height of the viewport. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
        /// </param>
        /// <param name="height"> 
        /// Specify the width and height of the viewport. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
        /// </param>
        public static void Viewport(Int32 x, Int32 y, Int32 width, Int32 height)
        {
            unsafe
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                    Silk.Cil.Ldarg(0);
                    Silk.Cil.Ldarg(1);
                    Silk.Cil.Ldarg(2);
                    Silk.Cil.Ldarg(3);
                    Silk.Cil.Load(EntryPoints);
                    Silk.Cil.Ldc_I4(386);
                    Silk.Cil.Ldelem_I();
                    Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32));
                #if DEBUG
                }
                #endif
                Silk.Cil.Ret();
                throw new InvalidProgramException();
            }
        }

        public static partial class Ext
        {
            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            [CLSCompliant(false)]
            public static void ActiveProgram(Int32 program)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            [CLSCompliant(false)]
            public static void ActiveProgram(UInt32 program)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(0);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Set the active program object for a program pipeline object
            /// </summary>
            /// <param name="pipeline"> 
            /// Specifies the program pipeline object to set the active program object for.
            /// </param>
            /// <param name="program"> 
            /// Specifies the program object to set as the active program pipeline object pipeline.
            /// </param>
            [CLSCompliant(false)]
            public static void ActiveShaderProgram(Int32 pipeline, Int32 program)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(1);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Set the active program object for a program pipeline object
            /// </summary>
            /// <param name="pipeline"> 
            /// Specifies the program pipeline object to set the active program object for.
            /// </param>
            /// <param name="program"> 
            /// Specifies the program object to set as the active program pipeline object pipeline.
            /// </param>
            [CLSCompliant(false)]
            public static void ActiveShaderProgram(UInt32 pipeline, UInt32 program)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(1);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Delimit the boundaries of a query object
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target type of query object established between glBeginQuery and the subsequent glEndQuery. The symbolic constant must be one of SamplesPassed, AnySamplesPassed, AnySamplesPassedConservative, PrimitivesGenerated, TransformFeedbackPrimitivesWritten, or TimeElapsed.
            /// </param>
            /// <param name="id"> 
            /// Specifies the name of a query object.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void BeginQuery(OpenTK.Graphics.ES20.All target, Int32 id)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(7);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.QueryTarget), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Delimit the boundaries of a query object
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target type of query object established between glBeginQuery and the subsequent glEndQuery. The symbolic constant must be one of SamplesPassed, AnySamplesPassed, AnySamplesPassedConservative, PrimitivesGenerated, TransformFeedbackPrimitivesWritten, or TimeElapsed.
            /// </param>
            /// <param name="id"> 
            /// Specifies the name of a query object.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void BeginQuery(OpenTK.Graphics.ES20.All target, UInt32 id)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(7);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.QueryTarget), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Delimit the boundaries of a query object
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target type of query object established between glBeginQuery and the subsequent glEndQuery. The symbolic constant must be one of SamplesPassed, AnySamplesPassed, AnySamplesPassedConservative, PrimitivesGenerated, TransformFeedbackPrimitivesWritten, or TimeElapsed.
            /// </param>
            /// <param name="id"> 
            /// Specifies the name of a query object.
            /// </param>
            [CLSCompliant(false)]
            public static void BeginQuery(OpenTK.Graphics.ES20.QueryTarget target, Int32 id)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(7);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.QueryTarget), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Delimit the boundaries of a query object
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target type of query object established between glBeginQuery and the subsequent glEndQuery. The symbolic constant must be one of SamplesPassed, AnySamplesPassed, AnySamplesPassedConservative, PrimitivesGenerated, TransformFeedbackPrimitivesWritten, or TimeElapsed.
            /// </param>
            /// <param name="id"> 
            /// Specifies the name of a query object.
            /// </param>
            [CLSCompliant(false)]
            public static void BeginQuery(OpenTK.Graphics.ES20.QueryTarget target, UInt32 id)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(7);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.QueryTarget), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Bind a program pipeline to the current context
            /// </summary>
            /// <param name="pipeline"> 
            /// Specifies the name of the pipeline object to bind to the context.
            /// </param>
            [CLSCompliant(false)]
            public static void BindProgramPipeline(Int32 pipeline)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(11);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Bind a program pipeline to the current context
            /// </summary>
            /// <param name="pipeline"> 
            /// Specifies the name of the pipeline object to bind to the context.
            /// </param>
            [CLSCompliant(false)]
            public static void BindProgramPipeline(UInt32 pipeline)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(11);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_blend_minmax]
            /// Specify the equation used for both the RGB blend equation and the Alpha blend equation
            /// </summary>
            /// <param name="mode"> 
            /// specifies how source and destination colors are combined. It must be FuncAdd, FuncSubtract, or FuncReverseSubtract.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            public static void BlendEquation(OpenTK.Graphics.ES20.All mode)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(19);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BlendEquationMode));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_blend_minmax]
            /// Specify the equation used for both the RGB blend equation and the Alpha blend equation
            /// </summary>
            /// <param name="mode"> 
            /// specifies how source and destination colors are combined. It must be FuncAdd, FuncSubtract, or FuncReverseSubtract.
            /// </param>
            public static void BlendEquation(OpenTK.Graphics.ES20.BlendEquationMode mode)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(19);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BlendEquationMode));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_draw_buffers_indexed]
            /// Specify the equation used for both the RGB blend equation and the Alpha blend equation
            /// </summary>
            /// <param name="buf"> 
            /// specifies how source and destination colors are combined. It must be FuncAdd, FuncSubtract, or FuncReverseSubtract.
            /// </param>
            /// <param name="mode"> 
            /// specifies how source and destination colors are combined. It must be FuncAdd, FuncSubtract, or FuncReverseSubtract.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void BlendEquation(Int32 buf, OpenTK.Graphics.ES20.All mode)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(20);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.BlendEquationMode));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_draw_buffers_indexed]
            /// Specify the equation used for both the RGB blend equation and the Alpha blend equation
            /// </summary>
            /// <param name="buf"> 
            /// specifies how source and destination colors are combined. It must be FuncAdd, FuncSubtract, or FuncReverseSubtract.
            /// </param>
            /// <param name="mode"> 
            /// specifies how source and destination colors are combined. It must be FuncAdd, FuncSubtract, or FuncReverseSubtract.
            /// </param>
            [CLSCompliant(false)]
            public static void BlendEquation(Int32 buf, OpenTK.Graphics.ES20.BlendEquationMode mode)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(20);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.BlendEquationMode));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_draw_buffers_indexed]
            /// Specify the equation used for both the RGB blend equation and the Alpha blend equation
            /// </summary>
            /// <param name="buf"> 
            /// specifies how source and destination colors are combined. It must be FuncAdd, FuncSubtract, or FuncReverseSubtract.
            /// </param>
            /// <param name="mode"> 
            /// specifies how source and destination colors are combined. It must be FuncAdd, FuncSubtract, or FuncReverseSubtract.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void BlendEquation(UInt32 buf, OpenTK.Graphics.ES20.All mode)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(20);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.BlendEquationMode));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_draw_buffers_indexed]
            /// Specify the equation used for both the RGB blend equation and the Alpha blend equation
            /// </summary>
            /// <param name="buf"> 
            /// specifies how source and destination colors are combined. It must be FuncAdd, FuncSubtract, or FuncReverseSubtract.
            /// </param>
            /// <param name="mode"> 
            /// specifies how source and destination colors are combined. It must be FuncAdd, FuncSubtract, or FuncReverseSubtract.
            /// </param>
            [CLSCompliant(false)]
            public static void BlendEquation(UInt32 buf, OpenTK.Graphics.ES20.BlendEquationMode mode)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(20);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.BlendEquationMode));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_draw_buffers_indexed]
            /// Set the RGB blend equation and the alpha blend equation separately
            /// </summary>
            /// <param name="buf"> 
            /// specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, or FuncReverseSubtract.
            /// </param>
            /// <param name="modeRGB"> 
            /// specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, or FuncReverseSubtract.
            /// </param>
            /// <param name="modeAlpha"> 
            /// specifies the alpha blend equation, how the alpha component of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, or FuncReverseSubtract.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void BlendEquationSeparate(Int32 buf, OpenTK.Graphics.ES20.All modeRGB, OpenTK.Graphics.ES20.All modeAlpha)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(22);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.BlendEquationMode), typeof(OpenTK.Graphics.ES20.BlendEquationMode));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_draw_buffers_indexed]
            /// Set the RGB blend equation and the alpha blend equation separately
            /// </summary>
            /// <param name="buf"> 
            /// specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, or FuncReverseSubtract.
            /// </param>
            /// <param name="modeRGB"> 
            /// specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, or FuncReverseSubtract.
            /// </param>
            /// <param name="modeAlpha"> 
            /// specifies the alpha blend equation, how the alpha component of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, or FuncReverseSubtract.
            /// </param>
            [CLSCompliant(false)]
            public static void BlendEquationSeparate(Int32 buf, OpenTK.Graphics.ES20.BlendEquationMode modeRGB, OpenTK.Graphics.ES20.BlendEquationMode modeAlpha)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(22);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.BlendEquationMode), typeof(OpenTK.Graphics.ES20.BlendEquationMode));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_draw_buffers_indexed]
            /// Set the RGB blend equation and the alpha blend equation separately
            /// </summary>
            /// <param name="buf"> 
            /// specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, or FuncReverseSubtract.
            /// </param>
            /// <param name="modeRGB"> 
            /// specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, or FuncReverseSubtract.
            /// </param>
            /// <param name="modeAlpha"> 
            /// specifies the alpha blend equation, how the alpha component of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, or FuncReverseSubtract.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void BlendEquationSeparate(UInt32 buf, OpenTK.Graphics.ES20.All modeRGB, OpenTK.Graphics.ES20.All modeAlpha)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(22);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.BlendEquationMode), typeof(OpenTK.Graphics.ES20.BlendEquationMode));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_draw_buffers_indexed]
            /// Set the RGB blend equation and the alpha blend equation separately
            /// </summary>
            /// <param name="buf"> 
            /// specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, or FuncReverseSubtract.
            /// </param>
            /// <param name="modeRGB"> 
            /// specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, or FuncReverseSubtract.
            /// </param>
            /// <param name="modeAlpha"> 
            /// specifies the alpha blend equation, how the alpha component of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, or FuncReverseSubtract.
            /// </param>
            [CLSCompliant(false)]
            public static void BlendEquationSeparate(UInt32 buf, OpenTK.Graphics.ES20.BlendEquationMode modeRGB, OpenTK.Graphics.ES20.BlendEquationMode modeAlpha)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(22);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.BlendEquationMode), typeof(OpenTK.Graphics.ES20.BlendEquationMode));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_draw_buffers_indexed]
            /// Specify pixel arithmetic
            /// </summary>
            /// <param name="buf"> 
            /// Specifies how the red, green, blue, and alpha source blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha, ConstantColor, OneMinusConstantColor, ConstantAlpha, OneMinusConstantAlpha, and SrcAlphaSaturate. The initial value is One.
            /// </param>
            /// <param name="src"> 
            /// Specifies how the red, green, blue, and alpha destination blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha. ConstantColor, OneMinusConstantColor, ConstantAlpha, and OneMinusConstantAlpha. The initial value is Zero.
            /// </param>
            /// <param name="dst"></param>
            [CLSCompliant(false)]
            public static void BlendFunc(Int32 buf, OpenTK.Graphics.ES20.All src, OpenTK.Graphics.ES20.All dst)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(24);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(OpenTK.Graphics.ES20.All));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_draw_buffers_indexed]
            /// Specify pixel arithmetic
            /// </summary>
            /// <param name="buf"> 
            /// Specifies how the red, green, blue, and alpha source blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha, ConstantColor, OneMinusConstantColor, ConstantAlpha, OneMinusConstantAlpha, and SrcAlphaSaturate. The initial value is One.
            /// </param>
            /// <param name="src"> 
            /// Specifies how the red, green, blue, and alpha destination blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha. ConstantColor, OneMinusConstantColor, ConstantAlpha, and OneMinusConstantAlpha. The initial value is Zero.
            /// </param>
            /// <param name="dst"></param>
            [CLSCompliant(false)]
            public static void BlendFunc(UInt32 buf, OpenTK.Graphics.ES20.All src, OpenTK.Graphics.ES20.All dst)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(24);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(OpenTK.Graphics.ES20.All));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_draw_buffers_indexed]
            /// Specify pixel arithmetic for RGB and alpha components separately
            /// </summary>
            /// <param name="buf"> 
            /// Specifies how the red, green, and blue blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha, ConstantColor, OneMinusConstantColor, ConstantAlpha, OneMinusConstantAlpha, and SrcAlphaSaturate. The initial value is One.
            /// </param>
            /// <param name="srcRGB"> 
            /// Specifies how the red, green, and blue blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha, ConstantColor, OneMinusConstantColor, ConstantAlpha, OneMinusConstantAlpha, and SrcAlphaSaturate. The initial value is One.
            /// </param>
            /// <param name="dstRGB"> 
            /// Specifies how the red, green, and blue destination blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha. ConstantColor, OneMinusConstantColor, ConstantAlpha, and OneMinusConstantAlpha. The initial value is Zero.
            /// </param>
            /// <param name="srcAlpha"> 
            /// Specified how the alpha source blending factor is computed.  The same symbolic constants are accepted as for srcRGB. The initial value is One.
            /// </param>
            /// <param name="dstAlpha"> 
            /// Specified how the alpha destination blending factor is computed.  The same symbolic constants are accepted as for dstRGB. The initial value is Zero.
            /// </param>
            [CLSCompliant(false)]
            public static void BlendFuncSeparate(Int32 buf, OpenTK.Graphics.ES20.All srcRGB, OpenTK.Graphics.ES20.All dstRGB, OpenTK.Graphics.ES20.All srcAlpha, OpenTK.Graphics.ES20.All dstAlpha)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(26);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(OpenTK.Graphics.ES20.All), typeof(OpenTK.Graphics.ES20.All), typeof(OpenTK.Graphics.ES20.All));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_draw_buffers_indexed]
            /// Specify pixel arithmetic for RGB and alpha components separately
            /// </summary>
            /// <param name="buf"> 
            /// Specifies how the red, green, and blue blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha, ConstantColor, OneMinusConstantColor, ConstantAlpha, OneMinusConstantAlpha, and SrcAlphaSaturate. The initial value is One.
            /// </param>
            /// <param name="srcRGB"> 
            /// Specifies how the red, green, and blue blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha, ConstantColor, OneMinusConstantColor, ConstantAlpha, OneMinusConstantAlpha, and SrcAlphaSaturate. The initial value is One.
            /// </param>
            /// <param name="dstRGB"> 
            /// Specifies how the red, green, and blue destination blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha. ConstantColor, OneMinusConstantColor, ConstantAlpha, and OneMinusConstantAlpha. The initial value is Zero.
            /// </param>
            /// <param name="srcAlpha"> 
            /// Specified how the alpha source blending factor is computed.  The same symbolic constants are accepted as for srcRGB. The initial value is One.
            /// </param>
            /// <param name="dstAlpha"> 
            /// Specified how the alpha destination blending factor is computed.  The same symbolic constants are accepted as for dstRGB. The initial value is Zero.
            /// </param>
            [CLSCompliant(false)]
            public static void BlendFuncSeparate(UInt32 buf, OpenTK.Graphics.ES20.All srcRGB, OpenTK.Graphics.ES20.All dstRGB, OpenTK.Graphics.ES20.All srcAlpha, OpenTK.Graphics.ES20.All dstAlpha)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(26);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(OpenTK.Graphics.ES20.All), typeof(OpenTK.Graphics.ES20.All), typeof(OpenTK.Graphics.ES20.All));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_draw_buffers_indexed]
            /// Enable and disable writing of frame buffer color components
            /// </summary>
            /// <param name="index"> 
            /// Specify whether red, green, blue, and alpha can or cannot be written into the frame buffer. The initial values are all True, indicating that the color components can be written.
            /// </param>
            /// <param name="r"> 
            /// Specify whether red, green, blue, and alpha can or cannot be written into the frame buffer. The initial values are all True, indicating that the color components can be written.
            /// </param>
            /// <param name="g"> 
            /// Specify whether red, green, blue, and alpha can or cannot be written into the frame buffer. The initial values are all True, indicating that the color components can be written.
            /// </param>
            /// <param name="b"> 
            /// Specify whether red, green, blue, and alpha can or cannot be written into the frame buffer. The initial values are all True, indicating that the color components can be written.
            /// </param>
            /// <param name="a"></param>
            [CLSCompliant(false)]
            public static void ColorMask(Int32 index, bool r, bool g, bool b, bool a)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(39);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(bool), typeof(bool), typeof(bool), typeof(bool));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_draw_buffers_indexed]
            /// Enable and disable writing of frame buffer color components
            /// </summary>
            /// <param name="index"> 
            /// Specify whether red, green, blue, and alpha can or cannot be written into the frame buffer. The initial values are all True, indicating that the color components can be written.
            /// </param>
            /// <param name="r"> 
            /// Specify whether red, green, blue, and alpha can or cannot be written into the frame buffer. The initial values are all True, indicating that the color components can be written.
            /// </param>
            /// <param name="g"> 
            /// Specify whether red, green, blue, and alpha can or cannot be written into the frame buffer. The initial values are all True, indicating that the color components can be written.
            /// </param>
            /// <param name="b"> 
            /// Specify whether red, green, blue, and alpha can or cannot be written into the frame buffer. The initial values are all True, indicating that the color components can be written.
            /// </param>
            /// <param name="a"></param>
            [CLSCompliant(false)]
            public static void ColorMask(UInt32 index, bool r, bool g, bool b, bool a)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(39);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(bool), typeof(bool), typeof(bool), typeof(bool));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_copy_image]
            /// Perform a raw data copy between two images
            /// </summary>
            /// <param name="srcName"> 
            /// The name of a texture or renderbuffer object from which to copy.
            /// </param>
            /// <param name="srcTarget"> 
            /// The target representing the namespace of the source name srcName.
            /// </param>
            /// <param name="srcLevel"> 
            /// The mipmap level to read from the source.
            /// </param>
            /// <param name="srcX"> 
            /// The X coordinate of the left edge of the souce region to copy.
            /// </param>
            /// <param name="srcY"> 
            /// The Y coordinate of the top edge of the souce region to copy.
            /// </param>
            /// <param name="srcZ"> 
            /// The Z coordinate of the near edge of the souce region to copy.
            /// </param>
            /// <param name="dstName"> 
            /// The name of a texture or renderbuffer object to which to copy.
            /// </param>
            /// <param name="dstTarget"> 
            /// The target representing the namespace of the destination name dstName.
            /// </param>
            /// <param name="dstLevel"> 
            /// The X coordinate of the left edge of the destination region.
            /// </param>
            /// <param name="dstX"> 
            /// The X coordinate of the left edge of the destination region.
            /// </param>
            /// <param name="dstY"> 
            /// The Y coordinate of the top edge of the destination region.
            /// </param>
            /// <param name="dstZ"> 
            /// The Z coordinate of the near edge of the destination region.
            /// </param>
            /// <param name="srcWidth"> 
            /// The width of the region to be copied.
            /// </param>
            /// <param name="srcHeight"> 
            /// The height of the region to be copied.
            /// </param>
            /// <param name="srcDepth"> 
            /// The depth of the region to be copied.
            /// </param>
            [CLSCompliant(false)]
            public static void CopyImageSubData(Int32 srcName, OpenTK.Graphics.ES20.All srcTarget, Int32 srcLevel, Int32 srcX, Int32 srcY, Int32 srcZ, Int32 dstName, OpenTK.Graphics.ES20.All dstTarget, Int32 dstLevel, Int32 dstX, Int32 dstY, Int32 dstZ, Int32 srcWidth, Int32 srcHeight, Int32 srcDepth)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldarg(9);
                        Silk.Cil.Ldarg(10);
                        Silk.Cil.Ldarg(11);
                        Silk.Cil.Ldarg(12);
                        Silk.Cil.Ldarg(13);
                        Silk.Cil.Ldarg(14);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(46);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_copy_image]
            /// Perform a raw data copy between two images
            /// </summary>
            /// <param name="srcName"> 
            /// The name of a texture or renderbuffer object from which to copy.
            /// </param>
            /// <param name="srcTarget"> 
            /// The target representing the namespace of the source name srcName.
            /// </param>
            /// <param name="srcLevel"> 
            /// The mipmap level to read from the source.
            /// </param>
            /// <param name="srcX"> 
            /// The X coordinate of the left edge of the souce region to copy.
            /// </param>
            /// <param name="srcY"> 
            /// The Y coordinate of the top edge of the souce region to copy.
            /// </param>
            /// <param name="srcZ"> 
            /// The Z coordinate of the near edge of the souce region to copy.
            /// </param>
            /// <param name="dstName"> 
            /// The name of a texture or renderbuffer object to which to copy.
            /// </param>
            /// <param name="dstTarget"> 
            /// The target representing the namespace of the destination name dstName.
            /// </param>
            /// <param name="dstLevel"> 
            /// The X coordinate of the left edge of the destination region.
            /// </param>
            /// <param name="dstX"> 
            /// The X coordinate of the left edge of the destination region.
            /// </param>
            /// <param name="dstY"> 
            /// The Y coordinate of the top edge of the destination region.
            /// </param>
            /// <param name="dstZ"> 
            /// The Z coordinate of the near edge of the destination region.
            /// </param>
            /// <param name="srcWidth"> 
            /// The width of the region to be copied.
            /// </param>
            /// <param name="srcHeight"> 
            /// The height of the region to be copied.
            /// </param>
            /// <param name="srcDepth"> 
            /// The depth of the region to be copied.
            /// </param>
            [CLSCompliant(false)]
            public static void CopyImageSubData(UInt32 srcName, OpenTK.Graphics.ES20.All srcTarget, Int32 srcLevel, Int32 srcX, Int32 srcY, Int32 srcZ, UInt32 dstName, OpenTK.Graphics.ES20.All dstTarget, Int32 dstLevel, Int32 dstX, Int32 dstY, Int32 dstZ, Int32 srcWidth, Int32 srcHeight, Int32 srcDepth)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldarg(9);
                        Silk.Cil.Ldarg(10);
                        Silk.Cil.Ldarg(11);
                        Silk.Cil.Ldarg(12);
                        Silk.Cil.Ldarg(13);
                        Silk.Cil.Ldarg(14);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(46);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Create a stand-alone program from an array of null-terminated source code strings
            /// </summary>
            /// <param name="type"> 
            /// Specifies the type of shader to create.
            /// </param>
            /// <param name="@string"> 
            /// Specifies the number of source code strings in the array strings.
            /// </param>
            public static Int32 CreateShaderProgram(OpenTK.Graphics.ES20.All type, String @string)
            {
                unsafe
                {
                    Int32 __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr @string_string_ptr = MarshalStringToPtr(@string);
                        try {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Load(@string_string_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(56);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(Int32), typeof(OpenTK.Graphics.ES20.All), typeof(IntPtr));
                            Silk.Cil.Store(out __return_result);
                        } finally {
                            FreeStringPtr(@string_string_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Create a stand-alone program from an array of null-terminated source code strings
            /// </summary>
            /// <param name="type"> 
            /// Specifies the type of shader to create.
            /// </param>
            /// <param name="count"> 
            /// Specifies the number of source code strings in the array strings.
            /// </param>
            /// <param name="strings">[length: count] 
            /// Specifies the address of an array of pointers to source code strings from which to create the program object.
            /// </param>
            public static Int32 CreateShaderProgram(OpenTK.Graphics.ES20.All type, Int32 count, String[] strings)
            {
                unsafe
                {
                    Int32 __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr strings_string_array_ptr = MarshalStringArrayToPtr(strings);
                        try {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Load(strings_string_array_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(57);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(Int32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32), typeof(IntPtr));
                            Silk.Cil.Store(out __return_result);
                        } finally {
                            FreeStringArrayPtr(strings_string_array_ptr, strings.Length);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Delete program pipeline objects
            /// </summary>
            /// <param name="pipelines">[length: n] 
            /// Specifies an array of names of program pipeline objects to delete.
            /// </param>
            [CLSCompliant(false)]
            public static void DeleteProgramPipeline(Int32 pipelines)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldc_I4(1);
                        Silk.Cil.LoadAddress(pipelines);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(71);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Delete program pipeline objects
            /// </summary>
            /// <param name="pipelines">[length: n] 
            /// Specifies an array of names of program pipeline objects to delete.
            /// </param>
            [CLSCompliant(false)]
            public static void DeleteProgramPipeline(UInt32 pipelines)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldc_I4(1);
                        Silk.Cil.LoadAddress(pipelines);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(71);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Delete program pipeline objects
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of program pipeline objects to delete.
            /// </param>
            /// <param name="pipelines">[length: n] 
            /// Specifies an array of names of program pipeline objects to delete.
            /// </param>
            [CLSCompliant(false)]
            public static void DeleteProgramPipelines(Int32 n, Int32[] pipelines)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "pipelines_pinned");
                        if(pipelines != null && pipelines.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("pipelines_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("pipelines_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("pipelines_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(71);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Delete program pipeline objects
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of program pipeline objects to delete.
            /// </param>
            /// <param name="pipelines">[length: n] 
            /// Specifies an array of names of program pipeline objects to delete.
            /// </param>
            [CLSCompliant(false)]
            public static void DeleteProgramPipelines(Int32 n, ref Int32 pipelines)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "pipelines_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("pipelines_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("pipelines_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(71);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Delete program pipeline objects
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of program pipeline objects to delete.
            /// </param>
            /// <param name="pipelines">[length: n] 
            /// Specifies an array of names of program pipeline objects to delete.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void DeleteProgramPipelines(Int32 n, Int32* pipelines)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(71);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Delete program pipeline objects
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of program pipeline objects to delete.
            /// </param>
            /// <param name="pipelines">[length: n] 
            /// Specifies an array of names of program pipeline objects to delete.
            /// </param>
            [CLSCompliant(false)]
            public static void DeleteProgramPipelines(Int32 n, UInt32[] pipelines)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "pipelines_pinned");
                        if(pipelines != null && pipelines.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("pipelines_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("pipelines_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("pipelines_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(71);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Delete program pipeline objects
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of program pipeline objects to delete.
            /// </param>
            /// <param name="pipelines">[length: n] 
            /// Specifies an array of names of program pipeline objects to delete.
            /// </param>
            [CLSCompliant(false)]
            public static void DeleteProgramPipelines(Int32 n, ref UInt32 pipelines)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "pipelines_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("pipelines_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("pipelines_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(71);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Delete program pipeline objects
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of program pipeline objects to delete.
            /// </param>
            /// <param name="pipelines">[length: n] 
            /// Specifies an array of names of program pipeline objects to delete.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void DeleteProgramPipelines(Int32 n, UInt32* pipelines)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(71);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Delete named query objects
            /// </summary>
            /// <param name="ids">[length: n] 
            /// Specifies an array of query objects to be deleted.
            /// </param>
            [CLSCompliant(false)]
            public static void DeleteQuery(Int32 ids)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldc_I4(1);
                        Silk.Cil.LoadAddress(ids);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(72);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Delete named query objects
            /// </summary>
            /// <param name="ids">[length: n] 
            /// Specifies an array of query objects to be deleted.
            /// </param>
            [CLSCompliant(false)]
            public static void DeleteQuery(UInt32 ids)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldc_I4(1);
                        Silk.Cil.LoadAddress(ids);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(72);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Delete named query objects
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of query objects to be deleted.
            /// </param>
            /// <param name="ids">[length: n] 
            /// Specifies an array of query objects to be deleted.
            /// </param>
            [CLSCompliant(false)]
            public static void DeleteQueries(Int32 n, Int32[] ids)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "ids_pinned");
                        if(ids != null && ids.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("ids_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("ids_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("ids_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(72);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Delete named query objects
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of query objects to be deleted.
            /// </param>
            /// <param name="ids">[length: n] 
            /// Specifies an array of query objects to be deleted.
            /// </param>
            [CLSCompliant(false)]
            public static void DeleteQueries(Int32 n, ref Int32 ids)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "ids_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("ids_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("ids_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(72);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Delete named query objects
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of query objects to be deleted.
            /// </param>
            /// <param name="ids">[length: n] 
            /// Specifies an array of query objects to be deleted.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void DeleteQueries(Int32 n, Int32* ids)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(72);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Delete named query objects
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of query objects to be deleted.
            /// </param>
            /// <param name="ids">[length: n] 
            /// Specifies an array of query objects to be deleted.
            /// </param>
            [CLSCompliant(false)]
            public static void DeleteQueries(Int32 n, UInt32[] ids)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "ids_pinned");
                        if(ids != null && ids.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("ids_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("ids_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("ids_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(72);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Delete named query objects
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of query objects to be deleted.
            /// </param>
            /// <param name="ids">[length: n] 
            /// Specifies an array of query objects to be deleted.
            /// </param>
            [CLSCompliant(false)]
            public static void DeleteQueries(Int32 n, ref UInt32 ids)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "ids_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("ids_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("ids_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(72);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Delete named query objects
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of query objects to be deleted.
            /// </param>
            /// <param name="ids">[length: n] 
            /// Specifies an array of query objects to be deleted.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void DeleteQueries(Int32 n, UInt32* ids)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(72);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_draw_buffers_indexed]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            [CLSCompliant(false)]
            public static void Disable(OpenTK.Graphics.ES20.All target, Int32 index)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(84);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.All), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_draw_buffers_indexed]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            [CLSCompliant(false)]
            public static void Disable(OpenTK.Graphics.ES20.All target, UInt32 index)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(84);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.All), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_discard_framebuffer]</summary>
            /// <param name="target"></param>
            /// <param name="numAttachments"></param>
            /// <param name="attachments">[length: numAttachments]</param>
            [CLSCompliant(false)]
            public static void DiscardFramebuffer(OpenTK.Graphics.ES20.All target, Int32 numAttachments, OpenTK.Graphics.ES20.All[] attachments)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.All& pinned", "attachments_pinned");
                        if(attachments != null && attachments.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("OpenTK.Graphics.ES20.All");
                            Silk.Cil.StoreByName("attachments_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("attachments_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("attachments_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(86);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.All), typeof(Int32), typeof(OpenTK.Graphics.ES20.All*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_discard_framebuffer]</summary>
            /// <param name="target"></param>
            /// <param name="numAttachments"></param>
            /// <param name="attachments">[length: numAttachments]</param>
            [CLSCompliant(false)]
            public static void DiscardFramebuffer(OpenTK.Graphics.ES20.All target, Int32 numAttachments, ref OpenTK.Graphics.ES20.All attachments)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.All& pinned", "attachments_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("attachments_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("attachments_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(86);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.All), typeof(Int32), typeof(OpenTK.Graphics.ES20.All*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_discard_framebuffer]</summary>
            /// <param name="target"></param>
            /// <param name="numAttachments"></param>
            /// <param name="attachments">[length: numAttachments]</param>
            [CLSCompliant(false)]
            public static unsafe void DiscardFramebuffer(OpenTK.Graphics.ES20.All target, Int32 numAttachments, OpenTK.Graphics.ES20.All* attachments)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(86);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.All), typeof(Int32), typeof(OpenTK.Graphics.ES20.All*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_draw_instanced|EXT_instanced_arrays]
            /// Draw multiple instances of a range of elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, TrianglesLinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
            /// </param>
            /// <param name="start"> 
            /// Specifies the starting index in the enabled arrays.
            /// </param>
            /// <param name="count"> 
            /// Specifies the number of indices to be rendered.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            public static void DrawArraysInstanced(OpenTK.Graphics.ES20.All mode, Int32 start, Int32 count, Int32 primcount)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(89);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_draw_instanced|EXT_instanced_arrays]
            /// Draw multiple instances of a range of elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, TrianglesLinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
            /// </param>
            /// <param name="start"> 
            /// Specifies the starting index in the enabled arrays.
            /// </param>
            /// <param name="count"> 
            /// Specifies the number of indices to be rendered.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            public static void DrawArraysInstanced(OpenTK.Graphics.ES20.PrimitiveType mode, Int32 start, Int32 count, Int32 primcount)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(89);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_draw_buffers]
            /// Specifies a list of color buffers to be drawn into
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of buffers in bufs.
            /// </param>
            /// <param name="bufs"> 
            /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void DrawBuffers(Int32 n, OpenTK.Graphics.ES20.All[] bufs)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.All& pinned", "bufs_pinned");
                        if(bufs != null && bufs.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("OpenTK.Graphics.ES20.All");
                            Silk.Cil.StoreByName("bufs_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("bufs_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("bufs_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(91);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(OpenTK.Graphics.ES20.DrawBufferMode*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_draw_buffers]
            /// Specifies a list of color buffers to be drawn into
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of buffers in bufs.
            /// </param>
            /// <param name="bufs"> 
            /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void DrawBuffers(Int32 n, ref OpenTK.Graphics.ES20.All bufs)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.All& pinned", "bufs_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("bufs_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("bufs_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(91);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(OpenTK.Graphics.ES20.DrawBufferMode*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_draw_buffers]
            /// Specifies a list of color buffers to be drawn into
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of buffers in bufs.
            /// </param>
            /// <param name="bufs"> 
            /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static unsafe void DrawBuffers(Int32 n, OpenTK.Graphics.ES20.All* bufs)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(91);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(OpenTK.Graphics.ES20.DrawBufferMode*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_draw_buffers]
            /// Specifies a list of color buffers to be drawn into
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of buffers in bufs.
            /// </param>
            /// <param name="bufs"> 
            /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
            /// </param>
            [CLSCompliant(false)]
            public static void DrawBuffers(Int32 n, OpenTK.Graphics.ES20.DrawBufferMode[] bufs)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.DrawBufferMode& pinned", "bufs_pinned");
                        if(bufs != null && bufs.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("OpenTK.Graphics.ES20.DrawBufferMode");
                            Silk.Cil.StoreByName("bufs_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("bufs_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("bufs_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(91);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(OpenTK.Graphics.ES20.DrawBufferMode*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_draw_buffers]
            /// Specifies a list of color buffers to be drawn into
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of buffers in bufs.
            /// </param>
            /// <param name="bufs"> 
            /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
            /// </param>
            [CLSCompliant(false)]
            public static void DrawBuffers(Int32 n, ref OpenTK.Graphics.ES20.DrawBufferMode bufs)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.DrawBufferMode& pinned", "bufs_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("bufs_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("bufs_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(91);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(OpenTK.Graphics.ES20.DrawBufferMode*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_draw_buffers]
            /// Specifies a list of color buffers to be drawn into
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of buffers in bufs.
            /// </param>
            /// <param name="bufs"> 
            /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void DrawBuffers(Int32 n, OpenTK.Graphics.ES20.DrawBufferMode* bufs)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(91);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(OpenTK.Graphics.ES20.DrawBufferMode*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multiview_draw_buffers]</summary>
            /// <param name="n"></param>
            /// <param name="location">[length: n]</param>
            /// <param name="indices">[length: n]</param>
            [CLSCompliant(false)]
            public static void DrawBuffersIndexed(Int32 n, OpenTK.Graphics.ES20.All[] location, Int32[] indices)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.All& pinned", "location_pinned");
                        if(location != null && location.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("OpenTK.Graphics.ES20.All");
                            Silk.Cil.StoreByName("location_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("location_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "indices_pinned");
                        if(indices != null && indices.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("location_pinned");
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(92);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(OpenTK.Graphics.ES20.All*), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multiview_draw_buffers]</summary>
            /// <param name="n"></param>
            /// <param name="location">[length: n]</param>
            /// <param name="indices">[length: n]</param>
            [CLSCompliant(false)]
            public static void DrawBuffersIndexed(Int32 n, ref OpenTK.Graphics.ES20.All location, ref Int32 indices)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.All& pinned", "location_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("location_pinned");
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "indices_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("indices_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("location_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(92);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(OpenTK.Graphics.ES20.All*), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multiview_draw_buffers]</summary>
            /// <param name="n"></param>
            /// <param name="location">[length: n]</param>
            /// <param name="indices">[length: n]</param>
            [CLSCompliant(false)]
            public static unsafe void DrawBuffersIndexed(Int32 n, OpenTK.Graphics.ES20.All* location, Int32* indices)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(92);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(OpenTK.Graphics.ES20.All*), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_draw_instanced|EXT_instanced_arrays]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count"> 
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: count,type] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            public static void DrawElementsInstanced(OpenTK.Graphics.ES20.All mode, Int32 count, OpenTK.Graphics.ES20.All type, IntPtr indices, Int32 primcount)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(96);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_draw_instanced|EXT_instanced_arrays]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count"> 
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: count,type] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES20.All mode, Int32 count, OpenTK.Graphics.ES20.All type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        if(indices != null && indices.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T3");
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(96);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_draw_instanced|EXT_instanced_arrays]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count"> 
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: count,type] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES20.All mode, Int32 count, OpenTK.Graphics.ES20.All type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        if(indices != null && indices.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T3[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(96);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_draw_instanced|EXT_instanced_arrays]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count"> 
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: count,type] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES20.All mode, Int32 count, OpenTK.Graphics.ES20.All type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        if(indices != null && indices.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T3[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(96);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_draw_instanced|EXT_instanced_arrays]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count"> 
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: count,type] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES20.All mode, Int32 count, OpenTK.Graphics.ES20.All type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("indices_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(96);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_draw_instanced|EXT_instanced_arrays]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count"> 
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: count,type] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            public static void DrawElementsInstanced(OpenTK.Graphics.ES20.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES20.DrawElementsType type, IntPtr indices, Int32 primcount)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(96);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_draw_instanced|EXT_instanced_arrays]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count"> 
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: count,type] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [CLSCompliant(false)]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES20.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES20.DrawElementsType type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        if(indices != null && indices.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T3");
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(96);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_draw_instanced|EXT_instanced_arrays]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count"> 
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: count,type] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [CLSCompliant(false)]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES20.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES20.DrawElementsType type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        if(indices != null && indices.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T3[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(96);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_draw_instanced|EXT_instanced_arrays]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count"> 
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: count,type] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [CLSCompliant(false)]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES20.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES20.DrawElementsType type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        if(indices != null && indices.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T3[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(96);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_draw_instanced|EXT_instanced_arrays]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count"> 
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: count,type] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES20.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES20.DrawElementsType type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("indices_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(96);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_draw_buffers_indexed]
            /// Enable or disable server-side GL capabilities
            /// </summary>
            /// <param name="target"> 
            /// Specifies a symbolic constant indicating a GL capability.
            /// </param>
            /// <param name="index"></param>
            [CLSCompliant(false)]
            public static void Enable(OpenTK.Graphics.ES20.All target, Int32 index)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(102);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.All), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_draw_buffers_indexed]
            /// Enable or disable server-side GL capabilities
            /// </summary>
            /// <param name="target"> 
            /// Specifies a symbolic constant indicating a GL capability.
            /// </param>
            /// <param name="index"></param>
            [CLSCompliant(false)]
            public static void Enable(OpenTK.Graphics.ES20.All target, UInt32 index)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(102);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.All), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]</summary>
            /// <param name="target"></param>
            [Obsolete("Use strongly-typed overload instead")]
            public static void EndQuery(OpenTK.Graphics.ES20.All target)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(106);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.QueryTarget));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]</summary>
            /// <param name="target"></param>
            public static void EndQuery(OpenTK.Graphics.ES20.QueryTarget target)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(106);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.QueryTarget));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_map_buffer_range]
            /// Indicate modifications to a range of a mapped buffer
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target of the flush operation. target must be ArrayBuffer, CopyReadBuffer, CopyWriteBuffer, DispatchIndirectBuffer, DrawIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
            /// </param>
            /// <param name="offset"> 
            /// Specifies the start of the buffer subrange, in basic machine units.
            /// </param>
            /// <param name="length"> 
            /// Specifies the length of the buffer subrange, in basic machine units.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            public static void FlushMappedBufferRange(OpenTK.Graphics.ES20.All target, IntPtr offset, Int32 length)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(124);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_map_buffer_range]
            /// Indicate modifications to a range of a mapped buffer
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target of the flush operation. target must be ArrayBuffer, CopyReadBuffer, CopyWriteBuffer, DispatchIndirectBuffer, DrawIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
            /// </param>
            /// <param name="offset"> 
            /// Specifies the start of the buffer subrange, in basic machine units.
            /// </param>
            /// <param name="length"> 
            /// Specifies the length of the buffer subrange, in basic machine units.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            public static void FlushMappedBufferRange(OpenTK.Graphics.ES20.All target, IntPtr offset, IntPtr length)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(124);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_map_buffer_range]
            /// Indicate modifications to a range of a mapped buffer
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target of the flush operation. target must be ArrayBuffer, CopyReadBuffer, CopyWriteBuffer, DispatchIndirectBuffer, DrawIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
            /// </param>
            /// <param name="offset"> 
            /// Specifies the start of the buffer subrange, in basic machine units.
            /// </param>
            /// <param name="length"> 
            /// Specifies the length of the buffer subrange, in basic machine units.
            /// </param>
            public static void FlushMappedBufferRange(OpenTK.Graphics.ES20.BufferTarget target, IntPtr offset, Int32 length)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(124);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_map_buffer_range]
            /// Indicate modifications to a range of a mapped buffer
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target of the flush operation. target must be ArrayBuffer, CopyReadBuffer, CopyWriteBuffer, DispatchIndirectBuffer, DrawIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
            /// </param>
            /// <param name="offset"> 
            /// Specifies the start of the buffer subrange, in basic machine units.
            /// </param>
            /// <param name="length"> 
            /// Specifies the length of the buffer subrange, in basic machine units.
            /// </param>
            public static void FlushMappedBufferRange(OpenTK.Graphics.ES20.BufferTarget target, IntPtr offset, IntPtr length)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(124);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multisampled_render_to_texture]</summary>
            /// <param name="target"></param>
            /// <param name="attachment"></param>
            /// <param name="textarget"></param>
            /// <param name="texture"></param>
            /// <param name="level"></param>
            /// <param name="samples"></param>
            [CLSCompliant(false)]
            public static void FramebufferTexture2DMultisample(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All attachment, OpenTK.Graphics.ES20.All textarget, Int32 texture, Int32 level, Int32 samples)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(127);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.All), typeof(OpenTK.Graphics.ES20.All), typeof(OpenTK.Graphics.ES20.All), typeof(UInt32), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multisampled_render_to_texture]</summary>
            /// <param name="target"></param>
            /// <param name="attachment"></param>
            /// <param name="textarget"></param>
            /// <param name="texture"></param>
            /// <param name="level"></param>
            /// <param name="samples"></param>
            [CLSCompliant(false)]
            public static void FramebufferTexture2DMultisample(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All attachment, OpenTK.Graphics.ES20.All textarget, UInt32 texture, Int32 level, Int32 samples)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(127);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.All), typeof(OpenTK.Graphics.ES20.All), typeof(OpenTK.Graphics.ES20.All), typeof(UInt32), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_geometry_shader]
            /// Attach a level of a texture object as a logical buffer to the currently bound framebuffer object
            /// </summary>
            /// <param name="target"> 
            /// Specifies the framebuffer target. target must be DrawFramebuffer, ReadFramebuffer, or Framebuffer. Framebuffer is equivalent to DrawFramebuffer.
            /// </param>
            /// <param name="attachment"> 
            /// Specifies the attachment point of the framebuffer. attachment must be ColorAttachmenti, DepthAttachment, StencilAttachment or DepthStencilAttachment.
            /// </param>
            /// <param name="texture"> 
            /// Specifies the texture object to attach to the framebuffer attachment point named by attachment.
            /// </param>
            /// <param name="level"> 
            /// Specifies the mipmap level of texture to attach.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void FramebufferTexture(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All attachment, Int32 texture, Int32 level)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(130);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.FramebufferTarget), typeof(OpenTK.Graphics.ES20.All), typeof(UInt32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_geometry_shader]
            /// Attach a level of a texture object as a logical buffer to the currently bound framebuffer object
            /// </summary>
            /// <param name="target"> 
            /// Specifies the framebuffer target. target must be DrawFramebuffer, ReadFramebuffer, or Framebuffer. Framebuffer is equivalent to DrawFramebuffer.
            /// </param>
            /// <param name="attachment"> 
            /// Specifies the attachment point of the framebuffer. attachment must be ColorAttachmenti, DepthAttachment, StencilAttachment or DepthStencilAttachment.
            /// </param>
            /// <param name="texture"> 
            /// Specifies the texture object to attach to the framebuffer attachment point named by attachment.
            /// </param>
            /// <param name="level"> 
            /// Specifies the mipmap level of texture to attach.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void FramebufferTexture(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All attachment, UInt32 texture, Int32 level)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(130);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.FramebufferTarget), typeof(OpenTK.Graphics.ES20.All), typeof(UInt32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_geometry_shader]
            /// Attach a level of a texture object as a logical buffer to the currently bound framebuffer object
            /// </summary>
            /// <param name="target"> 
            /// Specifies the framebuffer target. target must be DrawFramebuffer, ReadFramebuffer, or Framebuffer. Framebuffer is equivalent to DrawFramebuffer.
            /// </param>
            /// <param name="attachment"> 
            /// Specifies the attachment point of the framebuffer. attachment must be ColorAttachmenti, DepthAttachment, StencilAttachment or DepthStencilAttachment.
            /// </param>
            /// <param name="texture"> 
            /// Specifies the texture object to attach to the framebuffer attachment point named by attachment.
            /// </param>
            /// <param name="level"> 
            /// Specifies the mipmap level of texture to attach.
            /// </param>
            [CLSCompliant(false)]
            public static void FramebufferTexture(OpenTK.Graphics.ES20.FramebufferTarget target, OpenTK.Graphics.ES20.All attachment, Int32 texture, Int32 level)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(130);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.FramebufferTarget), typeof(OpenTK.Graphics.ES20.All), typeof(UInt32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_geometry_shader]
            /// Attach a level of a texture object as a logical buffer to the currently bound framebuffer object
            /// </summary>
            /// <param name="target"> 
            /// Specifies the framebuffer target. target must be DrawFramebuffer, ReadFramebuffer, or Framebuffer. Framebuffer is equivalent to DrawFramebuffer.
            /// </param>
            /// <param name="attachment"> 
            /// Specifies the attachment point of the framebuffer. attachment must be ColorAttachmenti, DepthAttachment, StencilAttachment or DepthStencilAttachment.
            /// </param>
            /// <param name="texture"> 
            /// Specifies the texture object to attach to the framebuffer attachment point named by attachment.
            /// </param>
            /// <param name="level"> 
            /// Specifies the mipmap level of texture to attach.
            /// </param>
            [CLSCompliant(false)]
            public static void FramebufferTexture(OpenTK.Graphics.ES20.FramebufferTarget target, OpenTK.Graphics.ES20.All attachment, UInt32 texture, Int32 level)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(130);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.FramebufferTarget), typeof(OpenTK.Graphics.ES20.All), typeof(UInt32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Reserve program pipeline object names
            /// </summary>
            [CLSCompliant(false)]
            public static Int32 GenProgramPipeline()
            {
                unsafe
                {
                    Int32 __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Int32 __result = default(Int32);
                        Silk.Cil.Ldc_I4(1);
                        Silk.Cil.LoadAddress(__result);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(137);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                        Silk.Cil.Load(__result);
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Reserve program pipeline object names
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of program pipeline object names to reserve.
            /// </param>
            /// <param name="pipelines">[length: n] 
            /// Specifies an array of into which the reserved names will be written.
            /// </param>
            [CLSCompliant(false)]
            public static void GenProgramPipelines(Int32 n, [OutAttribute] Int32[] pipelines)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "pipelines_pinned");
                        if(pipelines != null && pipelines.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("pipelines_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("pipelines_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("pipelines_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(137);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Reserve program pipeline object names
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of program pipeline object names to reserve.
            /// </param>
            /// <param name="pipelines">[length: n] 
            /// Specifies an array of into which the reserved names will be written.
            /// </param>
            [CLSCompliant(false)]
            public static void GenProgramPipelines(Int32 n, [OutAttribute] out Int32 pipelines)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "pipelines_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("pipelines_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("pipelines_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(137);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Reserve program pipeline object names
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of program pipeline object names to reserve.
            /// </param>
            /// <param name="pipelines">[length: n] 
            /// Specifies an array of into which the reserved names will be written.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void GenProgramPipelines(Int32 n, [OutAttribute] Int32* pipelines)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(137);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Reserve program pipeline object names
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of program pipeline object names to reserve.
            /// </param>
            /// <param name="pipelines">[length: n] 
            /// Specifies an array of into which the reserved names will be written.
            /// </param>
            [CLSCompliant(false)]
            public static void GenProgramPipelines(Int32 n, [OutAttribute] UInt32[] pipelines)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "pipelines_pinned");
                        if(pipelines != null && pipelines.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("pipelines_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("pipelines_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("pipelines_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(137);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Reserve program pipeline object names
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of program pipeline object names to reserve.
            /// </param>
            /// <param name="pipelines">[length: n] 
            /// Specifies an array of into which the reserved names will be written.
            /// </param>
            [CLSCompliant(false)]
            public static void GenProgramPipelines(Int32 n, [OutAttribute] out UInt32 pipelines)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "pipelines_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("pipelines_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("pipelines_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(137);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Reserve program pipeline object names
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of program pipeline object names to reserve.
            /// </param>
            /// <param name="pipelines">[length: n] 
            /// Specifies an array of into which the reserved names will be written.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void GenProgramPipelines(Int32 n, [OutAttribute] UInt32* pipelines)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(137);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Generate query object names
            /// </summary>
            [CLSCompliant(false)]
            public static Int32 GenQuery()
            {
                unsafe
                {
                    Int32 __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Int32 __result = default(Int32);
                        Silk.Cil.Ldc_I4(1);
                        Silk.Cil.LoadAddress(__result);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(138);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                        Silk.Cil.Load(__result);
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Generate query object names
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of query object names to be generated.
            /// </param>
            /// <param name="ids">[length: n] 
            /// Specifies an array in which the generated query object names are stored.
            /// </param>
            [CLSCompliant(false)]
            public static void GenQueries(Int32 n, [OutAttribute] Int32[] ids)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "ids_pinned");
                        if(ids != null && ids.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("ids_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("ids_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("ids_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(138);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Generate query object names
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of query object names to be generated.
            /// </param>
            /// <param name="ids">[length: n] 
            /// Specifies an array in which the generated query object names are stored.
            /// </param>
            [CLSCompliant(false)]
            public static void GenQueries(Int32 n, [OutAttribute] out Int32 ids)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "ids_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("ids_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("ids_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(138);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Generate query object names
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of query object names to be generated.
            /// </param>
            /// <param name="ids">[length: n] 
            /// Specifies an array in which the generated query object names are stored.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void GenQueries(Int32 n, [OutAttribute] Int32* ids)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(138);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Generate query object names
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of query object names to be generated.
            /// </param>
            /// <param name="ids">[length: n] 
            /// Specifies an array in which the generated query object names are stored.
            /// </param>
            [CLSCompliant(false)]
            public static void GenQueries(Int32 n, [OutAttribute] UInt32[] ids)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "ids_pinned");
                        if(ids != null && ids.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("ids_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("ids_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("ids_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(138);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Generate query object names
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of query object names to be generated.
            /// </param>
            /// <param name="ids">[length: n] 
            /// Specifies an array in which the generated query object names are stored.
            /// </param>
            [CLSCompliant(false)]
            public static void GenQueries(Int32 n, [OutAttribute] out UInt32 ids)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "ids_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("ids_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("ids_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(138);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Generate query object names
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of query object names to be generated.
            /// </param>
            /// <param name="ids">[length: n] 
            /// Specifies an array in which the generated query object names are stored.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void GenQueries(Int32 n, [OutAttribute] UInt32* ids)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(138);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_robustness]</summary>
            public static OpenTK.Graphics.ES20.All GetGraphicsResetStatus()
            {
                unsafe
                {
                    OpenTK.Graphics.ES20.All __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(159);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(OpenTK.Graphics.ES20.All));
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multiview_draw_buffers]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            /// <param name="data"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void GetInteger(OpenTK.Graphics.ES20.All target, Int32 index, [OutAttribute] Int32[] data)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "data_pinned");
                        if(data != null && data.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(162);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.GetIndexedPName), typeof(UInt32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multiview_draw_buffers]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            /// <param name="data"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void GetInteger(OpenTK.Graphics.ES20.All target, Int32 index, [OutAttribute] out Int32 data)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "data_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("data_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(162);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.GetIndexedPName), typeof(UInt32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multiview_draw_buffers]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            /// <param name="data"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static unsafe void GetInteger(OpenTK.Graphics.ES20.All target, Int32 index, [OutAttribute] Int32* data)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(162);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.GetIndexedPName), typeof(UInt32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multiview_draw_buffers]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            /// <param name="data"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void GetInteger(OpenTK.Graphics.ES20.All target, UInt32 index, [OutAttribute] Int32[] data)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "data_pinned");
                        if(data != null && data.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(162);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.GetIndexedPName), typeof(UInt32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multiview_draw_buffers]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            /// <param name="data"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void GetInteger(OpenTK.Graphics.ES20.All target, UInt32 index, [OutAttribute] out Int32 data)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "data_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("data_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(162);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.GetIndexedPName), typeof(UInt32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multiview_draw_buffers]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            /// <param name="data"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static unsafe void GetInteger(OpenTK.Graphics.ES20.All target, UInt32 index, [OutAttribute] Int32* data)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(162);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.GetIndexedPName), typeof(UInt32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multiview_draw_buffers]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            /// <param name="data"></param>
            [CLSCompliant(false)]
            public static void GetInteger(OpenTK.Graphics.ES20.GetIndexedPName target, Int32 index, [OutAttribute] Int32[] data)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "data_pinned");
                        if(data != null && data.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(162);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.GetIndexedPName), typeof(UInt32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multiview_draw_buffers]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            /// <param name="data"></param>
            [CLSCompliant(false)]
            public static void GetInteger(OpenTK.Graphics.ES20.GetIndexedPName target, Int32 index, [OutAttribute] out Int32 data)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "data_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("data_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(162);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.GetIndexedPName), typeof(UInt32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multiview_draw_buffers]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            /// <param name="data"></param>
            [CLSCompliant(false)]
            public static unsafe void GetInteger(OpenTK.Graphics.ES20.GetIndexedPName target, Int32 index, [OutAttribute] Int32* data)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(162);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.GetIndexedPName), typeof(UInt32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multiview_draw_buffers]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            /// <param name="data"></param>
            [CLSCompliant(false)]
            public static void GetInteger(OpenTK.Graphics.ES20.GetIndexedPName target, UInt32 index, [OutAttribute] Int32[] data)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "data_pinned");
                        if(data != null && data.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(162);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.GetIndexedPName), typeof(UInt32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multiview_draw_buffers]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            /// <param name="data"></param>
            [CLSCompliant(false)]
            public static void GetInteger(OpenTK.Graphics.ES20.GetIndexedPName target, UInt32 index, [OutAttribute] out Int32 data)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "data_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("data_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(162);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.GetIndexedPName), typeof(UInt32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multiview_draw_buffers]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            /// <param name="data"></param>
            [CLSCompliant(false)]
            public static unsafe void GetInteger(OpenTK.Graphics.ES20.GetIndexedPName target, UInt32 index, [OutAttribute] Int32* data)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(162);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.GetIndexedPName), typeof(UInt32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params">[length: bufSize]</param>
            [CLSCompliant(false)]
            public static void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] Single[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Single");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(166);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params">[length: bufSize]</param>
            [CLSCompliant(false)]
            public static void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] out Single @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(166);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params">[length: bufSize]</param>
            [CLSCompliant(false)]
            public static unsafe void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] Single* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(166);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params">[length: bufSize]</param>
            [CLSCompliant(false)]
            public static void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] Single[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Single");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(166);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params">[length: bufSize]</param>
            [CLSCompliant(false)]
            public static void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] out Single @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(166);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params">[length: bufSize]</param>
            [CLSCompliant(false)]
            public static unsafe void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] Single* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(166);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params">[length: bufSize]</param>
            [CLSCompliant(false)]
            public static void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(169);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params">[length: bufSize]</param>
            [CLSCompliant(false)]
            public static void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(169);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params">[length: bufSize]</param>
            [CLSCompliant(false)]
            public static unsafe void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] Int32* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(169);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params">[length: bufSize]</param>
            [CLSCompliant(false)]
            public static void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(169);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params">[length: bufSize]</param>
            [CLSCompliant(false)]
            public static void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(169);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params">[length: bufSize]</param>
            [CLSCompliant(false)]
            public static unsafe void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] Int32* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(169);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_debug_label]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="type"> 
            /// The namespace from which the name of the object is allocated.
            /// </param>
            /// <param name="@object"> 
            /// The name of the object whose label to retrieve.
            /// </param>
            /// <param name="bufSize"> 
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">[length: 1] 
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">[length: bufSize] 
            /// The address of a string that will receive the object label.
            /// </param>
            [CLSCompliant(false)]
            public static void GetObjectLabel(OpenTK.Graphics.ES20.All type, Int32 @object, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder label)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        if(length != null && length.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        IntPtr label_sb_ptr = IntPtr.Zero;
                        try
                        {
                            label_sb_ptr = Marshal.AllocHGlobal(label.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.LoadByName("length_pinned");
                            Silk.Cil.Load(label_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(174);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.All), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(label_sb_ptr, label);
                        } finally {
                            Marshal.FreeHGlobal(label_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_debug_label]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="type"> 
            /// The namespace from which the name of the object is allocated.
            /// </param>
            /// <param name="@object"> 
            /// The name of the object whose label to retrieve.
            /// </param>
            /// <param name="bufSize"> 
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">[length: 1] 
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">[length: bufSize] 
            /// The address of a string that will receive the object label.
            /// </param>
            [CLSCompliant(false)]
            public static void GetObjectLabel(OpenTK.Graphics.ES20.All type, Int32 @object, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder label)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("length_pinned");
                        IntPtr label_sb_ptr = IntPtr.Zero;
                        try
                        {
                            label_sb_ptr = Marshal.AllocHGlobal(label.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.LoadByName("length_pinned");
                            Silk.Cil.Conv_I();
                            Silk.Cil.Load(label_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(174);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.All), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(label_sb_ptr, label);
                        } finally {
                            Marshal.FreeHGlobal(label_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_debug_label]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="type"> 
            /// The namespace from which the name of the object is allocated.
            /// </param>
            /// <param name="@object"> 
            /// The name of the object whose label to retrieve.
            /// </param>
            /// <param name="bufSize"> 
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">[length: 1] 
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">[length: bufSize] 
            /// The address of a string that will receive the object label.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void GetObjectLabel(OpenTK.Graphics.ES20.All type, Int32 @object, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder label)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr label_sb_ptr = IntPtr.Zero;
                        try
                        {
                            label_sb_ptr = Marshal.AllocHGlobal(label.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Load(label_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(174);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.All), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(label_sb_ptr, label);
                        } finally {
                            Marshal.FreeHGlobal(label_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_debug_label]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="type"> 
            /// The namespace from which the name of the object is allocated.
            /// </param>
            /// <param name="@object"> 
            /// The name of the object whose label to retrieve.
            /// </param>
            /// <param name="bufSize"> 
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">[length: 1] 
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">[length: bufSize] 
            /// The address of a string that will receive the object label.
            /// </param>
            [CLSCompliant(false)]
            public static void GetObjectLabel(OpenTK.Graphics.ES20.All type, UInt32 @object, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder label)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        if(length != null && length.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        IntPtr label_sb_ptr = IntPtr.Zero;
                        try
                        {
                            label_sb_ptr = Marshal.AllocHGlobal(label.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.LoadByName("length_pinned");
                            Silk.Cil.Load(label_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(174);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.All), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(label_sb_ptr, label);
                        } finally {
                            Marshal.FreeHGlobal(label_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_debug_label]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="type"> 
            /// The namespace from which the name of the object is allocated.
            /// </param>
            /// <param name="@object"> 
            /// The name of the object whose label to retrieve.
            /// </param>
            /// <param name="bufSize"> 
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">[length: 1] 
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">[length: bufSize] 
            /// The address of a string that will receive the object label.
            /// </param>
            [CLSCompliant(false)]
            public static void GetObjectLabel(OpenTK.Graphics.ES20.All type, UInt32 @object, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder label)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("length_pinned");
                        IntPtr label_sb_ptr = IntPtr.Zero;
                        try
                        {
                            label_sb_ptr = Marshal.AllocHGlobal(label.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.LoadByName("length_pinned");
                            Silk.Cil.Conv_I();
                            Silk.Cil.Load(label_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(174);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.All), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(label_sb_ptr, label);
                        } finally {
                            Marshal.FreeHGlobal(label_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_debug_label]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="type"> 
            /// The namespace from which the name of the object is allocated.
            /// </param>
            /// <param name="@object"> 
            /// The name of the object whose label to retrieve.
            /// </param>
            /// <param name="bufSize"> 
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">[length: 1] 
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">[length: bufSize] 
            /// The address of a string that will receive the object label.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void GetObjectLabel(OpenTK.Graphics.ES20.All type, UInt32 @object, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder label)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr label_sb_ptr = IntPtr.Zero;
                        try
                        {
                            label_sb_ptr = Marshal.AllocHGlobal(label.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Load(label_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(174);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.All), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(label_sb_ptr, label);
                        } finally {
                            Marshal.FreeHGlobal(label_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Retrieve the info log string from a program pipeline object
            /// </summary>
            /// <param name="pipeline"> 
            /// Specifies the name of a program pipeline object from which to retrieve the info log.
            /// </param>
            /// <param name="bufSize"> 
            /// Specifies the maximum number of characters, including the null terminator, that may be written into infoLog.
            /// </param>
            /// <param name="length">[length: 1] 
            /// Specifies the address of a variable into which will be written the number of characters written into infoLog.
            /// </param>
            /// <param name="infoLog">[length: bufSize] 
            /// Specifies the address of an array of characters into which will be written the info log for pipeline.
            /// </param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void GetProgramPipelineInfoLog(Int32 pipeline, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder infoLog)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        if(length != null && length.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        IntPtr infoLog_sb_ptr = IntPtr.Zero;
                        try
                        {
                            infoLog_sb_ptr = Marshal.AllocHGlobal(infoLog.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.LoadByName("length_pinned");
                            Silk.Cil.Load(infoLog_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(193);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(infoLog_sb_ptr, infoLog);
                        } finally {
                            Marshal.FreeHGlobal(infoLog_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Retrieve the info log string from a program pipeline object
            /// </summary>
            /// <param name="pipeline"> 
            /// Specifies the name of a program pipeline object from which to retrieve the info log.
            /// </param>
            /// <param name="bufSize"> 
            /// Specifies the maximum number of characters, including the null terminator, that may be written into infoLog.
            /// </param>
            /// <param name="length">[length: 1] 
            /// Specifies the address of a variable into which will be written the number of characters written into infoLog.
            /// </param>
            /// <param name="infoLog">[length: bufSize] 
            /// Specifies the address of an array of characters into which will be written the info log for pipeline.
            /// </param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void GetProgramPipelineInfoLog(Int32 pipeline, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder infoLog)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("length_pinned");
                        IntPtr infoLog_sb_ptr = IntPtr.Zero;
                        try
                        {
                            infoLog_sb_ptr = Marshal.AllocHGlobal(infoLog.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.LoadByName("length_pinned");
                            Silk.Cil.Conv_I();
                            Silk.Cil.Load(infoLog_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(193);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(infoLog_sb_ptr, infoLog);
                        } finally {
                            Marshal.FreeHGlobal(infoLog_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Retrieve the info log string from a program pipeline object
            /// </summary>
            /// <param name="pipeline"> 
            /// Specifies the name of a program pipeline object from which to retrieve the info log.
            /// </param>
            /// <param name="bufSize"> 
            /// Specifies the maximum number of characters, including the null terminator, that may be written into infoLog.
            /// </param>
            /// <param name="length">[length: 1] 
            /// Specifies the address of a variable into which will be written the number of characters written into infoLog.
            /// </param>
            /// <param name="infoLog">[length: bufSize] 
            /// Specifies the address of an array of characters into which will be written the info log for pipeline.
            /// </param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static unsafe void GetProgramPipelineInfoLog(Int32 pipeline, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder infoLog)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr infoLog_sb_ptr = IntPtr.Zero;
                        try
                        {
                            infoLog_sb_ptr = Marshal.AllocHGlobal(infoLog.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Load(infoLog_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(193);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(infoLog_sb_ptr, infoLog);
                        } finally {
                            Marshal.FreeHGlobal(infoLog_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Retrieve the info log string from a program pipeline object
            /// </summary>
            /// <param name="pipeline"> 
            /// Specifies the name of a program pipeline object from which to retrieve the info log.
            /// </param>
            /// <param name="bufSize"> 
            /// Specifies the maximum number of characters, including the null terminator, that may be written into infoLog.
            /// </param>
            /// <param name="length">[length: 1] 
            /// Specifies the address of a variable into which will be written the number of characters written into infoLog.
            /// </param>
            /// <param name="infoLog">[length: bufSize] 
            /// Specifies the address of an array of characters into which will be written the info log for pipeline.
            /// </param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void GetProgramPipelineInfoLog(UInt32 pipeline, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder infoLog)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        if(length != null && length.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        IntPtr infoLog_sb_ptr = IntPtr.Zero;
                        try
                        {
                            infoLog_sb_ptr = Marshal.AllocHGlobal(infoLog.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.LoadByName("length_pinned");
                            Silk.Cil.Load(infoLog_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(193);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(infoLog_sb_ptr, infoLog);
                        } finally {
                            Marshal.FreeHGlobal(infoLog_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Retrieve the info log string from a program pipeline object
            /// </summary>
            /// <param name="pipeline"> 
            /// Specifies the name of a program pipeline object from which to retrieve the info log.
            /// </param>
            /// <param name="bufSize"> 
            /// Specifies the maximum number of characters, including the null terminator, that may be written into infoLog.
            /// </param>
            /// <param name="length">[length: 1] 
            /// Specifies the address of a variable into which will be written the number of characters written into infoLog.
            /// </param>
            /// <param name="infoLog">[length: bufSize] 
            /// Specifies the address of an array of characters into which will be written the info log for pipeline.
            /// </param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void GetProgramPipelineInfoLog(UInt32 pipeline, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder infoLog)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("length_pinned");
                        IntPtr infoLog_sb_ptr = IntPtr.Zero;
                        try
                        {
                            infoLog_sb_ptr = Marshal.AllocHGlobal(infoLog.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.LoadByName("length_pinned");
                            Silk.Cil.Conv_I();
                            Silk.Cil.Load(infoLog_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(193);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(infoLog_sb_ptr, infoLog);
                        } finally {
                            Marshal.FreeHGlobal(infoLog_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Retrieve the info log string from a program pipeline object
            /// </summary>
            /// <param name="pipeline"> 
            /// Specifies the name of a program pipeline object from which to retrieve the info log.
            /// </param>
            /// <param name="bufSize"> 
            /// Specifies the maximum number of characters, including the null terminator, that may be written into infoLog.
            /// </param>
            /// <param name="length">[length: 1] 
            /// Specifies the address of a variable into which will be written the number of characters written into infoLog.
            /// </param>
            /// <param name="infoLog">[length: bufSize] 
            /// Specifies the address of an array of characters into which will be written the info log for pipeline.
            /// </param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static unsafe void GetProgramPipelineInfoLog(UInt32 pipeline, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder infoLog)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr infoLog_sb_ptr = IntPtr.Zero;
                        try
                        {
                            infoLog_sb_ptr = Marshal.AllocHGlobal(infoLog.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Load(infoLog_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(193);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(infoLog_sb_ptr, infoLog);
                        } finally {
                            Marshal.FreeHGlobal(infoLog_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Retrieve properties of a program pipeline object
            /// </summary>
            /// <param name="pipeline"> 
            /// Specifies the name of a program pipeline object whose parameter retrieve.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the name of the parameter to retrieve.
            /// </param>
            /// <param name="@params"> 
            /// Specifies the address of a variable into which will be written the value or values of pname for pipeline.
            /// </param>
            [CLSCompliant(false)]
            public static void GetProgramPipeline(Int32 pipeline, OpenTK.Graphics.ES20.All pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(194);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Retrieve properties of a program pipeline object
            /// </summary>
            /// <param name="pipeline"> 
            /// Specifies the name of a program pipeline object whose parameter retrieve.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the name of the parameter to retrieve.
            /// </param>
            /// <param name="@params"> 
            /// Specifies the address of a variable into which will be written the value or values of pname for pipeline.
            /// </param>
            [CLSCompliant(false)]
            public static void GetProgramPipeline(Int32 pipeline, OpenTK.Graphics.ES20.All pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(194);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Retrieve properties of a program pipeline object
            /// </summary>
            /// <param name="pipeline"> 
            /// Specifies the name of a program pipeline object whose parameter retrieve.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the name of the parameter to retrieve.
            /// </param>
            /// <param name="@params"> 
            /// Specifies the address of a variable into which will be written the value or values of pname for pipeline.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void GetProgramPipeline(Int32 pipeline, OpenTK.Graphics.ES20.All pname, [OutAttribute] Int32* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(194);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Retrieve properties of a program pipeline object
            /// </summary>
            /// <param name="pipeline"> 
            /// Specifies the name of a program pipeline object whose parameter retrieve.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the name of the parameter to retrieve.
            /// </param>
            /// <param name="@params"> 
            /// Specifies the address of a variable into which will be written the value or values of pname for pipeline.
            /// </param>
            [CLSCompliant(false)]
            public static void GetProgramPipeline(UInt32 pipeline, OpenTK.Graphics.ES20.All pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(194);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Retrieve properties of a program pipeline object
            /// </summary>
            /// <param name="pipeline"> 
            /// Specifies the name of a program pipeline object whose parameter retrieve.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the name of the parameter to retrieve.
            /// </param>
            /// <param name="@params"> 
            /// Specifies the address of a variable into which will be written the value or values of pname for pipeline.
            /// </param>
            [CLSCompliant(false)]
            public static void GetProgramPipeline(UInt32 pipeline, OpenTK.Graphics.ES20.All pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(194);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Retrieve properties of a program pipeline object
            /// </summary>
            /// <param name="pipeline"> 
            /// Specifies the name of a program pipeline object whose parameter retrieve.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the name of the parameter to retrieve.
            /// </param>
            /// <param name="@params"> 
            /// Specifies the address of a variable into which will be written the value or values of pname for pipeline.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void GetProgramPipeline(UInt32 pipeline, OpenTK.Graphics.ES20.All pname, [OutAttribute] Int32* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(194);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void GetQuery(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(195);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.QueryTarget), typeof(OpenTK.Graphics.ES20.GetQueryParam), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void GetQuery(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(195);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.QueryTarget), typeof(OpenTK.Graphics.ES20.GetQueryParam), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static unsafe void GetQuery(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All pname, [OutAttribute] Int32* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(195);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.QueryTarget), typeof(OpenTK.Graphics.ES20.GetQueryParam), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [CLSCompliant(false)]
            public static void GetQuery(OpenTK.Graphics.ES20.QueryTarget target, OpenTK.Graphics.ES20.GetQueryParam pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(195);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.QueryTarget), typeof(OpenTK.Graphics.ES20.GetQueryParam), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [CLSCompliant(false)]
            public static void GetQuery(OpenTK.Graphics.ES20.QueryTarget target, OpenTK.Graphics.ES20.GetQueryParam pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(195);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.QueryTarget), typeof(OpenTK.Graphics.ES20.GetQueryParam), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [CLSCompliant(false)]
            public static unsafe void GetQuery(OpenTK.Graphics.ES20.QueryTarget target, OpenTK.Graphics.ES20.GetQueryParam pname, [OutAttribute] Int32* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(195);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.QueryTarget), typeof(OpenTK.Graphics.ES20.GetQueryParam), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id"> 
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params">[length: pname] 
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void GetQueryObject(Int32 id, OpenTK.Graphics.ES20.All pname, [OutAttribute] Int64[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int64& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int64");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(196);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.GetQueryObjectParam), typeof(Int64*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id"> 
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params">[length: pname] 
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void GetQueryObject(Int32 id, OpenTK.Graphics.ES20.All pname, [OutAttribute] out Int64 @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int64& pinned", "params_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(196);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.GetQueryObjectParam), typeof(Int64*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id"> 
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params">[length: pname] 
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static unsafe void GetQueryObject(Int32 id, OpenTK.Graphics.ES20.All pname, [OutAttribute] Int64* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(196);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.GetQueryObjectParam), typeof(Int64*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id"> 
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params">[length: pname] 
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [CLSCompliant(false)]
            public static void GetQueryObject(Int32 id, OpenTK.Graphics.ES20.GetQueryObjectParam pname, [OutAttribute] Int64[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int64& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int64");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(196);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.GetQueryObjectParam), typeof(Int64*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id"> 
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params">[length: pname] 
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [CLSCompliant(false)]
            public static void GetQueryObject(Int32 id, OpenTK.Graphics.ES20.GetQueryObjectParam pname, [OutAttribute] out Int64 @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int64& pinned", "params_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(196);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.GetQueryObjectParam), typeof(Int64*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id"> 
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params">[length: pname] 
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void GetQueryObject(Int32 id, OpenTK.Graphics.ES20.GetQueryObjectParam pname, [OutAttribute] Int64* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(196);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.GetQueryObjectParam), typeof(Int64*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id"> 
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params">[length: pname] 
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void GetQueryObject(UInt32 id, OpenTK.Graphics.ES20.All pname, [OutAttribute] Int64[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int64& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int64");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(196);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.GetQueryObjectParam), typeof(Int64*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id"> 
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params">[length: pname] 
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void GetQueryObject(UInt32 id, OpenTK.Graphics.ES20.All pname, [OutAttribute] out Int64 @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int64& pinned", "params_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(196);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.GetQueryObjectParam), typeof(Int64*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id"> 
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params">[length: pname] 
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static unsafe void GetQueryObject(UInt32 id, OpenTK.Graphics.ES20.All pname, [OutAttribute] Int64* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(196);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.GetQueryObjectParam), typeof(Int64*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id"> 
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params">[length: pname] 
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [CLSCompliant(false)]
            public static void GetQueryObject(UInt32 id, OpenTK.Graphics.ES20.GetQueryObjectParam pname, [OutAttribute] Int64[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int64& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int64");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(196);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.GetQueryObjectParam), typeof(Int64*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id"> 
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params">[length: pname] 
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [CLSCompliant(false)]
            public static void GetQueryObject(UInt32 id, OpenTK.Graphics.ES20.GetQueryObjectParam pname, [OutAttribute] out Int64 @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int64& pinned", "params_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(196);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.GetQueryObjectParam), typeof(Int64*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id"> 
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params">[length: pname] 
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void GetQueryObject(UInt32 id, OpenTK.Graphics.ES20.GetQueryObjectParam pname, [OutAttribute] Int64* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(196);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.GetQueryObjectParam), typeof(Int64*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id"> 
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params"> 
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void GetQueryObject(Int32 id, OpenTK.Graphics.ES20.All pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(197);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.GetQueryObjectParam), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id"> 
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params"> 
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void GetQueryObject(Int32 id, OpenTK.Graphics.ES20.All pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(197);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.GetQueryObjectParam), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id"> 
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params"> 
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static unsafe void GetQueryObject(Int32 id, OpenTK.Graphics.ES20.All pname, [OutAttribute] Int32* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(197);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.GetQueryObjectParam), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id"> 
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params"> 
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [CLSCompliant(false)]
            public static void GetQueryObject(Int32 id, OpenTK.Graphics.ES20.GetQueryObjectParam pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(197);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.GetQueryObjectParam), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id"> 
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params"> 
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [CLSCompliant(false)]
            public static void GetQueryObject(Int32 id, OpenTK.Graphics.ES20.GetQueryObjectParam pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(197);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.GetQueryObjectParam), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id"> 
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params"> 
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void GetQueryObject(Int32 id, OpenTK.Graphics.ES20.GetQueryObjectParam pname, [OutAttribute] Int32* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(197);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.GetQueryObjectParam), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id"> 
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params"> 
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void GetQueryObject(UInt32 id, OpenTK.Graphics.ES20.All pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(197);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.GetQueryObjectParam), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id"> 
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params"> 
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void GetQueryObject(UInt32 id, OpenTK.Graphics.ES20.All pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(197);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.GetQueryObjectParam), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id"> 
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params"> 
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static unsafe void GetQueryObject(UInt32 id, OpenTK.Graphics.ES20.All pname, [OutAttribute] Int32* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(197);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.GetQueryObjectParam), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id"> 
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params"> 
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [CLSCompliant(false)]
            public static void GetQueryObject(UInt32 id, OpenTK.Graphics.ES20.GetQueryObjectParam pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(197);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.GetQueryObjectParam), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id"> 
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params"> 
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [CLSCompliant(false)]
            public static void GetQueryObject(UInt32 id, OpenTK.Graphics.ES20.GetQueryObjectParam pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(197);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.GetQueryObjectParam), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id"> 
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params"> 
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void GetQueryObject(UInt32 id, OpenTK.Graphics.ES20.GetQueryObjectParam pname, [OutAttribute] Int32* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(197);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.GetQueryObjectParam), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id"> 
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params">[length: pname] 
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void GetQueryObject(UInt32 id, OpenTK.Graphics.ES20.All pname, [OutAttribute] UInt64[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt64& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt64");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(198);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.GetQueryObjectParam), typeof(UInt64*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id"> 
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params">[length: pname] 
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void GetQueryObject(UInt32 id, OpenTK.Graphics.ES20.All pname, [OutAttribute] out UInt64 @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt64& pinned", "params_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(198);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.GetQueryObjectParam), typeof(UInt64*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id"> 
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params">[length: pname] 
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static unsafe void GetQueryObject(UInt32 id, OpenTK.Graphics.ES20.All pname, [OutAttribute] UInt64* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(198);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.GetQueryObjectParam), typeof(UInt64*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id"> 
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params">[length: pname] 
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [CLSCompliant(false)]
            public static void GetQueryObject(UInt32 id, OpenTK.Graphics.ES20.GetQueryObjectParam pname, [OutAttribute] UInt64[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt64& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt64");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(198);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.GetQueryObjectParam), typeof(UInt64*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id"> 
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params">[length: pname] 
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [CLSCompliant(false)]
            public static void GetQueryObject(UInt32 id, OpenTK.Graphics.ES20.GetQueryObjectParam pname, [OutAttribute] out UInt64 @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt64& pinned", "params_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(198);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.GetQueryObjectParam), typeof(UInt64*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id"> 
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params">[length: pname] 
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void GetQueryObject(UInt32 id, OpenTK.Graphics.ES20.GetQueryObjectParam pname, [OutAttribute] UInt64* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(198);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.GetQueryObjectParam), typeof(UInt64*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id"> 
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params"> 
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void GetQueryObject(UInt32 id, OpenTK.Graphics.ES20.All pname, [OutAttribute] UInt32[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(199);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.GetQueryObjectParam), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id"> 
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params"> 
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void GetQueryObject(UInt32 id, OpenTK.Graphics.ES20.All pname, [OutAttribute] out UInt32 @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "params_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(199);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.GetQueryObjectParam), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id"> 
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params"> 
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static unsafe void GetQueryObject(UInt32 id, OpenTK.Graphics.ES20.All pname, [OutAttribute] UInt32* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(199);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.GetQueryObjectParam), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id"> 
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params"> 
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [CLSCompliant(false)]
            public static void GetQueryObject(UInt32 id, OpenTK.Graphics.ES20.GetQueryObjectParam pname, [OutAttribute] UInt32[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(199);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.GetQueryObjectParam), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id"> 
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params"> 
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [CLSCompliant(false)]
            public static void GetQueryObject(UInt32 id, OpenTK.Graphics.ES20.GetQueryObjectParam pname, [OutAttribute] out UInt32 @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "params_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(199);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.GetQueryObjectParam), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id"> 
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params"> 
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void GetQueryObject(UInt32 id, OpenTK.Graphics.ES20.GetQueryObjectParam pname, [OutAttribute] UInt32* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(199);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.GetQueryObjectParam), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static void GetSamplerParameterI(Int32 sampler, OpenTK.Graphics.ES20.All pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(201);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static void GetSamplerParameterI(Int32 sampler, OpenTK.Graphics.ES20.All pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(201);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static unsafe void GetSamplerParameterI(Int32 sampler, OpenTK.Graphics.ES20.All pname, [OutAttribute] Int32* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(201);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static void GetSamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES20.All pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(201);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static void GetSamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES20.All pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(201);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static unsafe void GetSamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES20.All pname, [OutAttribute] Int32* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(201);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static void GetSamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES20.All pname, [OutAttribute] UInt32[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(202);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static void GetSamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES20.All pname, [OutAttribute] out UInt32 @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "params_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(202);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static unsafe void GetSamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES20.All pname, [OutAttribute] UInt32* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(202);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void GetTexParameterI(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(210);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget), typeof(OpenTK.Graphics.ES20.GetTextureParameter), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void GetTexParameterI(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(210);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget), typeof(OpenTK.Graphics.ES20.GetTextureParameter), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static unsafe void GetTexParameterI(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All pname, [OutAttribute] Int32* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(210);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget), typeof(OpenTK.Graphics.ES20.GetTextureParameter), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static void GetTexParameterI(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.GetTextureParameter pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(210);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget), typeof(OpenTK.Graphics.ES20.GetTextureParameter), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static void GetTexParameterI(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.GetTextureParameter pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(210);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget), typeof(OpenTK.Graphics.ES20.GetTextureParameter), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static unsafe void GetTexParameterI(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.GetTextureParameter pname, [OutAttribute] Int32* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(210);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget), typeof(OpenTK.Graphics.ES20.GetTextureParameter), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void GetTexParameterI(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All pname, [OutAttribute] UInt32[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(211);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget), typeof(OpenTK.Graphics.ES20.GetTextureParameter), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void GetTexParameterI(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All pname, [OutAttribute] out UInt32 @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "params_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(211);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget), typeof(OpenTK.Graphics.ES20.GetTextureParameter), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static unsafe void GetTexParameterI(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All pname, [OutAttribute] UInt32* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(211);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget), typeof(OpenTK.Graphics.ES20.GetTextureParameter), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static void GetTexParameterI(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.GetTextureParameter pname, [OutAttribute] UInt32[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(211);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget), typeof(OpenTK.Graphics.ES20.GetTextureParameter), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static void GetTexParameterI(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.GetTextureParameter pname, [OutAttribute] out UInt32 @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "params_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(211);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget), typeof(OpenTK.Graphics.ES20.GetTextureParameter), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static unsafe void GetTexParameterI(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.GetTextureParameter pname, [OutAttribute] UInt32* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(211);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget), typeof(OpenTK.Graphics.ES20.GetTextureParameter), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_debug_marker]</summary>
            /// <param name="length"></param>
            /// <param name="marker"></param>
            public static void InsertEventMarker(Int32 length, String marker)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr marker_string_ptr = MarshalStringToPtr(marker);
                        try {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Load(marker_string_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(221);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(IntPtr));
                        } finally {
                            FreeStringPtr(marker_string_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_draw_buffers_indexed]
            /// Test whether a capability is enabled
            /// </summary>
            /// <param name="target"> 
            /// Specifies a symbolic constant indicating a GL capability.
            /// </param>
            /// <param name="index"></param>
            [CLSCompliant(false)]
            public static bool IsEnabled(OpenTK.Graphics.ES20.All target, Int32 index)
            {
                unsafe
                {
                    bool __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(224);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(byte), typeof(OpenTK.Graphics.ES20.All), typeof(UInt32));
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_draw_buffers_indexed]
            /// Test whether a capability is enabled
            /// </summary>
            /// <param name="target"> 
            /// Specifies a symbolic constant indicating a GL capability.
            /// </param>
            /// <param name="index"></param>
            [CLSCompliant(false)]
            public static bool IsEnabled(OpenTK.Graphics.ES20.All target, UInt32 index)
            {
                unsafe
                {
                    bool __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(224);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(byte), typeof(OpenTK.Graphics.ES20.All), typeof(UInt32));
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Determine if a name corresponds to a program pipeline object
            /// </summary>
            /// <param name="pipeline"> 
            /// Specifies a value that may be the name of a program pipeline object.
            /// </param>
            [CLSCompliant(false)]
            public static bool IsProgramPipeline(Int32 pipeline)
            {
                unsafe
                {
                    bool __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(228);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(byte), typeof(UInt32));
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Determine if a name corresponds to a program pipeline object
            /// </summary>
            /// <param name="pipeline"> 
            /// Specifies a value that may be the name of a program pipeline object.
            /// </param>
            [CLSCompliant(false)]
            public static bool IsProgramPipeline(UInt32 pipeline)
            {
                unsafe
                {
                    bool __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(228);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(byte), typeof(UInt32));
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Determine if a name corresponds to a query object
            /// </summary>
            /// <param name="id"> 
            /// Specifies a value that may be the name of a query object.
            /// </param>
            [CLSCompliant(false)]
            public static bool IsQuery(Int32 id)
            {
                unsafe
                {
                    bool __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(229);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(byte), typeof(UInt32));
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Determine if a name corresponds to a query object
            /// </summary>
            /// <param name="id"> 
            /// Specifies a value that may be the name of a query object.
            /// </param>
            [CLSCompliant(false)]
            public static bool IsQuery(UInt32 id)
            {
                unsafe
                {
                    bool __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(229);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(byte), typeof(UInt32));
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_debug_label]</summary>
            /// <param name="type"></param>
            /// <param name="@object"></param>
            /// <param name="length"></param>
            /// <param name="label"></param>
            [CLSCompliant(false)]
            public static void LabelObject(OpenTK.Graphics.ES20.All type, Int32 @object, Int32 length, String label)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr label_string_ptr = MarshalStringToPtr(label);
                        try {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Load(label_string_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(235);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.All), typeof(UInt32), typeof(Int32), typeof(IntPtr));
                        } finally {
                            FreeStringPtr(label_string_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_debug_label]</summary>
            /// <param name="type"></param>
            /// <param name="@object"></param>
            /// <param name="length"></param>
            /// <param name="label"></param>
            [CLSCompliant(false)]
            public static void LabelObject(OpenTK.Graphics.ES20.All type, UInt32 @object, Int32 length, String label)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr label_string_ptr = MarshalStringToPtr(label);
                        try {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Load(label_string_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(235);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.All), typeof(UInt32), typeof(Int32), typeof(IntPtr));
                        } finally {
                            FreeStringPtr(label_string_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_map_buffer_range]
            /// Map a section of a buffer object's data store
            /// </summary>
            /// <param name="target"> 
            /// Specifies a binding to which the target buffer is bound.
            /// </param>
            /// <param name="offset"> 
            /// Specifies a the starting offset within the buffer of the range to be mapped.
            /// </param>
            /// <param name="length"> 
            /// Specifies a length of the range to be mapped.
            /// </param>
            /// <param name="access"> 
            /// Specifies a combination of access flags indicating the desired access to the range.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static IntPtr MapBufferRange(OpenTK.Graphics.ES20.All target, IntPtr offset, Int32 length, Int32 access)
            {
                unsafe
                {
                    IntPtr __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(239);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(IntPtr), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr), typeof(UInt32));
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_map_buffer_range]
            /// Map a section of a buffer object's data store
            /// </summary>
            /// <param name="target"> 
            /// Specifies a binding to which the target buffer is bound.
            /// </param>
            /// <param name="offset"> 
            /// Specifies a the starting offset within the buffer of the range to be mapped.
            /// </param>
            /// <param name="length"> 
            /// Specifies a length of the range to be mapped.
            /// </param>
            /// <param name="access"> 
            /// Specifies a combination of access flags indicating the desired access to the range.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static IntPtr MapBufferRange(OpenTK.Graphics.ES20.All target, IntPtr offset, Int32 length, UInt32 access)
            {
                unsafe
                {
                    IntPtr __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(239);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(IntPtr), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr), typeof(UInt32));
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_map_buffer_range]
            /// Map a section of a buffer object's data store
            /// </summary>
            /// <param name="target"> 
            /// Specifies a binding to which the target buffer is bound.
            /// </param>
            /// <param name="offset"> 
            /// Specifies a the starting offset within the buffer of the range to be mapped.
            /// </param>
            /// <param name="length"> 
            /// Specifies a length of the range to be mapped.
            /// </param>
            /// <param name="access"> 
            /// Specifies a combination of access flags indicating the desired access to the range.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static IntPtr MapBufferRange(OpenTK.Graphics.ES20.All target, IntPtr offset, IntPtr length, Int32 access)
            {
                unsafe
                {
                    IntPtr __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(239);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(IntPtr), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr), typeof(UInt32));
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_map_buffer_range]
            /// Map a section of a buffer object's data store
            /// </summary>
            /// <param name="target"> 
            /// Specifies a binding to which the target buffer is bound.
            /// </param>
            /// <param name="offset"> 
            /// Specifies a the starting offset within the buffer of the range to be mapped.
            /// </param>
            /// <param name="length"> 
            /// Specifies a length of the range to be mapped.
            /// </param>
            /// <param name="access"> 
            /// Specifies a combination of access flags indicating the desired access to the range.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static IntPtr MapBufferRange(OpenTK.Graphics.ES20.All target, IntPtr offset, IntPtr length, UInt32 access)
            {
                unsafe
                {
                    IntPtr __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(239);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(IntPtr), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr), typeof(UInt32));
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_map_buffer_range]
            /// Map a section of a buffer object's data store
            /// </summary>
            /// <param name="target"> 
            /// Specifies a binding to which the target buffer is bound.
            /// </param>
            /// <param name="offset"> 
            /// Specifies a the starting offset within the buffer of the range to be mapped.
            /// </param>
            /// <param name="length"> 
            /// Specifies a length of the range to be mapped.
            /// </param>
            /// <param name="access"> 
            /// Specifies a combination of access flags indicating the desired access to the range.
            /// </param>
            [CLSCompliant(false)]
            public static IntPtr MapBufferRange(OpenTK.Graphics.ES20.BufferTarget target, IntPtr offset, Int32 length, Int32 access)
            {
                unsafe
                {
                    IntPtr __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(239);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(IntPtr), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr), typeof(UInt32));
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_map_buffer_range]
            /// Map a section of a buffer object's data store
            /// </summary>
            /// <param name="target"> 
            /// Specifies a binding to which the target buffer is bound.
            /// </param>
            /// <param name="offset"> 
            /// Specifies a the starting offset within the buffer of the range to be mapped.
            /// </param>
            /// <param name="length"> 
            /// Specifies a length of the range to be mapped.
            /// </param>
            /// <param name="access"> 
            /// Specifies a combination of access flags indicating the desired access to the range.
            /// </param>
            [CLSCompliant(false)]
            public static IntPtr MapBufferRange(OpenTK.Graphics.ES20.BufferTarget target, IntPtr offset, Int32 length, UInt32 access)
            {
                unsafe
                {
                    IntPtr __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(239);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(IntPtr), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr), typeof(UInt32));
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_map_buffer_range]
            /// Map a section of a buffer object's data store
            /// </summary>
            /// <param name="target"> 
            /// Specifies a binding to which the target buffer is bound.
            /// </param>
            /// <param name="offset"> 
            /// Specifies a the starting offset within the buffer of the range to be mapped.
            /// </param>
            /// <param name="length"> 
            /// Specifies a length of the range to be mapped.
            /// </param>
            /// <param name="access"> 
            /// Specifies a combination of access flags indicating the desired access to the range.
            /// </param>
            [CLSCompliant(false)]
            public static IntPtr MapBufferRange(OpenTK.Graphics.ES20.BufferTarget target, IntPtr offset, IntPtr length, Int32 access)
            {
                unsafe
                {
                    IntPtr __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(239);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(IntPtr), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr), typeof(UInt32));
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_map_buffer_range]
            /// Map a section of a buffer object's data store
            /// </summary>
            /// <param name="target"> 
            /// Specifies a binding to which the target buffer is bound.
            /// </param>
            /// <param name="offset"> 
            /// Specifies a the starting offset within the buffer of the range to be mapped.
            /// </param>
            /// <param name="length"> 
            /// Specifies a length of the range to be mapped.
            /// </param>
            /// <param name="access"> 
            /// Specifies a combination of access flags indicating the desired access to the range.
            /// </param>
            [CLSCompliant(false)]
            public static IntPtr MapBufferRange(OpenTK.Graphics.ES20.BufferTarget target, IntPtr offset, IntPtr length, UInt32 access)
            {
                unsafe
                {
                    IntPtr __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(239);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(IntPtr), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr), typeof(UInt32));
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives from array data
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="first">[length: primcount] 
            /// Points to an array of starting indices in the enabled arrays.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the number of indices to be rendered.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the first and count
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void MultiDrawArrays(OpenTK.Graphics.ES20.All mode, Int32[] first, Int32[] count, Int32 primcount)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "first_pinned");
                        if(first != null && first.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("first_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("first_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "count_pinned");
                        if(count != null && count.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("count_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("count_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("first_pinned");
                        Silk.Cil.LoadByName("count_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(241);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32*), typeof(Int32*), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives from array data
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="first">[length: primcount] 
            /// Points to an array of starting indices in the enabled arrays.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the number of indices to be rendered.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the first and count
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void MultiDrawArrays(OpenTK.Graphics.ES20.All mode, ref Int32 first, ref Int32 count, Int32 primcount)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "first_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("first_pinned");
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "count_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("count_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("first_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("count_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(241);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32*), typeof(Int32*), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives from array data
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="first">[length: primcount] 
            /// Points to an array of starting indices in the enabled arrays.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the number of indices to be rendered.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the first and count
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static unsafe void MultiDrawArrays(OpenTK.Graphics.ES20.All mode, Int32* first, Int32* count, Int32 primcount)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(241);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32*), typeof(Int32*), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives from array data
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="first">[length: primcount] 
            /// Points to an array of starting indices in the enabled arrays.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the number of indices to be rendered.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the first and count
            /// </param>
            [CLSCompliant(false)]
            public static void MultiDrawArrays(OpenTK.Graphics.ES20.PrimitiveType mode, Int32[] first, Int32[] count, Int32 primcount)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "first_pinned");
                        if(first != null && first.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("first_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("first_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "count_pinned");
                        if(count != null && count.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("count_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("count_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("first_pinned");
                        Silk.Cil.LoadByName("count_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(241);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32*), typeof(Int32*), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives from array data
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="first">[length: primcount] 
            /// Points to an array of starting indices in the enabled arrays.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the number of indices to be rendered.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the first and count
            /// </param>
            [CLSCompliant(false)]
            public static void MultiDrawArrays(OpenTK.Graphics.ES20.PrimitiveType mode, ref Int32 first, ref Int32 count, Int32 primcount)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "first_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("first_pinned");
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "count_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("count_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("first_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("count_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(241);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32*), typeof(Int32*), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives from array data
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="first">[length: primcount] 
            /// Points to an array of starting indices in the enabled arrays.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the number of indices to be rendered.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the first and count
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void MultiDrawArrays(OpenTK.Graphics.ES20.PrimitiveType mode, Int32* first, Int32* count, Int32 primcount)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(241);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32*), typeof(Int32*), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void MultiDrawElements(OpenTK.Graphics.ES20.All mode, Int32[] count, OpenTK.Graphics.ES20.All type, IntPtr indices, Int32 primcount)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "count_pinned");
                        if(count != null && count.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("count_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("count_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("count_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(242);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32*), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES20.All mode, Int32[] count, OpenTK.Graphics.ES20.All type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "count_pinned");
                        if(count != null && count.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("count_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("count_pinned");
                        }
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        if(indices != null && indices.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T3");
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("count_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(242);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32*), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES20.All mode, Int32[] count, OpenTK.Graphics.ES20.All type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "count_pinned");
                        if(count != null && count.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("count_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("count_pinned");
                        }
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        if(indices != null && indices.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T3[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("count_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(242);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32*), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES20.All mode, Int32[] count, OpenTK.Graphics.ES20.All type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "count_pinned");
                        if(count != null && count.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("count_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("count_pinned");
                        }
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        if(indices != null && indices.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T3[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("count_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(242);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32*), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES20.All mode, Int32[] count, OpenTK.Graphics.ES20.All type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "count_pinned");
                        if(count != null && count.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("count_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("count_pinned");
                        }
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("indices_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("count_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(242);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32*), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void MultiDrawElements(OpenTK.Graphics.ES20.All mode, ref Int32 count, OpenTK.Graphics.ES20.All type, IntPtr indices, Int32 primcount)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "count_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("count_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("count_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(242);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32*), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES20.All mode, ref Int32 count, OpenTK.Graphics.ES20.All type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "count_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("count_pinned");
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        if(indices != null && indices.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T3");
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("count_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(242);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32*), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES20.All mode, ref Int32 count, OpenTK.Graphics.ES20.All type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "count_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("count_pinned");
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        if(indices != null && indices.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T3[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("count_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(242);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32*), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES20.All mode, ref Int32 count, OpenTK.Graphics.ES20.All type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "count_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("count_pinned");
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        if(indices != null && indices.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T3[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("count_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(242);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32*), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES20.All mode, ref Int32 count, OpenTK.Graphics.ES20.All type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "count_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("count_pinned");
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("indices_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("count_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(242);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32*), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static unsafe void MultiDrawElements(OpenTK.Graphics.ES20.All mode, Int32* count, OpenTK.Graphics.ES20.All type, IntPtr indices, Int32 primcount)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(242);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32*), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static unsafe void MultiDrawElements<T3>(OpenTK.Graphics.ES20.All mode, Int32* count, OpenTK.Graphics.ES20.All type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        if(indices != null && indices.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T3");
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(242);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32*), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static unsafe void MultiDrawElements<T3>(OpenTK.Graphics.ES20.All mode, Int32* count, OpenTK.Graphics.ES20.All type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        if(indices != null && indices.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T3[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(242);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32*), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static unsafe void MultiDrawElements<T3>(OpenTK.Graphics.ES20.All mode, Int32* count, OpenTK.Graphics.ES20.All type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        if(indices != null && indices.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T3[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(242);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32*), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static unsafe void MultiDrawElements<T3>(OpenTK.Graphics.ES20.All mode, Int32* count, OpenTK.Graphics.ES20.All type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("indices_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(242);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32*), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [CLSCompliant(false)]
            public static void MultiDrawElements(OpenTK.Graphics.ES20.PrimitiveType mode, Int32[] count, OpenTK.Graphics.ES20.DrawElementsType type, IntPtr indices, Int32 primcount)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "count_pinned");
                        if(count != null && count.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("count_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("count_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("count_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(242);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32*), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [CLSCompliant(false)]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES20.PrimitiveType mode, Int32[] count, OpenTK.Graphics.ES20.DrawElementsType type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "count_pinned");
                        if(count != null && count.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("count_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("count_pinned");
                        }
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        if(indices != null && indices.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T3");
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("count_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(242);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32*), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [CLSCompliant(false)]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES20.PrimitiveType mode, Int32[] count, OpenTK.Graphics.ES20.DrawElementsType type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "count_pinned");
                        if(count != null && count.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("count_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("count_pinned");
                        }
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        if(indices != null && indices.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T3[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("count_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(242);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32*), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [CLSCompliant(false)]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES20.PrimitiveType mode, Int32[] count, OpenTK.Graphics.ES20.DrawElementsType type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "count_pinned");
                        if(count != null && count.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("count_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("count_pinned");
                        }
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        if(indices != null && indices.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T3[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("count_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(242);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32*), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [CLSCompliant(false)]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES20.PrimitiveType mode, Int32[] count, OpenTK.Graphics.ES20.DrawElementsType type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "count_pinned");
                        if(count != null && count.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("count_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("count_pinned");
                        }
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("indices_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("count_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(242);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32*), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [CLSCompliant(false)]
            public static void MultiDrawElements(OpenTK.Graphics.ES20.PrimitiveType mode, ref Int32 count, OpenTK.Graphics.ES20.DrawElementsType type, IntPtr indices, Int32 primcount)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "count_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("count_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("count_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(242);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32*), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [CLSCompliant(false)]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES20.PrimitiveType mode, ref Int32 count, OpenTK.Graphics.ES20.DrawElementsType type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "count_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("count_pinned");
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        if(indices != null && indices.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T3");
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("count_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(242);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32*), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [CLSCompliant(false)]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES20.PrimitiveType mode, ref Int32 count, OpenTK.Graphics.ES20.DrawElementsType type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "count_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("count_pinned");
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        if(indices != null && indices.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T3[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("count_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(242);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32*), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [CLSCompliant(false)]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES20.PrimitiveType mode, ref Int32 count, OpenTK.Graphics.ES20.DrawElementsType type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "count_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("count_pinned");
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        if(indices != null && indices.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T3[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("count_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(242);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32*), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [CLSCompliant(false)]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES20.PrimitiveType mode, ref Int32 count, OpenTK.Graphics.ES20.DrawElementsType type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "count_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("count_pinned");
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("indices_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("count_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(242);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32*), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void MultiDrawElements(OpenTK.Graphics.ES20.PrimitiveType mode, Int32* count, OpenTK.Graphics.ES20.DrawElementsType type, IntPtr indices, Int32 primcount)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(242);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32*), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void MultiDrawElements<T3>(OpenTK.Graphics.ES20.PrimitiveType mode, Int32* count, OpenTK.Graphics.ES20.DrawElementsType type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        if(indices != null && indices.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T3");
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(242);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32*), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void MultiDrawElements<T3>(OpenTK.Graphics.ES20.PrimitiveType mode, Int32* count, OpenTK.Graphics.ES20.DrawElementsType type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        if(indices != null && indices.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T3[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(242);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32*), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void MultiDrawElements<T3>(OpenTK.Graphics.ES20.PrimitiveType mode, Int32* count, OpenTK.Graphics.ES20.DrawElementsType type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        if(indices != null && indices.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T3[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(242);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32*), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void MultiDrawElements<T3>(OpenTK.Graphics.ES20.PrimitiveType mode, Int32* count, OpenTK.Graphics.ES20.DrawElementsType type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("indices_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(242);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32*), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_tessellation_shader]
            /// Specifies the parameters for patch primitives
            /// </summary>
            /// <param name="pname"> 
            /// Specifies the name of the parameter to set. The symbolc constants PatchVertices, PatchDefaultOuterLevel, and PatchDefaultInnerLevel are accepted.
            /// </param>
            /// <param name="value"> 
            /// Specifies the new value for the parameter given by pname.
            /// </param>
            public static void PatchParameter(OpenTK.Graphics.ES20.All pname, Int32 value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(247);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.All), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_debug_marker]</summary>
            public static void PopGroupMarker()
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(252);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_primitive_bounding_box]</summary>
            /// <param name="minX"></param>
            /// <param name="minY"></param>
            /// <param name="minZ"></param>
            /// <param name="minW"></param>
            /// <param name="maxX"></param>
            /// <param name="maxY"></param>
            /// <param name="maxZ"></param>
            /// <param name="maxW"></param>
            public static void PrimitiveBoundingBox(Single minX, Single minY, Single minZ, Single minW, Single maxX, Single maxY, Single maxZ, Single maxW)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(253);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Single), typeof(Single), typeof(Single), typeof(Single), typeof(Single), typeof(Single), typeof(Single), typeof(Single));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify a parameter for a program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the name of a program object whose parameter to modify.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the name of the parameter to modify.
            /// </param>
            /// <param name="value"> 
            /// Specifies the new value of the parameter specified by pname for program.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void ProgramParameter(Int32 program, OpenTK.Graphics.ES20.All pname, Int32 value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(255);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.ProgramParameterName), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify a parameter for a program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the name of a program object whose parameter to modify.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the name of the parameter to modify.
            /// </param>
            /// <param name="value"> 
            /// Specifies the new value of the parameter specified by pname for program.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramParameter(Int32 program, OpenTK.Graphics.ES20.ProgramParameterName pname, Int32 value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(255);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.ProgramParameterName), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify a parameter for a program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the name of a program object whose parameter to modify.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the name of the parameter to modify.
            /// </param>
            /// <param name="value"> 
            /// Specifies the new value of the parameter specified by pname for program.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void ProgramParameter(UInt32 program, OpenTK.Graphics.ES20.All pname, Int32 value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(255);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.ProgramParameterName), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify a parameter for a program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the name of a program object whose parameter to modify.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the name of the parameter to modify.
            /// </param>
            /// <param name="value"> 
            /// Specifies the new value of the parameter specified by pname for program.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramParameter(UInt32 program, OpenTK.Graphics.ES20.ProgramParameterName pname, Int32 value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(255);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.ProgramParameterName), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramUniform1(Int32 program, Int32 location, Single v0)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(256);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Single));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramUniform1(UInt32 program, Int32 location, Single v0)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(256);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Single));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramUniform1(Int32 program, Int32 location, Int32 count, Single[] value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                        if(value != null && value.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Single");
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(257);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramUniform1(Int32 program, Int32 location, Int32 count, ref Single value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("value_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(257);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform1(Int32 program, Int32 location, Int32 count, Single* value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(257);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramUniform1(UInt32 program, Int32 location, Int32 count, Single[] value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                        if(value != null && value.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Single");
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(257);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramUniform1(UInt32 program, Int32 location, Int32 count, ref Single value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("value_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(257);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform1(UInt32 program, Int32 location, Int32 count, Single* value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(257);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramUniform1(Int32 program, Int32 location, Int32 v0)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(258);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramUniform1(UInt32 program, Int32 location, Int32 v0)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(258);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramUniform1(Int32 program, Int32 location, Int32 count, Int32[] value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "value_pinned");
                        if(value != null && value.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(259);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramUniform1(Int32 program, Int32 location, Int32 count, ref Int32 value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "value_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("value_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(259);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform1(Int32 program, Int32 location, Int32 count, Int32* value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(259);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramUniform1(UInt32 program, Int32 location, Int32 count, Int32[] value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "value_pinned");
                        if(value != null && value.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(259);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramUniform1(UInt32 program, Int32 location, Int32 count, ref Int32 value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "value_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("value_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(259);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform1(UInt32 program, Int32 location, Int32 count, Int32* value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(259);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramUniform1(UInt32 program, Int32 location, UInt32 v0)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(260);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramUniform1(UInt32 program, Int32 location, Int32 count, UInt32[] value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "value_pinned");
                        if(value != null && value.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(261);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramUniform1(UInt32 program, Int32 location, Int32 count, ref UInt32 value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "value_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("value_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(261);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform1(UInt32 program, Int32 location, Int32 count, UInt32* value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(261);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v1"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramUniform2(Int32 program, Int32 location, Single v0, Single v1)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(262);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Single), typeof(Single));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v1"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramUniform2(UInt32 program, Int32 location, Single v0, Single v1)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(262);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Single), typeof(Single));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*2] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramUniform2(Int32 program, Int32 location, Int32 count, Single[] value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                        if(value != null && value.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Single");
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(263);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*2] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramUniform2(Int32 program, Int32 location, Int32 count, ref Single value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("value_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(263);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*2] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform2(Int32 program, Int32 location, Int32 count, Single* value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(263);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*2] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramUniform2(UInt32 program, Int32 location, Int32 count, Single[] value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                        if(value != null && value.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Single");
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(263);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*2] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramUniform2(UInt32 program, Int32 location, Int32 count, ref Single value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("value_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(263);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*2] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform2(UInt32 program, Int32 location, Int32 count, Single* value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(263);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v1"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramUniform2(Int32 program, Int32 location, Int32 v0, Int32 v1)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(264);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v1"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramUniform2(UInt32 program, Int32 location, Int32 v0, Int32 v1)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(264);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*2] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramUniform2(Int32 program, Int32 location, Int32 count, Int32[] value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "value_pinned");
                        if(value != null && value.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(265);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*2] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform2(Int32 program, Int32 location, Int32 count, Int32* value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(265);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*2] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramUniform2(UInt32 program, Int32 location, Int32 count, Int32[] value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "value_pinned");
                        if(value != null && value.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(265);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*2] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform2(UInt32 program, Int32 location, Int32 count, Int32* value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(265);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v1"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramUniform2(UInt32 program, Int32 location, UInt32 v0, UInt32 v1)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(266);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(UInt32), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*2] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramUniform2(UInt32 program, Int32 location, Int32 count, UInt32[] value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "value_pinned");
                        if(value != null && value.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(267);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*2] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramUniform2(UInt32 program, Int32 location, Int32 count, ref UInt32 value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "value_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("value_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(267);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*2] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform2(UInt32 program, Int32 location, Int32 count, UInt32* value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(267);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v1"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v2"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramUniform3(Int32 program, Int32 location, Single v0, Single v1, Single v2)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(268);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Single), typeof(Single), typeof(Single));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v1"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v2"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramUniform3(UInt32 program, Int32 location, Single v0, Single v1, Single v2)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(268);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Single), typeof(Single), typeof(Single));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*3] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramUniform3(Int32 program, Int32 location, Int32 count, Single[] value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                        if(value != null && value.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Single");
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(269);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*3] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramUniform3(Int32 program, Int32 location, Int32 count, ref Single value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("value_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(269);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*3] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform3(Int32 program, Int32 location, Int32 count, Single* value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(269);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*3] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramUniform3(UInt32 program, Int32 location, Int32 count, Single[] value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                        if(value != null && value.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Single");
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(269);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*3] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramUniform3(UInt32 program, Int32 location, Int32 count, ref Single value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("value_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(269);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*3] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform3(UInt32 program, Int32 location, Int32 count, Single* value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(269);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v1"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v2"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramUniform3(Int32 program, Int32 location, Int32 v0, Int32 v1, Int32 v2)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(270);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v1"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v2"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramUniform3(UInt32 program, Int32 location, Int32 v0, Int32 v1, Int32 v2)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(270);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*3] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramUniform3(Int32 program, Int32 location, Int32 count, Int32[] value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "value_pinned");
                        if(value != null && value.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(271);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*3] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramUniform3(Int32 program, Int32 location, Int32 count, ref Int32 value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "value_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("value_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(271);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*3] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform3(Int32 program, Int32 location, Int32 count, Int32* value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(271);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*3] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramUniform3(UInt32 program, Int32 location, Int32 count, Int32[] value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "value_pinned");
                        if(value != null && value.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(271);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*3] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramUniform3(UInt32 program, Int32 location, Int32 count, ref Int32 value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "value_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("value_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(271);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*3] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform3(UInt32 program, Int32 location, Int32 count, Int32* value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(271);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v1"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v2"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramUniform3(UInt32 program, Int32 location, UInt32 v0, UInt32 v1, UInt32 v2)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(272);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(UInt32), typeof(UInt32), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*3] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramUniform3(UInt32 program, Int32 location, Int32 count, UInt32[] value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "value_pinned");
                        if(value != null && value.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(273);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*3] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramUniform3(UInt32 program, Int32 location, Int32 count, ref UInt32 value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "value_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("value_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(273);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*3] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform3(UInt32 program, Int32 location, Int32 count, UInt32* value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(273);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v1"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v2"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v3"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramUniform4(Int32 program, Int32 location, Single v0, Single v1, Single v2, Single v3)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(274);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Single), typeof(Single), typeof(Single), typeof(Single));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v1"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v2"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v3"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramUniform4(UInt32 program, Int32 location, Single v0, Single v1, Single v2, Single v3)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(274);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Single), typeof(Single), typeof(Single), typeof(Single));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*4] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramUniform4(Int32 program, Int32 location, Int32 count, Single[] value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                        if(value != null && value.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Single");
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(275);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*4] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramUniform4(Int32 program, Int32 location, Int32 count, ref Single value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("value_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(275);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*4] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform4(Int32 program, Int32 location, Int32 count, Single* value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(275);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*4] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramUniform4(UInt32 program, Int32 location, Int32 count, Single[] value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                        if(value != null && value.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Single");
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(275);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*4] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramUniform4(UInt32 program, Int32 location, Int32 count, ref Single value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("value_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(275);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*4] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform4(UInt32 program, Int32 location, Int32 count, Single* value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(275);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v1"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v2"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v3"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramUniform4(Int32 program, Int32 location, Int32 v0, Int32 v1, Int32 v2, Int32 v3)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(276);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v1"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v2"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v3"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramUniform4(UInt32 program, Int32 location, Int32 v0, Int32 v1, Int32 v2, Int32 v3)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(276);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*4] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramUniform4(Int32 program, Int32 location, Int32 count, Int32[] value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "value_pinned");
                        if(value != null && value.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(277);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*4] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramUniform4(Int32 program, Int32 location, Int32 count, ref Int32 value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "value_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("value_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(277);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*4] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform4(Int32 program, Int32 location, Int32 count, Int32* value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(277);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*4] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramUniform4(UInt32 program, Int32 location, Int32 count, Int32[] value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "value_pinned");
                        if(value != null && value.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(277);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*4] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramUniform4(UInt32 program, Int32 location, Int32 count, ref Int32 value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "value_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("value_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(277);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*4] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform4(UInt32 program, Int32 location, Int32 count, Int32* value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(277);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v1"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v2"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v3"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramUniform4(UInt32 program, Int32 location, UInt32 v0, UInt32 v1, UInt32 v2, UInt32 v3)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(278);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(UInt32), typeof(UInt32), typeof(UInt32), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*4] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramUniform4(UInt32 program, Int32 location, Int32 count, UInt32[] value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "value_pinned");
                        if(value != null && value.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(279);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*4] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramUniform4(UInt32 program, Int32 location, Int32 count, ref UInt32 value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "value_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("value_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(279);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*4] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform4(UInt32 program, Int32 location, Int32 count, UInt32* value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(279);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*4]</param>
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix2(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                        if(value != null && value.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Single");
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(280);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*4]</param>
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix2(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.StoreByName("value_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(280);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*4]</param>
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix2(Int32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(280);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*4]</param>
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix2(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                        if(value != null && value.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Single");
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(280);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*4]</param>
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix2(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.StoreByName("value_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(280);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*4]</param>
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix2(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(280);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*6]</param>
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix2x3(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                        if(value != null && value.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Single");
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(281);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*6]</param>
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix2x3(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.StoreByName("value_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(281);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*6]</param>
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix2x3(Int32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(281);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*6]</param>
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix2x3(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                        if(value != null && value.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Single");
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(281);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*6]</param>
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix2x3(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.StoreByName("value_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(281);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*6]</param>
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix2x3(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(281);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*8]</param>
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix2x4(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                        if(value != null && value.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Single");
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(282);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*8]</param>
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix2x4(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.StoreByName("value_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(282);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*8]</param>
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix2x4(Int32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(282);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*8]</param>
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix2x4(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                        if(value != null && value.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Single");
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(282);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*8]</param>
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix2x4(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.StoreByName("value_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(282);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*8]</param>
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix2x4(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(282);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*9]</param>
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix3(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                        if(value != null && value.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Single");
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(283);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*9]</param>
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix3(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.StoreByName("value_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(283);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*9]</param>
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix3(Int32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(283);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*9]</param>
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix3(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                        if(value != null && value.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Single");
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(283);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*9]</param>
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix3(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.StoreByName("value_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(283);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*9]</param>
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix3(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(283);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*6]</param>
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix3x2(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                        if(value != null && value.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Single");
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(284);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*6]</param>
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix3x2(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.StoreByName("value_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(284);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*6]</param>
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix3x2(Int32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(284);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*6]</param>
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix3x2(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                        if(value != null && value.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Single");
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(284);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*6]</param>
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix3x2(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.StoreByName("value_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(284);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*6]</param>
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix3x2(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(284);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*12]</param>
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix3x4(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                        if(value != null && value.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Single");
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(285);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*12]</param>
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix3x4(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.StoreByName("value_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(285);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*12]</param>
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix3x4(Int32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(285);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*12]</param>
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix3x4(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                        if(value != null && value.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Single");
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(285);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*12]</param>
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix3x4(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.StoreByName("value_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(285);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*12]</param>
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix3x4(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(285);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects|EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*16]</param>
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix4(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                        if(value != null && value.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Single");
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(286);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects|EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*16]</param>
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix4(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.StoreByName("value_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(286);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects|EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*16]</param>
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix4(Int32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(286);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects|EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*16]</param>
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix4(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                        if(value != null && value.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Single");
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(286);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects|EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*16]</param>
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix4(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.StoreByName("value_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(286);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects|EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*16]</param>
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix4(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(286);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*8]</param>
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix4x2(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                        if(value != null && value.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Single");
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(287);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*8]</param>
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix4x2(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.StoreByName("value_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(287);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*8]</param>
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix4x2(Int32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(287);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*8]</param>
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix4x2(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                        if(value != null && value.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Single");
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(287);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*8]</param>
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix4x2(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.StoreByName("value_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(287);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*8]</param>
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix4x2(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(287);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*12]</param>
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix4x3(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                        if(value != null && value.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Single");
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(288);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*12]</param>
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix4x3(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.StoreByName("value_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(288);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*12]</param>
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix4x3(Int32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(288);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*12]</param>
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix4x3(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                        if(value != null && value.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Single");
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(288);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*12]</param>
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix4x3(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.StoreByName("value_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(288);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*12]</param>
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix4x3(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(288);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_debug_marker]</summary>
            /// <param name="length"></param>
            /// <param name="marker"></param>
            public static void PushGroupMarker(Int32 length, String marker)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr marker_string_ptr = MarshalStringToPtr(marker);
                        try {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Load(marker_string_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(291);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(IntPtr));
                        } finally {
                            FreeStringPtr(marker_string_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Record the GL time into a query object after all previous commands have reached the GL server but have not yet necessarily executed.
            /// </summary>
            /// <param name="id"> 
            /// Specify the name of a query object into which to record the GL time.
            /// </param>
            /// <param name="target"> 
            /// Specify the counter to query. target must be Timestamp.
            /// </param>
            [CLSCompliant(false)]
            public static void QueryCounter(Int32 id, OpenTK.Graphics.ES20.All target)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(292);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Record the GL time into a query object after all previous commands have reached the GL server but have not yet necessarily executed.
            /// </summary>
            /// <param name="id"> 
            /// Specify the name of a query object into which to record the GL time.
            /// </param>
            /// <param name="target"> 
            /// Specify the counter to query. target must be Timestamp.
            /// </param>
            [CLSCompliant(false)]
            public static void QueryCounter(UInt32 id, OpenTK.Graphics.ES20.All target)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(292);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multiview_draw_buffers]</summary>
            /// <param name="src"></param>
            /// <param name="index"></param>
            public static void ReadBufferIndexed(OpenTK.Graphics.ES20.All src, Int32 index)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(293);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.All), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="format"></param>
            /// <param name="type"></param>
            /// <param name="bufSize"></param>
            /// <param name="data">[length: bufSize]</param>
            [Obsolete("Use strongly-typed overload instead")]
            public static void ReadnPixels(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, Int32 bufSize, [OutAttribute] IntPtr data)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(296);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(Int32), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="format"></param>
            /// <param name="type"></param>
            /// <param name="bufSize"></param>
            /// <param name="data">[length: bufSize]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void ReadnPixels<T7>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, Int32 bufSize, [InAttribute, OutAttribute] T7[] data)
                where T7 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T7& pinned", "data_pinned");
                        if(data != null && data.Length != 0)
                        {
                            Silk.Cil.Ldarg(7);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T7");
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(296);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(Int32), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="format"></param>
            /// <param name="type"></param>
            /// <param name="bufSize"></param>
            /// <param name="data">[length: bufSize]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void ReadnPixels<T7>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, Int32 bufSize, [InAttribute, OutAttribute] T7[,] data)
                where T7 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T7& pinned", "data_pinned");
                        if(data != null && data.Length != 0)
                        {
                            Silk.Cil.Ldarg(7);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T7[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(296);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(Int32), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="format"></param>
            /// <param name="type"></param>
            /// <param name="bufSize"></param>
            /// <param name="data">[length: bufSize]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void ReadnPixels<T7>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, Int32 bufSize, [InAttribute, OutAttribute] T7[,,] data)
                where T7 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T7& pinned", "data_pinned");
                        if(data != null && data.Length != 0)
                        {
                            Silk.Cil.Ldarg(7);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T7[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(296);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(Int32), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="format"></param>
            /// <param name="type"></param>
            /// <param name="bufSize"></param>
            /// <param name="data">[length: bufSize]</param>
            [Obsolete("Use strongly-typed overload instead")]
            public static void ReadnPixels<T7>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, Int32 bufSize, [InAttribute, OutAttribute] ref T7 data)
                where T7 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T7& pinned", "data_pinned");
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.StoreByName("data_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(296);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(Int32), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="format"></param>
            /// <param name="type"></param>
            /// <param name="bufSize"></param>
            /// <param name="data">[length: bufSize]</param>
            public static void ReadnPixels(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, Int32 bufSize, [OutAttribute] IntPtr data)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(296);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(Int32), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="format"></param>
            /// <param name="type"></param>
            /// <param name="bufSize"></param>
            /// <param name="data">[length: bufSize]</param>
            [CLSCompliant(false)]
            public static void ReadnPixels<T7>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, Int32 bufSize, [InAttribute, OutAttribute] T7[] data)
                where T7 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T7& pinned", "data_pinned");
                        if(data != null && data.Length != 0)
                        {
                            Silk.Cil.Ldarg(7);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T7");
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(296);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(Int32), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="format"></param>
            /// <param name="type"></param>
            /// <param name="bufSize"></param>
            /// <param name="data">[length: bufSize]</param>
            [CLSCompliant(false)]
            public static void ReadnPixels<T7>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, Int32 bufSize, [InAttribute, OutAttribute] T7[,] data)
                where T7 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T7& pinned", "data_pinned");
                        if(data != null && data.Length != 0)
                        {
                            Silk.Cil.Ldarg(7);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T7[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(296);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(Int32), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="format"></param>
            /// <param name="type"></param>
            /// <param name="bufSize"></param>
            /// <param name="data">[length: bufSize]</param>
            [CLSCompliant(false)]
            public static void ReadnPixels<T7>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, Int32 bufSize, [InAttribute, OutAttribute] T7[,,] data)
                where T7 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T7& pinned", "data_pinned");
                        if(data != null && data.Length != 0)
                        {
                            Silk.Cil.Ldarg(7);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T7[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(296);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(Int32), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="format"></param>
            /// <param name="type"></param>
            /// <param name="bufSize"></param>
            /// <param name="data">[length: bufSize]</param>
            public static void ReadnPixels<T7>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, Int32 bufSize, [InAttribute, OutAttribute] ref T7 data)
                where T7 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T7& pinned", "data_pinned");
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.StoreByName("data_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(296);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(Int32), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multisampled_render_to_texture]
            /// Establish data storage, format, dimensions and sample count of a renderbuffer object's image
            /// </summary>
            /// <param name="target"> 
            /// Specifies a binding to which the target of the allocation and must be Renderbuffer.
            /// </param>
            /// <param name="samples"> 
            /// Specifies the number of samples to be used for the renderbuffer object's storage.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the internal format to use for the renderbuffer object's image.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the renderbuffer, in pixels.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the renderbuffer, in pixels.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            public static void RenderbufferStorageMultisample(OpenTK.Graphics.ES20.All target, Int32 samples, OpenTK.Graphics.ES20.All internalformat, Int32 width, Int32 height)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(303);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.RenderbufferTarget), typeof(Int32), typeof(OpenTK.Graphics.ES20.RenderbufferInternalFormat), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_multisampled_render_to_texture]
            /// Establish data storage, format, dimensions and sample count of a renderbuffer object's image
            /// </summary>
            /// <param name="target"> 
            /// Specifies a binding to which the target of the allocation and must be Renderbuffer.
            /// </param>
            /// <param name="samples"> 
            /// Specifies the number of samples to be used for the renderbuffer object's storage.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the internal format to use for the renderbuffer object's image.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the renderbuffer, in pixels.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the renderbuffer, in pixels.
            /// </param>
            public static void RenderbufferStorageMultisample(OpenTK.Graphics.ES20.RenderbufferTarget target, Int32 samples, OpenTK.Graphics.ES20.RenderbufferInternalFormat internalformat, Int32 width, Int32 height)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(303);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.RenderbufferTarget), typeof(Int32), typeof(OpenTK.Graphics.ES20.RenderbufferInternalFormat), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="param">[length: pname]</param>
            [CLSCompliant(false)]
            public static void SamplerParameterI(Int32 sampler, OpenTK.Graphics.ES20.All pname, Int32[] param)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "param_pinned");
                        if(param != null && param.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("param_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("param_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("param_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(308);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="param">[length: pname]</param>
            [CLSCompliant(false)]
            public static void SamplerParameterI(Int32 sampler, OpenTK.Graphics.ES20.All pname, ref Int32 param)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "param_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("param_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("param_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(308);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="param">[length: pname]</param>
            [CLSCompliant(false)]
            public static unsafe void SamplerParameterI(Int32 sampler, OpenTK.Graphics.ES20.All pname, Int32* param)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(308);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="param">[length: pname]</param>
            [CLSCompliant(false)]
            public static void SamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES20.All pname, Int32[] param)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "param_pinned");
                        if(param != null && param.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("param_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("param_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("param_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(308);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="param">[length: pname]</param>
            [CLSCompliant(false)]
            public static void SamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES20.All pname, ref Int32 param)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "param_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("param_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("param_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(308);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="param">[length: pname]</param>
            [CLSCompliant(false)]
            public static unsafe void SamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES20.All pname, Int32* param)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(308);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="param">[length: pname]</param>
            [CLSCompliant(false)]
            public static void SamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES20.All pname, UInt32[] param)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "param_pinned");
                        if(param != null && param.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("param_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("param_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("param_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(309);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="param">[length: pname]</param>
            [CLSCompliant(false)]
            public static void SamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES20.All pname, ref UInt32 param)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "param_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("param_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("param_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(309);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="param">[length: pname]</param>
            [CLSCompliant(false)]
            public static unsafe void SamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES20.All pname, UInt32* param)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(309);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_buffer]
            /// Attach the storage for a buffer object to the active buffer texture
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target of the operation and must be TextureBuffer.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the internal format of the data in the store belonging to buffer.
            /// </param>
            /// <param name="buffer"> 
            /// Specifies the name of the buffer object whose storage to attach to the active buffer texture.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void TexBuffer(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All internalformat, Int32 buffer)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(323);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget), typeof(OpenTK.Graphics.ES20.All), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_buffer]
            /// Attach the storage for a buffer object to the active buffer texture
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target of the operation and must be TextureBuffer.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the internal format of the data in the store belonging to buffer.
            /// </param>
            /// <param name="buffer"> 
            /// Specifies the name of the buffer object whose storage to attach to the active buffer texture.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void TexBuffer(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All internalformat, UInt32 buffer)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(323);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget), typeof(OpenTK.Graphics.ES20.All), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_buffer]
            /// Attach the storage for a buffer object to the active buffer texture
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target of the operation and must be TextureBuffer.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the internal format of the data in the store belonging to buffer.
            /// </param>
            /// <param name="buffer"> 
            /// Specifies the name of the buffer object whose storage to attach to the active buffer texture.
            /// </param>
            [CLSCompliant(false)]
            public static void TexBuffer(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.All internalformat, Int32 buffer)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(323);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget), typeof(OpenTK.Graphics.ES20.All), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_buffer]
            /// Attach the storage for a buffer object to the active buffer texture
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target of the operation and must be TextureBuffer.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the internal format of the data in the store belonging to buffer.
            /// </param>
            /// <param name="buffer"> 
            /// Specifies the name of the buffer object whose storage to attach to the active buffer texture.
            /// </param>
            [CLSCompliant(false)]
            public static void TexBuffer(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.All internalformat, UInt32 buffer)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(323);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget), typeof(OpenTK.Graphics.ES20.All), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_buffer]
            /// Bind a range of a buffer's data store to a buffer texture
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target of the operation and must be TextureBuffer.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the internal format of the data in the store belonging to buffer.
            /// </param>
            /// <param name="buffer"> 
            /// Specifies the name of the buffer object whose storage to attach to the active buffer texture.
            /// </param>
            /// <param name="offset"> 
            /// Specifies the offset of the start of the range of the buffer's data store to attach.
            /// </param>
            /// <param name="size"> 
            /// Specifies the size of the range of the buffer's data store to attach.
            /// </param>
            [CLSCompliant(false)]
            public static void TexBufferRange(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All internalformat, Int32 buffer, IntPtr offset, Int32 size)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(324);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.All), typeof(OpenTK.Graphics.ES20.All), typeof(UInt32), typeof(IntPtr), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_buffer]
            /// Bind a range of a buffer's data store to a buffer texture
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target of the operation and must be TextureBuffer.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the internal format of the data in the store belonging to buffer.
            /// </param>
            /// <param name="buffer"> 
            /// Specifies the name of the buffer object whose storage to attach to the active buffer texture.
            /// </param>
            /// <param name="offset"> 
            /// Specifies the offset of the start of the range of the buffer's data store to attach.
            /// </param>
            /// <param name="size"> 
            /// Specifies the size of the range of the buffer's data store to attach.
            /// </param>
            [CLSCompliant(false)]
            public static void TexBufferRange(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All internalformat, Int32 buffer, IntPtr offset, IntPtr size)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(324);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.All), typeof(OpenTK.Graphics.ES20.All), typeof(UInt32), typeof(IntPtr), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_buffer]
            /// Bind a range of a buffer's data store to a buffer texture
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target of the operation and must be TextureBuffer.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the internal format of the data in the store belonging to buffer.
            /// </param>
            /// <param name="buffer"> 
            /// Specifies the name of the buffer object whose storage to attach to the active buffer texture.
            /// </param>
            /// <param name="offset"> 
            /// Specifies the offset of the start of the range of the buffer's data store to attach.
            /// </param>
            /// <param name="size"> 
            /// Specifies the size of the range of the buffer's data store to attach.
            /// </param>
            [CLSCompliant(false)]
            public static void TexBufferRange(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All internalformat, UInt32 buffer, IntPtr offset, Int32 size)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(324);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.All), typeof(OpenTK.Graphics.ES20.All), typeof(UInt32), typeof(IntPtr), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_buffer]
            /// Bind a range of a buffer's data store to a buffer texture
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target of the operation and must be TextureBuffer.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the internal format of the data in the store belonging to buffer.
            /// </param>
            /// <param name="buffer"> 
            /// Specifies the name of the buffer object whose storage to attach to the active buffer texture.
            /// </param>
            /// <param name="offset"> 
            /// Specifies the offset of the start of the range of the buffer's data store to attach.
            /// </param>
            /// <param name="size"> 
            /// Specifies the size of the range of the buffer's data store to attach.
            /// </param>
            [CLSCompliant(false)]
            public static void TexBufferRange(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All internalformat, UInt32 buffer, IntPtr offset, IntPtr size)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(324);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.All), typeof(OpenTK.Graphics.ES20.All), typeof(UInt32), typeof(IntPtr), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void TexParameterI(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All pname, Int32[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(330);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget), typeof(OpenTK.Graphics.ES20.TextureParameterName), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void TexParameterI(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All pname, ref Int32 @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(330);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget), typeof(OpenTK.Graphics.ES20.TextureParameterName), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static unsafe void TexParameterI(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All pname, Int32* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(330);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget), typeof(OpenTK.Graphics.ES20.TextureParameterName), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static void TexParameterI(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.TextureParameterName pname, Int32[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(330);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget), typeof(OpenTK.Graphics.ES20.TextureParameterName), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static void TexParameterI(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.TextureParameterName pname, ref Int32 @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(330);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget), typeof(OpenTK.Graphics.ES20.TextureParameterName), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static unsafe void TexParameterI(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.TextureParameterName pname, Int32* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(330);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget), typeof(OpenTK.Graphics.ES20.TextureParameterName), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void TexParameterI(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All pname, UInt32[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(331);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget), typeof(OpenTK.Graphics.ES20.TextureParameterName), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void TexParameterI(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All pname, ref UInt32 @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "params_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(331);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget), typeof(OpenTK.Graphics.ES20.TextureParameterName), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static unsafe void TexParameterI(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All pname, UInt32* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(331);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget), typeof(OpenTK.Graphics.ES20.TextureParameterName), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static void TexParameterI(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.TextureParameterName pname, UInt32[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(331);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget), typeof(OpenTK.Graphics.ES20.TextureParameterName), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static void TexParameterI(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.TextureParameterName pname, ref UInt32 @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "params_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(331);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget), typeof(OpenTK.Graphics.ES20.TextureParameterName), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static unsafe void TexParameterI(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.TextureParameterName pname, UInt32* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(331);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget), typeof(OpenTK.Graphics.ES20.TextureParameterName), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_storage]
            /// Simultaneously specify storage for all levels of a one-dimensional texture
            /// </summary>
            /// <param name="target"> 
            /// Specify the target of the operation. target must be either Texture1D or ProxyTexture1D.
            /// </param>
            /// <param name="levels"> 
            /// Specify the number of texture levels.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the sized internal format to be used to store texture image data.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture, in texels.
            /// </param>
            public static void TexStorage1D(OpenTK.Graphics.ES20.All target, Int32 levels, OpenTK.Graphics.ES20.All internalformat, Int32 width)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(333);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.All), typeof(Int32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_storage]
            /// Simultaneously specify storage for all levels of a two-dimensional or one-dimensional array texture
            /// </summary>
            /// <param name="target"> 
            /// Specify the target of the operation. target must be one of Texture2D, ProxyTexture2D, Texture1DArray, ProxyTexture1DArray, TextureRectangle, ProxyTextureRectangle, or ProxyTextureCubeMap.
            /// </param>
            /// <param name="levels"> 
            /// Specify the number of texture levels.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the sized internal format to be used to store texture image data.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture, in texels.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture, in texels.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            public static void TexStorage2D(OpenTK.Graphics.ES20.All target, Int32 levels, OpenTK.Graphics.ES20.All internalformat, Int32 width, Int32 height)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(334);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(OpenTK.Graphics.ES20.SizedInternalFormat), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_storage]
            /// Simultaneously specify storage for all levels of a two-dimensional or one-dimensional array texture
            /// </summary>
            /// <param name="target"> 
            /// Specify the target of the operation. target must be one of Texture2D, ProxyTexture2D, Texture1DArray, ProxyTexture1DArray, TextureRectangle, ProxyTextureRectangle, or ProxyTextureCubeMap.
            /// </param>
            /// <param name="levels"> 
            /// Specify the number of texture levels.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the sized internal format to be used to store texture image data.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture, in texels.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture, in texels.
            /// </param>
            public static void TexStorage2D(OpenTK.Graphics.ES20.TextureTarget2d target, Int32 levels, OpenTK.Graphics.ES20.SizedInternalFormat internalformat, Int32 width, Int32 height)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(334);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget2d), typeof(Int32), typeof(OpenTK.Graphics.ES20.SizedInternalFormat), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_storage]
            /// Simultaneously specify storage for all levels of a three-dimensional, two-dimensional array or cube-map array texture
            /// </summary>
            /// <param name="target"> 
            /// Specify the target of the operation. target must be one of Texture3D, ProxyTexture3D, Texture2DArray, ProxyTexture2DArray, TextureCubeArray, or ProxyTextureCubeArray.
            /// </param>
            /// <param name="levels"> 
            /// Specify the number of texture levels.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the sized internal format to be used to store texture image data.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture, in texels.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture, in texels.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture, in texels.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            public static void TexStorage3D(OpenTK.Graphics.ES20.All target, Int32 levels, OpenTK.Graphics.ES20.All internalformat, Int32 width, Int32 height, Int32 depth)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(335);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget3d), typeof(Int32), typeof(OpenTK.Graphics.ES20.SizedInternalFormat), typeof(Int32), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_storage]
            /// Simultaneously specify storage for all levels of a three-dimensional, two-dimensional array or cube-map array texture
            /// </summary>
            /// <param name="target"> 
            /// Specify the target of the operation. target must be one of Texture3D, ProxyTexture3D, Texture2DArray, ProxyTexture2DArray, TextureCubeArray, or ProxyTextureCubeArray.
            /// </param>
            /// <param name="levels"> 
            /// Specify the number of texture levels.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the sized internal format to be used to store texture image data.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture, in texels.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture, in texels.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture, in texels.
            /// </param>
            public static void TexStorage3D(OpenTK.Graphics.ES20.TextureTarget3d target, Int32 levels, OpenTK.Graphics.ES20.SizedInternalFormat internalformat, Int32 width, Int32 height, Int32 depth)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(335);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget3d), typeof(Int32), typeof(OpenTK.Graphics.ES20.SizedInternalFormat), typeof(Int32), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_storage]</summary>
            /// <param name="texture"></param>
            /// <param name="target"></param>
            /// <param name="levels"></param>
            /// <param name="internalformat"></param>
            /// <param name="width"></param>
            [CLSCompliant(false)]
            public static void TextureStorage1D(Int32 texture, OpenTK.Graphics.ES20.All target, Int32 levels, OpenTK.Graphics.ES20.All internalformat, Int32 width)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(339);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_storage]</summary>
            /// <param name="texture"></param>
            /// <param name="target"></param>
            /// <param name="levels"></param>
            /// <param name="internalformat"></param>
            /// <param name="width"></param>
            [CLSCompliant(false)]
            public static void TextureStorage1D(UInt32 texture, OpenTK.Graphics.ES20.All target, Int32 levels, OpenTK.Graphics.ES20.All internalformat, Int32 width)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(339);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_storage]</summary>
            /// <param name="texture"></param>
            /// <param name="target"></param>
            /// <param name="levels"></param>
            /// <param name="internalformat"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            [CLSCompliant(false)]
            public static void TextureStorage2D(Int32 texture, OpenTK.Graphics.ES20.All target, Int32 levels, OpenTK.Graphics.ES20.All internalformat, Int32 width, Int32 height)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(340);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_storage]</summary>
            /// <param name="texture"></param>
            /// <param name="target"></param>
            /// <param name="levels"></param>
            /// <param name="internalformat"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            [CLSCompliant(false)]
            public static void TextureStorage2D(UInt32 texture, OpenTK.Graphics.ES20.All target, Int32 levels, OpenTK.Graphics.ES20.All internalformat, Int32 width, Int32 height)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(340);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_storage]</summary>
            /// <param name="texture"></param>
            /// <param name="target"></param>
            /// <param name="levels"></param>
            /// <param name="internalformat"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="depth"></param>
            [CLSCompliant(false)]
            public static void TextureStorage3D(Int32 texture, OpenTK.Graphics.ES20.All target, Int32 levels, OpenTK.Graphics.ES20.All internalformat, Int32 width, Int32 height, Int32 depth)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(341);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_storage]</summary>
            /// <param name="texture"></param>
            /// <param name="target"></param>
            /// <param name="levels"></param>
            /// <param name="internalformat"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="depth"></param>
            [CLSCompliant(false)]
            public static void TextureStorage3D(UInt32 texture, OpenTK.Graphics.ES20.All target, Int32 levels, OpenTK.Graphics.ES20.All internalformat, Int32 width, Int32 height, Int32 depth)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(341);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_view]
            /// Initialize a texture as a data alias of another texture's data store
            /// </summary>
            /// <param name="texture"> 
            /// Specifies the texture object to be initialized as a view.
            /// </param>
            /// <param name="target"> 
            /// Specifies the target to be used for the newly initialized texture.
            /// </param>
            /// <param name="origtexture"> 
            /// Specifies the name of a texture object of which to make a view.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the internal format for the newly created view.
            /// </param>
            /// <param name="minlevel"> 
            /// Specifies lowest level of detail of the view.
            /// </param>
            /// <param name="numlevels"> 
            /// Specifies the number of levels of detail to include in the view.
            /// </param>
            /// <param name="minlayer"> 
            /// Specifies the index of the first layer to include in the view.
            /// </param>
            /// <param name="numlayers"> 
            /// Specifies the number of layers to include in the view.
            /// </param>
            [CLSCompliant(false)]
            public static void TextureView(Int32 texture, OpenTK.Graphics.ES20.All target, Int32 origtexture, OpenTK.Graphics.ES20.All internalformat, Int32 minlevel, Int32 numlevels, Int32 minlayer, Int32 numlayers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(342);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(UInt32), typeof(UInt32), typeof(UInt32), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_texture_view]
            /// Initialize a texture as a data alias of another texture's data store
            /// </summary>
            /// <param name="texture"> 
            /// Specifies the texture object to be initialized as a view.
            /// </param>
            /// <param name="target"> 
            /// Specifies the target to be used for the newly initialized texture.
            /// </param>
            /// <param name="origtexture"> 
            /// Specifies the name of a texture object of which to make a view.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the internal format for the newly created view.
            /// </param>
            /// <param name="minlevel"> 
            /// Specifies lowest level of detail of the view.
            /// </param>
            /// <param name="numlevels"> 
            /// Specifies the number of levels of detail to include in the view.
            /// </param>
            /// <param name="minlayer"> 
            /// Specifies the index of the first layer to include in the view.
            /// </param>
            /// <param name="numlayers"> 
            /// Specifies the number of layers to include in the view.
            /// </param>
            [CLSCompliant(false)]
            public static void TextureView(UInt32 texture, OpenTK.Graphics.ES20.All target, UInt32 origtexture, OpenTK.Graphics.ES20.All internalformat, UInt32 minlevel, UInt32 numlevels, UInt32 minlayer, UInt32 numlayers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(342);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(UInt32), typeof(UInt32), typeof(UInt32), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Bind stages of a program object to a program pipeline
            /// </summary>
            /// <param name="pipeline"> 
            /// Specifies the program pipeline object to which to bind stages from program.
            /// </param>
            /// <param name="stages"> 
            /// Specifies a set of program stages to bind to the program pipeline object.
            /// </param>
            /// <param name="program"> 
            /// Specifies the program object containing the shader executables to use in pipeline.
            /// </param>
            [CLSCompliant(false)]
            public static void UseProgramStages(Int32 pipeline, Int32 stages, Int32 program)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(370);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Bind stages of a program object to a program pipeline
            /// </summary>
            /// <param name="pipeline"> 
            /// Specifies the program pipeline object to which to bind stages from program.
            /// </param>
            /// <param name="stages"> 
            /// Specifies a set of program stages to bind to the program pipeline object.
            /// </param>
            /// <param name="program"> 
            /// Specifies the program object containing the shader executables to use in pipeline.
            /// </param>
            [CLSCompliant(false)]
            public static void UseProgramStages(UInt32 pipeline, UInt32 stages, UInt32 program)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(370);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="type"></param>
            /// <param name="program"></param>
            [CLSCompliant(false)]
            public static void UseShaderProgram(OpenTK.Graphics.ES20.All type, Int32 program)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(371);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.All), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="type"></param>
            /// <param name="program"></param>
            [CLSCompliant(false)]
            public static void UseShaderProgram(OpenTK.Graphics.ES20.All type, UInt32 program)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(371);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.All), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Validate a program pipeline object against current GL state
            /// </summary>
            /// <param name="pipeline"> 
            /// Specifies the name of a program pipeline object to validate.
            /// </param>
            [CLSCompliant(false)]
            public static void ValidateProgramPipeline(Int32 pipeline)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(373);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Validate a program pipeline object against current GL state
            /// </summary>
            /// <param name="pipeline"> 
            /// Specifies the name of a program pipeline object to validate.
            /// </param>
            [CLSCompliant(false)]
            public static void ValidateProgramPipeline(UInt32 pipeline)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(373);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_instanced_arrays]
            /// Modify the rate at which generic vertex attributes advance during instanced rendering
            /// </summary>
            /// <param name="index"> 
            /// Specify the index of the generic vertex attribute.
            /// </param>
            /// <param name="divisor"> 
            /// Specify the number of instances that will pass between updates of the generic attribute at slot index.
            /// </param>
            [CLSCompliant(false)]
            public static void VertexAttribDivisor(Int32 index, Int32 divisor)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(383);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: EXT_instanced_arrays]
            /// Modify the rate at which generic vertex attributes advance during instanced rendering
            /// </summary>
            /// <param name="index"> 
            /// Specify the index of the generic vertex attribute.
            /// </param>
            /// <param name="divisor"> 
            /// Specify the number of instances that will pass between updates of the generic attribute at slot index.
            /// </param>
            [CLSCompliant(false)]
            public static void VertexAttribDivisor(UInt32 index, UInt32 divisor)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(383);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

        }

        public static partial class Img
        {
            /// <summary>[requires: IMG_multisampled_render_to_texture]</summary>
            /// <param name="target"></param>
            /// <param name="attachment"></param>
            /// <param name="textarget"></param>
            /// <param name="texture"></param>
            /// <param name="level"></param>
            /// <param name="samples"></param>
            [CLSCompliant(false)]
            public static void FramebufferTexture2DMultisample(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All attachment, OpenTK.Graphics.ES20.All textarget, Int32 texture, Int32 level, Int32 samples)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(128);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.All), typeof(OpenTK.Graphics.ES20.All), typeof(OpenTK.Graphics.ES20.All), typeof(UInt32), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: IMG_multisampled_render_to_texture]</summary>
            /// <param name="target"></param>
            /// <param name="attachment"></param>
            /// <param name="textarget"></param>
            /// <param name="texture"></param>
            /// <param name="level"></param>
            /// <param name="samples"></param>
            [CLSCompliant(false)]
            public static void FramebufferTexture2DMultisample(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All attachment, OpenTK.Graphics.ES20.All textarget, UInt32 texture, Int32 level, Int32 samples)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(128);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.All), typeof(OpenTK.Graphics.ES20.All), typeof(OpenTK.Graphics.ES20.All), typeof(UInt32), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: IMG_multisampled_render_to_texture]
            /// Establish data storage, format, dimensions and sample count of a renderbuffer object's image
            /// </summary>
            /// <param name="target"> 
            /// Specifies a binding to which the target of the allocation and must be Renderbuffer.
            /// </param>
            /// <param name="samples"> 
            /// Specifies the number of samples to be used for the renderbuffer object's storage.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the internal format to use for the renderbuffer object's image.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the renderbuffer, in pixels.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the renderbuffer, in pixels.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            public static void RenderbufferStorageMultisample(OpenTK.Graphics.ES20.All target, Int32 samples, OpenTK.Graphics.ES20.All internalformat, Int32 width, Int32 height)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(304);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.RenderbufferTarget), typeof(Int32), typeof(OpenTK.Graphics.ES20.RenderbufferInternalFormat), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: IMG_multisampled_render_to_texture]
            /// Establish data storage, format, dimensions and sample count of a renderbuffer object's image
            /// </summary>
            /// <param name="target"> 
            /// Specifies a binding to which the target of the allocation and must be Renderbuffer.
            /// </param>
            /// <param name="samples"> 
            /// Specifies the number of samples to be used for the renderbuffer object's storage.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the internal format to use for the renderbuffer object's image.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the renderbuffer, in pixels.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the renderbuffer, in pixels.
            /// </param>
            public static void RenderbufferStorageMultisample(OpenTK.Graphics.ES20.RenderbufferTarget target, Int32 samples, OpenTK.Graphics.ES20.RenderbufferInternalFormat internalformat, Int32 width, Int32 height)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(304);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.RenderbufferTarget), typeof(Int32), typeof(OpenTK.Graphics.ES20.RenderbufferInternalFormat), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

        }

        public static partial class Intel
        {
            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryHandle"></param>
            [CLSCompliant(false)]
            public static void BeginPerfQuery(Int32 queryHandle)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(6);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryHandle"></param>
            [CLSCompliant(false)]
            public static void BeginPerfQuery(UInt32 queryHandle)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(6);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryId"></param>
            /// <param name="queryHandle"></param>
            [CLSCompliant(false)]
            public static void CreatePerfQuery(Int32 queryId, [OutAttribute] Int32[] queryHandle)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "queryHandle_pinned");
                        if(queryHandle != null && queryHandle.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("queryHandle_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("queryHandle_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("queryHandle_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(53);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryId"></param>
            /// <param name="queryHandle"></param>
            [CLSCompliant(false)]
            public static void CreatePerfQuery(Int32 queryId, [OutAttribute] out Int32 queryHandle)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "queryHandle_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("queryHandle_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("queryHandle_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(53);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryId"></param>
            /// <param name="queryHandle"></param>
            [CLSCompliant(false)]
            public static unsafe void CreatePerfQuery(Int32 queryId, [OutAttribute] Int32* queryHandle)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(53);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryId"></param>
            /// <param name="queryHandle"></param>
            [CLSCompliant(false)]
            public static void CreatePerfQuery(UInt32 queryId, [OutAttribute] UInt32[] queryHandle)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "queryHandle_pinned");
                        if(queryHandle != null && queryHandle.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("queryHandle_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("queryHandle_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("queryHandle_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(53);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryId"></param>
            /// <param name="queryHandle"></param>
            [CLSCompliant(false)]
            public static void CreatePerfQuery(UInt32 queryId, [OutAttribute] out UInt32 queryHandle)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "queryHandle_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("queryHandle_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("queryHandle_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(53);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryId"></param>
            /// <param name="queryHandle"></param>
            [CLSCompliant(false)]
            public static unsafe void CreatePerfQuery(UInt32 queryId, [OutAttribute] UInt32* queryHandle)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(53);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryHandle"></param>
            [CLSCompliant(false)]
            public static void DeletePerfQuery(Int32 queryHandle)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(69);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryHandle"></param>
            [CLSCompliant(false)]
            public static void DeletePerfQuery(UInt32 queryHandle)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(69);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryHandle"></param>
            [CLSCompliant(false)]
            public static void EndPerfQuery(Int32 queryHandle)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(105);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryHandle"></param>
            [CLSCompliant(false)]
            public static void EndPerfQuery(UInt32 queryHandle)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(105);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [CLSCompliant(false)]
            public static Int32 GetFirstPerfQueryI()
            {
                unsafe
                {
                    Int32 __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Int32 __result = default(Int32);
                        Silk.Cil.LoadAddress(__result);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(155);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*));
                        Silk.Cil.Load(__result);
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryId"></param>
            [CLSCompliant(false)]
            public static void GetFirstPerfQueryI([OutAttribute] Int32[] queryId)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "queryId_pinned");
                        if(queryId != null && queryId.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("queryId_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("queryId_pinned");
                        }
                        Silk.Cil.LoadByName("queryId_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(155);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryId"></param>
            [CLSCompliant(false)]
            public static void GetFirstPerfQueryI([OutAttribute] out Int32 queryId)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "queryId_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("queryId_pinned");
                        Silk.Cil.LoadByName("queryId_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(155);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryId"></param>
            [CLSCompliant(false)]
            public static unsafe void GetFirstPerfQueryI([OutAttribute] Int32* queryId)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(155);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryId"></param>
            [CLSCompliant(false)]
            public static void GetFirstPerfQueryI([OutAttribute] UInt32[] queryId)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "queryId_pinned");
                        if(queryId != null && queryId.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("queryId_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("queryId_pinned");
                        }
                        Silk.Cil.LoadByName("queryId_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(155);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryId"></param>
            [CLSCompliant(false)]
            public static void GetFirstPerfQueryI([OutAttribute] out UInt32 queryId)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "queryId_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("queryId_pinned");
                        Silk.Cil.LoadByName("queryId_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(155);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryId"></param>
            [CLSCompliant(false)]
            public static unsafe void GetFirstPerfQueryI([OutAttribute] UInt32* queryId)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(155);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryId"></param>
            [CLSCompliant(false)]
            public static Int32 GetNextPerfQueryI(Int32 queryId)
            {
                unsafe
                {
                    Int32 __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Int32 __result = default(Int32);
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadAddress(__result);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(164);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32*));
                        Silk.Cil.Load(__result);
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryId"></param>
            [CLSCompliant(false)]
            public static Int32 GetNextPerfQueryI(UInt32 queryId)
            {
                unsafe
                {
                    Int32 __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Int32 __result = default(Int32);
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadAddress(__result);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(164);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32*));
                        Silk.Cil.Load(__result);
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryId"></param>
            /// <param name="nextQueryId"></param>
            [CLSCompliant(false)]
            public static void GetNextPerfQueryI(Int32 queryId, [OutAttribute] Int32[] nextQueryId)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "nextQueryId_pinned");
                        if(nextQueryId != null && nextQueryId.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("nextQueryId_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("nextQueryId_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("nextQueryId_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(164);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryId"></param>
            /// <param name="nextQueryId"></param>
            [CLSCompliant(false)]
            public static void GetNextPerfQueryI(Int32 queryId, [OutAttribute] out Int32 nextQueryId)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "nextQueryId_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("nextQueryId_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("nextQueryId_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(164);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryId"></param>
            /// <param name="nextQueryId"></param>
            [CLSCompliant(false)]
            public static unsafe void GetNextPerfQueryI(Int32 queryId, [OutAttribute] Int32* nextQueryId)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(164);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryId"></param>
            /// <param name="nextQueryId"></param>
            [CLSCompliant(false)]
            public static void GetNextPerfQueryI(UInt32 queryId, [OutAttribute] UInt32[] nextQueryId)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "nextQueryId_pinned");
                        if(nextQueryId != null && nextQueryId.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("nextQueryId_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("nextQueryId_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("nextQueryId_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(164);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryId"></param>
            /// <param name="nextQueryId"></param>
            [CLSCompliant(false)]
            public static void GetNextPerfQueryI(UInt32 queryId, [OutAttribute] out UInt32 nextQueryId)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "nextQueryId_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("nextQueryId_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("nextQueryId_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(164);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryId"></param>
            /// <param name="nextQueryId"></param>
            [CLSCompliant(false)]
            public static unsafe void GetNextPerfQueryI(UInt32 queryId, [OutAttribute] UInt32* nextQueryId)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(164);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryId"></param>
            /// <param name="counterId"></param>
            /// <param name="counterNameLength"></param>
            /// <param name="counterName"></param>
            /// <param name="counterDescLength"></param>
            /// <param name="counterDesc"></param>
            /// <param name="counterOffset"></param>
            /// <param name="counterDataSize"></param>
            /// <param name="counterTypeEnum"></param>
            /// <param name="counterDataTypeEnum"></param>
            /// <param name="rawCounterMaxValue"></param>
            [CLSCompliant(false)]
            public static void GetPerfCounterInfo(Int32 queryId, Int32 counterId, Int32 counterNameLength, [OutAttribute] StringBuilder counterName, Int32 counterDescLength, [OutAttribute] StringBuilder counterDesc, [OutAttribute] Int32[] counterOffset, [OutAttribute] Int32[] counterDataSize, [OutAttribute] Int32[] counterTypeEnum, [OutAttribute] Int32[] counterDataTypeEnum, [OutAttribute] Int64[] rawCounterMaxValue)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr counterName_sb_ptr = IntPtr.Zero;
                        try
                        {
                            counterName_sb_ptr = Marshal.AllocHGlobal(counterName.Capacity + 1);
                            IntPtr counterDesc_sb_ptr = IntPtr.Zero;
                            try
                            {
                                counterDesc_sb_ptr = Marshal.AllocHGlobal(counterDesc.Capacity + 1);
                                Silk.Cil.DeclareLocal("System.Int32& pinned", "counterOffset_pinned");
                                if(counterOffset != null && counterOffset.Length != 0)
                                {
                                    Silk.Cil.Ldarg(6);
                                    Silk.Cil.Ldc_I4(0);
                                    Silk.Cil.Ldelema("System.Int32");
                                    Silk.Cil.StoreByName("counterOffset_pinned");
                                }
                                else
                                {
                                    Silk.Cil.Ldc_I4(0);
                                    Silk.Cil.Conv_U();
                                    Silk.Cil.StoreByName("counterOffset_pinned");
                                }
                                Silk.Cil.DeclareLocal("System.Int32& pinned", "counterDataSize_pinned");
                                if(counterDataSize != null && counterDataSize.Length != 0)
                                {
                                    Silk.Cil.Ldarg(7);
                                    Silk.Cil.Ldc_I4(0);
                                    Silk.Cil.Ldelema("System.Int32");
                                    Silk.Cil.StoreByName("counterDataSize_pinned");
                                }
                                else
                                {
                                    Silk.Cil.Ldc_I4(0);
                                    Silk.Cil.Conv_U();
                                    Silk.Cil.StoreByName("counterDataSize_pinned");
                                }
                                Silk.Cil.DeclareLocal("System.Int32& pinned", "counterTypeEnum_pinned");
                                if(counterTypeEnum != null && counterTypeEnum.Length != 0)
                                {
                                    Silk.Cil.Ldarg(8);
                                    Silk.Cil.Ldc_I4(0);
                                    Silk.Cil.Ldelema("System.Int32");
                                    Silk.Cil.StoreByName("counterTypeEnum_pinned");
                                }
                                else
                                {
                                    Silk.Cil.Ldc_I4(0);
                                    Silk.Cil.Conv_U();
                                    Silk.Cil.StoreByName("counterTypeEnum_pinned");
                                }
                                Silk.Cil.DeclareLocal("System.Int32& pinned", "counterDataTypeEnum_pinned");
                                if(counterDataTypeEnum != null && counterDataTypeEnum.Length != 0)
                                {
                                    Silk.Cil.Ldarg(9);
                                    Silk.Cil.Ldc_I4(0);
                                    Silk.Cil.Ldelema("System.Int32");
                                    Silk.Cil.StoreByName("counterDataTypeEnum_pinned");
                                }
                                else
                                {
                                    Silk.Cil.Ldc_I4(0);
                                    Silk.Cil.Conv_U();
                                    Silk.Cil.StoreByName("counterDataTypeEnum_pinned");
                                }
                                Silk.Cil.DeclareLocal("System.Int64& pinned", "rawCounterMaxValue_pinned");
                                if(rawCounterMaxValue != null && rawCounterMaxValue.Length != 0)
                                {
                                    Silk.Cil.Ldarg(10);
                                    Silk.Cil.Ldc_I4(0);
                                    Silk.Cil.Ldelema("System.Int64");
                                    Silk.Cil.StoreByName("rawCounterMaxValue_pinned");
                                }
                                else
                                {
                                    Silk.Cil.Ldc_I4(0);
                                    Silk.Cil.Conv_U();
                                    Silk.Cil.StoreByName("rawCounterMaxValue_pinned");
                                }
                                Silk.Cil.Ldarg(0);
                                Silk.Cil.Ldarg(1);
                                Silk.Cil.Ldarg(2);
                                Silk.Cil.Load(counterName_sb_ptr);
                                Silk.Cil.Ldarg(4);
                                Silk.Cil.Load(counterDesc_sb_ptr);
                                Silk.Cil.LoadByName("counterOffset_pinned");
                                Silk.Cil.LoadByName("counterDataSize_pinned");
                                Silk.Cil.LoadByName("counterTypeEnum_pinned");
                                Silk.Cil.LoadByName("counterDataTypeEnum_pinned");
                                Silk.Cil.LoadByName("rawCounterMaxValue_pinned");
                                Silk.Cil.Load(EntryPoints);
                                Silk.Cil.Ldc_I4(178);
                                Silk.Cil.Ldelem_I();
                                Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(UInt32), typeof(IntPtr), typeof(UInt32), typeof(IntPtr), typeof(UInt32*), typeof(UInt32*), typeof(UInt32*), typeof(UInt32*), typeof(UInt64*));
                                MarshalPtrToStringBuilder(counterDesc_sb_ptr, counterDesc);
                            } finally {
                                Marshal.FreeHGlobal(counterDesc_sb_ptr);
                            }
                            MarshalPtrToStringBuilder(counterName_sb_ptr, counterName);
                        } finally {
                            Marshal.FreeHGlobal(counterName_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryId"></param>
            /// <param name="counterId"></param>
            /// <param name="counterNameLength"></param>
            /// <param name="counterName"></param>
            /// <param name="counterDescLength"></param>
            /// <param name="counterDesc"></param>
            /// <param name="counterOffset"></param>
            /// <param name="counterDataSize"></param>
            /// <param name="counterTypeEnum"></param>
            /// <param name="counterDataTypeEnum"></param>
            /// <param name="rawCounterMaxValue"></param>
            [CLSCompliant(false)]
            public static void GetPerfCounterInfo(Int32 queryId, Int32 counterId, Int32 counterNameLength, [OutAttribute] StringBuilder counterName, Int32 counterDescLength, [OutAttribute] StringBuilder counterDesc, [OutAttribute] out Int32 counterOffset, [OutAttribute] out Int32 counterDataSize, [OutAttribute] out Int32 counterTypeEnum, [OutAttribute] out Int32 counterDataTypeEnum, [OutAttribute] out Int64 rawCounterMaxValue)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr counterName_sb_ptr = IntPtr.Zero;
                        try
                        {
                            counterName_sb_ptr = Marshal.AllocHGlobal(counterName.Capacity + 1);
                            IntPtr counterDesc_sb_ptr = IntPtr.Zero;
                            try
                            {
                                counterDesc_sb_ptr = Marshal.AllocHGlobal(counterDesc.Capacity + 1);
                                Silk.Cil.DeclareLocal("System.Int32& pinned", "counterOffset_pinned");
                                Silk.Cil.Ldarg(6);
                                Silk.Cil.StoreByName("counterOffset_pinned");
                                Silk.Cil.DeclareLocal("System.Int32& pinned", "counterDataSize_pinned");
                                Silk.Cil.Ldarg(7);
                                Silk.Cil.StoreByName("counterDataSize_pinned");
                                Silk.Cil.DeclareLocal("System.Int32& pinned", "counterTypeEnum_pinned");
                                Silk.Cil.Ldarg(8);
                                Silk.Cil.StoreByName("counterTypeEnum_pinned");
                                Silk.Cil.DeclareLocal("System.Int32& pinned", "counterDataTypeEnum_pinned");
                                Silk.Cil.Ldarg(9);
                                Silk.Cil.StoreByName("counterDataTypeEnum_pinned");
                                Silk.Cil.DeclareLocal("System.Int64& pinned", "rawCounterMaxValue_pinned");
                                Silk.Cil.Ldarg(10);
                                Silk.Cil.StoreByName("rawCounterMaxValue_pinned");
                                Silk.Cil.Ldarg(0);
                                Silk.Cil.Ldarg(1);
                                Silk.Cil.Ldarg(2);
                                Silk.Cil.Load(counterName_sb_ptr);
                                Silk.Cil.Ldarg(4);
                                Silk.Cil.Load(counterDesc_sb_ptr);
                                Silk.Cil.LoadByName("counterOffset_pinned");
                                Silk.Cil.Conv_I();
                                Silk.Cil.LoadByName("counterDataSize_pinned");
                                Silk.Cil.Conv_I();
                                Silk.Cil.LoadByName("counterTypeEnum_pinned");
                                Silk.Cil.Conv_I();
                                Silk.Cil.LoadByName("counterDataTypeEnum_pinned");
                                Silk.Cil.Conv_I();
                                Silk.Cil.LoadByName("rawCounterMaxValue_pinned");
                                Silk.Cil.Conv_I();
                                Silk.Cil.Load(EntryPoints);
                                Silk.Cil.Ldc_I4(178);
                                Silk.Cil.Ldelem_I();
                                Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(UInt32), typeof(IntPtr), typeof(UInt32), typeof(IntPtr), typeof(UInt32*), typeof(UInt32*), typeof(UInt32*), typeof(UInt32*), typeof(UInt64*));
                                MarshalPtrToStringBuilder(counterDesc_sb_ptr, counterDesc);
                            } finally {
                                Marshal.FreeHGlobal(counterDesc_sb_ptr);
                            }
                            MarshalPtrToStringBuilder(counterName_sb_ptr, counterName);
                        } finally {
                            Marshal.FreeHGlobal(counterName_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryId"></param>
            /// <param name="counterId"></param>
            /// <param name="counterNameLength"></param>
            /// <param name="counterName"></param>
            /// <param name="counterDescLength"></param>
            /// <param name="counterDesc"></param>
            /// <param name="counterOffset"></param>
            /// <param name="counterDataSize"></param>
            /// <param name="counterTypeEnum"></param>
            /// <param name="counterDataTypeEnum"></param>
            /// <param name="rawCounterMaxValue"></param>
            [CLSCompliant(false)]
            public static unsafe void GetPerfCounterInfo(Int32 queryId, Int32 counterId, Int32 counterNameLength, [OutAttribute] StringBuilder counterName, Int32 counterDescLength, [OutAttribute] StringBuilder counterDesc, [OutAttribute] Int32* counterOffset, [OutAttribute] Int32* counterDataSize, [OutAttribute] Int32* counterTypeEnum, [OutAttribute] Int32* counterDataTypeEnum, [OutAttribute] Int64* rawCounterMaxValue)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr counterName_sb_ptr = IntPtr.Zero;
                        try
                        {
                            counterName_sb_ptr = Marshal.AllocHGlobal(counterName.Capacity + 1);
                            IntPtr counterDesc_sb_ptr = IntPtr.Zero;
                            try
                            {
                                counterDesc_sb_ptr = Marshal.AllocHGlobal(counterDesc.Capacity + 1);
                                Silk.Cil.Ldarg(0);
                                Silk.Cil.Ldarg(1);
                                Silk.Cil.Ldarg(2);
                                Silk.Cil.Load(counterName_sb_ptr);
                                Silk.Cil.Ldarg(4);
                                Silk.Cil.Load(counterDesc_sb_ptr);
                                Silk.Cil.Ldarg(6);
                                Silk.Cil.Ldarg(7);
                                Silk.Cil.Ldarg(8);
                                Silk.Cil.Ldarg(9);
                                Silk.Cil.Ldarg(10);
                                Silk.Cil.Load(EntryPoints);
                                Silk.Cil.Ldc_I4(178);
                                Silk.Cil.Ldelem_I();
                                Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(UInt32), typeof(IntPtr), typeof(UInt32), typeof(IntPtr), typeof(UInt32*), typeof(UInt32*), typeof(UInt32*), typeof(UInt32*), typeof(UInt64*));
                                MarshalPtrToStringBuilder(counterDesc_sb_ptr, counterDesc);
                            } finally {
                                Marshal.FreeHGlobal(counterDesc_sb_ptr);
                            }
                            MarshalPtrToStringBuilder(counterName_sb_ptr, counterName);
                        } finally {
                            Marshal.FreeHGlobal(counterName_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryId"></param>
            /// <param name="counterId"></param>
            /// <param name="counterNameLength"></param>
            /// <param name="counterName"></param>
            /// <param name="counterDescLength"></param>
            /// <param name="counterDesc"></param>
            /// <param name="counterOffset"></param>
            /// <param name="counterDataSize"></param>
            /// <param name="counterTypeEnum"></param>
            /// <param name="counterDataTypeEnum"></param>
            /// <param name="rawCounterMaxValue"></param>
            [CLSCompliant(false)]
            public static void GetPerfCounterInfo(UInt32 queryId, UInt32 counterId, UInt32 counterNameLength, [OutAttribute] StringBuilder counterName, UInt32 counterDescLength, [OutAttribute] StringBuilder counterDesc, [OutAttribute] UInt32[] counterOffset, [OutAttribute] UInt32[] counterDataSize, [OutAttribute] UInt32[] counterTypeEnum, [OutAttribute] UInt32[] counterDataTypeEnum, [OutAttribute] UInt64[] rawCounterMaxValue)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr counterName_sb_ptr = IntPtr.Zero;
                        try
                        {
                            counterName_sb_ptr = Marshal.AllocHGlobal(counterName.Capacity + 1);
                            IntPtr counterDesc_sb_ptr = IntPtr.Zero;
                            try
                            {
                                counterDesc_sb_ptr = Marshal.AllocHGlobal(counterDesc.Capacity + 1);
                                Silk.Cil.DeclareLocal("System.UInt32& pinned", "counterOffset_pinned");
                                if(counterOffset != null && counterOffset.Length != 0)
                                {
                                    Silk.Cil.Ldarg(6);
                                    Silk.Cil.Ldc_I4(0);
                                    Silk.Cil.Ldelema("System.UInt32");
                                    Silk.Cil.StoreByName("counterOffset_pinned");
                                }
                                else
                                {
                                    Silk.Cil.Ldc_I4(0);
                                    Silk.Cil.Conv_U();
                                    Silk.Cil.StoreByName("counterOffset_pinned");
                                }
                                Silk.Cil.DeclareLocal("System.UInt32& pinned", "counterDataSize_pinned");
                                if(counterDataSize != null && counterDataSize.Length != 0)
                                {
                                    Silk.Cil.Ldarg(7);
                                    Silk.Cil.Ldc_I4(0);
                                    Silk.Cil.Ldelema("System.UInt32");
                                    Silk.Cil.StoreByName("counterDataSize_pinned");
                                }
                                else
                                {
                                    Silk.Cil.Ldc_I4(0);
                                    Silk.Cil.Conv_U();
                                    Silk.Cil.StoreByName("counterDataSize_pinned");
                                }
                                Silk.Cil.DeclareLocal("System.UInt32& pinned", "counterTypeEnum_pinned");
                                if(counterTypeEnum != null && counterTypeEnum.Length != 0)
                                {
                                    Silk.Cil.Ldarg(8);
                                    Silk.Cil.Ldc_I4(0);
                                    Silk.Cil.Ldelema("System.UInt32");
                                    Silk.Cil.StoreByName("counterTypeEnum_pinned");
                                }
                                else
                                {
                                    Silk.Cil.Ldc_I4(0);
                                    Silk.Cil.Conv_U();
                                    Silk.Cil.StoreByName("counterTypeEnum_pinned");
                                }
                                Silk.Cil.DeclareLocal("System.UInt32& pinned", "counterDataTypeEnum_pinned");
                                if(counterDataTypeEnum != null && counterDataTypeEnum.Length != 0)
                                {
                                    Silk.Cil.Ldarg(9);
                                    Silk.Cil.Ldc_I4(0);
                                    Silk.Cil.Ldelema("System.UInt32");
                                    Silk.Cil.StoreByName("counterDataTypeEnum_pinned");
                                }
                                else
                                {
                                    Silk.Cil.Ldc_I4(0);
                                    Silk.Cil.Conv_U();
                                    Silk.Cil.StoreByName("counterDataTypeEnum_pinned");
                                }
                                Silk.Cil.DeclareLocal("System.UInt64& pinned", "rawCounterMaxValue_pinned");
                                if(rawCounterMaxValue != null && rawCounterMaxValue.Length != 0)
                                {
                                    Silk.Cil.Ldarg(10);
                                    Silk.Cil.Ldc_I4(0);
                                    Silk.Cil.Ldelema("System.UInt64");
                                    Silk.Cil.StoreByName("rawCounterMaxValue_pinned");
                                }
                                else
                                {
                                    Silk.Cil.Ldc_I4(0);
                                    Silk.Cil.Conv_U();
                                    Silk.Cil.StoreByName("rawCounterMaxValue_pinned");
                                }
                                Silk.Cil.Ldarg(0);
                                Silk.Cil.Ldarg(1);
                                Silk.Cil.Ldarg(2);
                                Silk.Cil.Load(counterName_sb_ptr);
                                Silk.Cil.Ldarg(4);
                                Silk.Cil.Load(counterDesc_sb_ptr);
                                Silk.Cil.LoadByName("counterOffset_pinned");
                                Silk.Cil.LoadByName("counterDataSize_pinned");
                                Silk.Cil.LoadByName("counterTypeEnum_pinned");
                                Silk.Cil.LoadByName("counterDataTypeEnum_pinned");
                                Silk.Cil.LoadByName("rawCounterMaxValue_pinned");
                                Silk.Cil.Load(EntryPoints);
                                Silk.Cil.Ldc_I4(178);
                                Silk.Cil.Ldelem_I();
                                Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(UInt32), typeof(IntPtr), typeof(UInt32), typeof(IntPtr), typeof(UInt32*), typeof(UInt32*), typeof(UInt32*), typeof(UInt32*), typeof(UInt64*));
                                MarshalPtrToStringBuilder(counterDesc_sb_ptr, counterDesc);
                            } finally {
                                Marshal.FreeHGlobal(counterDesc_sb_ptr);
                            }
                            MarshalPtrToStringBuilder(counterName_sb_ptr, counterName);
                        } finally {
                            Marshal.FreeHGlobal(counterName_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryId"></param>
            /// <param name="counterId"></param>
            /// <param name="counterNameLength"></param>
            /// <param name="counterName"></param>
            /// <param name="counterDescLength"></param>
            /// <param name="counterDesc"></param>
            /// <param name="counterOffset"></param>
            /// <param name="counterDataSize"></param>
            /// <param name="counterTypeEnum"></param>
            /// <param name="counterDataTypeEnum"></param>
            /// <param name="rawCounterMaxValue"></param>
            [CLSCompliant(false)]
            public static void GetPerfCounterInfo(UInt32 queryId, UInt32 counterId, UInt32 counterNameLength, [OutAttribute] StringBuilder counterName, UInt32 counterDescLength, [OutAttribute] StringBuilder counterDesc, [OutAttribute] out UInt32 counterOffset, [OutAttribute] out UInt32 counterDataSize, [OutAttribute] out UInt32 counterTypeEnum, [OutAttribute] out UInt32 counterDataTypeEnum, [OutAttribute] out UInt64 rawCounterMaxValue)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr counterName_sb_ptr = IntPtr.Zero;
                        try
                        {
                            counterName_sb_ptr = Marshal.AllocHGlobal(counterName.Capacity + 1);
                            IntPtr counterDesc_sb_ptr = IntPtr.Zero;
                            try
                            {
                                counterDesc_sb_ptr = Marshal.AllocHGlobal(counterDesc.Capacity + 1);
                                Silk.Cil.DeclareLocal("System.UInt32& pinned", "counterOffset_pinned");
                                Silk.Cil.Ldarg(6);
                                Silk.Cil.StoreByName("counterOffset_pinned");
                                Silk.Cil.DeclareLocal("System.UInt32& pinned", "counterDataSize_pinned");
                                Silk.Cil.Ldarg(7);
                                Silk.Cil.StoreByName("counterDataSize_pinned");
                                Silk.Cil.DeclareLocal("System.UInt32& pinned", "counterTypeEnum_pinned");
                                Silk.Cil.Ldarg(8);
                                Silk.Cil.StoreByName("counterTypeEnum_pinned");
                                Silk.Cil.DeclareLocal("System.UInt32& pinned", "counterDataTypeEnum_pinned");
                                Silk.Cil.Ldarg(9);
                                Silk.Cil.StoreByName("counterDataTypeEnum_pinned");
                                Silk.Cil.DeclareLocal("System.UInt64& pinned", "rawCounterMaxValue_pinned");
                                Silk.Cil.Ldarg(10);
                                Silk.Cil.StoreByName("rawCounterMaxValue_pinned");
                                Silk.Cil.Ldarg(0);
                                Silk.Cil.Ldarg(1);
                                Silk.Cil.Ldarg(2);
                                Silk.Cil.Load(counterName_sb_ptr);
                                Silk.Cil.Ldarg(4);
                                Silk.Cil.Load(counterDesc_sb_ptr);
                                Silk.Cil.LoadByName("counterOffset_pinned");
                                Silk.Cil.Conv_I();
                                Silk.Cil.LoadByName("counterDataSize_pinned");
                                Silk.Cil.Conv_I();
                                Silk.Cil.LoadByName("counterTypeEnum_pinned");
                                Silk.Cil.Conv_I();
                                Silk.Cil.LoadByName("counterDataTypeEnum_pinned");
                                Silk.Cil.Conv_I();
                                Silk.Cil.LoadByName("rawCounterMaxValue_pinned");
                                Silk.Cil.Conv_I();
                                Silk.Cil.Load(EntryPoints);
                                Silk.Cil.Ldc_I4(178);
                                Silk.Cil.Ldelem_I();
                                Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(UInt32), typeof(IntPtr), typeof(UInt32), typeof(IntPtr), typeof(UInt32*), typeof(UInt32*), typeof(UInt32*), typeof(UInt32*), typeof(UInt64*));
                                MarshalPtrToStringBuilder(counterDesc_sb_ptr, counterDesc);
                            } finally {
                                Marshal.FreeHGlobal(counterDesc_sb_ptr);
                            }
                            MarshalPtrToStringBuilder(counterName_sb_ptr, counterName);
                        } finally {
                            Marshal.FreeHGlobal(counterName_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryId"></param>
            /// <param name="counterId"></param>
            /// <param name="counterNameLength"></param>
            /// <param name="counterName"></param>
            /// <param name="counterDescLength"></param>
            /// <param name="counterDesc"></param>
            /// <param name="counterOffset"></param>
            /// <param name="counterDataSize"></param>
            /// <param name="counterTypeEnum"></param>
            /// <param name="counterDataTypeEnum"></param>
            /// <param name="rawCounterMaxValue"></param>
            [CLSCompliant(false)]
            public static unsafe void GetPerfCounterInfo(UInt32 queryId, UInt32 counterId, UInt32 counterNameLength, [OutAttribute] StringBuilder counterName, UInt32 counterDescLength, [OutAttribute] StringBuilder counterDesc, [OutAttribute] UInt32* counterOffset, [OutAttribute] UInt32* counterDataSize, [OutAttribute] UInt32* counterTypeEnum, [OutAttribute] UInt32* counterDataTypeEnum, [OutAttribute] UInt64* rawCounterMaxValue)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr counterName_sb_ptr = IntPtr.Zero;
                        try
                        {
                            counterName_sb_ptr = Marshal.AllocHGlobal(counterName.Capacity + 1);
                            IntPtr counterDesc_sb_ptr = IntPtr.Zero;
                            try
                            {
                                counterDesc_sb_ptr = Marshal.AllocHGlobal(counterDesc.Capacity + 1);
                                Silk.Cil.Ldarg(0);
                                Silk.Cil.Ldarg(1);
                                Silk.Cil.Ldarg(2);
                                Silk.Cil.Load(counterName_sb_ptr);
                                Silk.Cil.Ldarg(4);
                                Silk.Cil.Load(counterDesc_sb_ptr);
                                Silk.Cil.Ldarg(6);
                                Silk.Cil.Ldarg(7);
                                Silk.Cil.Ldarg(8);
                                Silk.Cil.Ldarg(9);
                                Silk.Cil.Ldarg(10);
                                Silk.Cil.Load(EntryPoints);
                                Silk.Cil.Ldc_I4(178);
                                Silk.Cil.Ldelem_I();
                                Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(UInt32), typeof(IntPtr), typeof(UInt32), typeof(IntPtr), typeof(UInt32*), typeof(UInt32*), typeof(UInt32*), typeof(UInt32*), typeof(UInt64*));
                                MarshalPtrToStringBuilder(counterDesc_sb_ptr, counterDesc);
                            } finally {
                                Marshal.FreeHGlobal(counterDesc_sb_ptr);
                            }
                            MarshalPtrToStringBuilder(counterName_sb_ptr, counterName);
                        } finally {
                            Marshal.FreeHGlobal(counterName_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryHandle"></param>
            /// <param name="flags"></param>
            /// <param name="dataSize"></param>
            /// <param name="data"></param>
            /// <param name="bytesWritten"></param>
            [CLSCompliant(false)]
            public static void GetPerfQueryData(Int32 queryHandle, Int32 flags, Int32 dataSize, [OutAttribute] IntPtr data, [OutAttribute] Int32[] bytesWritten)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "bytesWritten_pinned");
                        if(bytesWritten != null && bytesWritten.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("bytesWritten_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("bytesWritten_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("bytesWritten_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(185);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(Int32), typeof(IntPtr), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryHandle"></param>
            /// <param name="flags"></param>
            /// <param name="dataSize"></param>
            /// <param name="data"></param>
            /// <param name="bytesWritten"></param>
            [CLSCompliant(false)]
            public static void GetPerfQueryData(Int32 queryHandle, Int32 flags, Int32 dataSize, [OutAttribute] IntPtr data, [OutAttribute] out Int32 bytesWritten)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "bytesWritten_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.StoreByName("bytesWritten_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("bytesWritten_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(185);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(Int32), typeof(IntPtr), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryHandle"></param>
            /// <param name="flags"></param>
            /// <param name="dataSize"></param>
            /// <param name="data"></param>
            /// <param name="bytesWritten"></param>
            [CLSCompliant(false)]
            public static unsafe void GetPerfQueryData(Int32 queryHandle, Int32 flags, Int32 dataSize, [OutAttribute] IntPtr data, [OutAttribute] Int32* bytesWritten)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(185);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(Int32), typeof(IntPtr), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryHandle"></param>
            /// <param name="flags"></param>
            /// <param name="dataSize"></param>
            /// <param name="data"></param>
            /// <param name="bytesWritten"></param>
            [CLSCompliant(false)]
            public static void GetPerfQueryData<T3>(Int32 queryHandle, Int32 flags, Int32 dataSize, [InAttribute, OutAttribute] T3[] data, [OutAttribute] Int32[] bytesWritten)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "data_pinned");
                        if(data != null && data.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T3");
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "bytesWritten_pinned");
                        if(bytesWritten != null && bytesWritten.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("bytesWritten_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("bytesWritten_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.LoadByName("bytesWritten_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(185);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(Int32), typeof(IntPtr), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryHandle"></param>
            /// <param name="flags"></param>
            /// <param name="dataSize"></param>
            /// <param name="data"></param>
            /// <param name="bytesWritten"></param>
            [CLSCompliant(false)]
            public static void GetPerfQueryData<T3>(Int32 queryHandle, Int32 flags, Int32 dataSize, [InAttribute, OutAttribute] T3[] data, [OutAttribute] out Int32 bytesWritten)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "data_pinned");
                        if(data != null && data.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T3");
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "bytesWritten_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.StoreByName("bytesWritten_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.LoadByName("bytesWritten_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(185);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(Int32), typeof(IntPtr), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryHandle"></param>
            /// <param name="flags"></param>
            /// <param name="dataSize"></param>
            /// <param name="data"></param>
            /// <param name="bytesWritten"></param>
            [CLSCompliant(false)]
            public static unsafe void GetPerfQueryData<T3>(Int32 queryHandle, Int32 flags, Int32 dataSize, [InAttribute, OutAttribute] T3[] data, [OutAttribute] Int32* bytesWritten)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "data_pinned");
                        if(data != null && data.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T3");
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(185);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(Int32), typeof(IntPtr), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryHandle"></param>
            /// <param name="flags"></param>
            /// <param name="dataSize"></param>
            /// <param name="data"></param>
            /// <param name="bytesWritten"></param>
            [CLSCompliant(false)]
            public static void GetPerfQueryData<T3>(Int32 queryHandle, Int32 flags, Int32 dataSize, [InAttribute, OutAttribute] T3[,] data, [OutAttribute] Int32[] bytesWritten)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "data_pinned");
                        if(data != null && data.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T3[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "bytesWritten_pinned");
                        if(bytesWritten != null && bytesWritten.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("bytesWritten_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("bytesWritten_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.LoadByName("bytesWritten_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(185);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(Int32), typeof(IntPtr), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryHandle"></param>
            /// <param name="flags"></param>
            /// <param name="dataSize"></param>
            /// <param name="data"></param>
            /// <param name="bytesWritten"></param>
            [CLSCompliant(false)]
            public static void GetPerfQueryData<T3>(Int32 queryHandle, Int32 flags, Int32 dataSize, [InAttribute, OutAttribute] T3[,] data, [OutAttribute] out Int32 bytesWritten)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "data_pinned");
                        if(data != null && data.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T3[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "bytesWritten_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.StoreByName("bytesWritten_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.LoadByName("bytesWritten_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(185);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(Int32), typeof(IntPtr), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryHandle"></param>
            /// <param name="flags"></param>
            /// <param name="dataSize"></param>
            /// <param name="data"></param>
            /// <param name="bytesWritten"></param>
            [CLSCompliant(false)]
            public static unsafe void GetPerfQueryData<T3>(Int32 queryHandle, Int32 flags, Int32 dataSize, [InAttribute, OutAttribute] T3[,] data, [OutAttribute] Int32* bytesWritten)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "data_pinned");
                        if(data != null && data.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T3[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(185);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(Int32), typeof(IntPtr), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryHandle"></param>
            /// <param name="flags"></param>
            /// <param name="dataSize"></param>
            /// <param name="data"></param>
            /// <param name="bytesWritten"></param>
            [CLSCompliant(false)]
            public static void GetPerfQueryData<T3>(Int32 queryHandle, Int32 flags, Int32 dataSize, [InAttribute, OutAttribute] T3[,,] data, [OutAttribute] Int32[] bytesWritten)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "data_pinned");
                        if(data != null && data.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T3[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "bytesWritten_pinned");
                        if(bytesWritten != null && bytesWritten.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("bytesWritten_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("bytesWritten_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.LoadByName("bytesWritten_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(185);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(Int32), typeof(IntPtr), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryHandle"></param>
            /// <param name="flags"></param>
            /// <param name="dataSize"></param>
            /// <param name="data"></param>
            /// <param name="bytesWritten"></param>
            [CLSCompliant(false)]
            public static void GetPerfQueryData<T3>(Int32 queryHandle, Int32 flags, Int32 dataSize, [InAttribute, OutAttribute] T3[,,] data, [OutAttribute] out Int32 bytesWritten)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "data_pinned");
                        if(data != null && data.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T3[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "bytesWritten_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.StoreByName("bytesWritten_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.LoadByName("bytesWritten_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(185);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(Int32), typeof(IntPtr), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryHandle"></param>
            /// <param name="flags"></param>
            /// <param name="dataSize"></param>
            /// <param name="data"></param>
            /// <param name="bytesWritten"></param>
            [CLSCompliant(false)]
            public static unsafe void GetPerfQueryData<T3>(Int32 queryHandle, Int32 flags, Int32 dataSize, [InAttribute, OutAttribute] T3[,,] data, [OutAttribute] Int32* bytesWritten)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "data_pinned");
                        if(data != null && data.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T3[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(185);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(Int32), typeof(IntPtr), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryHandle"></param>
            /// <param name="flags"></param>
            /// <param name="dataSize"></param>
            /// <param name="data"></param>
            /// <param name="bytesWritten"></param>
            [CLSCompliant(false)]
            public static void GetPerfQueryData<T3>(Int32 queryHandle, Int32 flags, Int32 dataSize, [InAttribute, OutAttribute] ref T3 data, [OutAttribute] Int32[] bytesWritten)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "data_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("data_pinned");
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "bytesWritten_pinned");
                        if(bytesWritten != null && bytesWritten.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("bytesWritten_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("bytesWritten_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("bytesWritten_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(185);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(Int32), typeof(IntPtr), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryHandle"></param>
            /// <param name="flags"></param>
            /// <param name="dataSize"></param>
            /// <param name="data"></param>
            /// <param name="bytesWritten"></param>
            [CLSCompliant(false)]
            public static void GetPerfQueryData<T3>(Int32 queryHandle, Int32 flags, Int32 dataSize, [InAttribute, OutAttribute] ref T3 data, [OutAttribute] out Int32 bytesWritten)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "data_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("data_pinned");
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "bytesWritten_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.StoreByName("bytesWritten_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("bytesWritten_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(185);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(Int32), typeof(IntPtr), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryHandle"></param>
            /// <param name="flags"></param>
            /// <param name="dataSize"></param>
            /// <param name="data"></param>
            /// <param name="bytesWritten"></param>
            [CLSCompliant(false)]
            public static unsafe void GetPerfQueryData<T3>(Int32 queryHandle, Int32 flags, Int32 dataSize, [InAttribute, OutAttribute] ref T3 data, [OutAttribute] Int32* bytesWritten)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "data_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("data_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(185);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(Int32), typeof(IntPtr), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryHandle"></param>
            /// <param name="flags"></param>
            /// <param name="dataSize"></param>
            /// <param name="data"></param>
            /// <param name="bytesWritten"></param>
            [CLSCompliant(false)]
            public static void GetPerfQueryData(UInt32 queryHandle, UInt32 flags, Int32 dataSize, [OutAttribute] IntPtr data, [OutAttribute] UInt32[] bytesWritten)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "bytesWritten_pinned");
                        if(bytesWritten != null && bytesWritten.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("bytesWritten_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("bytesWritten_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("bytesWritten_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(185);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(Int32), typeof(IntPtr), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryHandle"></param>
            /// <param name="flags"></param>
            /// <param name="dataSize"></param>
            /// <param name="data"></param>
            /// <param name="bytesWritten"></param>
            [CLSCompliant(false)]
            public static void GetPerfQueryData(UInt32 queryHandle, UInt32 flags, Int32 dataSize, [OutAttribute] IntPtr data, [OutAttribute] out UInt32 bytesWritten)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "bytesWritten_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.StoreByName("bytesWritten_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("bytesWritten_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(185);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(Int32), typeof(IntPtr), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryHandle"></param>
            /// <param name="flags"></param>
            /// <param name="dataSize"></param>
            /// <param name="data"></param>
            /// <param name="bytesWritten"></param>
            [CLSCompliant(false)]
            public static unsafe void GetPerfQueryData(UInt32 queryHandle, UInt32 flags, Int32 dataSize, [OutAttribute] IntPtr data, [OutAttribute] UInt32* bytesWritten)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(185);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(Int32), typeof(IntPtr), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryHandle"></param>
            /// <param name="flags"></param>
            /// <param name="dataSize"></param>
            /// <param name="data"></param>
            /// <param name="bytesWritten"></param>
            [CLSCompliant(false)]
            public static void GetPerfQueryData<T3>(UInt32 queryHandle, UInt32 flags, Int32 dataSize, [InAttribute, OutAttribute] T3[] data, [OutAttribute] UInt32[] bytesWritten)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "data_pinned");
                        if(data != null && data.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T3");
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "bytesWritten_pinned");
                        if(bytesWritten != null && bytesWritten.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("bytesWritten_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("bytesWritten_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.LoadByName("bytesWritten_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(185);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(Int32), typeof(IntPtr), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryHandle"></param>
            /// <param name="flags"></param>
            /// <param name="dataSize"></param>
            /// <param name="data"></param>
            /// <param name="bytesWritten"></param>
            [CLSCompliant(false)]
            public static void GetPerfQueryData<T3>(UInt32 queryHandle, UInt32 flags, Int32 dataSize, [InAttribute, OutAttribute] T3[] data, [OutAttribute] out UInt32 bytesWritten)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "data_pinned");
                        if(data != null && data.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T3");
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "bytesWritten_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.StoreByName("bytesWritten_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.LoadByName("bytesWritten_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(185);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(Int32), typeof(IntPtr), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryHandle"></param>
            /// <param name="flags"></param>
            /// <param name="dataSize"></param>
            /// <param name="data"></param>
            /// <param name="bytesWritten"></param>
            [CLSCompliant(false)]
            public static unsafe void GetPerfQueryData<T3>(UInt32 queryHandle, UInt32 flags, Int32 dataSize, [InAttribute, OutAttribute] T3[] data, [OutAttribute] UInt32* bytesWritten)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "data_pinned");
                        if(data != null && data.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T3");
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(185);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(Int32), typeof(IntPtr), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryHandle"></param>
            /// <param name="flags"></param>
            /// <param name="dataSize"></param>
            /// <param name="data"></param>
            /// <param name="bytesWritten"></param>
            [CLSCompliant(false)]
            public static void GetPerfQueryData<T3>(UInt32 queryHandle, UInt32 flags, Int32 dataSize, [InAttribute, OutAttribute] T3[,] data, [OutAttribute] UInt32[] bytesWritten)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "data_pinned");
                        if(data != null && data.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T3[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "bytesWritten_pinned");
                        if(bytesWritten != null && bytesWritten.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("bytesWritten_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("bytesWritten_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.LoadByName("bytesWritten_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(185);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(Int32), typeof(IntPtr), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryHandle"></param>
            /// <param name="flags"></param>
            /// <param name="dataSize"></param>
            /// <param name="data"></param>
            /// <param name="bytesWritten"></param>
            [CLSCompliant(false)]
            public static void GetPerfQueryData<T3>(UInt32 queryHandle, UInt32 flags, Int32 dataSize, [InAttribute, OutAttribute] T3[,] data, [OutAttribute] out UInt32 bytesWritten)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "data_pinned");
                        if(data != null && data.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T3[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "bytesWritten_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.StoreByName("bytesWritten_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.LoadByName("bytesWritten_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(185);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(Int32), typeof(IntPtr), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryHandle"></param>
            /// <param name="flags"></param>
            /// <param name="dataSize"></param>
            /// <param name="data"></param>
            /// <param name="bytesWritten"></param>
            [CLSCompliant(false)]
            public static unsafe void GetPerfQueryData<T3>(UInt32 queryHandle, UInt32 flags, Int32 dataSize, [InAttribute, OutAttribute] T3[,] data, [OutAttribute] UInt32* bytesWritten)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "data_pinned");
                        if(data != null && data.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T3[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(185);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(Int32), typeof(IntPtr), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryHandle"></param>
            /// <param name="flags"></param>
            /// <param name="dataSize"></param>
            /// <param name="data"></param>
            /// <param name="bytesWritten"></param>
            [CLSCompliant(false)]
            public static void GetPerfQueryData<T3>(UInt32 queryHandle, UInt32 flags, Int32 dataSize, [InAttribute, OutAttribute] T3[,,] data, [OutAttribute] UInt32[] bytesWritten)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "data_pinned");
                        if(data != null && data.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T3[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "bytesWritten_pinned");
                        if(bytesWritten != null && bytesWritten.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("bytesWritten_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("bytesWritten_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.LoadByName("bytesWritten_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(185);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(Int32), typeof(IntPtr), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryHandle"></param>
            /// <param name="flags"></param>
            /// <param name="dataSize"></param>
            /// <param name="data"></param>
            /// <param name="bytesWritten"></param>
            [CLSCompliant(false)]
            public static void GetPerfQueryData<T3>(UInt32 queryHandle, UInt32 flags, Int32 dataSize, [InAttribute, OutAttribute] T3[,,] data, [OutAttribute] out UInt32 bytesWritten)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "data_pinned");
                        if(data != null && data.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T3[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "bytesWritten_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.StoreByName("bytesWritten_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.LoadByName("bytesWritten_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(185);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(Int32), typeof(IntPtr), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryHandle"></param>
            /// <param name="flags"></param>
            /// <param name="dataSize"></param>
            /// <param name="data"></param>
            /// <param name="bytesWritten"></param>
            [CLSCompliant(false)]
            public static unsafe void GetPerfQueryData<T3>(UInt32 queryHandle, UInt32 flags, Int32 dataSize, [InAttribute, OutAttribute] T3[,,] data, [OutAttribute] UInt32* bytesWritten)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "data_pinned");
                        if(data != null && data.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T3[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(185);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(Int32), typeof(IntPtr), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryHandle"></param>
            /// <param name="flags"></param>
            /// <param name="dataSize"></param>
            /// <param name="data"></param>
            /// <param name="bytesWritten"></param>
            [CLSCompliant(false)]
            public static void GetPerfQueryData<T3>(UInt32 queryHandle, UInt32 flags, Int32 dataSize, [InAttribute, OutAttribute] ref T3 data, [OutAttribute] UInt32[] bytesWritten)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "data_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("data_pinned");
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "bytesWritten_pinned");
                        if(bytesWritten != null && bytesWritten.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("bytesWritten_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("bytesWritten_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("bytesWritten_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(185);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(Int32), typeof(IntPtr), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryHandle"></param>
            /// <param name="flags"></param>
            /// <param name="dataSize"></param>
            /// <param name="data"></param>
            /// <param name="bytesWritten"></param>
            [CLSCompliant(false)]
            public static void GetPerfQueryData<T3>(UInt32 queryHandle, UInt32 flags, Int32 dataSize, [InAttribute, OutAttribute] ref T3 data, [OutAttribute] out UInt32 bytesWritten)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "data_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("data_pinned");
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "bytesWritten_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.StoreByName("bytesWritten_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("bytesWritten_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(185);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(Int32), typeof(IntPtr), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryHandle"></param>
            /// <param name="flags"></param>
            /// <param name="dataSize"></param>
            /// <param name="data"></param>
            /// <param name="bytesWritten"></param>
            [CLSCompliant(false)]
            public static unsafe void GetPerfQueryData<T3>(UInt32 queryHandle, UInt32 flags, Int32 dataSize, [InAttribute, OutAttribute] ref T3 data, [OutAttribute] UInt32* bytesWritten)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "data_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("data_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(185);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(Int32), typeof(IntPtr), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryName"></param>
            [CLSCompliant(false)]
            public static Int32 GetPerfQueryIdByName([OutAttribute] StringBuilder queryName)
            {
                unsafe
                {
                    Int32 __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Int32 __result = default(Int32);
                        IntPtr queryName_sb_ptr = IntPtr.Zero;
                        try
                        {
                            queryName_sb_ptr = Marshal.AllocHGlobal(queryName.Capacity + 1);
                            Silk.Cil.Load(queryName_sb_ptr);
                            Silk.Cil.LoadAddress(__result);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(186);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(IntPtr), typeof(UInt32*));
                            Silk.Cil.Load(__result);
                            Silk.Cil.Store(out __return_result);
                            MarshalPtrToStringBuilder(queryName_sb_ptr, queryName);
                        } finally {
                            Marshal.FreeHGlobal(queryName_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryName"></param>
            /// <param name="queryId"></param>
            [CLSCompliant(false)]
            public static void GetPerfQueryIdByName([OutAttribute] StringBuilder queryName, [OutAttribute] Int32[] queryId)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr queryName_sb_ptr = IntPtr.Zero;
                        try
                        {
                            queryName_sb_ptr = Marshal.AllocHGlobal(queryName.Capacity + 1);
                            Silk.Cil.DeclareLocal("System.Int32& pinned", "queryId_pinned");
                            if(queryId != null && queryId.Length != 0)
                            {
                                Silk.Cil.Ldarg(1);
                                Silk.Cil.Ldc_I4(0);
                                Silk.Cil.Ldelema("System.Int32");
                                Silk.Cil.StoreByName("queryId_pinned");
                            }
                            else
                            {
                                Silk.Cil.Ldc_I4(0);
                                Silk.Cil.Conv_U();
                                Silk.Cil.StoreByName("queryId_pinned");
                            }
                            Silk.Cil.Load(queryName_sb_ptr);
                            Silk.Cil.LoadByName("queryId_pinned");
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(186);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(IntPtr), typeof(UInt32*));
                            MarshalPtrToStringBuilder(queryName_sb_ptr, queryName);
                        } finally {
                            Marshal.FreeHGlobal(queryName_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryName"></param>
            /// <param name="queryId"></param>
            [CLSCompliant(false)]
            public static void GetPerfQueryIdByName([OutAttribute] StringBuilder queryName, [OutAttribute] out Int32 queryId)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr queryName_sb_ptr = IntPtr.Zero;
                        try
                        {
                            queryName_sb_ptr = Marshal.AllocHGlobal(queryName.Capacity + 1);
                            Silk.Cil.DeclareLocal("System.Int32& pinned", "queryId_pinned");
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.StoreByName("queryId_pinned");
                            Silk.Cil.Load(queryName_sb_ptr);
                            Silk.Cil.LoadByName("queryId_pinned");
                            Silk.Cil.Conv_I();
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(186);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(IntPtr), typeof(UInt32*));
                            MarshalPtrToStringBuilder(queryName_sb_ptr, queryName);
                        } finally {
                            Marshal.FreeHGlobal(queryName_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryName"></param>
            /// <param name="queryId"></param>
            [CLSCompliant(false)]
            public static unsafe void GetPerfQueryIdByName([OutAttribute] StringBuilder queryName, [OutAttribute] Int32* queryId)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr queryName_sb_ptr = IntPtr.Zero;
                        try
                        {
                            queryName_sb_ptr = Marshal.AllocHGlobal(queryName.Capacity + 1);
                            Silk.Cil.Load(queryName_sb_ptr);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(186);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(IntPtr), typeof(UInt32*));
                            MarshalPtrToStringBuilder(queryName_sb_ptr, queryName);
                        } finally {
                            Marshal.FreeHGlobal(queryName_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryName"></param>
            /// <param name="queryId"></param>
            [CLSCompliant(false)]
            public static void GetPerfQueryIdByName([OutAttribute] StringBuilder queryName, [OutAttribute] UInt32[] queryId)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr queryName_sb_ptr = IntPtr.Zero;
                        try
                        {
                            queryName_sb_ptr = Marshal.AllocHGlobal(queryName.Capacity + 1);
                            Silk.Cil.DeclareLocal("System.UInt32& pinned", "queryId_pinned");
                            if(queryId != null && queryId.Length != 0)
                            {
                                Silk.Cil.Ldarg(1);
                                Silk.Cil.Ldc_I4(0);
                                Silk.Cil.Ldelema("System.UInt32");
                                Silk.Cil.StoreByName("queryId_pinned");
                            }
                            else
                            {
                                Silk.Cil.Ldc_I4(0);
                                Silk.Cil.Conv_U();
                                Silk.Cil.StoreByName("queryId_pinned");
                            }
                            Silk.Cil.Load(queryName_sb_ptr);
                            Silk.Cil.LoadByName("queryId_pinned");
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(186);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(IntPtr), typeof(UInt32*));
                            MarshalPtrToStringBuilder(queryName_sb_ptr, queryName);
                        } finally {
                            Marshal.FreeHGlobal(queryName_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryName"></param>
            /// <param name="queryId"></param>
            [CLSCompliant(false)]
            public static void GetPerfQueryIdByName([OutAttribute] StringBuilder queryName, [OutAttribute] out UInt32 queryId)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr queryName_sb_ptr = IntPtr.Zero;
                        try
                        {
                            queryName_sb_ptr = Marshal.AllocHGlobal(queryName.Capacity + 1);
                            Silk.Cil.DeclareLocal("System.UInt32& pinned", "queryId_pinned");
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.StoreByName("queryId_pinned");
                            Silk.Cil.Load(queryName_sb_ptr);
                            Silk.Cil.LoadByName("queryId_pinned");
                            Silk.Cil.Conv_I();
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(186);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(IntPtr), typeof(UInt32*));
                            MarshalPtrToStringBuilder(queryName_sb_ptr, queryName);
                        } finally {
                            Marshal.FreeHGlobal(queryName_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryName"></param>
            /// <param name="queryId"></param>
            [CLSCompliant(false)]
            public static unsafe void GetPerfQueryIdByName([OutAttribute] StringBuilder queryName, [OutAttribute] UInt32* queryId)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr queryName_sb_ptr = IntPtr.Zero;
                        try
                        {
                            queryName_sb_ptr = Marshal.AllocHGlobal(queryName.Capacity + 1);
                            Silk.Cil.Load(queryName_sb_ptr);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(186);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(IntPtr), typeof(UInt32*));
                            MarshalPtrToStringBuilder(queryName_sb_ptr, queryName);
                        } finally {
                            Marshal.FreeHGlobal(queryName_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryId"></param>
            /// <param name="queryNameLength"></param>
            /// <param name="queryName"></param>
            /// <param name="dataSize"></param>
            /// <param name="noCounters"></param>
            /// <param name="noInstances"></param>
            /// <param name="capsMask"></param>
            [CLSCompliant(false)]
            public static void GetPerfQueryInfo(Int32 queryId, Int32 queryNameLength, [OutAttribute] StringBuilder queryName, [OutAttribute] Int32[] dataSize, [OutAttribute] Int32[] noCounters, [OutAttribute] Int32[] noInstances, [OutAttribute] Int32[] capsMask)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr queryName_sb_ptr = IntPtr.Zero;
                        try
                        {
                            queryName_sb_ptr = Marshal.AllocHGlobal(queryName.Capacity + 1);
                            Silk.Cil.DeclareLocal("System.Int32& pinned", "dataSize_pinned");
                            if(dataSize != null && dataSize.Length != 0)
                            {
                                Silk.Cil.Ldarg(3);
                                Silk.Cil.Ldc_I4(0);
                                Silk.Cil.Ldelema("System.Int32");
                                Silk.Cil.StoreByName("dataSize_pinned");
                            }
                            else
                            {
                                Silk.Cil.Ldc_I4(0);
                                Silk.Cil.Conv_U();
                                Silk.Cil.StoreByName("dataSize_pinned");
                            }
                            Silk.Cil.DeclareLocal("System.Int32& pinned", "noCounters_pinned");
                            if(noCounters != null && noCounters.Length != 0)
                            {
                                Silk.Cil.Ldarg(4);
                                Silk.Cil.Ldc_I4(0);
                                Silk.Cil.Ldelema("System.Int32");
                                Silk.Cil.StoreByName("noCounters_pinned");
                            }
                            else
                            {
                                Silk.Cil.Ldc_I4(0);
                                Silk.Cil.Conv_U();
                                Silk.Cil.StoreByName("noCounters_pinned");
                            }
                            Silk.Cil.DeclareLocal("System.Int32& pinned", "noInstances_pinned");
                            if(noInstances != null && noInstances.Length != 0)
                            {
                                Silk.Cil.Ldarg(5);
                                Silk.Cil.Ldc_I4(0);
                                Silk.Cil.Ldelema("System.Int32");
                                Silk.Cil.StoreByName("noInstances_pinned");
                            }
                            else
                            {
                                Silk.Cil.Ldc_I4(0);
                                Silk.Cil.Conv_U();
                                Silk.Cil.StoreByName("noInstances_pinned");
                            }
                            Silk.Cil.DeclareLocal("System.Int32& pinned", "capsMask_pinned");
                            if(capsMask != null && capsMask.Length != 0)
                            {
                                Silk.Cil.Ldarg(6);
                                Silk.Cil.Ldc_I4(0);
                                Silk.Cil.Ldelema("System.Int32");
                                Silk.Cil.StoreByName("capsMask_pinned");
                            }
                            else
                            {
                                Silk.Cil.Ldc_I4(0);
                                Silk.Cil.Conv_U();
                                Silk.Cil.StoreByName("capsMask_pinned");
                            }
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Load(queryName_sb_ptr);
                            Silk.Cil.LoadByName("dataSize_pinned");
                            Silk.Cil.LoadByName("noCounters_pinned");
                            Silk.Cil.LoadByName("noInstances_pinned");
                            Silk.Cil.LoadByName("capsMask_pinned");
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(187);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(IntPtr), typeof(UInt32*), typeof(UInt32*), typeof(UInt32*), typeof(UInt32*));
                            MarshalPtrToStringBuilder(queryName_sb_ptr, queryName);
                        } finally {
                            Marshal.FreeHGlobal(queryName_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryId"></param>
            /// <param name="queryNameLength"></param>
            /// <param name="queryName"></param>
            /// <param name="dataSize"></param>
            /// <param name="noCounters"></param>
            /// <param name="noInstances"></param>
            /// <param name="capsMask"></param>
            [CLSCompliant(false)]
            public static void GetPerfQueryInfo(Int32 queryId, Int32 queryNameLength, [OutAttribute] StringBuilder queryName, [OutAttribute] out Int32 dataSize, [OutAttribute] out Int32 noCounters, [OutAttribute] out Int32 noInstances, [OutAttribute] out Int32 capsMask)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr queryName_sb_ptr = IntPtr.Zero;
                        try
                        {
                            queryName_sb_ptr = Marshal.AllocHGlobal(queryName.Capacity + 1);
                            Silk.Cil.DeclareLocal("System.Int32& pinned", "dataSize_pinned");
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.StoreByName("dataSize_pinned");
                            Silk.Cil.DeclareLocal("System.Int32& pinned", "noCounters_pinned");
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.StoreByName("noCounters_pinned");
                            Silk.Cil.DeclareLocal("System.Int32& pinned", "noInstances_pinned");
                            Silk.Cil.Ldarg(5);
                            Silk.Cil.StoreByName("noInstances_pinned");
                            Silk.Cil.DeclareLocal("System.Int32& pinned", "capsMask_pinned");
                            Silk.Cil.Ldarg(6);
                            Silk.Cil.StoreByName("capsMask_pinned");
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Load(queryName_sb_ptr);
                            Silk.Cil.LoadByName("dataSize_pinned");
                            Silk.Cil.Conv_I();
                            Silk.Cil.LoadByName("noCounters_pinned");
                            Silk.Cil.Conv_I();
                            Silk.Cil.LoadByName("noInstances_pinned");
                            Silk.Cil.Conv_I();
                            Silk.Cil.LoadByName("capsMask_pinned");
                            Silk.Cil.Conv_I();
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(187);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(IntPtr), typeof(UInt32*), typeof(UInt32*), typeof(UInt32*), typeof(UInt32*));
                            MarshalPtrToStringBuilder(queryName_sb_ptr, queryName);
                        } finally {
                            Marshal.FreeHGlobal(queryName_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryId"></param>
            /// <param name="queryNameLength"></param>
            /// <param name="queryName"></param>
            /// <param name="dataSize"></param>
            /// <param name="noCounters"></param>
            /// <param name="noInstances"></param>
            /// <param name="capsMask"></param>
            [CLSCompliant(false)]
            public static unsafe void GetPerfQueryInfo(Int32 queryId, Int32 queryNameLength, [OutAttribute] StringBuilder queryName, [OutAttribute] Int32* dataSize, [OutAttribute] Int32* noCounters, [OutAttribute] Int32* noInstances, [OutAttribute] Int32* capsMask)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr queryName_sb_ptr = IntPtr.Zero;
                        try
                        {
                            queryName_sb_ptr = Marshal.AllocHGlobal(queryName.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Load(queryName_sb_ptr);
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldarg(5);
                            Silk.Cil.Ldarg(6);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(187);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(IntPtr), typeof(UInt32*), typeof(UInt32*), typeof(UInt32*), typeof(UInt32*));
                            MarshalPtrToStringBuilder(queryName_sb_ptr, queryName);
                        } finally {
                            Marshal.FreeHGlobal(queryName_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryId"></param>
            /// <param name="queryNameLength"></param>
            /// <param name="queryName"></param>
            /// <param name="dataSize"></param>
            /// <param name="noCounters"></param>
            /// <param name="noInstances"></param>
            /// <param name="capsMask"></param>
            [CLSCompliant(false)]
            public static void GetPerfQueryInfo(UInt32 queryId, UInt32 queryNameLength, [OutAttribute] StringBuilder queryName, [OutAttribute] UInt32[] dataSize, [OutAttribute] UInt32[] noCounters, [OutAttribute] UInt32[] noInstances, [OutAttribute] UInt32[] capsMask)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr queryName_sb_ptr = IntPtr.Zero;
                        try
                        {
                            queryName_sb_ptr = Marshal.AllocHGlobal(queryName.Capacity + 1);
                            Silk.Cil.DeclareLocal("System.UInt32& pinned", "dataSize_pinned");
                            if(dataSize != null && dataSize.Length != 0)
                            {
                                Silk.Cil.Ldarg(3);
                                Silk.Cil.Ldc_I4(0);
                                Silk.Cil.Ldelema("System.UInt32");
                                Silk.Cil.StoreByName("dataSize_pinned");
                            }
                            else
                            {
                                Silk.Cil.Ldc_I4(0);
                                Silk.Cil.Conv_U();
                                Silk.Cil.StoreByName("dataSize_pinned");
                            }
                            Silk.Cil.DeclareLocal("System.UInt32& pinned", "noCounters_pinned");
                            if(noCounters != null && noCounters.Length != 0)
                            {
                                Silk.Cil.Ldarg(4);
                                Silk.Cil.Ldc_I4(0);
                                Silk.Cil.Ldelema("System.UInt32");
                                Silk.Cil.StoreByName("noCounters_pinned");
                            }
                            else
                            {
                                Silk.Cil.Ldc_I4(0);
                                Silk.Cil.Conv_U();
                                Silk.Cil.StoreByName("noCounters_pinned");
                            }
                            Silk.Cil.DeclareLocal("System.UInt32& pinned", "noInstances_pinned");
                            if(noInstances != null && noInstances.Length != 0)
                            {
                                Silk.Cil.Ldarg(5);
                                Silk.Cil.Ldc_I4(0);
                                Silk.Cil.Ldelema("System.UInt32");
                                Silk.Cil.StoreByName("noInstances_pinned");
                            }
                            else
                            {
                                Silk.Cil.Ldc_I4(0);
                                Silk.Cil.Conv_U();
                                Silk.Cil.StoreByName("noInstances_pinned");
                            }
                            Silk.Cil.DeclareLocal("System.UInt32& pinned", "capsMask_pinned");
                            if(capsMask != null && capsMask.Length != 0)
                            {
                                Silk.Cil.Ldarg(6);
                                Silk.Cil.Ldc_I4(0);
                                Silk.Cil.Ldelema("System.UInt32");
                                Silk.Cil.StoreByName("capsMask_pinned");
                            }
                            else
                            {
                                Silk.Cil.Ldc_I4(0);
                                Silk.Cil.Conv_U();
                                Silk.Cil.StoreByName("capsMask_pinned");
                            }
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Load(queryName_sb_ptr);
                            Silk.Cil.LoadByName("dataSize_pinned");
                            Silk.Cil.LoadByName("noCounters_pinned");
                            Silk.Cil.LoadByName("noInstances_pinned");
                            Silk.Cil.LoadByName("capsMask_pinned");
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(187);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(IntPtr), typeof(UInt32*), typeof(UInt32*), typeof(UInt32*), typeof(UInt32*));
                            MarshalPtrToStringBuilder(queryName_sb_ptr, queryName);
                        } finally {
                            Marshal.FreeHGlobal(queryName_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryId"></param>
            /// <param name="queryNameLength"></param>
            /// <param name="queryName"></param>
            /// <param name="dataSize"></param>
            /// <param name="noCounters"></param>
            /// <param name="noInstances"></param>
            /// <param name="capsMask"></param>
            [CLSCompliant(false)]
            public static void GetPerfQueryInfo(UInt32 queryId, UInt32 queryNameLength, [OutAttribute] StringBuilder queryName, [OutAttribute] out UInt32 dataSize, [OutAttribute] out UInt32 noCounters, [OutAttribute] out UInt32 noInstances, [OutAttribute] out UInt32 capsMask)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr queryName_sb_ptr = IntPtr.Zero;
                        try
                        {
                            queryName_sb_ptr = Marshal.AllocHGlobal(queryName.Capacity + 1);
                            Silk.Cil.DeclareLocal("System.UInt32& pinned", "dataSize_pinned");
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.StoreByName("dataSize_pinned");
                            Silk.Cil.DeclareLocal("System.UInt32& pinned", "noCounters_pinned");
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.StoreByName("noCounters_pinned");
                            Silk.Cil.DeclareLocal("System.UInt32& pinned", "noInstances_pinned");
                            Silk.Cil.Ldarg(5);
                            Silk.Cil.StoreByName("noInstances_pinned");
                            Silk.Cil.DeclareLocal("System.UInt32& pinned", "capsMask_pinned");
                            Silk.Cil.Ldarg(6);
                            Silk.Cil.StoreByName("capsMask_pinned");
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Load(queryName_sb_ptr);
                            Silk.Cil.LoadByName("dataSize_pinned");
                            Silk.Cil.Conv_I();
                            Silk.Cil.LoadByName("noCounters_pinned");
                            Silk.Cil.Conv_I();
                            Silk.Cil.LoadByName("noInstances_pinned");
                            Silk.Cil.Conv_I();
                            Silk.Cil.LoadByName("capsMask_pinned");
                            Silk.Cil.Conv_I();
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(187);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(IntPtr), typeof(UInt32*), typeof(UInt32*), typeof(UInt32*), typeof(UInt32*));
                            MarshalPtrToStringBuilder(queryName_sb_ptr, queryName);
                        } finally {
                            Marshal.FreeHGlobal(queryName_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: INTEL_performance_query]</summary>
            /// <param name="queryId"></param>
            /// <param name="queryNameLength"></param>
            /// <param name="queryName"></param>
            /// <param name="dataSize"></param>
            /// <param name="noCounters"></param>
            /// <param name="noInstances"></param>
            /// <param name="capsMask"></param>
            [CLSCompliant(false)]
            public static unsafe void GetPerfQueryInfo(UInt32 queryId, UInt32 queryNameLength, [OutAttribute] StringBuilder queryName, [OutAttribute] UInt32* dataSize, [OutAttribute] UInt32* noCounters, [OutAttribute] UInt32* noInstances, [OutAttribute] UInt32* capsMask)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr queryName_sb_ptr = IntPtr.Zero;
                        try
                        {
                            queryName_sb_ptr = Marshal.AllocHGlobal(queryName.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Load(queryName_sb_ptr);
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldarg(5);
                            Silk.Cil.Ldarg(6);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(187);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(IntPtr), typeof(UInt32*), typeof(UInt32*), typeof(UInt32*), typeof(UInt32*));
                            MarshalPtrToStringBuilder(queryName_sb_ptr, queryName);
                        } finally {
                            Marshal.FreeHGlobal(queryName_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

        }

        public static partial class Khr
        {
            /// <summary>[requires: KHR_blend_equation_advanced]</summary>
            public static void BlendBarrier()
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(15);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Specify a callback to receive debugging messages from the GL
            /// </summary>
            /// <param name="callback"> 
            /// The address of a callback function that will be called when a debug message is generated.
            /// </param>
            /// <param name="userParam"> 
            /// A user supplied pointer that will be passed on each invocation of callback.
            /// </param>
            public static void DebugMessageCallback(DebugProcKhr callback, IntPtr userParam)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(60);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(DebugProcKhr), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Specify a callback to receive debugging messages from the GL
            /// </summary>
            /// <param name="callback"> 
            /// The address of a callback function that will be called when a debug message is generated.
            /// </param>
            /// <param name="userParam"> 
            /// A user supplied pointer that will be passed on each invocation of callback.
            /// </param>
            [CLSCompliant(false)]
            public static void DebugMessageCallback<T1>(DebugProcKhr callback, [InAttribute, OutAttribute] T1[] userParam)
                where T1 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T1& pinned", "userParam_pinned");
                        if(userParam != null && userParam.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T1");
                            Silk.Cil.StoreByName("userParam_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("userParam_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("userParam_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(60);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(DebugProcKhr), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Specify a callback to receive debugging messages from the GL
            /// </summary>
            /// <param name="callback"> 
            /// The address of a callback function that will be called when a debug message is generated.
            /// </param>
            /// <param name="userParam"> 
            /// A user supplied pointer that will be passed on each invocation of callback.
            /// </param>
            [CLSCompliant(false)]
            public static void DebugMessageCallback<T1>(DebugProcKhr callback, [InAttribute, OutAttribute] T1[,] userParam)
                where T1 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T1& pinned", "userParam_pinned");
                        if(userParam != null && userParam.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T1[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("userParam_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("userParam_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("userParam_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(60);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(DebugProcKhr), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Specify a callback to receive debugging messages from the GL
            /// </summary>
            /// <param name="callback"> 
            /// The address of a callback function that will be called when a debug message is generated.
            /// </param>
            /// <param name="userParam"> 
            /// A user supplied pointer that will be passed on each invocation of callback.
            /// </param>
            [CLSCompliant(false)]
            public static void DebugMessageCallback<T1>(DebugProcKhr callback, [InAttribute, OutAttribute] T1[,,] userParam)
                where T1 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T1& pinned", "userParam_pinned");
                        if(userParam != null && userParam.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T1[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("userParam_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("userParam_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("userParam_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(60);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(DebugProcKhr), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Specify a callback to receive debugging messages from the GL
            /// </summary>
            /// <param name="callback"> 
            /// The address of a callback function that will be called when a debug message is generated.
            /// </param>
            /// <param name="userParam"> 
            /// A user supplied pointer that will be passed on each invocation of callback.
            /// </param>
            public static void DebugMessageCallback<T1>(DebugProcKhr callback, [InAttribute, OutAttribute] ref T1 userParam)
                where T1 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T1& pinned", "userParam_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("userParam_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("userParam_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(60);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(DebugProcKhr), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source"> 
            /// The source of debug messages to enable or disable.
            /// </param>
            /// <param name="type"> 
            /// The type of debug messages to enable or disable.
            /// </param>
            /// <param name="severity"> 
            /// The severity of debug messages to enable or disable.
            /// </param>
            /// <param name="count"> 
            /// The length of the array ids.
            /// </param>
            /// <param name="ids"> 
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </param>
            /// <param name="enabled"> 
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void DebugMessageControl(OpenTK.Graphics.ES20.All source, OpenTK.Graphics.ES20.All type, OpenTK.Graphics.ES20.All severity, Int32 count, Int32[] ids, bool enabled)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "ids_pinned");
                        if(ids != null && ids.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("ids_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("ids_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("ids_pinned");
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(62);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.DebugSourceControl), typeof(OpenTK.Graphics.ES20.DebugTypeControl), typeof(OpenTK.Graphics.ES20.DebugSeverityControl), typeof(Int32), typeof(UInt32*), typeof(bool));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source"> 
            /// The source of debug messages to enable or disable.
            /// </param>
            /// <param name="type"> 
            /// The type of debug messages to enable or disable.
            /// </param>
            /// <param name="severity"> 
            /// The severity of debug messages to enable or disable.
            /// </param>
            /// <param name="count"> 
            /// The length of the array ids.
            /// </param>
            /// <param name="ids"> 
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </param>
            /// <param name="enabled"> 
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void DebugMessageControl(OpenTK.Graphics.ES20.All source, OpenTK.Graphics.ES20.All type, OpenTK.Graphics.ES20.All severity, Int32 count, ref Int32 ids, bool enabled)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "ids_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.StoreByName("ids_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("ids_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(62);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.DebugSourceControl), typeof(OpenTK.Graphics.ES20.DebugTypeControl), typeof(OpenTK.Graphics.ES20.DebugSeverityControl), typeof(Int32), typeof(UInt32*), typeof(bool));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source"> 
            /// The source of debug messages to enable or disable.
            /// </param>
            /// <param name="type"> 
            /// The type of debug messages to enable or disable.
            /// </param>
            /// <param name="severity"> 
            /// The severity of debug messages to enable or disable.
            /// </param>
            /// <param name="count"> 
            /// The length of the array ids.
            /// </param>
            /// <param name="ids"> 
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </param>
            /// <param name="enabled"> 
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static unsafe void DebugMessageControl(OpenTK.Graphics.ES20.All source, OpenTK.Graphics.ES20.All type, OpenTK.Graphics.ES20.All severity, Int32 count, Int32* ids, bool enabled)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(62);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.DebugSourceControl), typeof(OpenTK.Graphics.ES20.DebugTypeControl), typeof(OpenTK.Graphics.ES20.DebugSeverityControl), typeof(Int32), typeof(UInt32*), typeof(bool));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source"> 
            /// The source of debug messages to enable or disable.
            /// </param>
            /// <param name="type"> 
            /// The type of debug messages to enable or disable.
            /// </param>
            /// <param name="severity"> 
            /// The severity of debug messages to enable or disable.
            /// </param>
            /// <param name="count"> 
            /// The length of the array ids.
            /// </param>
            /// <param name="ids"> 
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </param>
            /// <param name="enabled"> 
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void DebugMessageControl(OpenTK.Graphics.ES20.All source, OpenTK.Graphics.ES20.All type, OpenTK.Graphics.ES20.All severity, Int32 count, UInt32[] ids, bool enabled)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "ids_pinned");
                        if(ids != null && ids.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("ids_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("ids_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("ids_pinned");
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(62);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.DebugSourceControl), typeof(OpenTK.Graphics.ES20.DebugTypeControl), typeof(OpenTK.Graphics.ES20.DebugSeverityControl), typeof(Int32), typeof(UInt32*), typeof(bool));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source"> 
            /// The source of debug messages to enable or disable.
            /// </param>
            /// <param name="type"> 
            /// The type of debug messages to enable or disable.
            /// </param>
            /// <param name="severity"> 
            /// The severity of debug messages to enable or disable.
            /// </param>
            /// <param name="count"> 
            /// The length of the array ids.
            /// </param>
            /// <param name="ids"> 
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </param>
            /// <param name="enabled"> 
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void DebugMessageControl(OpenTK.Graphics.ES20.All source, OpenTK.Graphics.ES20.All type, OpenTK.Graphics.ES20.All severity, Int32 count, ref UInt32 ids, bool enabled)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "ids_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.StoreByName("ids_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("ids_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(62);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.DebugSourceControl), typeof(OpenTK.Graphics.ES20.DebugTypeControl), typeof(OpenTK.Graphics.ES20.DebugSeverityControl), typeof(Int32), typeof(UInt32*), typeof(bool));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source"> 
            /// The source of debug messages to enable or disable.
            /// </param>
            /// <param name="type"> 
            /// The type of debug messages to enable or disable.
            /// </param>
            /// <param name="severity"> 
            /// The severity of debug messages to enable or disable.
            /// </param>
            /// <param name="count"> 
            /// The length of the array ids.
            /// </param>
            /// <param name="ids"> 
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </param>
            /// <param name="enabled"> 
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static unsafe void DebugMessageControl(OpenTK.Graphics.ES20.All source, OpenTK.Graphics.ES20.All type, OpenTK.Graphics.ES20.All severity, Int32 count, UInt32* ids, bool enabled)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(62);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.DebugSourceControl), typeof(OpenTK.Graphics.ES20.DebugTypeControl), typeof(OpenTK.Graphics.ES20.DebugSeverityControl), typeof(Int32), typeof(UInt32*), typeof(bool));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source"> 
            /// The source of debug messages to enable or disable.
            /// </param>
            /// <param name="type"> 
            /// The type of debug messages to enable or disable.
            /// </param>
            /// <param name="severity"> 
            /// The severity of debug messages to enable or disable.
            /// </param>
            /// <param name="count"> 
            /// The length of the array ids.
            /// </param>
            /// <param name="ids"> 
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </param>
            /// <param name="enabled"> 
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </param>
            [CLSCompliant(false)]
            public static void DebugMessageControl(OpenTK.Graphics.ES20.DebugSourceControl source, OpenTK.Graphics.ES20.DebugTypeControl type, OpenTK.Graphics.ES20.DebugSeverityControl severity, Int32 count, Int32[] ids, bool enabled)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "ids_pinned");
                        if(ids != null && ids.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("ids_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("ids_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("ids_pinned");
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(62);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.DebugSourceControl), typeof(OpenTK.Graphics.ES20.DebugTypeControl), typeof(OpenTK.Graphics.ES20.DebugSeverityControl), typeof(Int32), typeof(UInt32*), typeof(bool));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source"> 
            /// The source of debug messages to enable or disable.
            /// </param>
            /// <param name="type"> 
            /// The type of debug messages to enable or disable.
            /// </param>
            /// <param name="severity"> 
            /// The severity of debug messages to enable or disable.
            /// </param>
            /// <param name="count"> 
            /// The length of the array ids.
            /// </param>
            /// <param name="ids"> 
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </param>
            /// <param name="enabled"> 
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </param>
            [CLSCompliant(false)]
            public static void DebugMessageControl(OpenTK.Graphics.ES20.DebugSourceControl source, OpenTK.Graphics.ES20.DebugTypeControl type, OpenTK.Graphics.ES20.DebugSeverityControl severity, Int32 count, ref Int32 ids, bool enabled)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "ids_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.StoreByName("ids_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("ids_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(62);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.DebugSourceControl), typeof(OpenTK.Graphics.ES20.DebugTypeControl), typeof(OpenTK.Graphics.ES20.DebugSeverityControl), typeof(Int32), typeof(UInt32*), typeof(bool));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source"> 
            /// The source of debug messages to enable or disable.
            /// </param>
            /// <param name="type"> 
            /// The type of debug messages to enable or disable.
            /// </param>
            /// <param name="severity"> 
            /// The severity of debug messages to enable or disable.
            /// </param>
            /// <param name="count"> 
            /// The length of the array ids.
            /// </param>
            /// <param name="ids"> 
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </param>
            /// <param name="enabled"> 
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void DebugMessageControl(OpenTK.Graphics.ES20.DebugSourceControl source, OpenTK.Graphics.ES20.DebugTypeControl type, OpenTK.Graphics.ES20.DebugSeverityControl severity, Int32 count, Int32* ids, bool enabled)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(62);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.DebugSourceControl), typeof(OpenTK.Graphics.ES20.DebugTypeControl), typeof(OpenTK.Graphics.ES20.DebugSeverityControl), typeof(Int32), typeof(UInt32*), typeof(bool));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source"> 
            /// The source of debug messages to enable or disable.
            /// </param>
            /// <param name="type"> 
            /// The type of debug messages to enable or disable.
            /// </param>
            /// <param name="severity"> 
            /// The severity of debug messages to enable or disable.
            /// </param>
            /// <param name="count"> 
            /// The length of the array ids.
            /// </param>
            /// <param name="ids"> 
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </param>
            /// <param name="enabled"> 
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </param>
            [CLSCompliant(false)]
            public static void DebugMessageControl(OpenTK.Graphics.ES20.DebugSourceControl source, OpenTK.Graphics.ES20.DebugTypeControl type, OpenTK.Graphics.ES20.DebugSeverityControl severity, Int32 count, UInt32[] ids, bool enabled)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "ids_pinned");
                        if(ids != null && ids.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("ids_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("ids_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("ids_pinned");
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(62);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.DebugSourceControl), typeof(OpenTK.Graphics.ES20.DebugTypeControl), typeof(OpenTK.Graphics.ES20.DebugSeverityControl), typeof(Int32), typeof(UInt32*), typeof(bool));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source"> 
            /// The source of debug messages to enable or disable.
            /// </param>
            /// <param name="type"> 
            /// The type of debug messages to enable or disable.
            /// </param>
            /// <param name="severity"> 
            /// The severity of debug messages to enable or disable.
            /// </param>
            /// <param name="count"> 
            /// The length of the array ids.
            /// </param>
            /// <param name="ids"> 
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </param>
            /// <param name="enabled"> 
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </param>
            [CLSCompliant(false)]
            public static void DebugMessageControl(OpenTK.Graphics.ES20.DebugSourceControl source, OpenTK.Graphics.ES20.DebugTypeControl type, OpenTK.Graphics.ES20.DebugSeverityControl severity, Int32 count, ref UInt32 ids, bool enabled)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "ids_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.StoreByName("ids_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("ids_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(62);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.DebugSourceControl), typeof(OpenTK.Graphics.ES20.DebugTypeControl), typeof(OpenTK.Graphics.ES20.DebugSeverityControl), typeof(Int32), typeof(UInt32*), typeof(bool));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source"> 
            /// The source of debug messages to enable or disable.
            /// </param>
            /// <param name="type"> 
            /// The type of debug messages to enable or disable.
            /// </param>
            /// <param name="severity"> 
            /// The severity of debug messages to enable or disable.
            /// </param>
            /// <param name="count"> 
            /// The length of the array ids.
            /// </param>
            /// <param name="ids"> 
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </param>
            /// <param name="enabled"> 
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void DebugMessageControl(OpenTK.Graphics.ES20.DebugSourceControl source, OpenTK.Graphics.ES20.DebugTypeControl type, OpenTK.Graphics.ES20.DebugSeverityControl severity, Int32 count, UInt32* ids, bool enabled)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(62);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.DebugSourceControl), typeof(OpenTK.Graphics.ES20.DebugTypeControl), typeof(OpenTK.Graphics.ES20.DebugSeverityControl), typeof(Int32), typeof(UInt32*), typeof(bool));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Inject an application-supplied message into the debug message queue
            /// </summary>
            /// <param name="source"> 
            /// The source of the debug message to insert.
            /// </param>
            /// <param name="type"> 
            /// The type of the debug message insert.
            /// </param>
            /// <param name="id"> 
            /// The user-supplied identifier of the message to insert.
            /// </param>
            /// <param name="severity"> 
            /// The severity of the debug messages to insert.
            /// </param>
            /// <param name="length"> 
            /// The length string contained in the character array whose address is given by message.
            /// </param>
            /// <param name="buf"> 
            /// The address of a character array containing the message to insert.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void DebugMessageInsert(OpenTK.Graphics.ES20.All source, OpenTK.Graphics.ES20.All type, Int32 id, OpenTK.Graphics.ES20.All severity, Int32 length, String buf)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr buf_string_ptr = MarshalStringToPtr(buf);
                        try {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Load(buf_string_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(64);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.DebugSourceExternal), typeof(OpenTK.Graphics.ES20.DebugType), typeof(UInt32), typeof(OpenTK.Graphics.ES20.DebugSeverity), typeof(Int32), typeof(IntPtr));
                        } finally {
                            FreeStringPtr(buf_string_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Inject an application-supplied message into the debug message queue
            /// </summary>
            /// <param name="source"> 
            /// The source of the debug message to insert.
            /// </param>
            /// <param name="type"> 
            /// The type of the debug message insert.
            /// </param>
            /// <param name="id"> 
            /// The user-supplied identifier of the message to insert.
            /// </param>
            /// <param name="severity"> 
            /// The severity of the debug messages to insert.
            /// </param>
            /// <param name="length"> 
            /// The length string contained in the character array whose address is given by message.
            /// </param>
            /// <param name="buf"> 
            /// The address of a character array containing the message to insert.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void DebugMessageInsert(OpenTK.Graphics.ES20.All source, OpenTK.Graphics.ES20.All type, UInt32 id, OpenTK.Graphics.ES20.All severity, Int32 length, String buf)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr buf_string_ptr = MarshalStringToPtr(buf);
                        try {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Load(buf_string_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(64);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.DebugSourceExternal), typeof(OpenTK.Graphics.ES20.DebugType), typeof(UInt32), typeof(OpenTK.Graphics.ES20.DebugSeverity), typeof(Int32), typeof(IntPtr));
                        } finally {
                            FreeStringPtr(buf_string_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Inject an application-supplied message into the debug message queue
            /// </summary>
            /// <param name="source"> 
            /// The source of the debug message to insert.
            /// </param>
            /// <param name="type"> 
            /// The type of the debug message insert.
            /// </param>
            /// <param name="id"> 
            /// The user-supplied identifier of the message to insert.
            /// </param>
            /// <param name="severity"> 
            /// The severity of the debug messages to insert.
            /// </param>
            /// <param name="length"> 
            /// The length string contained in the character array whose address is given by message.
            /// </param>
            /// <param name="buf"> 
            /// The address of a character array containing the message to insert.
            /// </param>
            [CLSCompliant(false)]
            public static void DebugMessageInsert(OpenTK.Graphics.ES20.DebugSourceExternal source, OpenTK.Graphics.ES20.DebugType type, Int32 id, OpenTK.Graphics.ES20.DebugSeverity severity, Int32 length, String buf)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr buf_string_ptr = MarshalStringToPtr(buf);
                        try {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Load(buf_string_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(64);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.DebugSourceExternal), typeof(OpenTK.Graphics.ES20.DebugType), typeof(UInt32), typeof(OpenTK.Graphics.ES20.DebugSeverity), typeof(Int32), typeof(IntPtr));
                        } finally {
                            FreeStringPtr(buf_string_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Inject an application-supplied message into the debug message queue
            /// </summary>
            /// <param name="source"> 
            /// The source of the debug message to insert.
            /// </param>
            /// <param name="type"> 
            /// The type of the debug message insert.
            /// </param>
            /// <param name="id"> 
            /// The user-supplied identifier of the message to insert.
            /// </param>
            /// <param name="severity"> 
            /// The severity of the debug messages to insert.
            /// </param>
            /// <param name="length"> 
            /// The length string contained in the character array whose address is given by message.
            /// </param>
            /// <param name="buf"> 
            /// The address of a character array containing the message to insert.
            /// </param>
            [CLSCompliant(false)]
            public static void DebugMessageInsert(OpenTK.Graphics.ES20.DebugSourceExternal source, OpenTK.Graphics.ES20.DebugType type, UInt32 id, OpenTK.Graphics.ES20.DebugSeverity severity, Int32 length, String buf)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr buf_string_ptr = MarshalStringToPtr(buf);
                        try {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Load(buf_string_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(64);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.DebugSourceExternal), typeof(OpenTK.Graphics.ES20.DebugType), typeof(UInt32), typeof(OpenTK.Graphics.ES20.DebugSeverity), typeof(Int32), typeof(IntPtr));
                        } finally {
                            FreeStringPtr(buf_string_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count"> 
            /// The number of debug messages to retrieve from the log.
            /// </param>
            /// <param name="bufSize"> 
            /// The size of the buffer whose address is given by messageLog.
            /// </param>
            /// <param name="sources">[length: count] 
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </param>
            /// <param name="types">[length: count] 
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </param>
            /// <param name="ids">[length: count] 
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </param>
            /// <param name="severities">[length: count] 
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </param>
            /// <param name="lengths">[length: count] 
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </param>
            /// <param name="messageLog">[length: bufSize] 
            /// The address of an array of characters that will receive the messages.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static Int32 GetDebugMessageLog(Int32 count, Int32 bufSize, [OutAttribute] OpenTK.Graphics.ES20.All[] sources, [OutAttribute] OpenTK.Graphics.ES20.All[] types, [OutAttribute] Int32[] ids, [OutAttribute] OpenTK.Graphics.ES20.All[] severities, [OutAttribute] Int32[] lengths, [OutAttribute] StringBuilder messageLog)
            {
                unsafe
                {
                    Int32 __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.All& pinned", "sources_pinned");
                        if(sources != null && sources.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("OpenTK.Graphics.ES20.All");
                            Silk.Cil.StoreByName("sources_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("sources_pinned");
                        }
                        Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.All& pinned", "types_pinned");
                        if(types != null && types.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("OpenTK.Graphics.ES20.All");
                            Silk.Cil.StoreByName("types_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("types_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "ids_pinned");
                        if(ids != null && ids.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("ids_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("ids_pinned");
                        }
                        Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.All& pinned", "severities_pinned");
                        if(severities != null && severities.Length != 0)
                        {
                            Silk.Cil.Ldarg(5);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("OpenTK.Graphics.ES20.All");
                            Silk.Cil.StoreByName("severities_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("severities_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "lengths_pinned");
                        if(lengths != null && lengths.Length != 0)
                        {
                            Silk.Cil.Ldarg(6);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("lengths_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("lengths_pinned");
                        }
                        IntPtr messageLog_sb_ptr = IntPtr.Zero;
                        try
                        {
                            messageLog_sb_ptr = Marshal.AllocHGlobal(messageLog.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.LoadByName("sources_pinned");
                            Silk.Cil.LoadByName("types_pinned");
                            Silk.Cil.LoadByName("ids_pinned");
                            Silk.Cil.LoadByName("severities_pinned");
                            Silk.Cil.LoadByName("lengths_pinned");
                            Silk.Cil.Load(messageLog_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(150);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(Int32), typeof(UInt32), typeof(Int32), typeof(OpenTK.Graphics.ES20.DebugSourceExternal*), typeof(OpenTK.Graphics.ES20.DebugType*), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.DebugSeverity*), typeof(Int32*), typeof(IntPtr));
                            Silk.Cil.Store(out __return_result);
                            MarshalPtrToStringBuilder(messageLog_sb_ptr, messageLog);
                        } finally {
                            Marshal.FreeHGlobal(messageLog_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count"> 
            /// The number of debug messages to retrieve from the log.
            /// </param>
            /// <param name="bufSize"> 
            /// The size of the buffer whose address is given by messageLog.
            /// </param>
            /// <param name="sources">[length: count] 
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </param>
            /// <param name="types">[length: count] 
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </param>
            /// <param name="ids">[length: count] 
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </param>
            /// <param name="severities">[length: count] 
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </param>
            /// <param name="lengths">[length: count] 
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </param>
            /// <param name="messageLog">[length: bufSize] 
            /// The address of an array of characters that will receive the messages.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static Int32 GetDebugMessageLog(Int32 count, Int32 bufSize, [OutAttribute] out OpenTK.Graphics.ES20.All sources, [OutAttribute] out OpenTK.Graphics.ES20.All types, [OutAttribute] out Int32 ids, [OutAttribute] out OpenTK.Graphics.ES20.All severities, [OutAttribute] out Int32 lengths, [OutAttribute] StringBuilder messageLog)
            {
                unsafe
                {
                    Int32 __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.All& pinned", "sources_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("sources_pinned");
                        Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.All& pinned", "types_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("types_pinned");
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "ids_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.StoreByName("ids_pinned");
                        Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.All& pinned", "severities_pinned");
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.StoreByName("severities_pinned");
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "lengths_pinned");
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.StoreByName("lengths_pinned");
                        IntPtr messageLog_sb_ptr = IntPtr.Zero;
                        try
                        {
                            messageLog_sb_ptr = Marshal.AllocHGlobal(messageLog.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.LoadByName("sources_pinned");
                            Silk.Cil.Conv_I();
                            Silk.Cil.LoadByName("types_pinned");
                            Silk.Cil.Conv_I();
                            Silk.Cil.LoadByName("ids_pinned");
                            Silk.Cil.Conv_I();
                            Silk.Cil.LoadByName("severities_pinned");
                            Silk.Cil.Conv_I();
                            Silk.Cil.LoadByName("lengths_pinned");
                            Silk.Cil.Conv_I();
                            Silk.Cil.Load(messageLog_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(150);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(Int32), typeof(UInt32), typeof(Int32), typeof(OpenTK.Graphics.ES20.DebugSourceExternal*), typeof(OpenTK.Graphics.ES20.DebugType*), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.DebugSeverity*), typeof(Int32*), typeof(IntPtr));
                            Silk.Cil.Store(out __return_result);
                            MarshalPtrToStringBuilder(messageLog_sb_ptr, messageLog);
                        } finally {
                            Marshal.FreeHGlobal(messageLog_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count"> 
            /// The number of debug messages to retrieve from the log.
            /// </param>
            /// <param name="bufSize"> 
            /// The size of the buffer whose address is given by messageLog.
            /// </param>
            /// <param name="sources">[length: count] 
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </param>
            /// <param name="types">[length: count] 
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </param>
            /// <param name="ids">[length: count] 
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </param>
            /// <param name="severities">[length: count] 
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </param>
            /// <param name="lengths">[length: count] 
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </param>
            /// <param name="messageLog">[length: bufSize] 
            /// The address of an array of characters that will receive the messages.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static unsafe Int32 GetDebugMessageLog(Int32 count, Int32 bufSize, [OutAttribute] OpenTK.Graphics.ES20.All* sources, [OutAttribute] OpenTK.Graphics.ES20.All* types, [OutAttribute] Int32* ids, [OutAttribute] OpenTK.Graphics.ES20.All* severities, [OutAttribute] Int32* lengths, [OutAttribute] StringBuilder messageLog)
            {
                unsafe
                {
                    Int32 __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr messageLog_sb_ptr = IntPtr.Zero;
                        try
                        {
                            messageLog_sb_ptr = Marshal.AllocHGlobal(messageLog.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldarg(5);
                            Silk.Cil.Ldarg(6);
                            Silk.Cil.Load(messageLog_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(150);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(Int32), typeof(UInt32), typeof(Int32), typeof(OpenTK.Graphics.ES20.DebugSourceExternal*), typeof(OpenTK.Graphics.ES20.DebugType*), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.DebugSeverity*), typeof(Int32*), typeof(IntPtr));
                            Silk.Cil.Store(out __return_result);
                            MarshalPtrToStringBuilder(messageLog_sb_ptr, messageLog);
                        } finally {
                            Marshal.FreeHGlobal(messageLog_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count"> 
            /// The number of debug messages to retrieve from the log.
            /// </param>
            /// <param name="bufSize"> 
            /// The size of the buffer whose address is given by messageLog.
            /// </param>
            /// <param name="sources">[length: count] 
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </param>
            /// <param name="types">[length: count] 
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </param>
            /// <param name="ids">[length: count] 
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </param>
            /// <param name="severities">[length: count] 
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </param>
            /// <param name="lengths">[length: count] 
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </param>
            /// <param name="messageLog">[length: bufSize] 
            /// The address of an array of characters that will receive the messages.
            /// </param>
            [CLSCompliant(false)]
            public static Int32 GetDebugMessageLog(Int32 count, Int32 bufSize, [OutAttribute] OpenTK.Graphics.ES20.DebugSourceExternal[] sources, [OutAttribute] OpenTK.Graphics.ES20.DebugType[] types, [OutAttribute] Int32[] ids, [OutAttribute] OpenTK.Graphics.ES20.DebugSeverity[] severities, [OutAttribute] Int32[] lengths, [OutAttribute] StringBuilder messageLog)
            {
                unsafe
                {
                    Int32 __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.DebugSourceExternal& pinned", "sources_pinned");
                        if(sources != null && sources.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("OpenTK.Graphics.ES20.DebugSourceExternal");
                            Silk.Cil.StoreByName("sources_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("sources_pinned");
                        }
                        Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.DebugType& pinned", "types_pinned");
                        if(types != null && types.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("OpenTK.Graphics.ES20.DebugType");
                            Silk.Cil.StoreByName("types_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("types_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "ids_pinned");
                        if(ids != null && ids.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("ids_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("ids_pinned");
                        }
                        Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.DebugSeverity& pinned", "severities_pinned");
                        if(severities != null && severities.Length != 0)
                        {
                            Silk.Cil.Ldarg(5);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("OpenTK.Graphics.ES20.DebugSeverity");
                            Silk.Cil.StoreByName("severities_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("severities_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "lengths_pinned");
                        if(lengths != null && lengths.Length != 0)
                        {
                            Silk.Cil.Ldarg(6);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("lengths_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("lengths_pinned");
                        }
                        IntPtr messageLog_sb_ptr = IntPtr.Zero;
                        try
                        {
                            messageLog_sb_ptr = Marshal.AllocHGlobal(messageLog.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.LoadByName("sources_pinned");
                            Silk.Cil.LoadByName("types_pinned");
                            Silk.Cil.LoadByName("ids_pinned");
                            Silk.Cil.LoadByName("severities_pinned");
                            Silk.Cil.LoadByName("lengths_pinned");
                            Silk.Cil.Load(messageLog_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(150);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(Int32), typeof(UInt32), typeof(Int32), typeof(OpenTK.Graphics.ES20.DebugSourceExternal*), typeof(OpenTK.Graphics.ES20.DebugType*), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.DebugSeverity*), typeof(Int32*), typeof(IntPtr));
                            Silk.Cil.Store(out __return_result);
                            MarshalPtrToStringBuilder(messageLog_sb_ptr, messageLog);
                        } finally {
                            Marshal.FreeHGlobal(messageLog_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count"> 
            /// The number of debug messages to retrieve from the log.
            /// </param>
            /// <param name="bufSize"> 
            /// The size of the buffer whose address is given by messageLog.
            /// </param>
            /// <param name="sources">[length: count] 
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </param>
            /// <param name="types">[length: count] 
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </param>
            /// <param name="ids">[length: count] 
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </param>
            /// <param name="severities">[length: count] 
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </param>
            /// <param name="lengths">[length: count] 
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </param>
            /// <param name="messageLog">[length: bufSize] 
            /// The address of an array of characters that will receive the messages.
            /// </param>
            [CLSCompliant(false)]
            public static Int32 GetDebugMessageLog(Int32 count, Int32 bufSize, [OutAttribute] out OpenTK.Graphics.ES20.DebugSourceExternal sources, [OutAttribute] out OpenTK.Graphics.ES20.DebugType types, [OutAttribute] out Int32 ids, [OutAttribute] out OpenTK.Graphics.ES20.DebugSeverity severities, [OutAttribute] out Int32 lengths, [OutAttribute] StringBuilder messageLog)
            {
                unsafe
                {
                    Int32 __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.DebugSourceExternal& pinned", "sources_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("sources_pinned");
                        Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.DebugType& pinned", "types_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("types_pinned");
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "ids_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.StoreByName("ids_pinned");
                        Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.DebugSeverity& pinned", "severities_pinned");
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.StoreByName("severities_pinned");
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "lengths_pinned");
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.StoreByName("lengths_pinned");
                        IntPtr messageLog_sb_ptr = IntPtr.Zero;
                        try
                        {
                            messageLog_sb_ptr = Marshal.AllocHGlobal(messageLog.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.LoadByName("sources_pinned");
                            Silk.Cil.Conv_I();
                            Silk.Cil.LoadByName("types_pinned");
                            Silk.Cil.Conv_I();
                            Silk.Cil.LoadByName("ids_pinned");
                            Silk.Cil.Conv_I();
                            Silk.Cil.LoadByName("severities_pinned");
                            Silk.Cil.Conv_I();
                            Silk.Cil.LoadByName("lengths_pinned");
                            Silk.Cil.Conv_I();
                            Silk.Cil.Load(messageLog_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(150);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(Int32), typeof(UInt32), typeof(Int32), typeof(OpenTK.Graphics.ES20.DebugSourceExternal*), typeof(OpenTK.Graphics.ES20.DebugType*), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.DebugSeverity*), typeof(Int32*), typeof(IntPtr));
                            Silk.Cil.Store(out __return_result);
                            MarshalPtrToStringBuilder(messageLog_sb_ptr, messageLog);
                        } finally {
                            Marshal.FreeHGlobal(messageLog_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count"> 
            /// The number of debug messages to retrieve from the log.
            /// </param>
            /// <param name="bufSize"> 
            /// The size of the buffer whose address is given by messageLog.
            /// </param>
            /// <param name="sources">[length: count] 
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </param>
            /// <param name="types">[length: count] 
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </param>
            /// <param name="ids">[length: count] 
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </param>
            /// <param name="severities">[length: count] 
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </param>
            /// <param name="lengths">[length: count] 
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </param>
            /// <param name="messageLog">[length: bufSize] 
            /// The address of an array of characters that will receive the messages.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe Int32 GetDebugMessageLog(Int32 count, Int32 bufSize, [OutAttribute] OpenTK.Graphics.ES20.DebugSourceExternal* sources, [OutAttribute] OpenTK.Graphics.ES20.DebugType* types, [OutAttribute] Int32* ids, [OutAttribute] OpenTK.Graphics.ES20.DebugSeverity* severities, [OutAttribute] Int32* lengths, [OutAttribute] StringBuilder messageLog)
            {
                unsafe
                {
                    Int32 __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr messageLog_sb_ptr = IntPtr.Zero;
                        try
                        {
                            messageLog_sb_ptr = Marshal.AllocHGlobal(messageLog.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldarg(5);
                            Silk.Cil.Ldarg(6);
                            Silk.Cil.Load(messageLog_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(150);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(Int32), typeof(UInt32), typeof(Int32), typeof(OpenTK.Graphics.ES20.DebugSourceExternal*), typeof(OpenTK.Graphics.ES20.DebugType*), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.DebugSeverity*), typeof(Int32*), typeof(IntPtr));
                            Silk.Cil.Store(out __return_result);
                            MarshalPtrToStringBuilder(messageLog_sb_ptr, messageLog);
                        } finally {
                            Marshal.FreeHGlobal(messageLog_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count"> 
            /// The number of debug messages to retrieve from the log.
            /// </param>
            /// <param name="bufSize"> 
            /// The size of the buffer whose address is given by messageLog.
            /// </param>
            /// <param name="sources">[length: count] 
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </param>
            /// <param name="types">[length: count] 
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </param>
            /// <param name="ids">[length: count] 
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </param>
            /// <param name="severities">[length: count] 
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </param>
            /// <param name="lengths">[length: count] 
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </param>
            /// <param name="messageLog">[length: bufSize] 
            /// The address of an array of characters that will receive the messages.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static Int32 GetDebugMessageLog(UInt32 count, Int32 bufSize, [OutAttribute] OpenTK.Graphics.ES20.All[] sources, [OutAttribute] OpenTK.Graphics.ES20.All[] types, [OutAttribute] UInt32[] ids, [OutAttribute] OpenTK.Graphics.ES20.All[] severities, [OutAttribute] Int32[] lengths, [OutAttribute] StringBuilder messageLog)
            {
                unsafe
                {
                    Int32 __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.All& pinned", "sources_pinned");
                        if(sources != null && sources.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("OpenTK.Graphics.ES20.All");
                            Silk.Cil.StoreByName("sources_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("sources_pinned");
                        }
                        Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.All& pinned", "types_pinned");
                        if(types != null && types.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("OpenTK.Graphics.ES20.All");
                            Silk.Cil.StoreByName("types_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("types_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "ids_pinned");
                        if(ids != null && ids.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("ids_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("ids_pinned");
                        }
                        Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.All& pinned", "severities_pinned");
                        if(severities != null && severities.Length != 0)
                        {
                            Silk.Cil.Ldarg(5);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("OpenTK.Graphics.ES20.All");
                            Silk.Cil.StoreByName("severities_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("severities_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "lengths_pinned");
                        if(lengths != null && lengths.Length != 0)
                        {
                            Silk.Cil.Ldarg(6);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("lengths_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("lengths_pinned");
                        }
                        IntPtr messageLog_sb_ptr = IntPtr.Zero;
                        try
                        {
                            messageLog_sb_ptr = Marshal.AllocHGlobal(messageLog.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.LoadByName("sources_pinned");
                            Silk.Cil.LoadByName("types_pinned");
                            Silk.Cil.LoadByName("ids_pinned");
                            Silk.Cil.LoadByName("severities_pinned");
                            Silk.Cil.LoadByName("lengths_pinned");
                            Silk.Cil.Load(messageLog_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(150);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(Int32), typeof(UInt32), typeof(Int32), typeof(OpenTK.Graphics.ES20.DebugSourceExternal*), typeof(OpenTK.Graphics.ES20.DebugType*), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.DebugSeverity*), typeof(Int32*), typeof(IntPtr));
                            Silk.Cil.Store(out __return_result);
                            MarshalPtrToStringBuilder(messageLog_sb_ptr, messageLog);
                        } finally {
                            Marshal.FreeHGlobal(messageLog_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count"> 
            /// The number of debug messages to retrieve from the log.
            /// </param>
            /// <param name="bufSize"> 
            /// The size of the buffer whose address is given by messageLog.
            /// </param>
            /// <param name="sources">[length: count] 
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </param>
            /// <param name="types">[length: count] 
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </param>
            /// <param name="ids">[length: count] 
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </param>
            /// <param name="severities">[length: count] 
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </param>
            /// <param name="lengths">[length: count] 
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </param>
            /// <param name="messageLog">[length: bufSize] 
            /// The address of an array of characters that will receive the messages.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static Int32 GetDebugMessageLog(UInt32 count, Int32 bufSize, [OutAttribute] out OpenTK.Graphics.ES20.All sources, [OutAttribute] out OpenTK.Graphics.ES20.All types, [OutAttribute] out UInt32 ids, [OutAttribute] out OpenTK.Graphics.ES20.All severities, [OutAttribute] out Int32 lengths, [OutAttribute] StringBuilder messageLog)
            {
                unsafe
                {
                    Int32 __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.All& pinned", "sources_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("sources_pinned");
                        Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.All& pinned", "types_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("types_pinned");
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "ids_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.StoreByName("ids_pinned");
                        Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.All& pinned", "severities_pinned");
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.StoreByName("severities_pinned");
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "lengths_pinned");
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.StoreByName("lengths_pinned");
                        IntPtr messageLog_sb_ptr = IntPtr.Zero;
                        try
                        {
                            messageLog_sb_ptr = Marshal.AllocHGlobal(messageLog.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.LoadByName("sources_pinned");
                            Silk.Cil.Conv_I();
                            Silk.Cil.LoadByName("types_pinned");
                            Silk.Cil.Conv_I();
                            Silk.Cil.LoadByName("ids_pinned");
                            Silk.Cil.Conv_I();
                            Silk.Cil.LoadByName("severities_pinned");
                            Silk.Cil.Conv_I();
                            Silk.Cil.LoadByName("lengths_pinned");
                            Silk.Cil.Conv_I();
                            Silk.Cil.Load(messageLog_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(150);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(Int32), typeof(UInt32), typeof(Int32), typeof(OpenTK.Graphics.ES20.DebugSourceExternal*), typeof(OpenTK.Graphics.ES20.DebugType*), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.DebugSeverity*), typeof(Int32*), typeof(IntPtr));
                            Silk.Cil.Store(out __return_result);
                            MarshalPtrToStringBuilder(messageLog_sb_ptr, messageLog);
                        } finally {
                            Marshal.FreeHGlobal(messageLog_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count"> 
            /// The number of debug messages to retrieve from the log.
            /// </param>
            /// <param name="bufSize"> 
            /// The size of the buffer whose address is given by messageLog.
            /// </param>
            /// <param name="sources">[length: count] 
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </param>
            /// <param name="types">[length: count] 
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </param>
            /// <param name="ids">[length: count] 
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </param>
            /// <param name="severities">[length: count] 
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </param>
            /// <param name="lengths">[length: count] 
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </param>
            /// <param name="messageLog">[length: bufSize] 
            /// The address of an array of characters that will receive the messages.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static unsafe Int32 GetDebugMessageLog(UInt32 count, Int32 bufSize, [OutAttribute] OpenTK.Graphics.ES20.All* sources, [OutAttribute] OpenTK.Graphics.ES20.All* types, [OutAttribute] UInt32* ids, [OutAttribute] OpenTK.Graphics.ES20.All* severities, [OutAttribute] Int32* lengths, [OutAttribute] StringBuilder messageLog)
            {
                unsafe
                {
                    Int32 __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr messageLog_sb_ptr = IntPtr.Zero;
                        try
                        {
                            messageLog_sb_ptr = Marshal.AllocHGlobal(messageLog.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldarg(5);
                            Silk.Cil.Ldarg(6);
                            Silk.Cil.Load(messageLog_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(150);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(Int32), typeof(UInt32), typeof(Int32), typeof(OpenTK.Graphics.ES20.DebugSourceExternal*), typeof(OpenTK.Graphics.ES20.DebugType*), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.DebugSeverity*), typeof(Int32*), typeof(IntPtr));
                            Silk.Cil.Store(out __return_result);
                            MarshalPtrToStringBuilder(messageLog_sb_ptr, messageLog);
                        } finally {
                            Marshal.FreeHGlobal(messageLog_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count"> 
            /// The number of debug messages to retrieve from the log.
            /// </param>
            /// <param name="bufSize"> 
            /// The size of the buffer whose address is given by messageLog.
            /// </param>
            /// <param name="sources">[length: count] 
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </param>
            /// <param name="types">[length: count] 
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </param>
            /// <param name="ids">[length: count] 
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </param>
            /// <param name="severities">[length: count] 
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </param>
            /// <param name="lengths">[length: count] 
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </param>
            /// <param name="messageLog">[length: bufSize] 
            /// The address of an array of characters that will receive the messages.
            /// </param>
            [CLSCompliant(false)]
            public static Int32 GetDebugMessageLog(UInt32 count, Int32 bufSize, [OutAttribute] OpenTK.Graphics.ES20.DebugSourceExternal[] sources, [OutAttribute] OpenTK.Graphics.ES20.DebugType[] types, [OutAttribute] UInt32[] ids, [OutAttribute] OpenTK.Graphics.ES20.DebugSeverity[] severities, [OutAttribute] Int32[] lengths, [OutAttribute] StringBuilder messageLog)
            {
                unsafe
                {
                    Int32 __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.DebugSourceExternal& pinned", "sources_pinned");
                        if(sources != null && sources.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("OpenTK.Graphics.ES20.DebugSourceExternal");
                            Silk.Cil.StoreByName("sources_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("sources_pinned");
                        }
                        Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.DebugType& pinned", "types_pinned");
                        if(types != null && types.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("OpenTK.Graphics.ES20.DebugType");
                            Silk.Cil.StoreByName("types_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("types_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "ids_pinned");
                        if(ids != null && ids.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("ids_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("ids_pinned");
                        }
                        Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.DebugSeverity& pinned", "severities_pinned");
                        if(severities != null && severities.Length != 0)
                        {
                            Silk.Cil.Ldarg(5);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("OpenTK.Graphics.ES20.DebugSeverity");
                            Silk.Cil.StoreByName("severities_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("severities_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "lengths_pinned");
                        if(lengths != null && lengths.Length != 0)
                        {
                            Silk.Cil.Ldarg(6);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("lengths_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("lengths_pinned");
                        }
                        IntPtr messageLog_sb_ptr = IntPtr.Zero;
                        try
                        {
                            messageLog_sb_ptr = Marshal.AllocHGlobal(messageLog.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.LoadByName("sources_pinned");
                            Silk.Cil.LoadByName("types_pinned");
                            Silk.Cil.LoadByName("ids_pinned");
                            Silk.Cil.LoadByName("severities_pinned");
                            Silk.Cil.LoadByName("lengths_pinned");
                            Silk.Cil.Load(messageLog_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(150);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(Int32), typeof(UInt32), typeof(Int32), typeof(OpenTK.Graphics.ES20.DebugSourceExternal*), typeof(OpenTK.Graphics.ES20.DebugType*), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.DebugSeverity*), typeof(Int32*), typeof(IntPtr));
                            Silk.Cil.Store(out __return_result);
                            MarshalPtrToStringBuilder(messageLog_sb_ptr, messageLog);
                        } finally {
                            Marshal.FreeHGlobal(messageLog_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count"> 
            /// The number of debug messages to retrieve from the log.
            /// </param>
            /// <param name="bufSize"> 
            /// The size of the buffer whose address is given by messageLog.
            /// </param>
            /// <param name="sources">[length: count] 
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </param>
            /// <param name="types">[length: count] 
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </param>
            /// <param name="ids">[length: count] 
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </param>
            /// <param name="severities">[length: count] 
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </param>
            /// <param name="lengths">[length: count] 
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </param>
            /// <param name="messageLog">[length: bufSize] 
            /// The address of an array of characters that will receive the messages.
            /// </param>
            [CLSCompliant(false)]
            public static Int32 GetDebugMessageLog(UInt32 count, Int32 bufSize, [OutAttribute] out OpenTK.Graphics.ES20.DebugSourceExternal sources, [OutAttribute] out OpenTK.Graphics.ES20.DebugType types, [OutAttribute] out UInt32 ids, [OutAttribute] out OpenTK.Graphics.ES20.DebugSeverity severities, [OutAttribute] out Int32 lengths, [OutAttribute] StringBuilder messageLog)
            {
                unsafe
                {
                    Int32 __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.DebugSourceExternal& pinned", "sources_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("sources_pinned");
                        Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.DebugType& pinned", "types_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("types_pinned");
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "ids_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.StoreByName("ids_pinned");
                        Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.DebugSeverity& pinned", "severities_pinned");
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.StoreByName("severities_pinned");
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "lengths_pinned");
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.StoreByName("lengths_pinned");
                        IntPtr messageLog_sb_ptr = IntPtr.Zero;
                        try
                        {
                            messageLog_sb_ptr = Marshal.AllocHGlobal(messageLog.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.LoadByName("sources_pinned");
                            Silk.Cil.Conv_I();
                            Silk.Cil.LoadByName("types_pinned");
                            Silk.Cil.Conv_I();
                            Silk.Cil.LoadByName("ids_pinned");
                            Silk.Cil.Conv_I();
                            Silk.Cil.LoadByName("severities_pinned");
                            Silk.Cil.Conv_I();
                            Silk.Cil.LoadByName("lengths_pinned");
                            Silk.Cil.Conv_I();
                            Silk.Cil.Load(messageLog_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(150);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(Int32), typeof(UInt32), typeof(Int32), typeof(OpenTK.Graphics.ES20.DebugSourceExternal*), typeof(OpenTK.Graphics.ES20.DebugType*), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.DebugSeverity*), typeof(Int32*), typeof(IntPtr));
                            Silk.Cil.Store(out __return_result);
                            MarshalPtrToStringBuilder(messageLog_sb_ptr, messageLog);
                        } finally {
                            Marshal.FreeHGlobal(messageLog_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count"> 
            /// The number of debug messages to retrieve from the log.
            /// </param>
            /// <param name="bufSize"> 
            /// The size of the buffer whose address is given by messageLog.
            /// </param>
            /// <param name="sources">[length: count] 
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </param>
            /// <param name="types">[length: count] 
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </param>
            /// <param name="ids">[length: count] 
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </param>
            /// <param name="severities">[length: count] 
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </param>
            /// <param name="lengths">[length: count] 
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </param>
            /// <param name="messageLog">[length: bufSize] 
            /// The address of an array of characters that will receive the messages.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe Int32 GetDebugMessageLog(UInt32 count, Int32 bufSize, [OutAttribute] OpenTK.Graphics.ES20.DebugSourceExternal* sources, [OutAttribute] OpenTK.Graphics.ES20.DebugType* types, [OutAttribute] UInt32* ids, [OutAttribute] OpenTK.Graphics.ES20.DebugSeverity* severities, [OutAttribute] Int32* lengths, [OutAttribute] StringBuilder messageLog)
            {
                unsafe
                {
                    Int32 __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr messageLog_sb_ptr = IntPtr.Zero;
                        try
                        {
                            messageLog_sb_ptr = Marshal.AllocHGlobal(messageLog.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldarg(5);
                            Silk.Cil.Ldarg(6);
                            Silk.Cil.Load(messageLog_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(150);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(Int32), typeof(UInt32), typeof(Int32), typeof(OpenTK.Graphics.ES20.DebugSourceExternal*), typeof(OpenTK.Graphics.ES20.DebugType*), typeof(UInt32*), typeof(OpenTK.Graphics.ES20.DebugSeverity*), typeof(Int32*), typeof(IntPtr));
                            Silk.Cil.Store(out __return_result);
                            MarshalPtrToStringBuilder(messageLog_sb_ptr, messageLog);
                        } finally {
                            Marshal.FreeHGlobal(messageLog_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_robustness]</summary>
            public static OpenTK.Graphics.ES20.All GetGraphicsResetStatus()
            {
                unsafe
                {
                    OpenTK.Graphics.ES20.All __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(160);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(OpenTK.Graphics.ES20.All));
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params"></param>
            [CLSCompliant(false)]
            public static void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] Single[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Single");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(167);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params"></param>
            [CLSCompliant(false)]
            public static void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] out Single @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(167);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params"></param>
            [CLSCompliant(false)]
            public static unsafe void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] Single* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(167);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params"></param>
            [CLSCompliant(false)]
            public static void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] Single[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Single");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(167);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params"></param>
            [CLSCompliant(false)]
            public static void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] out Single @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "params_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(167);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params"></param>
            [CLSCompliant(false)]
            public static unsafe void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] Single* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(167);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params"></param>
            [CLSCompliant(false)]
            public static void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(170);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params"></param>
            [CLSCompliant(false)]
            public static void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(170);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params"></param>
            [CLSCompliant(false)]
            public static unsafe void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] Int32* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(170);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params"></param>
            [CLSCompliant(false)]
            public static void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(170);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params"></param>
            [CLSCompliant(false)]
            public static void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(170);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params"></param>
            [CLSCompliant(false)]
            public static unsafe void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] Int32* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(170);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params"></param>
            [CLSCompliant(false)]
            public static void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] UInt32[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(172);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params"></param>
            [CLSCompliant(false)]
            public static void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] out UInt32 @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "params_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(172);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params"></param>
            [CLSCompliant(false)]
            public static unsafe void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] UInt32* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(172);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="identifier"> 
            /// The namespace from which the name of the object is allocated.
            /// </param>
            /// <param name="name"> 
            /// The name of the object whose label to retrieve.
            /// </param>
            /// <param name="bufSize"> 
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length"> 
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">[length: bufSize] 
            /// The address of a string that will receive the object label.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void GetObjectLabel(OpenTK.Graphics.ES20.All identifier, Int32 name, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder label)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        if(length != null && length.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        IntPtr label_sb_ptr = IntPtr.Zero;
                        try
                        {
                            label_sb_ptr = Marshal.AllocHGlobal(label.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.LoadByName("length_pinned");
                            Silk.Cil.Load(label_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(175);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.ObjectLabelIdentifier), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(label_sb_ptr, label);
                        } finally {
                            Marshal.FreeHGlobal(label_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="identifier"> 
            /// The namespace from which the name of the object is allocated.
            /// </param>
            /// <param name="name"> 
            /// The name of the object whose label to retrieve.
            /// </param>
            /// <param name="bufSize"> 
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length"> 
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">[length: bufSize] 
            /// The address of a string that will receive the object label.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void GetObjectLabel(OpenTK.Graphics.ES20.All identifier, Int32 name, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder label)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("length_pinned");
                        IntPtr label_sb_ptr = IntPtr.Zero;
                        try
                        {
                            label_sb_ptr = Marshal.AllocHGlobal(label.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.LoadByName("length_pinned");
                            Silk.Cil.Conv_I();
                            Silk.Cil.Load(label_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(175);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.ObjectLabelIdentifier), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(label_sb_ptr, label);
                        } finally {
                            Marshal.FreeHGlobal(label_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="identifier"> 
            /// The namespace from which the name of the object is allocated.
            /// </param>
            /// <param name="name"> 
            /// The name of the object whose label to retrieve.
            /// </param>
            /// <param name="bufSize"> 
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length"> 
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">[length: bufSize] 
            /// The address of a string that will receive the object label.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static unsafe void GetObjectLabel(OpenTK.Graphics.ES20.All identifier, Int32 name, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder label)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr label_sb_ptr = IntPtr.Zero;
                        try
                        {
                            label_sb_ptr = Marshal.AllocHGlobal(label.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Load(label_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(175);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.ObjectLabelIdentifier), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(label_sb_ptr, label);
                        } finally {
                            Marshal.FreeHGlobal(label_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="identifier"> 
            /// The namespace from which the name of the object is allocated.
            /// </param>
            /// <param name="name"> 
            /// The name of the object whose label to retrieve.
            /// </param>
            /// <param name="bufSize"> 
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length"> 
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">[length: bufSize] 
            /// The address of a string that will receive the object label.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void GetObjectLabel(OpenTK.Graphics.ES20.All identifier, UInt32 name, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder label)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        if(length != null && length.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        IntPtr label_sb_ptr = IntPtr.Zero;
                        try
                        {
                            label_sb_ptr = Marshal.AllocHGlobal(label.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.LoadByName("length_pinned");
                            Silk.Cil.Load(label_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(175);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.ObjectLabelIdentifier), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(label_sb_ptr, label);
                        } finally {
                            Marshal.FreeHGlobal(label_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="identifier"> 
            /// The namespace from which the name of the object is allocated.
            /// </param>
            /// <param name="name"> 
            /// The name of the object whose label to retrieve.
            /// </param>
            /// <param name="bufSize"> 
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length"> 
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">[length: bufSize] 
            /// The address of a string that will receive the object label.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void GetObjectLabel(OpenTK.Graphics.ES20.All identifier, UInt32 name, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder label)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("length_pinned");
                        IntPtr label_sb_ptr = IntPtr.Zero;
                        try
                        {
                            label_sb_ptr = Marshal.AllocHGlobal(label.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.LoadByName("length_pinned");
                            Silk.Cil.Conv_I();
                            Silk.Cil.Load(label_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(175);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.ObjectLabelIdentifier), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(label_sb_ptr, label);
                        } finally {
                            Marshal.FreeHGlobal(label_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="identifier"> 
            /// The namespace from which the name of the object is allocated.
            /// </param>
            /// <param name="name"> 
            /// The name of the object whose label to retrieve.
            /// </param>
            /// <param name="bufSize"> 
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length"> 
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">[length: bufSize] 
            /// The address of a string that will receive the object label.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static unsafe void GetObjectLabel(OpenTK.Graphics.ES20.All identifier, UInt32 name, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder label)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr label_sb_ptr = IntPtr.Zero;
                        try
                        {
                            label_sb_ptr = Marshal.AllocHGlobal(label.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Load(label_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(175);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.ObjectLabelIdentifier), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(label_sb_ptr, label);
                        } finally {
                            Marshal.FreeHGlobal(label_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="identifier"> 
            /// The namespace from which the name of the object is allocated.
            /// </param>
            /// <param name="name"> 
            /// The name of the object whose label to retrieve.
            /// </param>
            /// <param name="bufSize"> 
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length"> 
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">[length: bufSize] 
            /// The address of a string that will receive the object label.
            /// </param>
            [CLSCompliant(false)]
            public static void GetObjectLabel(OpenTK.Graphics.ES20.ObjectLabelIdentifier identifier, Int32 name, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder label)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        if(length != null && length.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        IntPtr label_sb_ptr = IntPtr.Zero;
                        try
                        {
                            label_sb_ptr = Marshal.AllocHGlobal(label.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.LoadByName("length_pinned");
                            Silk.Cil.Load(label_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(175);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.ObjectLabelIdentifier), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(label_sb_ptr, label);
                        } finally {
                            Marshal.FreeHGlobal(label_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="identifier"> 
            /// The namespace from which the name of the object is allocated.
            /// </param>
            /// <param name="name"> 
            /// The name of the object whose label to retrieve.
            /// </param>
            /// <param name="bufSize"> 
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length"> 
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">[length: bufSize] 
            /// The address of a string that will receive the object label.
            /// </param>
            [CLSCompliant(false)]
            public static void GetObjectLabel(OpenTK.Graphics.ES20.ObjectLabelIdentifier identifier, Int32 name, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder label)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("length_pinned");
                        IntPtr label_sb_ptr = IntPtr.Zero;
                        try
                        {
                            label_sb_ptr = Marshal.AllocHGlobal(label.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.LoadByName("length_pinned");
                            Silk.Cil.Conv_I();
                            Silk.Cil.Load(label_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(175);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.ObjectLabelIdentifier), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(label_sb_ptr, label);
                        } finally {
                            Marshal.FreeHGlobal(label_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="identifier"> 
            /// The namespace from which the name of the object is allocated.
            /// </param>
            /// <param name="name"> 
            /// The name of the object whose label to retrieve.
            /// </param>
            /// <param name="bufSize"> 
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length"> 
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">[length: bufSize] 
            /// The address of a string that will receive the object label.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void GetObjectLabel(OpenTK.Graphics.ES20.ObjectLabelIdentifier identifier, Int32 name, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder label)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr label_sb_ptr = IntPtr.Zero;
                        try
                        {
                            label_sb_ptr = Marshal.AllocHGlobal(label.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Load(label_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(175);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.ObjectLabelIdentifier), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(label_sb_ptr, label);
                        } finally {
                            Marshal.FreeHGlobal(label_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="identifier"> 
            /// The namespace from which the name of the object is allocated.
            /// </param>
            /// <param name="name"> 
            /// The name of the object whose label to retrieve.
            /// </param>
            /// <param name="bufSize"> 
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length"> 
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">[length: bufSize] 
            /// The address of a string that will receive the object label.
            /// </param>
            [CLSCompliant(false)]
            public static void GetObjectLabel(OpenTK.Graphics.ES20.ObjectLabelIdentifier identifier, UInt32 name, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder label)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        if(length != null && length.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        IntPtr label_sb_ptr = IntPtr.Zero;
                        try
                        {
                            label_sb_ptr = Marshal.AllocHGlobal(label.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.LoadByName("length_pinned");
                            Silk.Cil.Load(label_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(175);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.ObjectLabelIdentifier), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(label_sb_ptr, label);
                        } finally {
                            Marshal.FreeHGlobal(label_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="identifier"> 
            /// The namespace from which the name of the object is allocated.
            /// </param>
            /// <param name="name"> 
            /// The name of the object whose label to retrieve.
            /// </param>
            /// <param name="bufSize"> 
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length"> 
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">[length: bufSize] 
            /// The address of a string that will receive the object label.
            /// </param>
            [CLSCompliant(false)]
            public static void GetObjectLabel(OpenTK.Graphics.ES20.ObjectLabelIdentifier identifier, UInt32 name, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder label)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("length_pinned");
                        IntPtr label_sb_ptr = IntPtr.Zero;
                        try
                        {
                            label_sb_ptr = Marshal.AllocHGlobal(label.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.LoadByName("length_pinned");
                            Silk.Cil.Conv_I();
                            Silk.Cil.Load(label_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(175);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.ObjectLabelIdentifier), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(label_sb_ptr, label);
                        } finally {
                            Marshal.FreeHGlobal(label_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="identifier"> 
            /// The namespace from which the name of the object is allocated.
            /// </param>
            /// <param name="name"> 
            /// The name of the object whose label to retrieve.
            /// </param>
            /// <param name="bufSize"> 
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length"> 
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">[length: bufSize] 
            /// The address of a string that will receive the object label.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void GetObjectLabel(OpenTK.Graphics.ES20.ObjectLabelIdentifier identifier, UInt32 name, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder label)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr label_sb_ptr = IntPtr.Zero;
                        try
                        {
                            label_sb_ptr = Marshal.AllocHGlobal(label.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Load(label_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(175);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.ObjectLabelIdentifier), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(label_sb_ptr, label);
                        } finally {
                            Marshal.FreeHGlobal(label_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr"> 
            /// The name of the sync object whose label to retrieve.
            /// </param>
            /// <param name="bufSize"> 
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">[length: 1] 
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">[length: bufSize] 
            /// The address of a string that will receive the object label.
            /// </param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void GetObjectPtrLabel(IntPtr ptr, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder label)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        if(length != null && length.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        IntPtr label_sb_ptr = IntPtr.Zero;
                        try
                        {
                            label_sb_ptr = Marshal.AllocHGlobal(label.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.LoadByName("length_pinned");
                            Silk.Cil.Load(label_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(177);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(IntPtr), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(label_sb_ptr, label);
                        } finally {
                            Marshal.FreeHGlobal(label_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr"> 
            /// The name of the sync object whose label to retrieve.
            /// </param>
            /// <param name="bufSize"> 
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">[length: 1] 
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">[length: bufSize] 
            /// The address of a string that will receive the object label.
            /// </param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void GetObjectPtrLabel(IntPtr ptr, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder label)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("length_pinned");
                        IntPtr label_sb_ptr = IntPtr.Zero;
                        try
                        {
                            label_sb_ptr = Marshal.AllocHGlobal(label.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.LoadByName("length_pinned");
                            Silk.Cil.Conv_I();
                            Silk.Cil.Load(label_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(177);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(IntPtr), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(label_sb_ptr, label);
                        } finally {
                            Marshal.FreeHGlobal(label_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr"> 
            /// The name of the sync object whose label to retrieve.
            /// </param>
            /// <param name="bufSize"> 
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">[length: 1] 
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">[length: bufSize] 
            /// The address of a string that will receive the object label.
            /// </param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static unsafe void GetObjectPtrLabel(IntPtr ptr, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder label)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr label_sb_ptr = IntPtr.Zero;
                        try
                        {
                            label_sb_ptr = Marshal.AllocHGlobal(label.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Load(label_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(177);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(IntPtr), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(label_sb_ptr, label);
                        } finally {
                            Marshal.FreeHGlobal(label_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr"> 
            /// The name of the sync object whose label to retrieve.
            /// </param>
            /// <param name="bufSize"> 
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">[length: 1] 
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">[length: bufSize] 
            /// The address of a string that will receive the object label.
            /// </param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[] ptr, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder label)
                where T0 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T0& pinned", "ptr_pinned");
                        if(ptr != null && ptr.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T0");
                            Silk.Cil.StoreByName("ptr_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("ptr_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        if(length != null && length.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        IntPtr label_sb_ptr = IntPtr.Zero;
                        try
                        {
                            label_sb_ptr = Marshal.AllocHGlobal(label.Capacity + 1);
                            Silk.Cil.LoadByName("ptr_pinned");
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.LoadByName("length_pinned");
                            Silk.Cil.Load(label_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(177);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(IntPtr), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(label_sb_ptr, label);
                        } finally {
                            Marshal.FreeHGlobal(label_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr"> 
            /// The name of the sync object whose label to retrieve.
            /// </param>
            /// <param name="bufSize"> 
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">[length: 1] 
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">[length: bufSize] 
            /// The address of a string that will receive the object label.
            /// </param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[] ptr, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder label)
                where T0 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T0& pinned", "ptr_pinned");
                        if(ptr != null && ptr.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T0");
                            Silk.Cil.StoreByName("ptr_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("ptr_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("length_pinned");
                        IntPtr label_sb_ptr = IntPtr.Zero;
                        try
                        {
                            label_sb_ptr = Marshal.AllocHGlobal(label.Capacity + 1);
                            Silk.Cil.LoadByName("ptr_pinned");
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.LoadByName("length_pinned");
                            Silk.Cil.Conv_I();
                            Silk.Cil.Load(label_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(177);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(IntPtr), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(label_sb_ptr, label);
                        } finally {
                            Marshal.FreeHGlobal(label_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr"> 
            /// The name of the sync object whose label to retrieve.
            /// </param>
            /// <param name="bufSize"> 
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">[length: 1] 
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">[length: bufSize] 
            /// The address of a string that will receive the object label.
            /// </param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static unsafe void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[] ptr, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder label)
                where T0 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T0& pinned", "ptr_pinned");
                        if(ptr != null && ptr.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T0");
                            Silk.Cil.StoreByName("ptr_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("ptr_pinned");
                        }
                        IntPtr label_sb_ptr = IntPtr.Zero;
                        try
                        {
                            label_sb_ptr = Marshal.AllocHGlobal(label.Capacity + 1);
                            Silk.Cil.LoadByName("ptr_pinned");
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Load(label_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(177);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(IntPtr), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(label_sb_ptr, label);
                        } finally {
                            Marshal.FreeHGlobal(label_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr"> 
            /// The name of the sync object whose label to retrieve.
            /// </param>
            /// <param name="bufSize"> 
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">[length: 1] 
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">[length: bufSize] 
            /// The address of a string that will receive the object label.
            /// </param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,] ptr, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder label)
                where T0 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T0& pinned", "ptr_pinned");
                        if(ptr != null && ptr.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T0[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("ptr_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("ptr_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        if(length != null && length.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        IntPtr label_sb_ptr = IntPtr.Zero;
                        try
                        {
                            label_sb_ptr = Marshal.AllocHGlobal(label.Capacity + 1);
                            Silk.Cil.LoadByName("ptr_pinned");
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.LoadByName("length_pinned");
                            Silk.Cil.Load(label_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(177);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(IntPtr), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(label_sb_ptr, label);
                        } finally {
                            Marshal.FreeHGlobal(label_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr"> 
            /// The name of the sync object whose label to retrieve.
            /// </param>
            /// <param name="bufSize"> 
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">[length: 1] 
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">[length: bufSize] 
            /// The address of a string that will receive the object label.
            /// </param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,] ptr, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder label)
                where T0 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T0& pinned", "ptr_pinned");
                        if(ptr != null && ptr.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T0[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("ptr_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("ptr_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("length_pinned");
                        IntPtr label_sb_ptr = IntPtr.Zero;
                        try
                        {
                            label_sb_ptr = Marshal.AllocHGlobal(label.Capacity + 1);
                            Silk.Cil.LoadByName("ptr_pinned");
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.LoadByName("length_pinned");
                            Silk.Cil.Conv_I();
                            Silk.Cil.Load(label_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(177);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(IntPtr), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(label_sb_ptr, label);
                        } finally {
                            Marshal.FreeHGlobal(label_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr"> 
            /// The name of the sync object whose label to retrieve.
            /// </param>
            /// <param name="bufSize"> 
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">[length: 1] 
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">[length: bufSize] 
            /// The address of a string that will receive the object label.
            /// </param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static unsafe void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,] ptr, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder label)
                where T0 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T0& pinned", "ptr_pinned");
                        if(ptr != null && ptr.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T0[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("ptr_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("ptr_pinned");
                        }
                        IntPtr label_sb_ptr = IntPtr.Zero;
                        try
                        {
                            label_sb_ptr = Marshal.AllocHGlobal(label.Capacity + 1);
                            Silk.Cil.LoadByName("ptr_pinned");
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Load(label_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(177);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(IntPtr), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(label_sb_ptr, label);
                        } finally {
                            Marshal.FreeHGlobal(label_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr"> 
            /// The name of the sync object whose label to retrieve.
            /// </param>
            /// <param name="bufSize"> 
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">[length: 1] 
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">[length: bufSize] 
            /// The address of a string that will receive the object label.
            /// </param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,,] ptr, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder label)
                where T0 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T0& pinned", "ptr_pinned");
                        if(ptr != null && ptr.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T0[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("ptr_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("ptr_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        if(length != null && length.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        IntPtr label_sb_ptr = IntPtr.Zero;
                        try
                        {
                            label_sb_ptr = Marshal.AllocHGlobal(label.Capacity + 1);
                            Silk.Cil.LoadByName("ptr_pinned");
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.LoadByName("length_pinned");
                            Silk.Cil.Load(label_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(177);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(IntPtr), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(label_sb_ptr, label);
                        } finally {
                            Marshal.FreeHGlobal(label_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr"> 
            /// The name of the sync object whose label to retrieve.
            /// </param>
            /// <param name="bufSize"> 
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">[length: 1] 
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">[length: bufSize] 
            /// The address of a string that will receive the object label.
            /// </param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,,] ptr, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder label)
                where T0 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T0& pinned", "ptr_pinned");
                        if(ptr != null && ptr.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T0[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("ptr_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("ptr_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("length_pinned");
                        IntPtr label_sb_ptr = IntPtr.Zero;
                        try
                        {
                            label_sb_ptr = Marshal.AllocHGlobal(label.Capacity + 1);
                            Silk.Cil.LoadByName("ptr_pinned");
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.LoadByName("length_pinned");
                            Silk.Cil.Conv_I();
                            Silk.Cil.Load(label_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(177);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(IntPtr), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(label_sb_ptr, label);
                        } finally {
                            Marshal.FreeHGlobal(label_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr"> 
            /// The name of the sync object whose label to retrieve.
            /// </param>
            /// <param name="bufSize"> 
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">[length: 1] 
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">[length: bufSize] 
            /// The address of a string that will receive the object label.
            /// </param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static unsafe void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,,] ptr, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder label)
                where T0 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T0& pinned", "ptr_pinned");
                        if(ptr != null && ptr.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T0[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("ptr_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("ptr_pinned");
                        }
                        IntPtr label_sb_ptr = IntPtr.Zero;
                        try
                        {
                            label_sb_ptr = Marshal.AllocHGlobal(label.Capacity + 1);
                            Silk.Cil.LoadByName("ptr_pinned");
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Load(label_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(177);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(IntPtr), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(label_sb_ptr, label);
                        } finally {
                            Marshal.FreeHGlobal(label_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr"> 
            /// The name of the sync object whose label to retrieve.
            /// </param>
            /// <param name="bufSize"> 
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">[length: 1] 
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">[length: bufSize] 
            /// The address of a string that will receive the object label.
            /// </param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] ref T0 ptr, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder label)
                where T0 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T0& pinned", "ptr_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("ptr_pinned");
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        if(length != null && length.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        IntPtr label_sb_ptr = IntPtr.Zero;
                        try
                        {
                            label_sb_ptr = Marshal.AllocHGlobal(label.Capacity + 1);
                            Silk.Cil.LoadByName("ptr_pinned");
                            Silk.Cil.Conv_I();
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.LoadByName("length_pinned");
                            Silk.Cil.Load(label_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(177);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(IntPtr), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(label_sb_ptr, label);
                        } finally {
                            Marshal.FreeHGlobal(label_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr"> 
            /// The name of the sync object whose label to retrieve.
            /// </param>
            /// <param name="bufSize"> 
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">[length: 1] 
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">[length: bufSize] 
            /// The address of a string that will receive the object label.
            /// </param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] ref T0 ptr, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder label)
                where T0 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T0& pinned", "ptr_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("ptr_pinned");
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("length_pinned");
                        IntPtr label_sb_ptr = IntPtr.Zero;
                        try
                        {
                            label_sb_ptr = Marshal.AllocHGlobal(label.Capacity + 1);
                            Silk.Cil.LoadByName("ptr_pinned");
                            Silk.Cil.Conv_I();
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.LoadByName("length_pinned");
                            Silk.Cil.Conv_I();
                            Silk.Cil.Load(label_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(177);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(IntPtr), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(label_sb_ptr, label);
                        } finally {
                            Marshal.FreeHGlobal(label_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr"> 
            /// The name of the sync object whose label to retrieve.
            /// </param>
            /// <param name="bufSize"> 
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">[length: 1] 
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">[length: bufSize] 
            /// The address of a string that will receive the object label.
            /// </param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static unsafe void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] ref T0 ptr, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder label)
                where T0 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T0& pinned", "ptr_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("ptr_pinned");
                        IntPtr label_sb_ptr = IntPtr.Zero;
                        try
                        {
                            label_sb_ptr = Marshal.AllocHGlobal(label.Capacity + 1);
                            Silk.Cil.LoadByName("ptr_pinned");
                            Silk.Cil.Conv_I();
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Load(label_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(177);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(IntPtr), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(label_sb_ptr, label);
                        } finally {
                            Marshal.FreeHGlobal(label_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]</summary>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            public static void GetPointer(OpenTK.Graphics.ES20.All pname, [OutAttribute] IntPtr @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(189);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.All), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]</summary>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [CLSCompliant(false)]
            public static void GetPointer<T1>(OpenTK.Graphics.ES20.All pname, [InAttribute, OutAttribute] T1[] @params)
                where T1 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T1& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T1");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(189);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.All), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]</summary>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [CLSCompliant(false)]
            public static void GetPointer<T1>(OpenTK.Graphics.ES20.All pname, [InAttribute, OutAttribute] T1[,] @params)
                where T1 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T1& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T1[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(189);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.All), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]</summary>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [CLSCompliant(false)]
            public static void GetPointer<T1>(OpenTK.Graphics.ES20.All pname, [InAttribute, OutAttribute] T1[,,] @params)
                where T1 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T1& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T1[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(189);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.All), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]</summary>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            public static void GetPointer<T1>(OpenTK.Graphics.ES20.All pname, [InAttribute, OutAttribute] ref T1 @params)
                where T1 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T1& pinned", "params_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(189);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.All), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Label a named object identified within a namespace
            /// </summary>
            /// <param name="identifier"> 
            /// The namespace from which the name of the object is allocated.
            /// </param>
            /// <param name="name"> 
            /// The name of the object to label.
            /// </param>
            /// <param name="length"> 
            /// The length of the label to be used for the object.
            /// </param>
            /// <param name="label"> 
            /// The address of a string containing the label to assign to the object.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void ObjectLabel(OpenTK.Graphics.ES20.All identifier, Int32 name, Int32 length, String label)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr label_string_ptr = MarshalStringToPtr(label);
                        try {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Load(label_string_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(244);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.ObjectLabelIdentifier), typeof(UInt32), typeof(Int32), typeof(IntPtr));
                        } finally {
                            FreeStringPtr(label_string_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Label a named object identified within a namespace
            /// </summary>
            /// <param name="identifier"> 
            /// The namespace from which the name of the object is allocated.
            /// </param>
            /// <param name="name"> 
            /// The name of the object to label.
            /// </param>
            /// <param name="length"> 
            /// The length of the label to be used for the object.
            /// </param>
            /// <param name="label"> 
            /// The address of a string containing the label to assign to the object.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void ObjectLabel(OpenTK.Graphics.ES20.All identifier, UInt32 name, Int32 length, String label)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr label_string_ptr = MarshalStringToPtr(label);
                        try {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Load(label_string_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(244);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.ObjectLabelIdentifier), typeof(UInt32), typeof(Int32), typeof(IntPtr));
                        } finally {
                            FreeStringPtr(label_string_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Label a named object identified within a namespace
            /// </summary>
            /// <param name="identifier"> 
            /// The namespace from which the name of the object is allocated.
            /// </param>
            /// <param name="name"> 
            /// The name of the object to label.
            /// </param>
            /// <param name="length"> 
            /// The length of the label to be used for the object.
            /// </param>
            /// <param name="label"> 
            /// The address of a string containing the label to assign to the object.
            /// </param>
            [CLSCompliant(false)]
            public static void ObjectLabel(OpenTK.Graphics.ES20.ObjectLabelIdentifier identifier, Int32 name, Int32 length, String label)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr label_string_ptr = MarshalStringToPtr(label);
                        try {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Load(label_string_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(244);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.ObjectLabelIdentifier), typeof(UInt32), typeof(Int32), typeof(IntPtr));
                        } finally {
                            FreeStringPtr(label_string_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Label a named object identified within a namespace
            /// </summary>
            /// <param name="identifier"> 
            /// The namespace from which the name of the object is allocated.
            /// </param>
            /// <param name="name"> 
            /// The name of the object to label.
            /// </param>
            /// <param name="length"> 
            /// The length of the label to be used for the object.
            /// </param>
            /// <param name="label"> 
            /// The address of a string containing the label to assign to the object.
            /// </param>
            [CLSCompliant(false)]
            public static void ObjectLabel(OpenTK.Graphics.ES20.ObjectLabelIdentifier identifier, UInt32 name, Int32 length, String label)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr label_string_ptr = MarshalStringToPtr(label);
                        try {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Load(label_string_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(244);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.ObjectLabelIdentifier), typeof(UInt32), typeof(Int32), typeof(IntPtr));
                        } finally {
                            FreeStringPtr(label_string_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Label a a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr"> 
            /// A pointer identifying a sync object.
            /// </param>
            /// <param name="length"> 
            /// The length of the label to be used for the object.
            /// </param>
            /// <param name="label"> 
            /// The address of a string containing the label to assign to the object.
            /// </param>
            public static void ObjectPtrLabel(IntPtr ptr, Int32 length, String label)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr label_string_ptr = MarshalStringToPtr(label);
                        try {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Load(label_string_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(246);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(IntPtr), typeof(Int32), typeof(IntPtr));
                        } finally {
                            FreeStringPtr(label_string_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Label a a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr"> 
            /// A pointer identifying a sync object.
            /// </param>
            /// <param name="length"> 
            /// The length of the label to be used for the object.
            /// </param>
            /// <param name="label"> 
            /// The address of a string containing the label to assign to the object.
            /// </param>
            [CLSCompliant(false)]
            public static void ObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[] ptr, Int32 length, String label)
                where T0 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T0& pinned", "ptr_pinned");
                        if(ptr != null && ptr.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T0");
                            Silk.Cil.StoreByName("ptr_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("ptr_pinned");
                        }
                        IntPtr label_string_ptr = MarshalStringToPtr(label);
                        try {
                            Silk.Cil.LoadByName("ptr_pinned");
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Load(label_string_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(246);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(IntPtr), typeof(Int32), typeof(IntPtr));
                        } finally {
                            FreeStringPtr(label_string_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Label a a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr"> 
            /// A pointer identifying a sync object.
            /// </param>
            /// <param name="length"> 
            /// The length of the label to be used for the object.
            /// </param>
            /// <param name="label"> 
            /// The address of a string containing the label to assign to the object.
            /// </param>
            [CLSCompliant(false)]
            public static void ObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,] ptr, Int32 length, String label)
                where T0 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T0& pinned", "ptr_pinned");
                        if(ptr != null && ptr.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T0[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("ptr_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("ptr_pinned");
                        }
                        IntPtr label_string_ptr = MarshalStringToPtr(label);
                        try {
                            Silk.Cil.LoadByName("ptr_pinned");
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Load(label_string_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(246);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(IntPtr), typeof(Int32), typeof(IntPtr));
                        } finally {
                            FreeStringPtr(label_string_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Label a a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr"> 
            /// A pointer identifying a sync object.
            /// </param>
            /// <param name="length"> 
            /// The length of the label to be used for the object.
            /// </param>
            /// <param name="label"> 
            /// The address of a string containing the label to assign to the object.
            /// </param>
            [CLSCompliant(false)]
            public static void ObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,,] ptr, Int32 length, String label)
                where T0 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T0& pinned", "ptr_pinned");
                        if(ptr != null && ptr.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T0[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("ptr_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("ptr_pinned");
                        }
                        IntPtr label_string_ptr = MarshalStringToPtr(label);
                        try {
                            Silk.Cil.LoadByName("ptr_pinned");
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Load(label_string_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(246);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(IntPtr), typeof(Int32), typeof(IntPtr));
                        } finally {
                            FreeStringPtr(label_string_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Label a a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr"> 
            /// A pointer identifying a sync object.
            /// </param>
            /// <param name="length"> 
            /// The length of the label to be used for the object.
            /// </param>
            /// <param name="label"> 
            /// The address of a string containing the label to assign to the object.
            /// </param>
            public static void ObjectPtrLabel<T0>([InAttribute, OutAttribute] ref T0 ptr, Int32 length, String label)
                where T0 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T0& pinned", "ptr_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("ptr_pinned");
                        IntPtr label_string_ptr = MarshalStringToPtr(label);
                        try {
                            Silk.Cil.LoadByName("ptr_pinned");
                            Silk.Cil.Conv_I();
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Load(label_string_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(246);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(IntPtr), typeof(Int32), typeof(IntPtr));
                        } finally {
                            FreeStringPtr(label_string_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Pop the active debug group
            /// </summary>
            public static void PopDebugGroup()
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(251);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Push a named debug group into the command stream
            /// </summary>
            /// <param name="source"> 
            /// The source of the debug message.
            /// </param>
            /// <param name="id"> 
            /// The identifier of the message.
            /// </param>
            /// <param name="length"> 
            /// The length of the message to be sent to the debug output stream.
            /// </param>
            /// <param name="message"> 
            /// The a string containing the message to be sent to the debug output stream.
            /// </param>
            [CLSCompliant(false)]
            public static void PushDebugGroup(OpenTK.Graphics.ES20.All source, Int32 id, Int32 length, String message)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr message_string_ptr = MarshalStringToPtr(message);
                        try {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Load(message_string_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(290);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.All), typeof(UInt32), typeof(Int32), typeof(IntPtr));
                        } finally {
                            FreeStringPtr(message_string_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_debug]
            /// Push a named debug group into the command stream
            /// </summary>
            /// <param name="source"> 
            /// The source of the debug message.
            /// </param>
            /// <param name="id"> 
            /// The identifier of the message.
            /// </param>
            /// <param name="length"> 
            /// The length of the message to be sent to the debug output stream.
            /// </param>
            /// <param name="message"> 
            /// The a string containing the message to be sent to the debug output stream.
            /// </param>
            [CLSCompliant(false)]
            public static void PushDebugGroup(OpenTK.Graphics.ES20.All source, UInt32 id, Int32 length, String message)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr message_string_ptr = MarshalStringToPtr(message);
                        try {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Load(message_string_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(290);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.All), typeof(UInt32), typeof(Int32), typeof(IntPtr));
                        } finally {
                            FreeStringPtr(message_string_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_robustness]</summary>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="format"></param>
            /// <param name="type"></param>
            /// <param name="bufSize"></param>
            /// <param name="data">[length: bufSize]</param>
            [Obsolete("Use strongly-typed overload instead")]
            public static void ReadnPixels(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, Int32 bufSize, [OutAttribute] IntPtr data)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(297);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(Int32), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_robustness]</summary>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="format"></param>
            /// <param name="type"></param>
            /// <param name="bufSize"></param>
            /// <param name="data">[length: bufSize]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void ReadnPixels<T7>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, Int32 bufSize, [InAttribute, OutAttribute] T7[] data)
                where T7 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T7& pinned", "data_pinned");
                        if(data != null && data.Length != 0)
                        {
                            Silk.Cil.Ldarg(7);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T7");
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(297);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(Int32), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_robustness]</summary>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="format"></param>
            /// <param name="type"></param>
            /// <param name="bufSize"></param>
            /// <param name="data">[length: bufSize]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void ReadnPixels<T7>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, Int32 bufSize, [InAttribute, OutAttribute] T7[,] data)
                where T7 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T7& pinned", "data_pinned");
                        if(data != null && data.Length != 0)
                        {
                            Silk.Cil.Ldarg(7);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T7[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(297);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(Int32), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_robustness]</summary>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="format"></param>
            /// <param name="type"></param>
            /// <param name="bufSize"></param>
            /// <param name="data">[length: bufSize]</param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void ReadnPixels<T7>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, Int32 bufSize, [InAttribute, OutAttribute] T7[,,] data)
                where T7 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T7& pinned", "data_pinned");
                        if(data != null && data.Length != 0)
                        {
                            Silk.Cil.Ldarg(7);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T7[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(297);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(Int32), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_robustness]</summary>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="format"></param>
            /// <param name="type"></param>
            /// <param name="bufSize"></param>
            /// <param name="data">[length: bufSize]</param>
            [Obsolete("Use strongly-typed overload instead")]
            public static void ReadnPixels<T7>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, Int32 bufSize, [InAttribute, OutAttribute] ref T7 data)
                where T7 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T7& pinned", "data_pinned");
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.StoreByName("data_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(297);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(Int32), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_robustness]</summary>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="format"></param>
            /// <param name="type"></param>
            /// <param name="bufSize"></param>
            /// <param name="data">[length: bufSize]</param>
            public static void ReadnPixels(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, Int32 bufSize, [OutAttribute] IntPtr data)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(297);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(Int32), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_robustness]</summary>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="format"></param>
            /// <param name="type"></param>
            /// <param name="bufSize"></param>
            /// <param name="data">[length: bufSize]</param>
            [CLSCompliant(false)]
            public static void ReadnPixels<T7>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, Int32 bufSize, [InAttribute, OutAttribute] T7[] data)
                where T7 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T7& pinned", "data_pinned");
                        if(data != null && data.Length != 0)
                        {
                            Silk.Cil.Ldarg(7);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T7");
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(297);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(Int32), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_robustness]</summary>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="format"></param>
            /// <param name="type"></param>
            /// <param name="bufSize"></param>
            /// <param name="data">[length: bufSize]</param>
            [CLSCompliant(false)]
            public static void ReadnPixels<T7>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, Int32 bufSize, [InAttribute, OutAttribute] T7[,] data)
                where T7 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T7& pinned", "data_pinned");
                        if(data != null && data.Length != 0)
                        {
                            Silk.Cil.Ldarg(7);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T7[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(297);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(Int32), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_robustness]</summary>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="format"></param>
            /// <param name="type"></param>
            /// <param name="bufSize"></param>
            /// <param name="data">[length: bufSize]</param>
            [CLSCompliant(false)]
            public static void ReadnPixels<T7>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, Int32 bufSize, [InAttribute, OutAttribute] T7[,,] data)
                where T7 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T7& pinned", "data_pinned");
                        if(data != null && data.Length != 0)
                        {
                            Silk.Cil.Ldarg(7);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T7[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(297);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(Int32), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: KHR_robustness]</summary>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="format"></param>
            /// <param name="type"></param>
            /// <param name="bufSize"></param>
            /// <param name="data">[length: bufSize]</param>
            public static void ReadnPixels<T7>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, Int32 bufSize, [InAttribute, OutAttribute] ref T7 data)
                where T7 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T7& pinned", "data_pinned");
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.StoreByName("data_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(297);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(Int32), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

        }

        public static partial class NV
        {
            /// <summary>[requires: NV_blend_equation_advanced]</summary>
            public static void BlendBarrier()
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(16);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_blend_equation_advanced]</summary>
            /// <param name="pname"></param>
            /// <param name="value"></param>
            public static void BlendParameter(OpenTK.Graphics.ES20.All pname, Int32 value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(27);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.All), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_framebuffer_blit]
            /// Copy a block of pixels from the read framebuffer to the draw framebuffer
            /// </summary>
            /// <param name="srcX0"> 
            /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
            /// </param>
            /// <param name="srcY0"> 
            /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
            /// </param>
            /// <param name="srcX1"> 
            /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
            /// </param>
            /// <param name="srcY1"> 
            /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
            /// </param>
            /// <param name="dstX0"> 
            /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
            /// </param>
            /// <param name="dstY0"> 
            /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
            /// </param>
            /// <param name="dstX1"> 
            /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
            /// </param>
            /// <param name="dstY1"> 
            /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
            /// </param>
            /// <param name="mask"> 
            /// The bitwise OR of the flags indicating which buffers are to be copied. The allowed flags are ColorBufferBit, DepthBufferBit and StencilBufferBit.
            /// </param>
            /// <param name="filter"> 
            /// Specifies the interpolation to be applied if the image is stretched. Must be Nearest or Linear.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            public static void BlitFramebuffer(Int32 srcX0, Int32 srcY0, Int32 srcX1, Int32 srcY1, Int32 dstX0, Int32 dstY0, Int32 dstX1, Int32 dstY1, OpenTK.Graphics.ES20.All mask, OpenTK.Graphics.ES20.All filter)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldarg(9);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(29);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.ClearBufferMask), typeof(OpenTK.Graphics.ES20.BlitFramebufferFilter));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_framebuffer_blit]
            /// Copy a block of pixels from the read framebuffer to the draw framebuffer
            /// </summary>
            /// <param name="srcX0"> 
            /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
            /// </param>
            /// <param name="srcY0"> 
            /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
            /// </param>
            /// <param name="srcX1"> 
            /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
            /// </param>
            /// <param name="srcY1"> 
            /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
            /// </param>
            /// <param name="dstX0"> 
            /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
            /// </param>
            /// <param name="dstY0"> 
            /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
            /// </param>
            /// <param name="dstX1"> 
            /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
            /// </param>
            /// <param name="dstY1"> 
            /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
            /// </param>
            /// <param name="mask"> 
            /// The bitwise OR of the flags indicating which buffers are to be copied. The allowed flags are ColorBufferBit, DepthBufferBit and StencilBufferBit.
            /// </param>
            /// <param name="filter"> 
            /// Specifies the interpolation to be applied if the image is stretched. Must be Nearest or Linear.
            /// </param>
            public static void BlitFramebuffer(Int32 srcX0, Int32 srcY0, Int32 srcX1, Int32 srcY1, Int32 dstX0, Int32 dstY0, Int32 dstX1, Int32 dstY1, OpenTK.Graphics.ES20.ClearBufferMask mask, OpenTK.Graphics.ES20.BlitFramebufferFilter filter)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldarg(9);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(29);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.ClearBufferMask), typeof(OpenTK.Graphics.ES20.BlitFramebufferFilter));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_copy_buffer]
            /// Copy part of the data store of a buffer object to the data store of another buffer object
            /// </summary>
            /// <param name="readTarget"> 
            /// Specifies the target from whose data store data should be read.
            /// </param>
            /// <param name="writeTarget"> 
            /// Specifies the target to whose data store data should be written.
            /// </param>
            /// <param name="readOffset"> 
            /// Specifies the offset, in basic machine units, within the data store of readtarget from which data should be read.
            /// </param>
            /// <param name="writeOffset"> 
            /// Specifies the offset, in basic machine units, within the data store of writetarget to which data should be written.
            /// </param>
            /// <param name="size"> 
            /// Specifies the size, in basic machine units, of the data to be copied from readtarget to writetarget.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            public static void CopyBufferSubData(OpenTK.Graphics.ES20.All readTarget, OpenTK.Graphics.ES20.All writeTarget, IntPtr readOffset, IntPtr writeOffset, Int32 size)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(45);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_copy_buffer]
            /// Copy part of the data store of a buffer object to the data store of another buffer object
            /// </summary>
            /// <param name="readTarget"> 
            /// Specifies the target from whose data store data should be read.
            /// </param>
            /// <param name="writeTarget"> 
            /// Specifies the target to whose data store data should be written.
            /// </param>
            /// <param name="readOffset"> 
            /// Specifies the offset, in basic machine units, within the data store of readtarget from which data should be read.
            /// </param>
            /// <param name="writeOffset"> 
            /// Specifies the offset, in basic machine units, within the data store of writetarget to which data should be written.
            /// </param>
            /// <param name="size"> 
            /// Specifies the size, in basic machine units, of the data to be copied from readtarget to writetarget.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            public static void CopyBufferSubData(OpenTK.Graphics.ES20.All readTarget, OpenTK.Graphics.ES20.All writeTarget, IntPtr readOffset, IntPtr writeOffset, IntPtr size)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(45);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_copy_buffer]
            /// Copy part of the data store of a buffer object to the data store of another buffer object
            /// </summary>
            /// <param name="readTarget"> 
            /// Specifies the target from whose data store data should be read.
            /// </param>
            /// <param name="writeTarget"> 
            /// Specifies the target to whose data store data should be written.
            /// </param>
            /// <param name="readOffset"> 
            /// Specifies the offset, in basic machine units, within the data store of readtarget from which data should be read.
            /// </param>
            /// <param name="writeOffset"> 
            /// Specifies the offset, in basic machine units, within the data store of writetarget to which data should be written.
            /// </param>
            /// <param name="size"> 
            /// Specifies the size, in basic machine units, of the data to be copied from readtarget to writetarget.
            /// </param>
            public static void CopyBufferSubData(OpenTK.Graphics.ES20.BufferTarget readTarget, OpenTK.Graphics.ES20.BufferTarget writeTarget, IntPtr readOffset, IntPtr writeOffset, Int32 size)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(45);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_copy_buffer]
            /// Copy part of the data store of a buffer object to the data store of another buffer object
            /// </summary>
            /// <param name="readTarget"> 
            /// Specifies the target from whose data store data should be read.
            /// </param>
            /// <param name="writeTarget"> 
            /// Specifies the target to whose data store data should be written.
            /// </param>
            /// <param name="readOffset"> 
            /// Specifies the offset, in basic machine units, within the data store of readtarget from which data should be read.
            /// </param>
            /// <param name="writeOffset"> 
            /// Specifies the offset, in basic machine units, within the data store of writetarget to which data should be written.
            /// </param>
            /// <param name="size"> 
            /// Specifies the size, in basic machine units, of the data to be copied from readtarget to writetarget.
            /// </param>
            public static void CopyBufferSubData(OpenTK.Graphics.ES20.BufferTarget readTarget, OpenTK.Graphics.ES20.BufferTarget writeTarget, IntPtr readOffset, IntPtr writeOffset, IntPtr size)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(45);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(IntPtr), typeof(IntPtr), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_coverage_sample]</summary>
            /// <param name="mask"></param>
            public static void CoverageMask(bool mask)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(51);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(bool));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_coverage_sample]</summary>
            /// <param name="operation"></param>
            public static void CoverageOperation(OpenTK.Graphics.ES20.All operation)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(52);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.All));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="fences">[length: n]</param>
            [CLSCompliant(false)]
            public static void DeleteFence(Int32 fences)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldc_I4(1);
                        Silk.Cil.LoadAddress(fences);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(66);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="fences">[length: n]</param>
            [CLSCompliant(false)]
            public static void DeleteFence(UInt32 fences)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldc_I4(1);
                        Silk.Cil.LoadAddress(fences);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(66);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="n"></param>
            /// <param name="fences">[length: n]</param>
            [CLSCompliant(false)]
            public static void DeleteFences(Int32 n, Int32[] fences)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "fences_pinned");
                        if(fences != null && fences.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("fences_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("fences_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("fences_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(66);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="n"></param>
            /// <param name="fences">[length: n]</param>
            [CLSCompliant(false)]
            public static void DeleteFences(Int32 n, ref Int32 fences)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "fences_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("fences_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("fences_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(66);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="n"></param>
            /// <param name="fences">[length: n]</param>
            [CLSCompliant(false)]
            public static unsafe void DeleteFences(Int32 n, Int32* fences)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(66);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="n"></param>
            /// <param name="fences">[length: n]</param>
            [CLSCompliant(false)]
            public static void DeleteFences(Int32 n, UInt32[] fences)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "fences_pinned");
                        if(fences != null && fences.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("fences_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("fences_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("fences_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(66);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="n"></param>
            /// <param name="fences">[length: n]</param>
            [CLSCompliant(false)]
            public static void DeleteFences(Int32 n, ref UInt32 fences)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "fences_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("fences_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("fences_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(66);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="n"></param>
            /// <param name="fences">[length: n]</param>
            [CLSCompliant(false)]
            public static unsafe void DeleteFences(Int32 n, UInt32* fences)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(66);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_draw_instanced]
            /// Draw multiple instances of a range of elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, TrianglesLinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
            /// </param>
            /// <param name="first"> 
            /// Specifies the starting index in the enabled arrays.
            /// </param>
            /// <param name="count"> 
            /// Specifies the number of indices to be rendered.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            public static void DrawArraysInstanced(OpenTK.Graphics.ES20.All mode, Int32 first, Int32 count, Int32 primcount)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(90);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_draw_instanced]
            /// Draw multiple instances of a range of elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, TrianglesLinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
            /// </param>
            /// <param name="first"> 
            /// Specifies the starting index in the enabled arrays.
            /// </param>
            /// <param name="count"> 
            /// Specifies the number of indices to be rendered.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            public static void DrawArraysInstanced(OpenTK.Graphics.ES20.PrimitiveType mode, Int32 first, Int32 count, Int32 primcount)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(90);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_draw_buffers]
            /// Specifies a list of color buffers to be drawn into
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of buffers in bufs.
            /// </param>
            /// <param name="bufs">[length: n] 
            /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void DrawBuffers(Int32 n, OpenTK.Graphics.ES20.All[] bufs)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.All& pinned", "bufs_pinned");
                        if(bufs != null && bufs.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("OpenTK.Graphics.ES20.All");
                            Silk.Cil.StoreByName("bufs_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("bufs_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("bufs_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(93);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(OpenTK.Graphics.ES20.DrawBufferMode*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_draw_buffers]
            /// Specifies a list of color buffers to be drawn into
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of buffers in bufs.
            /// </param>
            /// <param name="bufs">[length: n] 
            /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void DrawBuffers(Int32 n, ref OpenTK.Graphics.ES20.All bufs)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.All& pinned", "bufs_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("bufs_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("bufs_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(93);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(OpenTK.Graphics.ES20.DrawBufferMode*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_draw_buffers]
            /// Specifies a list of color buffers to be drawn into
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of buffers in bufs.
            /// </param>
            /// <param name="bufs">[length: n] 
            /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static unsafe void DrawBuffers(Int32 n, OpenTK.Graphics.ES20.All* bufs)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(93);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(OpenTK.Graphics.ES20.DrawBufferMode*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_draw_buffers]
            /// Specifies a list of color buffers to be drawn into
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of buffers in bufs.
            /// </param>
            /// <param name="bufs">[length: n] 
            /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
            /// </param>
            [CLSCompliant(false)]
            public static void DrawBuffers(Int32 n, OpenTK.Graphics.ES20.DrawBufferMode[] bufs)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.DrawBufferMode& pinned", "bufs_pinned");
                        if(bufs != null && bufs.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("OpenTK.Graphics.ES20.DrawBufferMode");
                            Silk.Cil.StoreByName("bufs_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("bufs_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("bufs_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(93);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(OpenTK.Graphics.ES20.DrawBufferMode*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_draw_buffers]
            /// Specifies a list of color buffers to be drawn into
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of buffers in bufs.
            /// </param>
            /// <param name="bufs">[length: n] 
            /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
            /// </param>
            [CLSCompliant(false)]
            public static void DrawBuffers(Int32 n, ref OpenTK.Graphics.ES20.DrawBufferMode bufs)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.DrawBufferMode& pinned", "bufs_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("bufs_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("bufs_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(93);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(OpenTK.Graphics.ES20.DrawBufferMode*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_draw_buffers]
            /// Specifies a list of color buffers to be drawn into
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of buffers in bufs.
            /// </param>
            /// <param name="bufs">[length: n] 
            /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void DrawBuffers(Int32 n, OpenTK.Graphics.ES20.DrawBufferMode* bufs)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(93);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(OpenTK.Graphics.ES20.DrawBufferMode*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_draw_instanced]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count"> 
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: count,type] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            public static void DrawElementsInstanced(OpenTK.Graphics.ES20.All mode, Int32 count, OpenTK.Graphics.ES20.All type, IntPtr indices, Int32 primcount)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(97);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_draw_instanced]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count"> 
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: count,type] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES20.All mode, Int32 count, OpenTK.Graphics.ES20.All type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        if(indices != null && indices.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T3");
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(97);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_draw_instanced]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count"> 
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: count,type] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES20.All mode, Int32 count, OpenTK.Graphics.ES20.All type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        if(indices != null && indices.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T3[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(97);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_draw_instanced]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count"> 
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: count,type] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES20.All mode, Int32 count, OpenTK.Graphics.ES20.All type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        if(indices != null && indices.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T3[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(97);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_draw_instanced]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count"> 
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: count,type] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES20.All mode, Int32 count, OpenTK.Graphics.ES20.All type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("indices_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(97);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_draw_instanced]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count"> 
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: count,type] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            public static void DrawElementsInstanced(OpenTK.Graphics.ES20.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES20.DrawElementsType type, IntPtr indices, Int32 primcount)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(97);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_draw_instanced]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count"> 
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: count,type] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [CLSCompliant(false)]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES20.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES20.DrawElementsType type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        if(indices != null && indices.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T3");
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(97);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_draw_instanced]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count"> 
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: count,type] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [CLSCompliant(false)]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES20.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES20.DrawElementsType type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        if(indices != null && indices.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T3[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(97);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_draw_instanced]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count"> 
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: count,type] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [CLSCompliant(false)]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES20.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES20.DrawElementsType type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        if(indices != null && indices.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T3[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("indices_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(97);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_draw_instanced]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count"> 
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: count,type] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES20.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES20.DrawElementsType type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount)
                where T3 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T3& pinned", "indices_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("indices_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("indices_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(97);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.PrimitiveType), typeof(Int32), typeof(OpenTK.Graphics.ES20.DrawElementsType), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="fence"></param>
            [CLSCompliant(false)]
            public static void FinishFence(Int32 fence)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(122);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="fence"></param>
            [CLSCompliant(false)]
            public static void FinishFence(UInt32 fence)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(122);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_fence]</summary>
            [CLSCompliant(false)]
            public static Int32 GenFence()
            {
                unsafe
                {
                    Int32 __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Int32 __result = default(Int32);
                        Silk.Cil.Ldc_I4(1);
                        Silk.Cil.LoadAddress(__result);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(134);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                        Silk.Cil.Load(__result);
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="n"></param>
            /// <param name="fences">[length: n]</param>
            [CLSCompliant(false)]
            public static void GenFences(Int32 n, [OutAttribute] Int32[] fences)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "fences_pinned");
                        if(fences != null && fences.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("fences_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("fences_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("fences_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(134);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="n"></param>
            /// <param name="fences">[length: n]</param>
            [CLSCompliant(false)]
            public static void GenFences(Int32 n, [OutAttribute] out Int32 fences)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "fences_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("fences_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("fences_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(134);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="n"></param>
            /// <param name="fences">[length: n]</param>
            [CLSCompliant(false)]
            public static unsafe void GenFences(Int32 n, [OutAttribute] Int32* fences)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(134);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="n"></param>
            /// <param name="fences">[length: n]</param>
            [CLSCompliant(false)]
            public static void GenFences(Int32 n, [OutAttribute] UInt32[] fences)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "fences_pinned");
                        if(fences != null && fences.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("fences_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("fences_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("fences_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(134);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="n"></param>
            /// <param name="fences">[length: n]</param>
            [CLSCompliant(false)]
            public static void GenFences(Int32 n, [OutAttribute] out UInt32 fences)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "fences_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("fences_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("fences_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(134);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="n"></param>
            /// <param name="fences">[length: n]</param>
            [CLSCompliant(false)]
            public static unsafe void GenFences(Int32 n, [OutAttribute] UInt32* fences)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(134);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="fence"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static void GetFence(Int32 fence, OpenTK.Graphics.ES20.All pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(154);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="fence"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static void GetFence(Int32 fence, OpenTK.Graphics.ES20.All pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(154);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="fence"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static unsafe void GetFence(Int32 fence, OpenTK.Graphics.ES20.All pname, [OutAttribute] Int32* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(154);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="fence"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static void GetFence(UInt32 fence, OpenTK.Graphics.ES20.All pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(154);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="fence"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static void GetFence(UInt32 fence, OpenTK.Graphics.ES20.All pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(154);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="fence"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [CLSCompliant(false)]
            public static unsafe void GetFence(UInt32 fence, OpenTK.Graphics.ES20.All pname, [OutAttribute] Int32* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(154);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="fence"></param>
            [CLSCompliant(false)]
            public static bool IsFence(Int32 fence)
            {
                unsafe
                {
                    bool __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(225);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(byte), typeof(UInt32));
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="fence"></param>
            [CLSCompliant(false)]
            public static bool IsFence(UInt32 fence)
            {
                unsafe
                {
                    bool __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(225);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(byte), typeof(UInt32));
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_read_buffer]
            /// Select a color buffer source for pixels
            /// </summary>
            /// <param name="mode"> 
            /// Specifies a color buffer. Accepted values are FrontLeft, FrontRight, BackLeft, BackRight, Front, Back, Left, Right, and the constants ColorAttachmenti.
            /// </param>
            public static void ReadBuffer(OpenTK.Graphics.ES20.All mode)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(294);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.All));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_framebuffer_multisample]
            /// Establish data storage, format, dimensions and sample count of a renderbuffer object's image
            /// </summary>
            /// <param name="target"> 
            /// Specifies a binding to which the target of the allocation and must be Renderbuffer.
            /// </param>
            /// <param name="samples"> 
            /// Specifies the number of samples to be used for the renderbuffer object's storage.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the internal format to use for the renderbuffer object's image.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the renderbuffer, in pixels.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the renderbuffer, in pixels.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            public static void RenderbufferStorageMultisample(OpenTK.Graphics.ES20.All target, Int32 samples, OpenTK.Graphics.ES20.All internalformat, Int32 width, Int32 height)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(305);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.RenderbufferTarget), typeof(Int32), typeof(OpenTK.Graphics.ES20.RenderbufferInternalFormat), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_framebuffer_multisample]
            /// Establish data storage, format, dimensions and sample count of a renderbuffer object's image
            /// </summary>
            /// <param name="target"> 
            /// Specifies a binding to which the target of the allocation and must be Renderbuffer.
            /// </param>
            /// <param name="samples"> 
            /// Specifies the number of samples to be used for the renderbuffer object's storage.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the internal format to use for the renderbuffer object's image.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the renderbuffer, in pixels.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the renderbuffer, in pixels.
            /// </param>
            public static void RenderbufferStorageMultisample(OpenTK.Graphics.ES20.RenderbufferTarget target, Int32 samples, OpenTK.Graphics.ES20.RenderbufferInternalFormat internalformat, Int32 width, Int32 height)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(305);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.RenderbufferTarget), typeof(Int32), typeof(OpenTK.Graphics.ES20.RenderbufferInternalFormat), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="fence"></param>
            /// <param name="condition"></param>
            [CLSCompliant(false)]
            public static void SetFence(Int32 fence, OpenTK.Graphics.ES20.All condition)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(312);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="fence"></param>
            /// <param name="condition"></param>
            [CLSCompliant(false)]
            public static void SetFence(UInt32 fence, OpenTK.Graphics.ES20.All condition)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(312);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="fence"></param>
            [CLSCompliant(false)]
            public static bool TestFence(Int32 fence)
            {
                unsafe
                {
                    bool __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(322);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(byte), typeof(UInt32));
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="fence"></param>
            [CLSCompliant(false)]
            public static bool TestFence(UInt32 fence)
            {
                unsafe
                {
                    bool __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(322);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(byte), typeof(UInt32));
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*6]</param>
            [CLSCompliant(false)]
            public static void UniformMatrix2x3(Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                        if(value != null && value.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Single");
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(360);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*6]</param>
            [CLSCompliant(false)]
            public static void UniformMatrix2x3(Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("value_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(360);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*6]</param>
            [CLSCompliant(false)]
            public static unsafe void UniformMatrix2x3(Int32 location, Int32 count, bool transpose, Single* value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(360);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*8]</param>
            [CLSCompliant(false)]
            public static void UniformMatrix2x4(Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                        if(value != null && value.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Single");
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(361);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*8]</param>
            [CLSCompliant(false)]
            public static void UniformMatrix2x4(Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("value_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(361);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*8]</param>
            [CLSCompliant(false)]
            public static unsafe void UniformMatrix2x4(Int32 location, Int32 count, bool transpose, Single* value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(361);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*6]</param>
            [CLSCompliant(false)]
            public static void UniformMatrix3x2(Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                        if(value != null && value.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Single");
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(363);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*6]</param>
            [CLSCompliant(false)]
            public static void UniformMatrix3x2(Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("value_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(363);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*6]</param>
            [CLSCompliant(false)]
            public static unsafe void UniformMatrix3x2(Int32 location, Int32 count, bool transpose, Single* value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(363);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*12]</param>
            [CLSCompliant(false)]
            public static void UniformMatrix3x4(Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                        if(value != null && value.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Single");
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(364);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*12]</param>
            [CLSCompliant(false)]
            public static void UniformMatrix3x4(Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("value_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(364);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*12]</param>
            [CLSCompliant(false)]
            public static unsafe void UniformMatrix3x4(Int32 location, Int32 count, bool transpose, Single* value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(364);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*8]</param>
            [CLSCompliant(false)]
            public static void UniformMatrix4x2(Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                        if(value != null && value.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Single");
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(366);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*8]</param>
            [CLSCompliant(false)]
            public static void UniformMatrix4x2(Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("value_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(366);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*8]</param>
            [CLSCompliant(false)]
            public static unsafe void UniformMatrix4x2(Int32 location, Int32 count, bool transpose, Single* value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(366);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*12]</param>
            [CLSCompliant(false)]
            public static void UniformMatrix4x3(Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                        if(value != null && value.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Single");
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("value_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(367);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*12]</param>
            [CLSCompliant(false)]
            public static void UniformMatrix4x3(Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Single& pinned", "value_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("value_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.LoadByName("value_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(367);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*12]</param>
            [CLSCompliant(false)]
            public static unsafe void UniformMatrix4x3(Int32 location, Int32 count, bool transpose, Single* value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(367);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(Int32), typeof(bool), typeof(Single*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_instanced_arrays]
            /// Modify the rate at which generic vertex attributes advance during instanced rendering
            /// </summary>
            /// <param name="index"> 
            /// Specify the index of the generic vertex attribute.
            /// </param>
            /// <param name="divisor"> 
            /// Specify the number of instances that will pass between updates of the generic attribute at slot index.
            /// </param>
            [CLSCompliant(false)]
            public static void VertexAttribDivisor(Int32 index, Int32 divisor)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(384);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: NV_instanced_arrays]
            /// Modify the rate at which generic vertex attributes advance during instanced rendering
            /// </summary>
            /// <param name="index"> 
            /// Specify the index of the generic vertex attribute.
            /// </param>
            /// <param name="divisor"> 
            /// Specify the number of instances that will pass between updates of the generic attribute at slot index.
            /// </param>
            [CLSCompliant(false)]
            public static void VertexAttribDivisor(UInt32 index, UInt32 divisor)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(384);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

        }

        public static partial class Oes
        {
            /// <summary>[requires: OES_vertex_array_object]
            /// Bind a vertex array object
            /// </summary>
            /// <param name="array"> 
            /// Specifies the name of the vertex array to bind.
            /// </param>
            [CLSCompliant(false)]
            public static void BindVertexArray(Int32 array)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(14);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_vertex_array_object]
            /// Bind a vertex array object
            /// </summary>
            /// <param name="array"> 
            /// Specifies the name of the vertex array to bind.
            /// </param>
            [CLSCompliant(false)]
            public static void BindVertexArray(UInt32 array)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(14);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image in a compressed format
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 16 texels high.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture image. All implementations support 3D texture images that are at least 16 texels deep.
            /// </param>
            /// <param name="border"> 
            /// This value must be 0.
            /// </param>
            /// <param name="imageSize"> 
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">[length: imageSize] 
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            public static void CompressedTexImage3D(OpenTK.Graphics.ES20.All target, Int32 level, OpenTK.Graphics.ES20.All internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, IntPtr data)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(42);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget3d), typeof(Int32), typeof(OpenTK.Graphics.ES20.CompressedInternalFormat), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image in a compressed format
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 16 texels high.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture image. All implementations support 3D texture images that are at least 16 texels deep.
            /// </param>
            /// <param name="border"> 
            /// This value must be 0.
            /// </param>
            /// <param name="imageSize"> 
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">[length: imageSize] 
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void CompressedTexImage3D<T8>(OpenTK.Graphics.ES20.All target, Int32 level, OpenTK.Graphics.ES20.All internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T8[] data)
                where T8 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T8& pinned", "data_pinned");
                        if(data != null && data.Length != 0)
                        {
                            Silk.Cil.Ldarg(8);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T8");
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(42);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget3d), typeof(Int32), typeof(OpenTK.Graphics.ES20.CompressedInternalFormat), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image in a compressed format
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 16 texels high.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture image. All implementations support 3D texture images that are at least 16 texels deep.
            /// </param>
            /// <param name="border"> 
            /// This value must be 0.
            /// </param>
            /// <param name="imageSize"> 
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">[length: imageSize] 
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void CompressedTexImage3D<T8>(OpenTK.Graphics.ES20.All target, Int32 level, OpenTK.Graphics.ES20.All internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T8[,] data)
                where T8 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T8& pinned", "data_pinned");
                        if(data != null && data.Length != 0)
                        {
                            Silk.Cil.Ldarg(8);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T8[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(42);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget3d), typeof(Int32), typeof(OpenTK.Graphics.ES20.CompressedInternalFormat), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image in a compressed format
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 16 texels high.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture image. All implementations support 3D texture images that are at least 16 texels deep.
            /// </param>
            /// <param name="border"> 
            /// This value must be 0.
            /// </param>
            /// <param name="imageSize"> 
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">[length: imageSize] 
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void CompressedTexImage3D<T8>(OpenTK.Graphics.ES20.All target, Int32 level, OpenTK.Graphics.ES20.All internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T8[,,] data)
                where T8 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T8& pinned", "data_pinned");
                        if(data != null && data.Length != 0)
                        {
                            Silk.Cil.Ldarg(8);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T8[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(42);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget3d), typeof(Int32), typeof(OpenTK.Graphics.ES20.CompressedInternalFormat), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image in a compressed format
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 16 texels high.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture image. All implementations support 3D texture images that are at least 16 texels deep.
            /// </param>
            /// <param name="border"> 
            /// This value must be 0.
            /// </param>
            /// <param name="imageSize"> 
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">[length: imageSize] 
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            public static void CompressedTexImage3D<T8>(OpenTK.Graphics.ES20.All target, Int32 level, OpenTK.Graphics.ES20.All internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] ref T8 data)
                where T8 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T8& pinned", "data_pinned");
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.StoreByName("data_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(42);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget3d), typeof(Int32), typeof(OpenTK.Graphics.ES20.CompressedInternalFormat), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image in a compressed format
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 16 texels high.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture image. All implementations support 3D texture images that are at least 16 texels deep.
            /// </param>
            /// <param name="border"> 
            /// This value must be 0.
            /// </param>
            /// <param name="imageSize"> 
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">[length: imageSize] 
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            public static void CompressedTexImage3D(OpenTK.Graphics.ES20.TextureTarget3d target, Int32 level, OpenTK.Graphics.ES20.CompressedInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, IntPtr data)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(42);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget3d), typeof(Int32), typeof(OpenTK.Graphics.ES20.CompressedInternalFormat), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image in a compressed format
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 16 texels high.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture image. All implementations support 3D texture images that are at least 16 texels deep.
            /// </param>
            /// <param name="border"> 
            /// This value must be 0.
            /// </param>
            /// <param name="imageSize"> 
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">[length: imageSize] 
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            [CLSCompliant(false)]
            public static void CompressedTexImage3D<T8>(OpenTK.Graphics.ES20.TextureTarget3d target, Int32 level, OpenTK.Graphics.ES20.CompressedInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T8[] data)
                where T8 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T8& pinned", "data_pinned");
                        if(data != null && data.Length != 0)
                        {
                            Silk.Cil.Ldarg(8);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T8");
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(42);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget3d), typeof(Int32), typeof(OpenTK.Graphics.ES20.CompressedInternalFormat), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image in a compressed format
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 16 texels high.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture image. All implementations support 3D texture images that are at least 16 texels deep.
            /// </param>
            /// <param name="border"> 
            /// This value must be 0.
            /// </param>
            /// <param name="imageSize"> 
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">[length: imageSize] 
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            [CLSCompliant(false)]
            public static void CompressedTexImage3D<T8>(OpenTK.Graphics.ES20.TextureTarget3d target, Int32 level, OpenTK.Graphics.ES20.CompressedInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T8[,] data)
                where T8 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T8& pinned", "data_pinned");
                        if(data != null && data.Length != 0)
                        {
                            Silk.Cil.Ldarg(8);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T8[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(42);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget3d), typeof(Int32), typeof(OpenTK.Graphics.ES20.CompressedInternalFormat), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image in a compressed format
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 16 texels high.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture image. All implementations support 3D texture images that are at least 16 texels deep.
            /// </param>
            /// <param name="border"> 
            /// This value must be 0.
            /// </param>
            /// <param name="imageSize"> 
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">[length: imageSize] 
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            [CLSCompliant(false)]
            public static void CompressedTexImage3D<T8>(OpenTK.Graphics.ES20.TextureTarget3d target, Int32 level, OpenTK.Graphics.ES20.CompressedInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T8[,,] data)
                where T8 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T8& pinned", "data_pinned");
                        if(data != null && data.Length != 0)
                        {
                            Silk.Cil.Ldarg(8);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T8[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(42);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget3d), typeof(Int32), typeof(OpenTK.Graphics.ES20.CompressedInternalFormat), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image in a compressed format
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 16 texels high.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture image. All implementations support 3D texture images that are at least 16 texels deep.
            /// </param>
            /// <param name="border"> 
            /// This value must be 0.
            /// </param>
            /// <param name="imageSize"> 
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">[length: imageSize] 
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            public static void CompressedTexImage3D<T8>(OpenTK.Graphics.ES20.TextureTarget3d target, Int32 level, OpenTK.Graphics.ES20.CompressedInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] ref T8 data)
                where T8 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T8& pinned", "data_pinned");
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.StoreByName("data_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(42);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget3d), typeof(Int32), typeof(OpenTK.Graphics.ES20.CompressedInternalFormat), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture subimage in a compressed format
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be Texture3D.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="xoffset"> 
            /// Specifies a texel offset in the x direction within the texture array.
            /// </param>
            /// <param name="yoffset"> 
            /// Specifies a texel offset in the y direction within the texture array.
            /// </param>
            /// <param name="zoffset"> 
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture subimage.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture subimage.
            /// </param>
            /// <param name="format"> 
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="imageSize"> 
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">[length: imageSize] 
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            public static void CompressedTexSubImage3D(OpenTK.Graphics.ES20.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES20.All format, Int32 imageSize, IntPtr data)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldarg(9);
                        Silk.Cil.Ldarg(10);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(44);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget3d), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture subimage in a compressed format
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be Texture3D.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="xoffset"> 
            /// Specifies a texel offset in the x direction within the texture array.
            /// </param>
            /// <param name="yoffset"> 
            /// Specifies a texel offset in the y direction within the texture array.
            /// </param>
            /// <param name="zoffset"> 
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture subimage.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture subimage.
            /// </param>
            /// <param name="format"> 
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="imageSize"> 
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">[length: imageSize] 
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void CompressedTexSubImage3D<T10>(OpenTK.Graphics.ES20.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES20.All format, Int32 imageSize, [InAttribute, OutAttribute] T10[] data)
                where T10 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T10& pinned", "data_pinned");
                        if(data != null && data.Length != 0)
                        {
                            Silk.Cil.Ldarg(10);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T10");
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldarg(9);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(44);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget3d), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture subimage in a compressed format
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be Texture3D.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="xoffset"> 
            /// Specifies a texel offset in the x direction within the texture array.
            /// </param>
            /// <param name="yoffset"> 
            /// Specifies a texel offset in the y direction within the texture array.
            /// </param>
            /// <param name="zoffset"> 
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture subimage.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture subimage.
            /// </param>
            /// <param name="format"> 
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="imageSize"> 
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">[length: imageSize] 
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void CompressedTexSubImage3D<T10>(OpenTK.Graphics.ES20.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES20.All format, Int32 imageSize, [InAttribute, OutAttribute] T10[,] data)
                where T10 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T10& pinned", "data_pinned");
                        if(data != null && data.Length != 0)
                        {
                            Silk.Cil.Ldarg(10);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T10[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldarg(9);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(44);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget3d), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture subimage in a compressed format
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be Texture3D.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="xoffset"> 
            /// Specifies a texel offset in the x direction within the texture array.
            /// </param>
            /// <param name="yoffset"> 
            /// Specifies a texel offset in the y direction within the texture array.
            /// </param>
            /// <param name="zoffset"> 
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture subimage.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture subimage.
            /// </param>
            /// <param name="format"> 
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="imageSize"> 
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">[length: imageSize] 
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void CompressedTexSubImage3D<T10>(OpenTK.Graphics.ES20.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES20.All format, Int32 imageSize, [InAttribute, OutAttribute] T10[,,] data)
                where T10 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T10& pinned", "data_pinned");
                        if(data != null && data.Length != 0)
                        {
                            Silk.Cil.Ldarg(10);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T10[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldarg(9);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(44);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget3d), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture subimage in a compressed format
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be Texture3D.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="xoffset"> 
            /// Specifies a texel offset in the x direction within the texture array.
            /// </param>
            /// <param name="yoffset"> 
            /// Specifies a texel offset in the y direction within the texture array.
            /// </param>
            /// <param name="zoffset"> 
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture subimage.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture subimage.
            /// </param>
            /// <param name="format"> 
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="imageSize"> 
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">[length: imageSize] 
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            public static void CompressedTexSubImage3D<T10>(OpenTK.Graphics.ES20.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES20.All format, Int32 imageSize, [InAttribute, OutAttribute] ref T10 data)
                where T10 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T10& pinned", "data_pinned");
                        Silk.Cil.Ldarg(10);
                        Silk.Cil.StoreByName("data_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldarg(9);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(44);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget3d), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture subimage in a compressed format
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be Texture3D.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="xoffset"> 
            /// Specifies a texel offset in the x direction within the texture array.
            /// </param>
            /// <param name="yoffset"> 
            /// Specifies a texel offset in the y direction within the texture array.
            /// </param>
            /// <param name="zoffset"> 
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture subimage.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture subimage.
            /// </param>
            /// <param name="format"> 
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="imageSize"> 
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">[length: imageSize] 
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            public static void CompressedTexSubImage3D(OpenTK.Graphics.ES20.TextureTarget3d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES20.All format, Int32 imageSize, IntPtr data)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldarg(9);
                        Silk.Cil.Ldarg(10);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(44);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget3d), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture subimage in a compressed format
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be Texture3D.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="xoffset"> 
            /// Specifies a texel offset in the x direction within the texture array.
            /// </param>
            /// <param name="yoffset"> 
            /// Specifies a texel offset in the y direction within the texture array.
            /// </param>
            /// <param name="zoffset"> 
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture subimage.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture subimage.
            /// </param>
            /// <param name="format"> 
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="imageSize"> 
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">[length: imageSize] 
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            [CLSCompliant(false)]
            public static void CompressedTexSubImage3D<T10>(OpenTK.Graphics.ES20.TextureTarget3d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES20.All format, Int32 imageSize, [InAttribute, OutAttribute] T10[] data)
                where T10 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T10& pinned", "data_pinned");
                        if(data != null && data.Length != 0)
                        {
                            Silk.Cil.Ldarg(10);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T10");
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldarg(9);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(44);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget3d), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture subimage in a compressed format
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be Texture3D.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="xoffset"> 
            /// Specifies a texel offset in the x direction within the texture array.
            /// </param>
            /// <param name="yoffset"> 
            /// Specifies a texel offset in the y direction within the texture array.
            /// </param>
            /// <param name="zoffset"> 
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture subimage.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture subimage.
            /// </param>
            /// <param name="format"> 
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="imageSize"> 
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">[length: imageSize] 
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            [CLSCompliant(false)]
            public static void CompressedTexSubImage3D<T10>(OpenTK.Graphics.ES20.TextureTarget3d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES20.All format, Int32 imageSize, [InAttribute, OutAttribute] T10[,] data)
                where T10 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T10& pinned", "data_pinned");
                        if(data != null && data.Length != 0)
                        {
                            Silk.Cil.Ldarg(10);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T10[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldarg(9);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(44);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget3d), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture subimage in a compressed format
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be Texture3D.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="xoffset"> 
            /// Specifies a texel offset in the x direction within the texture array.
            /// </param>
            /// <param name="yoffset"> 
            /// Specifies a texel offset in the y direction within the texture array.
            /// </param>
            /// <param name="zoffset"> 
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture subimage.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture subimage.
            /// </param>
            /// <param name="format"> 
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="imageSize"> 
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">[length: imageSize] 
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            [CLSCompliant(false)]
            public static void CompressedTexSubImage3D<T10>(OpenTK.Graphics.ES20.TextureTarget3d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES20.All format, Int32 imageSize, [InAttribute, OutAttribute] T10[,,] data)
                where T10 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T10& pinned", "data_pinned");
                        if(data != null && data.Length != 0)
                        {
                            Silk.Cil.Ldarg(10);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T10[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("data_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldarg(9);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(44);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget3d), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture subimage in a compressed format
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be Texture3D.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="xoffset"> 
            /// Specifies a texel offset in the x direction within the texture array.
            /// </param>
            /// <param name="yoffset"> 
            /// Specifies a texel offset in the y direction within the texture array.
            /// </param>
            /// <param name="zoffset"> 
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture subimage.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture subimage.
            /// </param>
            /// <param name="format"> 
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="imageSize"> 
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">[length: imageSize] 
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            public static void CompressedTexSubImage3D<T10>(OpenTK.Graphics.ES20.TextureTarget3d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES20.All format, Int32 imageSize, [InAttribute, OutAttribute] ref T10 data)
                where T10 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T10& pinned", "data_pinned");
                        Silk.Cil.Ldarg(10);
                        Silk.Cil.StoreByName("data_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldarg(9);
                        Silk.Cil.LoadByName("data_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(44);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget3d), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_3D]
            /// Copy a three-dimensional texture subimage
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be Texture3D or Texture2DArray.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="xoffset"> 
            /// Specifies a texel offset in the x direction within the texture array.
            /// </param>
            /// <param name="yoffset"> 
            /// Specifies a texel offset in the y direction within the texture array.
            /// </param>
            /// <param name="zoffset"> 
            /// Specifies a texel offset in the z direction within the texture array.
            /// </param>
            /// <param name="x"> 
            /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
            /// </param>
            /// <param name="y"> 
            /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture subimage.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            public static void CopyTexSubImage3D(OpenTK.Graphics.ES20.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 x, Int32 y, Int32 width, Int32 height)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(49);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget3d), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_3D]
            /// Copy a three-dimensional texture subimage
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be Texture3D or Texture2DArray.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="xoffset"> 
            /// Specifies a texel offset in the x direction within the texture array.
            /// </param>
            /// <param name="yoffset"> 
            /// Specifies a texel offset in the y direction within the texture array.
            /// </param>
            /// <param name="zoffset"> 
            /// Specifies a texel offset in the z direction within the texture array.
            /// </param>
            /// <param name="x"> 
            /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
            /// </param>
            /// <param name="y"> 
            /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture subimage.
            /// </param>
            public static void CopyTexSubImage3D(OpenTK.Graphics.ES20.TextureTarget3d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 x, Int32 y, Int32 width, Int32 height)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(49);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget3d), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_vertex_array_object]
            /// Delete vertex array objects
            /// </summary>
            /// <param name="arrays">[length: n] 
            /// Specifies the address of an array containing the n names of the objects to be deleted.
            /// </param>
            [CLSCompliant(false)]
            public static void DeleteVertexArray(Int32 arrays)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldc_I4(1);
                        Silk.Cil.LoadAddress(arrays);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(77);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_vertex_array_object]
            /// Delete vertex array objects
            /// </summary>
            /// <param name="arrays">[length: n] 
            /// Specifies the address of an array containing the n names of the objects to be deleted.
            /// </param>
            [CLSCompliant(false)]
            public static void DeleteVertexArray(UInt32 arrays)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldc_I4(1);
                        Silk.Cil.LoadAddress(arrays);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(77);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_vertex_array_object]
            /// Delete vertex array objects
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of vertex array objects to be deleted.
            /// </param>
            /// <param name="arrays">[length: n] 
            /// Specifies the address of an array containing the n names of the objects to be deleted.
            /// </param>
            [CLSCompliant(false)]
            public static void DeleteVertexArrays(Int32 n, Int32[] arrays)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "arrays_pinned");
                        if(arrays != null && arrays.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("arrays_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("arrays_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("arrays_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(77);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_vertex_array_object]
            /// Delete vertex array objects
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of vertex array objects to be deleted.
            /// </param>
            /// <param name="arrays">[length: n] 
            /// Specifies the address of an array containing the n names of the objects to be deleted.
            /// </param>
            [CLSCompliant(false)]
            public static void DeleteVertexArrays(Int32 n, ref Int32 arrays)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "arrays_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("arrays_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("arrays_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(77);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_vertex_array_object]
            /// Delete vertex array objects
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of vertex array objects to be deleted.
            /// </param>
            /// <param name="arrays">[length: n] 
            /// Specifies the address of an array containing the n names of the objects to be deleted.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void DeleteVertexArrays(Int32 n, Int32* arrays)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(77);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_vertex_array_object]
            /// Delete vertex array objects
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of vertex array objects to be deleted.
            /// </param>
            /// <param name="arrays">[length: n] 
            /// Specifies the address of an array containing the n names of the objects to be deleted.
            /// </param>
            [CLSCompliant(false)]
            public static void DeleteVertexArrays(Int32 n, UInt32[] arrays)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "arrays_pinned");
                        if(arrays != null && arrays.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("arrays_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("arrays_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("arrays_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(77);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_vertex_array_object]
            /// Delete vertex array objects
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of vertex array objects to be deleted.
            /// </param>
            /// <param name="arrays">[length: n] 
            /// Specifies the address of an array containing the n names of the objects to be deleted.
            /// </param>
            [CLSCompliant(false)]
            public static void DeleteVertexArrays(Int32 n, ref UInt32 arrays)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "arrays_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("arrays_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("arrays_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(77);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_vertex_array_object]
            /// Delete vertex array objects
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of vertex array objects to be deleted.
            /// </param>
            /// <param name="arrays">[length: n] 
            /// Specifies the address of an array containing the n names of the objects to be deleted.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void DeleteVertexArrays(Int32 n, UInt32* arrays)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(77);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_EGL_image]</summary>
            /// <param name="target"></param>
            /// <param name="image"></param>
            public static void EGLImageTargetRenderbufferStorage(OpenTK.Graphics.ES20.All target, IntPtr image)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(98);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.All), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_EGL_image]</summary>
            /// <param name="target"></param>
            /// <param name="image"></param>
            public static void EGLImageTargetTexture2D(OpenTK.Graphics.ES20.All target, IntPtr image)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(99);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.All), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_3D]</summary>
            /// <param name="target"></param>
            /// <param name="attachment"></param>
            /// <param name="textarget"></param>
            /// <param name="texture"></param>
            /// <param name="level"></param>
            /// <param name="zoffset"></param>
            [CLSCompliant(false)]
            public static void FramebufferTexture3D(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All attachment, OpenTK.Graphics.ES20.All textarget, Int32 texture, Int32 level, Int32 zoffset)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(129);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.All), typeof(OpenTK.Graphics.ES20.All), typeof(OpenTK.Graphics.ES20.All), typeof(UInt32), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_3D]</summary>
            /// <param name="target"></param>
            /// <param name="attachment"></param>
            /// <param name="textarget"></param>
            /// <param name="texture"></param>
            /// <param name="level"></param>
            /// <param name="zoffset"></param>
            [CLSCompliant(false)]
            public static void FramebufferTexture3D(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All attachment, OpenTK.Graphics.ES20.All textarget, UInt32 texture, Int32 level, Int32 zoffset)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(129);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.All), typeof(OpenTK.Graphics.ES20.All), typeof(OpenTK.Graphics.ES20.All), typeof(UInt32), typeof(Int32), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_vertex_array_object]
            /// Generate vertex array object names
            /// </summary>
            [CLSCompliant(false)]
            public static Int32 GenVertexArray()
            {
                unsafe
                {
                    Int32 __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Int32 __result = default(Int32);
                        Silk.Cil.Ldc_I4(1);
                        Silk.Cil.LoadAddress(__result);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(141);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                        Silk.Cil.Load(__result);
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_vertex_array_object]
            /// Generate vertex array object names
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of vertex array object names to generate.
            /// </param>
            /// <param name="arrays">[length: n] 
            /// Specifies an array in which the generated vertex array object names are stored.
            /// </param>
            [CLSCompliant(false)]
            public static void GenVertexArrays(Int32 n, [OutAttribute] Int32[] arrays)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "arrays_pinned");
                        if(arrays != null && arrays.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("arrays_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("arrays_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("arrays_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(141);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_vertex_array_object]
            /// Generate vertex array object names
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of vertex array object names to generate.
            /// </param>
            /// <param name="arrays">[length: n] 
            /// Specifies an array in which the generated vertex array object names are stored.
            /// </param>
            [CLSCompliant(false)]
            public static void GenVertexArrays(Int32 n, [OutAttribute] out Int32 arrays)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "arrays_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("arrays_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("arrays_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(141);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_vertex_array_object]
            /// Generate vertex array object names
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of vertex array object names to generate.
            /// </param>
            /// <param name="arrays">[length: n] 
            /// Specifies an array in which the generated vertex array object names are stored.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void GenVertexArrays(Int32 n, [OutAttribute] Int32* arrays)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(141);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_vertex_array_object]
            /// Generate vertex array object names
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of vertex array object names to generate.
            /// </param>
            /// <param name="arrays">[length: n] 
            /// Specifies an array in which the generated vertex array object names are stored.
            /// </param>
            [CLSCompliant(false)]
            public static void GenVertexArrays(Int32 n, [OutAttribute] UInt32[] arrays)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "arrays_pinned");
                        if(arrays != null && arrays.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("arrays_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("arrays_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("arrays_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(141);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_vertex_array_object]
            /// Generate vertex array object names
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of vertex array object names to generate.
            /// </param>
            /// <param name="arrays">[length: n] 
            /// Specifies an array in which the generated vertex array object names are stored.
            /// </param>
            [CLSCompliant(false)]
            public static void GenVertexArrays(Int32 n, [OutAttribute] out UInt32 arrays)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "arrays_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("arrays_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("arrays_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(141);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_vertex_array_object]
            /// Generate vertex array object names
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of vertex array object names to generate.
            /// </param>
            /// <param name="arrays">[length: n] 
            /// Specifies an array in which the generated vertex array object names are stored.
            /// </param>
            [CLSCompliant(false)]
            public static unsafe void GenVertexArrays(Int32 n, [OutAttribute] UInt32* arrays)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(141);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_mapbuffer]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [Obsolete("Use strongly-typed overload instead")]
            public static void GetBufferPointer(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All pname, [OutAttribute] IntPtr @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(148);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(OpenTK.Graphics.ES20.BufferPointer), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_mapbuffer]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void GetBufferPointer<T2>(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All pname, [InAttribute, OutAttribute] T2[] @params)
                where T2 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T2& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T2");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(148);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(OpenTK.Graphics.ES20.BufferPointer), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_mapbuffer]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void GetBufferPointer<T2>(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All pname, [InAttribute, OutAttribute] T2[,] @params)
                where T2 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T2& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T2[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(148);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(OpenTK.Graphics.ES20.BufferPointer), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_mapbuffer]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void GetBufferPointer<T2>(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All pname, [InAttribute, OutAttribute] T2[,,] @params)
                where T2 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T2& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T2[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(148);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(OpenTK.Graphics.ES20.BufferPointer), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_mapbuffer]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [Obsolete("Use strongly-typed overload instead")]
            public static void GetBufferPointer<T2>(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All pname, [InAttribute, OutAttribute] ref T2 @params)
                where T2 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T2& pinned", "params_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(148);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(OpenTK.Graphics.ES20.BufferPointer), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_mapbuffer]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            public static void GetBufferPointer(OpenTK.Graphics.ES20.BufferTarget target, OpenTK.Graphics.ES20.BufferPointer pname, [OutAttribute] IntPtr @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(148);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(OpenTK.Graphics.ES20.BufferPointer), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_mapbuffer]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [CLSCompliant(false)]
            public static void GetBufferPointer<T2>(OpenTK.Graphics.ES20.BufferTarget target, OpenTK.Graphics.ES20.BufferPointer pname, [InAttribute, OutAttribute] T2[] @params)
                where T2 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T2& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T2");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(148);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(OpenTK.Graphics.ES20.BufferPointer), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_mapbuffer]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [CLSCompliant(false)]
            public static void GetBufferPointer<T2>(OpenTK.Graphics.ES20.BufferTarget target, OpenTK.Graphics.ES20.BufferPointer pname, [InAttribute, OutAttribute] T2[,] @params)
                where T2 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T2& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T2[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(148);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(OpenTK.Graphics.ES20.BufferPointer), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_mapbuffer]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [CLSCompliant(false)]
            public static void GetBufferPointer<T2>(OpenTK.Graphics.ES20.BufferTarget target, OpenTK.Graphics.ES20.BufferPointer pname, [InAttribute, OutAttribute] T2[,,] @params)
                where T2 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T2& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T2[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(148);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(OpenTK.Graphics.ES20.BufferPointer), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_mapbuffer]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            public static void GetBufferPointer<T2>(OpenTK.Graphics.ES20.BufferTarget target, OpenTK.Graphics.ES20.BufferPointer pname, [InAttribute, OutAttribute] ref T2 @params)
                where T2 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T2& pinned", "params_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(148);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.BufferTarget), typeof(OpenTK.Graphics.ES20.BufferPointer), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_get_program_binary]
            /// Return a binary representation of a program object's compiled and linked executable source
            /// </summary>
            /// <param name="program"> 
            /// Specifies the name of a program object whose binary representation to retrieve.
            /// </param>
            /// <param name="bufSize"> 
            /// Specifies the size of the buffer whose address is given by binary.
            /// </param>
            /// <param name="length">[length: 1] 
            /// Specifies the address of a variable to receive the number of bytes written into binary.
            /// </param>
            /// <param name="binaryFormat">[length: 1] 
            /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
            /// </param>
            /// <param name="binary">[length: bufSize] 
            /// Specifies the address an array into which the GL will return program's binary representation.
            /// </param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void GetProgramBinary(Int32 program, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] OpenTK.Graphics.ES20.All[] binaryFormat, [OutAttribute] IntPtr binary)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        if(length != null && length.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.All& pinned", "binaryFormat_pinned");
                        if(binaryFormat != null && binaryFormat.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("OpenTK.Graphics.ES20.All");
                            Silk.Cil.StoreByName("binaryFormat_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("binaryFormat_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("length_pinned");
                        Silk.Cil.LoadByName("binaryFormat_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(190);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(OpenTK.Graphics.ES20.All*), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_get_program_binary]
            /// Return a binary representation of a program object's compiled and linked executable source
            /// </summary>
            /// <param name="program"> 
            /// Specifies the name of a program object whose binary representation to retrieve.
            /// </param>
            /// <param name="bufSize"> 
            /// Specifies the size of the buffer whose address is given by binary.
            /// </param>
            /// <param name="length">[length: 1] 
            /// Specifies the address of a variable to receive the number of bytes written into binary.
            /// </param>
            /// <param name="binaryFormat">[length: 1] 
            /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
            /// </param>
            /// <param name="binary">[length: bufSize] 
            /// Specifies the address an array into which the GL will return program's binary representation.
            /// </param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void GetProgramBinary<T4>(Int32 program, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] OpenTK.Graphics.ES20.All[] binaryFormat, [InAttribute, OutAttribute] T4[] binary)
                where T4 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        if(length != null && length.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.All& pinned", "binaryFormat_pinned");
                        if(binaryFormat != null && binaryFormat.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("OpenTK.Graphics.ES20.All");
                            Silk.Cil.StoreByName("binaryFormat_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("binaryFormat_pinned");
                        }
                        Silk.Cil.DeclareLocal("T4& pinned", "binary_pinned");
                        if(binary != null && binary.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T4");
                            Silk.Cil.StoreByName("binary_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("binary_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("length_pinned");
                        Silk.Cil.LoadByName("binaryFormat_pinned");
                        Silk.Cil.LoadByName("binary_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(190);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(OpenTK.Graphics.ES20.All*), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_get_program_binary]
            /// Return a binary representation of a program object's compiled and linked executable source
            /// </summary>
            /// <param name="program"> 
            /// Specifies the name of a program object whose binary representation to retrieve.
            /// </param>
            /// <param name="bufSize"> 
            /// Specifies the size of the buffer whose address is given by binary.
            /// </param>
            /// <param name="length">[length: 1] 
            /// Specifies the address of a variable to receive the number of bytes written into binary.
            /// </param>
            /// <param name="binaryFormat">[length: 1] 
            /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
            /// </param>
            /// <param name="binary">[length: bufSize] 
            /// Specifies the address an array into which the GL will return program's binary representation.
            /// </param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void GetProgramBinary<T4>(Int32 program, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] OpenTK.Graphics.ES20.All[] binaryFormat, [InAttribute, OutAttribute] T4[,] binary)
                where T4 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        if(length != null && length.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.All& pinned", "binaryFormat_pinned");
                        if(binaryFormat != null && binaryFormat.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("OpenTK.Graphics.ES20.All");
                            Silk.Cil.StoreByName("binaryFormat_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("binaryFormat_pinned");
                        }
                        Silk.Cil.DeclareLocal("T4& pinned", "binary_pinned");
                        if(binary != null && binary.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T4[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("binary_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("binary_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("length_pinned");
                        Silk.Cil.LoadByName("binaryFormat_pinned");
                        Silk.Cil.LoadByName("binary_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(190);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(OpenTK.Graphics.ES20.All*), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_get_program_binary]
            /// Return a binary representation of a program object's compiled and linked executable source
            /// </summary>
            /// <param name="program"> 
            /// Specifies the name of a program object whose binary representation to retrieve.
            /// </param>
            /// <param name="bufSize"> 
            /// Specifies the size of the buffer whose address is given by binary.
            /// </param>
            /// <param name="length">[length: 1] 
            /// Specifies the address of a variable to receive the number of bytes written into binary.
            /// </param>
            /// <param name="binaryFormat">[length: 1] 
            /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
            /// </param>
            /// <param name="binary">[length: bufSize] 
            /// Specifies the address an array into which the GL will return program's binary representation.
            /// </param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void GetProgramBinary<T4>(Int32 program, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] OpenTK.Graphics.ES20.All[] binaryFormat, [InAttribute, OutAttribute] T4[,,] binary)
                where T4 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        if(length != null && length.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.All& pinned", "binaryFormat_pinned");
                        if(binaryFormat != null && binaryFormat.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("OpenTK.Graphics.ES20.All");
                            Silk.Cil.StoreByName("binaryFormat_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("binaryFormat_pinned");
                        }
                        Silk.Cil.DeclareLocal("T4& pinned", "binary_pinned");
                        if(binary != null && binary.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T4[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("binary_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("binary_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("length_pinned");
                        Silk.Cil.LoadByName("binaryFormat_pinned");
                        Silk.Cil.LoadByName("binary_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(190);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(OpenTK.Graphics.ES20.All*), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_get_program_binary]
            /// Return a binary representation of a program object's compiled and linked executable source
            /// </summary>
            /// <param name="program"> 
            /// Specifies the name of a program object whose binary representation to retrieve.
            /// </param>
            /// <param name="bufSize"> 
            /// Specifies the size of the buffer whose address is given by binary.
            /// </param>
            /// <param name="length">[length: 1] 
            /// Specifies the address of a variable to receive the number of bytes written into binary.
            /// </param>
            /// <param name="binaryFormat">[length: 1] 
            /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
            /// </param>
            /// <param name="binary">[length: bufSize] 
            /// Specifies the address an array into which the GL will return program's binary representation.
            /// </param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void GetProgramBinary<T4>(Int32 program, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] OpenTK.Graphics.ES20.All[] binaryFormat, [InAttribute, OutAttribute] ref T4 binary)
                where T4 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        if(length != null && length.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.All& pinned", "binaryFormat_pinned");
                        if(binaryFormat != null && binaryFormat.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("OpenTK.Graphics.ES20.All");
                            Silk.Cil.StoreByName("binaryFormat_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("binaryFormat_pinned");
                        }
                        Silk.Cil.DeclareLocal("T4& pinned", "binary_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.StoreByName("binary_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("length_pinned");
                        Silk.Cil.LoadByName("binaryFormat_pinned");
                        Silk.Cil.LoadByName("binary_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(190);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(OpenTK.Graphics.ES20.All*), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_get_program_binary]
            /// Return a binary representation of a program object's compiled and linked executable source
            /// </summary>
            /// <param name="program"> 
            /// Specifies the name of a program object whose binary representation to retrieve.
            /// </param>
            /// <param name="bufSize"> 
            /// Specifies the size of the buffer whose address is given by binary.
            /// </param>
            /// <param name="length">[length: 1] 
            /// Specifies the address of a variable to receive the number of bytes written into binary.
            /// </param>
            /// <param name="binaryFormat">[length: 1] 
            /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
            /// </param>
            /// <param name="binary">[length: bufSize] 
            /// Specifies the address an array into which the GL will return program's binary representation.
            /// </param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void GetProgramBinary(Int32 program, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out OpenTK.Graphics.ES20.All binaryFormat, [OutAttribute] IntPtr binary)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("length_pinned");
                        Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.All& pinned", "binaryFormat_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("binaryFormat_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("length_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("binaryFormat_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(190);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(OpenTK.Graphics.ES20.All*), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_get_program_binary]
            /// Return a binary representation of a program object's compiled and linked executable source
            /// </summary>
            /// <param name="program"> 
            /// Specifies the name of a program object whose binary representation to retrieve.
            /// </param>
            /// <param name="bufSize"> 
            /// Specifies the size of the buffer whose address is given by binary.
            /// </param>
            /// <param name="length">[length: 1] 
            /// Specifies the address of a variable to receive the number of bytes written into binary.
            /// </param>
            /// <param name="binaryFormat">[length: 1] 
            /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
            /// </param>
            /// <param name="binary">[length: bufSize] 
            /// Specifies the address an array into which the GL will return program's binary representation.
            /// </param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void GetProgramBinary<T4>(Int32 program, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out OpenTK.Graphics.ES20.All binaryFormat, [InAttribute, OutAttribute] T4[] binary)
                where T4 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("length_pinned");
                        Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.All& pinned", "binaryFormat_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("binaryFormat_pinned");
                        Silk.Cil.DeclareLocal("T4& pinned", "binary_pinned");
                        if(binary != null && binary.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T4");
                            Silk.Cil.StoreByName("binary_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("binary_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("length_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("binaryFormat_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("binary_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(190);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(OpenTK.Graphics.ES20.All*), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_get_program_binary]
            /// Return a binary representation of a program object's compiled and linked executable source
            /// </summary>
            /// <param name="program"> 
            /// Specifies the name of a program object whose binary representation to retrieve.
            /// </param>
            /// <param name="bufSize"> 
            /// Specifies the size of the buffer whose address is given by binary.
            /// </param>
            /// <param name="length">[length: 1] 
            /// Specifies the address of a variable to receive the number of bytes written into binary.
            /// </param>
            /// <param name="binaryFormat">[length: 1] 
            /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
            /// </param>
            /// <param name="binary">[length: bufSize] 
            /// Specifies the address an array into which the GL will return program's binary representation.
            /// </param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void GetProgramBinary<T4>(Int32 program, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out OpenTK.Graphics.ES20.All binaryFormat, [InAttribute, OutAttribute] T4[,] binary)
                where T4 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("length_pinned");
                        Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.All& pinned", "binaryFormat_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("binaryFormat_pinned");
                        Silk.Cil.DeclareLocal("T4& pinned", "binary_pinned");
                        if(binary != null && binary.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T4[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("binary_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("binary_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("length_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("binaryFormat_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("binary_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(190);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(OpenTK.Graphics.ES20.All*), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_get_program_binary]
            /// Return a binary representation of a program object's compiled and linked executable source
            /// </summary>
            /// <param name="program"> 
            /// Specifies the name of a program object whose binary representation to retrieve.
            /// </param>
            /// <param name="bufSize"> 
            /// Specifies the size of the buffer whose address is given by binary.
            /// </param>
            /// <param name="length">[length: 1] 
            /// Specifies the address of a variable to receive the number of bytes written into binary.
            /// </param>
            /// <param name="binaryFormat">[length: 1] 
            /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
            /// </param>
            /// <param name="binary">[length: bufSize] 
            /// Specifies the address an array into which the GL will return program's binary representation.
            /// </param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void GetProgramBinary<T4>(Int32 program, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out OpenTK.Graphics.ES20.All binaryFormat, [InAttribute, OutAttribute] T4[,,] binary)
                where T4 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("length_pinned");
                        Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.All& pinned", "binaryFormat_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("binaryFormat_pinned");
                        Silk.Cil.DeclareLocal("T4& pinned", "binary_pinned");
                        if(binary != null && binary.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T4[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("binary_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("binary_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("length_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("binaryFormat_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("binary_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(190);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(OpenTK.Graphics.ES20.All*), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_get_program_binary]
            /// Return a binary representation of a program object's compiled and linked executable source
            /// </summary>
            /// <param name="program"> 
            /// Specifies the name of a program object whose binary representation to retrieve.
            /// </param>
            /// <param name="bufSize"> 
            /// Specifies the size of the buffer whose address is given by binary.
            /// </param>
            /// <param name="length">[length: 1] 
            /// Specifies the address of a variable to receive the number of bytes written into binary.
            /// </param>
            /// <param name="binaryFormat">[length: 1] 
            /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
            /// </param>
            /// <param name="binary">[length: bufSize] 
            /// Specifies the address an array into which the GL will return program's binary representation.
            /// </param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void GetProgramBinary<T4>(Int32 program, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out OpenTK.Graphics.ES20.All binaryFormat, [InAttribute, OutAttribute] ref T4 binary)
                where T4 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("length_pinned");
                        Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.All& pinned", "binaryFormat_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("binaryFormat_pinned");
                        Silk.Cil.DeclareLocal("T4& pinned", "binary_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.StoreByName("binary_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("length_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("binaryFormat_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("binary_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(190);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(OpenTK.Graphics.ES20.All*), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_get_program_binary]
            /// Return a binary representation of a program object's compiled and linked executable source
            /// </summary>
            /// <param name="program"> 
            /// Specifies the name of a program object whose binary representation to retrieve.
            /// </param>
            /// <param name="bufSize"> 
            /// Specifies the size of the buffer whose address is given by binary.
            /// </param>
            /// <param name="length">[length: 1] 
            /// Specifies the address of a variable to receive the number of bytes written into binary.
            /// </param>
            /// <param name="binaryFormat">[length: 1] 
            /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
            /// </param>
            /// <param name="binary">[length: bufSize] 
            /// Specifies the address an array into which the GL will return program's binary representation.
            /// </param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static unsafe void GetProgramBinary(Int32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] OpenTK.Graphics.ES20.All* binaryFormat, [OutAttribute] IntPtr binary)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(190);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(OpenTK.Graphics.ES20.All*), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_get_program_binary]
            /// Return a binary representation of a program object's compiled and linked executable source
            /// </summary>
            /// <param name="program"> 
            /// Specifies the name of a program object whose binary representation to retrieve.
            /// </param>
            /// <param name="bufSize"> 
            /// Specifies the size of the buffer whose address is given by binary.
            /// </param>
            /// <param name="length">[length: 1] 
            /// Specifies the address of a variable to receive the number of bytes written into binary.
            /// </param>
            /// <param name="binaryFormat">[length: 1] 
            /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
            /// </param>
            /// <param name="binary">[length: bufSize] 
            /// Specifies the address an array into which the GL will return program's binary representation.
            /// </param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static unsafe void GetProgramBinary<T4>(Int32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] OpenTK.Graphics.ES20.All* binaryFormat, [InAttribute, OutAttribute] T4[] binary)
                where T4 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T4& pinned", "binary_pinned");
                        if(binary != null && binary.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T4");
                            Silk.Cil.StoreByName("binary_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("binary_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("binary_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(190);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(OpenTK.Graphics.ES20.All*), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_get_program_binary]
            /// Return a binary representation of a program object's compiled and linked executable source
            /// </summary>
            /// <param name="program"> 
            /// Specifies the name of a program object whose binary representation to retrieve.
            /// </param>
            /// <param name="bufSize"> 
            /// Specifies the size of the buffer whose address is given by binary.
            /// </param>
            /// <param name="length">[length: 1] 
            /// Specifies the address of a variable to receive the number of bytes written into binary.
            /// </param>
            /// <param name="binaryFormat">[length: 1] 
            /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
            /// </param>
            /// <param name="binary">[length: bufSize] 
            /// Specifies the address an array into which the GL will return program's binary representation.
            /// </param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static unsafe void GetProgramBinary<T4>(Int32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] OpenTK.Graphics.ES20.All* binaryFormat, [InAttribute, OutAttribute] T4[,] binary)
                where T4 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T4& pinned", "binary_pinned");
                        if(binary != null && binary.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T4[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("binary_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("binary_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("binary_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(190);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(OpenTK.Graphics.ES20.All*), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_get_program_binary]
            /// Return a binary representation of a program object's compiled and linked executable source
            /// </summary>
            /// <param name="program"> 
            /// Specifies the name of a program object whose binary representation to retrieve.
            /// </param>
            /// <param name="bufSize"> 
            /// Specifies the size of the buffer whose address is given by binary.
            /// </param>
            /// <param name="length">[length: 1] 
            /// Specifies the address of a variable to receive the number of bytes written into binary.
            /// </param>
            /// <param name="binaryFormat">[length: 1] 
            /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
            /// </param>
            /// <param name="binary">[length: bufSize] 
            /// Specifies the address an array into which the GL will return program's binary representation.
            /// </param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static unsafe void GetProgramBinary<T4>(Int32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] OpenTK.Graphics.ES20.All* binaryFormat, [InAttribute, OutAttribute] T4[,,] binary)
                where T4 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T4& pinned", "binary_pinned");
                        if(binary != null && binary.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T4[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("binary_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("binary_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("binary_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(190);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(OpenTK.Graphics.ES20.All*), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_get_program_binary]
            /// Return a binary representation of a program object's compiled and linked executable source
            /// </summary>
            /// <param name="program"> 
            /// Specifies the name of a program object whose binary representation to retrieve.
            /// </param>
            /// <param name="bufSize"> 
            /// Specifies the size of the buffer whose address is given by binary.
            /// </param>
            /// <param name="length">[length: 1] 
            /// Specifies the address of a variable to receive the number of bytes written into binary.
            /// </param>
            /// <param name="binaryFormat">[length: 1] 
            /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
            /// </param>
            /// <param name="binary">[length: bufSize] 
            /// Specifies the address an array into which the GL will return program's binary representation.
            /// </param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static unsafe void GetProgramBinary<T4>(Int32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] OpenTK.Graphics.ES20.All* binaryFormat, [InAttribute, OutAttribute] ref T4 binary)
                where T4 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T4& pinned", "binary_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.StoreByName("binary_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("binary_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(190);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(OpenTK.Graphics.ES20.All*), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_get_program_binary]
            /// Return a binary representation of a program object's compiled and linked executable source
            /// </summary>
            /// <param name="program"> 
            /// Specifies the name of a program object whose binary representation to retrieve.
            /// </param>
            /// <param name="bufSize"> 
            /// Specifies the size of the buffer whose address is given by binary.
            /// </param>
            /// <param name="length">[length: 1] 
            /// Specifies the address of a variable to receive the number of bytes written into binary.
            /// </param>
            /// <param name="binaryFormat">[length: 1] 
            /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
            /// </param>
            /// <param name="binary">[length: bufSize] 
            /// Specifies the address an array into which the GL will return program's binary representation.
            /// </param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void GetProgramBinary(UInt32 program, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] OpenTK.Graphics.ES20.All[] binaryFormat, [OutAttribute] IntPtr binary)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        if(length != null && length.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.All& pinned", "binaryFormat_pinned");
                        if(binaryFormat != null && binaryFormat.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("OpenTK.Graphics.ES20.All");
                            Silk.Cil.StoreByName("binaryFormat_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("binaryFormat_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("length_pinned");
                        Silk.Cil.LoadByName("binaryFormat_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(190);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(OpenTK.Graphics.ES20.All*), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_get_program_binary]
            /// Return a binary representation of a program object's compiled and linked executable source
            /// </summary>
            /// <param name="program"> 
            /// Specifies the name of a program object whose binary representation to retrieve.
            /// </param>
            /// <param name="bufSize"> 
            /// Specifies the size of the buffer whose address is given by binary.
            /// </param>
            /// <param name="length">[length: 1] 
            /// Specifies the address of a variable to receive the number of bytes written into binary.
            /// </param>
            /// <param name="binaryFormat">[length: 1] 
            /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
            /// </param>
            /// <param name="binary">[length: bufSize] 
            /// Specifies the address an array into which the GL will return program's binary representation.
            /// </param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] OpenTK.Graphics.ES20.All[] binaryFormat, [InAttribute, OutAttribute] T4[] binary)
                where T4 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        if(length != null && length.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.All& pinned", "binaryFormat_pinned");
                        if(binaryFormat != null && binaryFormat.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("OpenTK.Graphics.ES20.All");
                            Silk.Cil.StoreByName("binaryFormat_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("binaryFormat_pinned");
                        }
                        Silk.Cil.DeclareLocal("T4& pinned", "binary_pinned");
                        if(binary != null && binary.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T4");
                            Silk.Cil.StoreByName("binary_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("binary_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("length_pinned");
                        Silk.Cil.LoadByName("binaryFormat_pinned");
                        Silk.Cil.LoadByName("binary_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(190);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(OpenTK.Graphics.ES20.All*), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_get_program_binary]
            /// Return a binary representation of a program object's compiled and linked executable source
            /// </summary>
            /// <param name="program"> 
            /// Specifies the name of a program object whose binary representation to retrieve.
            /// </param>
            /// <param name="bufSize"> 
            /// Specifies the size of the buffer whose address is given by binary.
            /// </param>
            /// <param name="length">[length: 1] 
            /// Specifies the address of a variable to receive the number of bytes written into binary.
            /// </param>
            /// <param name="binaryFormat">[length: 1] 
            /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
            /// </param>
            /// <param name="binary">[length: bufSize] 
            /// Specifies the address an array into which the GL will return program's binary representation.
            /// </param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] OpenTK.Graphics.ES20.All[] binaryFormat, [InAttribute, OutAttribute] T4[,] binary)
                where T4 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        if(length != null && length.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.All& pinned", "binaryFormat_pinned");
                        if(binaryFormat != null && binaryFormat.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("OpenTK.Graphics.ES20.All");
                            Silk.Cil.StoreByName("binaryFormat_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("binaryFormat_pinned");
                        }
                        Silk.Cil.DeclareLocal("T4& pinned", "binary_pinned");
                        if(binary != null && binary.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T4[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("binary_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("binary_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("length_pinned");
                        Silk.Cil.LoadByName("binaryFormat_pinned");
                        Silk.Cil.LoadByName("binary_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(190);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(OpenTK.Graphics.ES20.All*), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_get_program_binary]
            /// Return a binary representation of a program object's compiled and linked executable source
            /// </summary>
            /// <param name="program"> 
            /// Specifies the name of a program object whose binary representation to retrieve.
            /// </param>
            /// <param name="bufSize"> 
            /// Specifies the size of the buffer whose address is given by binary.
            /// </param>
            /// <param name="length">[length: 1] 
            /// Specifies the address of a variable to receive the number of bytes written into binary.
            /// </param>
            /// <param name="binaryFormat">[length: 1] 
            /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
            /// </param>
            /// <param name="binary">[length: bufSize] 
            /// Specifies the address an array into which the GL will return program's binary representation.
            /// </param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] OpenTK.Graphics.ES20.All[] binaryFormat, [InAttribute, OutAttribute] T4[,,] binary)
                where T4 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        if(length != null && length.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.All& pinned", "binaryFormat_pinned");
                        if(binaryFormat != null && binaryFormat.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("OpenTK.Graphics.ES20.All");
                            Silk.Cil.StoreByName("binaryFormat_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("binaryFormat_pinned");
                        }
                        Silk.Cil.DeclareLocal("T4& pinned", "binary_pinned");
                        if(binary != null && binary.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T4[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("binary_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("binary_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("length_pinned");
                        Silk.Cil.LoadByName("binaryFormat_pinned");
                        Silk.Cil.LoadByName("binary_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(190);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(OpenTK.Graphics.ES20.All*), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_get_program_binary]
            /// Return a binary representation of a program object's compiled and linked executable source
            /// </summary>
            /// <param name="program"> 
            /// Specifies the name of a program object whose binary representation to retrieve.
            /// </param>
            /// <param name="bufSize"> 
            /// Specifies the size of the buffer whose address is given by binary.
            /// </param>
            /// <param name="length">[length: 1] 
            /// Specifies the address of a variable to receive the number of bytes written into binary.
            /// </param>
            /// <param name="binaryFormat">[length: 1] 
            /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
            /// </param>
            /// <param name="binary">[length: bufSize] 
            /// Specifies the address an array into which the GL will return program's binary representation.
            /// </param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] OpenTK.Graphics.ES20.All[] binaryFormat, [InAttribute, OutAttribute] ref T4 binary)
                where T4 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        if(length != null && length.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.All& pinned", "binaryFormat_pinned");
                        if(binaryFormat != null && binaryFormat.Length != 0)
                        {
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("OpenTK.Graphics.ES20.All");
                            Silk.Cil.StoreByName("binaryFormat_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("binaryFormat_pinned");
                        }
                        Silk.Cil.DeclareLocal("T4& pinned", "binary_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.StoreByName("binary_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("length_pinned");
                        Silk.Cil.LoadByName("binaryFormat_pinned");
                        Silk.Cil.LoadByName("binary_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(190);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(OpenTK.Graphics.ES20.All*), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_get_program_binary]
            /// Return a binary representation of a program object's compiled and linked executable source
            /// </summary>
            /// <param name="program"> 
            /// Specifies the name of a program object whose binary representation to retrieve.
            /// </param>
            /// <param name="bufSize"> 
            /// Specifies the size of the buffer whose address is given by binary.
            /// </param>
            /// <param name="length">[length: 1] 
            /// Specifies the address of a variable to receive the number of bytes written into binary.
            /// </param>
            /// <param name="binaryFormat">[length: 1] 
            /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
            /// </param>
            /// <param name="binary">[length: bufSize] 
            /// Specifies the address an array into which the GL will return program's binary representation.
            /// </param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void GetProgramBinary(UInt32 program, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out OpenTK.Graphics.ES20.All binaryFormat, [OutAttribute] IntPtr binary)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("length_pinned");
                        Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.All& pinned", "binaryFormat_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("binaryFormat_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("length_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("binaryFormat_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(190);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(OpenTK.Graphics.ES20.All*), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_get_program_binary]
            /// Return a binary representation of a program object's compiled and linked executable source
            /// </summary>
            /// <param name="program"> 
            /// Specifies the name of a program object whose binary representation to retrieve.
            /// </param>
            /// <param name="bufSize"> 
            /// Specifies the size of the buffer whose address is given by binary.
            /// </param>
            /// <param name="length">[length: 1] 
            /// Specifies the address of a variable to receive the number of bytes written into binary.
            /// </param>
            /// <param name="binaryFormat">[length: 1] 
            /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
            /// </param>
            /// <param name="binary">[length: bufSize] 
            /// Specifies the address an array into which the GL will return program's binary representation.
            /// </param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out OpenTK.Graphics.ES20.All binaryFormat, [InAttribute, OutAttribute] T4[] binary)
                where T4 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("length_pinned");
                        Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.All& pinned", "binaryFormat_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("binaryFormat_pinned");
                        Silk.Cil.DeclareLocal("T4& pinned", "binary_pinned");
                        if(binary != null && binary.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T4");
                            Silk.Cil.StoreByName("binary_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("binary_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("length_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("binaryFormat_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("binary_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(190);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(OpenTK.Graphics.ES20.All*), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_get_program_binary]
            /// Return a binary representation of a program object's compiled and linked executable source
            /// </summary>
            /// <param name="program"> 
            /// Specifies the name of a program object whose binary representation to retrieve.
            /// </param>
            /// <param name="bufSize"> 
            /// Specifies the size of the buffer whose address is given by binary.
            /// </param>
            /// <param name="length">[length: 1] 
            /// Specifies the address of a variable to receive the number of bytes written into binary.
            /// </param>
            /// <param name="binaryFormat">[length: 1] 
            /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
            /// </param>
            /// <param name="binary">[length: bufSize] 
            /// Specifies the address an array into which the GL will return program's binary representation.
            /// </param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out OpenTK.Graphics.ES20.All binaryFormat, [InAttribute, OutAttribute] T4[,] binary)
                where T4 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("length_pinned");
                        Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.All& pinned", "binaryFormat_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("binaryFormat_pinned");
                        Silk.Cil.DeclareLocal("T4& pinned", "binary_pinned");
                        if(binary != null && binary.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T4[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("binary_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("binary_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("length_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("binaryFormat_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("binary_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(190);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(OpenTK.Graphics.ES20.All*), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_get_program_binary]
            /// Return a binary representation of a program object's compiled and linked executable source
            /// </summary>
            /// <param name="program"> 
            /// Specifies the name of a program object whose binary representation to retrieve.
            /// </param>
            /// <param name="bufSize"> 
            /// Specifies the size of the buffer whose address is given by binary.
            /// </param>
            /// <param name="length">[length: 1] 
            /// Specifies the address of a variable to receive the number of bytes written into binary.
            /// </param>
            /// <param name="binaryFormat">[length: 1] 
            /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
            /// </param>
            /// <param name="binary">[length: bufSize] 
            /// Specifies the address an array into which the GL will return program's binary representation.
            /// </param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out OpenTK.Graphics.ES20.All binaryFormat, [InAttribute, OutAttribute] T4[,,] binary)
                where T4 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("length_pinned");
                        Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.All& pinned", "binaryFormat_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("binaryFormat_pinned");
                        Silk.Cil.DeclareLocal("T4& pinned", "binary_pinned");
                        if(binary != null && binary.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T4[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("binary_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("binary_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("length_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("binaryFormat_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("binary_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(190);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(OpenTK.Graphics.ES20.All*), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_get_program_binary]
            /// Return a binary representation of a program object's compiled and linked executable source
            /// </summary>
            /// <param name="program"> 
            /// Specifies the name of a program object whose binary representation to retrieve.
            /// </param>
            /// <param name="bufSize"> 
            /// Specifies the size of the buffer whose address is given by binary.
            /// </param>
            /// <param name="length">[length: 1] 
            /// Specifies the address of a variable to receive the number of bytes written into binary.
            /// </param>
            /// <param name="binaryFormat">[length: 1] 
            /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
            /// </param>
            /// <param name="binary">[length: bufSize] 
            /// Specifies the address an array into which the GL will return program's binary representation.
            /// </param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out OpenTK.Graphics.ES20.All binaryFormat, [InAttribute, OutAttribute] ref T4 binary)
                where T4 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("length_pinned");
                        Silk.Cil.DeclareLocal("OpenTK.Graphics.ES20.All& pinned", "binaryFormat_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.StoreByName("binaryFormat_pinned");
                        Silk.Cil.DeclareLocal("T4& pinned", "binary_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.StoreByName("binary_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("length_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("binaryFormat_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.LoadByName("binary_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(190);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(OpenTK.Graphics.ES20.All*), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_get_program_binary]
            /// Return a binary representation of a program object's compiled and linked executable source
            /// </summary>
            /// <param name="program"> 
            /// Specifies the name of a program object whose binary representation to retrieve.
            /// </param>
            /// <param name="bufSize"> 
            /// Specifies the size of the buffer whose address is given by binary.
            /// </param>
            /// <param name="length">[length: 1] 
            /// Specifies the address of a variable to receive the number of bytes written into binary.
            /// </param>
            /// <param name="binaryFormat">[length: 1] 
            /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
            /// </param>
            /// <param name="binary">[length: bufSize] 
            /// Specifies the address an array into which the GL will return program's binary representation.
            /// </param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static unsafe void GetProgramBinary(UInt32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] OpenTK.Graphics.ES20.All* binaryFormat, [OutAttribute] IntPtr binary)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(190);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(OpenTK.Graphics.ES20.All*), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_get_program_binary]
            /// Return a binary representation of a program object's compiled and linked executable source
            /// </summary>
            /// <param name="program"> 
            /// Specifies the name of a program object whose binary representation to retrieve.
            /// </param>
            /// <param name="bufSize"> 
            /// Specifies the size of the buffer whose address is given by binary.
            /// </param>
            /// <param name="length">[length: 1] 
            /// Specifies the address of a variable to receive the number of bytes written into binary.
            /// </param>
            /// <param name="binaryFormat">[length: 1] 
            /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
            /// </param>
            /// <param name="binary">[length: bufSize] 
            /// Specifies the address an array into which the GL will return program's binary representation.
            /// </param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static unsafe void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] OpenTK.Graphics.ES20.All* binaryFormat, [InAttribute, OutAttribute] T4[] binary)
                where T4 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T4& pinned", "binary_pinned");
                        if(binary != null && binary.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T4");
                            Silk.Cil.StoreByName("binary_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("binary_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("binary_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(190);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(OpenTK.Graphics.ES20.All*), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_get_program_binary]
            /// Return a binary representation of a program object's compiled and linked executable source
            /// </summary>
            /// <param name="program"> 
            /// Specifies the name of a program object whose binary representation to retrieve.
            /// </param>
            /// <param name="bufSize"> 
            /// Specifies the size of the buffer whose address is given by binary.
            /// </param>
            /// <param name="length">[length: 1] 
            /// Specifies the address of a variable to receive the number of bytes written into binary.
            /// </param>
            /// <param name="binaryFormat">[length: 1] 
            /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
            /// </param>
            /// <param name="binary">[length: bufSize] 
            /// Specifies the address an array into which the GL will return program's binary representation.
            /// </param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static unsafe void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] OpenTK.Graphics.ES20.All* binaryFormat, [InAttribute, OutAttribute] T4[,] binary)
                where T4 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T4& pinned", "binary_pinned");
                        if(binary != null && binary.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T4[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("binary_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("binary_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("binary_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(190);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(OpenTK.Graphics.ES20.All*), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_get_program_binary]
            /// Return a binary representation of a program object's compiled and linked executable source
            /// </summary>
            /// <param name="program"> 
            /// Specifies the name of a program object whose binary representation to retrieve.
            /// </param>
            /// <param name="bufSize"> 
            /// Specifies the size of the buffer whose address is given by binary.
            /// </param>
            /// <param name="length">[length: 1] 
            /// Specifies the address of a variable to receive the number of bytes written into binary.
            /// </param>
            /// <param name="binaryFormat">[length: 1] 
            /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
            /// </param>
            /// <param name="binary">[length: bufSize] 
            /// Specifies the address an array into which the GL will return program's binary representation.
            /// </param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static unsafe void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] OpenTK.Graphics.ES20.All* binaryFormat, [InAttribute, OutAttribute] T4[,,] binary)
                where T4 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T4& pinned", "binary_pinned");
                        if(binary != null && binary.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T4[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("binary_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("binary_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("binary_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(190);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(OpenTK.Graphics.ES20.All*), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_get_program_binary]
            /// Return a binary representation of a program object's compiled and linked executable source
            /// </summary>
            /// <param name="program"> 
            /// Specifies the name of a program object whose binary representation to retrieve.
            /// </param>
            /// <param name="bufSize"> 
            /// Specifies the size of the buffer whose address is given by binary.
            /// </param>
            /// <param name="length">[length: 1] 
            /// Specifies the address of a variable to receive the number of bytes written into binary.
            /// </param>
            /// <param name="binaryFormat">[length: 1] 
            /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
            /// </param>
            /// <param name="binary">[length: bufSize] 
            /// Specifies the address an array into which the GL will return program's binary representation.
            /// </param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static unsafe void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] OpenTK.Graphics.ES20.All* binaryFormat, [InAttribute, OutAttribute] ref T4 binary)
                where T4 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T4& pinned", "binary_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.StoreByName("binary_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("binary_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(190);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(OpenTK.Graphics.ES20.All*), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_vertex_array_object]
            /// Determine if a name corresponds to a vertex array object
            /// </summary>
            /// <param name="array"> 
            /// Specifies a value that may be the name of a vertex array object.
            /// </param>
            [CLSCompliant(false)]
            public static bool IsVertexArray(Int32 array)
            {
                unsafe
                {
                    bool __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(234);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(byte), typeof(UInt32));
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_vertex_array_object]
            /// Determine if a name corresponds to a vertex array object
            /// </summary>
            /// <param name="array"> 
            /// Specifies a value that may be the name of a vertex array object.
            /// </param>
            [CLSCompliant(false)]
            public static bool IsVertexArray(UInt32 array)
            {
                unsafe
                {
                    bool __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(234);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(byte), typeof(UInt32));
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_mapbuffer]
            /// Map a buffer object's data store
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target buffer object being mapped. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer or UniformBuffer.
            /// </param>
            /// <param name="access"> 
            /// For glMapBuffer only, specifies the access policy, indicating whether it will be possible to read from, write to, or both read from and write to the buffer object's mapped data store. The symbolic constant must be ReadOnly, WriteOnly, or ReadWrite.
            /// </param>
            public static IntPtr MapBuffer(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All access)
            {
                unsafe
                {
                    IntPtr __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(238);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(IntPtr), typeof(OpenTK.Graphics.ES20.All), typeof(OpenTK.Graphics.ES20.All));
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_sample_shading]
            /// Specifies minimum rate at which sample shaing takes place
            /// </summary>
            /// <param name="value"> 
            /// Specifies the rate at which samples are shaded within each covered pixel.
            /// </param>
            public static void MinSampleShading(Single value)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(240);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Single));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_get_program_binary]
            /// Load a program object with a program binary
            /// </summary>
            /// <param name="program"> 
            /// Specifies the name of a program object into which to load a program binary.
            /// </param>
            /// <param name="binaryFormat"> 
            /// Specifies the format of the binary data in binary.
            /// </param>
            /// <param name="binary">[length: length] 
            /// Specifies the address an array containing the binary to be loaded into program.
            /// </param>
            /// <param name="length"> 
            /// Specifies the number of bytes contained in binary.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramBinary(Int32 program, OpenTK.Graphics.ES20.All binaryFormat, IntPtr binary, Int32 length)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(254);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_get_program_binary]
            /// Load a program object with a program binary
            /// </summary>
            /// <param name="program"> 
            /// Specifies the name of a program object into which to load a program binary.
            /// </param>
            /// <param name="binaryFormat"> 
            /// Specifies the format of the binary data in binary.
            /// </param>
            /// <param name="binary">[length: length] 
            /// Specifies the address an array containing the binary to be loaded into program.
            /// </param>
            /// <param name="length"> 
            /// Specifies the number of bytes contained in binary.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramBinary<T2>(Int32 program, OpenTK.Graphics.ES20.All binaryFormat, [InAttribute, OutAttribute] T2[] binary, Int32 length)
                where T2 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T2& pinned", "binary_pinned");
                        if(binary != null && binary.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T2");
                            Silk.Cil.StoreByName("binary_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("binary_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("binary_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(254);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_get_program_binary]
            /// Load a program object with a program binary
            /// </summary>
            /// <param name="program"> 
            /// Specifies the name of a program object into which to load a program binary.
            /// </param>
            /// <param name="binaryFormat"> 
            /// Specifies the format of the binary data in binary.
            /// </param>
            /// <param name="binary">[length: length] 
            /// Specifies the address an array containing the binary to be loaded into program.
            /// </param>
            /// <param name="length"> 
            /// Specifies the number of bytes contained in binary.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramBinary<T2>(Int32 program, OpenTK.Graphics.ES20.All binaryFormat, [InAttribute, OutAttribute] T2[,] binary, Int32 length)
                where T2 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T2& pinned", "binary_pinned");
                        if(binary != null && binary.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T2[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("binary_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("binary_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("binary_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(254);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_get_program_binary]
            /// Load a program object with a program binary
            /// </summary>
            /// <param name="program"> 
            /// Specifies the name of a program object into which to load a program binary.
            /// </param>
            /// <param name="binaryFormat"> 
            /// Specifies the format of the binary data in binary.
            /// </param>
            /// <param name="binary">[length: length] 
            /// Specifies the address an array containing the binary to be loaded into program.
            /// </param>
            /// <param name="length"> 
            /// Specifies the number of bytes contained in binary.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramBinary<T2>(Int32 program, OpenTK.Graphics.ES20.All binaryFormat, [InAttribute, OutAttribute] T2[,,] binary, Int32 length)
                where T2 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T2& pinned", "binary_pinned");
                        if(binary != null && binary.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T2[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("binary_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("binary_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("binary_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(254);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_get_program_binary]
            /// Load a program object with a program binary
            /// </summary>
            /// <param name="program"> 
            /// Specifies the name of a program object into which to load a program binary.
            /// </param>
            /// <param name="binaryFormat"> 
            /// Specifies the format of the binary data in binary.
            /// </param>
            /// <param name="binary">[length: length] 
            /// Specifies the address an array containing the binary to be loaded into program.
            /// </param>
            /// <param name="length"> 
            /// Specifies the number of bytes contained in binary.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramBinary<T2>(Int32 program, OpenTK.Graphics.ES20.All binaryFormat, [InAttribute, OutAttribute] ref T2 binary, Int32 length)
                where T2 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T2& pinned", "binary_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("binary_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("binary_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(254);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_get_program_binary]
            /// Load a program object with a program binary
            /// </summary>
            /// <param name="program"> 
            /// Specifies the name of a program object into which to load a program binary.
            /// </param>
            /// <param name="binaryFormat"> 
            /// Specifies the format of the binary data in binary.
            /// </param>
            /// <param name="binary">[length: length] 
            /// Specifies the address an array containing the binary to be loaded into program.
            /// </param>
            /// <param name="length"> 
            /// Specifies the number of bytes contained in binary.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramBinary(UInt32 program, OpenTK.Graphics.ES20.All binaryFormat, IntPtr binary, Int32 length)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(254);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_get_program_binary]
            /// Load a program object with a program binary
            /// </summary>
            /// <param name="program"> 
            /// Specifies the name of a program object into which to load a program binary.
            /// </param>
            /// <param name="binaryFormat"> 
            /// Specifies the format of the binary data in binary.
            /// </param>
            /// <param name="binary">[length: length] 
            /// Specifies the address an array containing the binary to be loaded into program.
            /// </param>
            /// <param name="length"> 
            /// Specifies the number of bytes contained in binary.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramBinary<T2>(UInt32 program, OpenTK.Graphics.ES20.All binaryFormat, [InAttribute, OutAttribute] T2[] binary, Int32 length)
                where T2 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T2& pinned", "binary_pinned");
                        if(binary != null && binary.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T2");
                            Silk.Cil.StoreByName("binary_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("binary_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("binary_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(254);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_get_program_binary]
            /// Load a program object with a program binary
            /// </summary>
            /// <param name="program"> 
            /// Specifies the name of a program object into which to load a program binary.
            /// </param>
            /// <param name="binaryFormat"> 
            /// Specifies the format of the binary data in binary.
            /// </param>
            /// <param name="binary">[length: length] 
            /// Specifies the address an array containing the binary to be loaded into program.
            /// </param>
            /// <param name="length"> 
            /// Specifies the number of bytes contained in binary.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramBinary<T2>(UInt32 program, OpenTK.Graphics.ES20.All binaryFormat, [InAttribute, OutAttribute] T2[,] binary, Int32 length)
                where T2 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T2& pinned", "binary_pinned");
                        if(binary != null && binary.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T2[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("binary_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("binary_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("binary_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(254);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_get_program_binary]
            /// Load a program object with a program binary
            /// </summary>
            /// <param name="program"> 
            /// Specifies the name of a program object into which to load a program binary.
            /// </param>
            /// <param name="binaryFormat"> 
            /// Specifies the format of the binary data in binary.
            /// </param>
            /// <param name="binary">[length: length] 
            /// Specifies the address an array containing the binary to be loaded into program.
            /// </param>
            /// <param name="length"> 
            /// Specifies the number of bytes contained in binary.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramBinary<T2>(UInt32 program, OpenTK.Graphics.ES20.All binaryFormat, [InAttribute, OutAttribute] T2[,,] binary, Int32 length)
                where T2 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T2& pinned", "binary_pinned");
                        if(binary != null && binary.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T2[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("binary_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("binary_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("binary_pinned");
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(254);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_get_program_binary]
            /// Load a program object with a program binary
            /// </summary>
            /// <param name="program"> 
            /// Specifies the name of a program object into which to load a program binary.
            /// </param>
            /// <param name="binaryFormat"> 
            /// Specifies the format of the binary data in binary.
            /// </param>
            /// <param name="binary">[length: length] 
            /// Specifies the address an array containing the binary to be loaded into program.
            /// </param>
            /// <param name="length"> 
            /// Specifies the number of bytes contained in binary.
            /// </param>
            [CLSCompliant(false)]
            public static void ProgramBinary<T2>(UInt32 program, OpenTK.Graphics.ES20.All binaryFormat, [InAttribute, OutAttribute] ref T2 binary, Int32 length)
                where T2 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T2& pinned", "binary_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("binary_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("binary_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(254);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(IntPtr), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be one of Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level  is the n sup th mipmap reduction image.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
            /// </param>
            /// <param name="border"> 
            /// This value must be 0.
            /// </param>
            /// <param name="format"> 
            /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
            /// </param>
            /// <param name="type"> 
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
            /// </param>
            /// <param name="pixels">[length: format,type,width,height,depth] 
            /// Specifies a pointer to the image data in memory.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            public static void TexImage3D(OpenTK.Graphics.ES20.All target, Int32 level, OpenTK.Graphics.ES20.All internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, IntPtr pixels)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldarg(9);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(326);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget3d), typeof(Int32), typeof(OpenTK.Graphics.ES20.TextureComponentCount), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be one of Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level  is the n sup th mipmap reduction image.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
            /// </param>
            /// <param name="border"> 
            /// This value must be 0.
            /// </param>
            /// <param name="format"> 
            /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
            /// </param>
            /// <param name="type"> 
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
            /// </param>
            /// <param name="pixels">[length: format,type,width,height,depth] 
            /// Specifies a pointer to the image data in memory.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void TexImage3D<T9>(OpenTK.Graphics.ES20.All target, Int32 level, OpenTK.Graphics.ES20.All internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, [InAttribute, OutAttribute] T9[] pixels)
                where T9 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T9& pinned", "pixels_pinned");
                        if(pixels != null && pixels.Length != 0)
                        {
                            Silk.Cil.Ldarg(9);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T9");
                            Silk.Cil.StoreByName("pixels_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("pixels_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.LoadByName("pixels_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(326);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget3d), typeof(Int32), typeof(OpenTK.Graphics.ES20.TextureComponentCount), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be one of Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level  is the n sup th mipmap reduction image.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
            /// </param>
            /// <param name="border"> 
            /// This value must be 0.
            /// </param>
            /// <param name="format"> 
            /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
            /// </param>
            /// <param name="type"> 
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
            /// </param>
            /// <param name="pixels">[length: format,type,width,height,depth] 
            /// Specifies a pointer to the image data in memory.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void TexImage3D<T9>(OpenTK.Graphics.ES20.All target, Int32 level, OpenTK.Graphics.ES20.All internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, [InAttribute, OutAttribute] T9[,] pixels)
                where T9 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T9& pinned", "pixels_pinned");
                        if(pixels != null && pixels.Length != 0)
                        {
                            Silk.Cil.Ldarg(9);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T9[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("pixels_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("pixels_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.LoadByName("pixels_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(326);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget3d), typeof(Int32), typeof(OpenTK.Graphics.ES20.TextureComponentCount), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be one of Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level  is the n sup th mipmap reduction image.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
            /// </param>
            /// <param name="border"> 
            /// This value must be 0.
            /// </param>
            /// <param name="format"> 
            /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
            /// </param>
            /// <param name="type"> 
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
            /// </param>
            /// <param name="pixels">[length: format,type,width,height,depth] 
            /// Specifies a pointer to the image data in memory.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void TexImage3D<T9>(OpenTK.Graphics.ES20.All target, Int32 level, OpenTK.Graphics.ES20.All internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, [InAttribute, OutAttribute] T9[,,] pixels)
                where T9 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T9& pinned", "pixels_pinned");
                        if(pixels != null && pixels.Length != 0)
                        {
                            Silk.Cil.Ldarg(9);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T9[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("pixels_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("pixels_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.LoadByName("pixels_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(326);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget3d), typeof(Int32), typeof(OpenTK.Graphics.ES20.TextureComponentCount), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be one of Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level  is the n sup th mipmap reduction image.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
            /// </param>
            /// <param name="border"> 
            /// This value must be 0.
            /// </param>
            /// <param name="format"> 
            /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
            /// </param>
            /// <param name="type"> 
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
            /// </param>
            /// <param name="pixels">[length: format,type,width,height,depth] 
            /// Specifies a pointer to the image data in memory.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            public static void TexImage3D<T9>(OpenTK.Graphics.ES20.All target, Int32 level, OpenTK.Graphics.ES20.All internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, [InAttribute, OutAttribute] ref T9 pixels)
                where T9 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T9& pinned", "pixels_pinned");
                        Silk.Cil.Ldarg(9);
                        Silk.Cil.StoreByName("pixels_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.LoadByName("pixels_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(326);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget3d), typeof(Int32), typeof(OpenTK.Graphics.ES20.TextureComponentCount), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be one of Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level  is the n sup th mipmap reduction image.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
            /// </param>
            /// <param name="border"> 
            /// This value must be 0.
            /// </param>
            /// <param name="format"> 
            /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
            /// </param>
            /// <param name="type"> 
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
            /// </param>
            /// <param name="pixels">[length: format,type,width,height,depth] 
            /// Specifies a pointer to the image data in memory.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            public static void TexImage3D(OpenTK.Graphics.ES20.All target, Int32 level, Int32 internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, IntPtr pixels)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldarg(9);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(326);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget3d), typeof(Int32), typeof(OpenTK.Graphics.ES20.TextureComponentCount), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be one of Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level  is the n sup th mipmap reduction image.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
            /// </param>
            /// <param name="border"> 
            /// This value must be 0.
            /// </param>
            /// <param name="format"> 
            /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
            /// </param>
            /// <param name="type"> 
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
            /// </param>
            /// <param name="pixels">[length: format,type,width,height,depth] 
            /// Specifies a pointer to the image data in memory.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void TexImage3D<T9>(OpenTK.Graphics.ES20.All target, Int32 level, Int32 internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, [InAttribute, OutAttribute] T9[] pixels)
                where T9 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T9& pinned", "pixels_pinned");
                        if(pixels != null && pixels.Length != 0)
                        {
                            Silk.Cil.Ldarg(9);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T9");
                            Silk.Cil.StoreByName("pixels_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("pixels_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.LoadByName("pixels_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(326);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget3d), typeof(Int32), typeof(OpenTK.Graphics.ES20.TextureComponentCount), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be one of Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level  is the n sup th mipmap reduction image.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
            /// </param>
            /// <param name="border"> 
            /// This value must be 0.
            /// </param>
            /// <param name="format"> 
            /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
            /// </param>
            /// <param name="type"> 
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
            /// </param>
            /// <param name="pixels">[length: format,type,width,height,depth] 
            /// Specifies a pointer to the image data in memory.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void TexImage3D<T9>(OpenTK.Graphics.ES20.All target, Int32 level, Int32 internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, [InAttribute, OutAttribute] T9[,] pixels)
                where T9 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T9& pinned", "pixels_pinned");
                        if(pixels != null && pixels.Length != 0)
                        {
                            Silk.Cil.Ldarg(9);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T9[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("pixels_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("pixels_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.LoadByName("pixels_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(326);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget3d), typeof(Int32), typeof(OpenTK.Graphics.ES20.TextureComponentCount), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be one of Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level  is the n sup th mipmap reduction image.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
            /// </param>
            /// <param name="border"> 
            /// This value must be 0.
            /// </param>
            /// <param name="format"> 
            /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
            /// </param>
            /// <param name="type"> 
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
            /// </param>
            /// <param name="pixels">[length: format,type,width,height,depth] 
            /// Specifies a pointer to the image data in memory.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void TexImage3D<T9>(OpenTK.Graphics.ES20.All target, Int32 level, Int32 internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, [InAttribute, OutAttribute] T9[,,] pixels)
                where T9 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T9& pinned", "pixels_pinned");
                        if(pixels != null && pixels.Length != 0)
                        {
                            Silk.Cil.Ldarg(9);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T9[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("pixels_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("pixels_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.LoadByName("pixels_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(326);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget3d), typeof(Int32), typeof(OpenTK.Graphics.ES20.TextureComponentCount), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be one of Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level  is the n sup th mipmap reduction image.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
            /// </param>
            /// <param name="border"> 
            /// This value must be 0.
            /// </param>
            /// <param name="format"> 
            /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
            /// </param>
            /// <param name="type"> 
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
            /// </param>
            /// <param name="pixels">[length: format,type,width,height,depth] 
            /// Specifies a pointer to the image data in memory.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            public static void TexImage3D<T9>(OpenTK.Graphics.ES20.All target, Int32 level, Int32 internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, [InAttribute, OutAttribute] ref T9 pixels)
                where T9 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T9& pinned", "pixels_pinned");
                        Silk.Cil.Ldarg(9);
                        Silk.Cil.StoreByName("pixels_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.LoadByName("pixels_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(326);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget3d), typeof(Int32), typeof(OpenTK.Graphics.ES20.TextureComponentCount), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be one of Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level  is the n sup th mipmap reduction image.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
            /// </param>
            /// <param name="border"> 
            /// This value must be 0.
            /// </param>
            /// <param name="format"> 
            /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
            /// </param>
            /// <param name="type"> 
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
            /// </param>
            /// <param name="pixels">[length: format,type,width,height,depth] 
            /// Specifies a pointer to the image data in memory.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            public static void TexImage3D(OpenTK.Graphics.ES20.TextureTarget3d target, Int32 level, Int32 internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, IntPtr pixels)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldarg(9);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(326);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget3d), typeof(Int32), typeof(OpenTK.Graphics.ES20.TextureComponentCount), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be one of Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level  is the n sup th mipmap reduction image.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
            /// </param>
            /// <param name="border"> 
            /// This value must be 0.
            /// </param>
            /// <param name="format"> 
            /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
            /// </param>
            /// <param name="type"> 
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
            /// </param>
            /// <param name="pixels">[length: format,type,width,height,depth] 
            /// Specifies a pointer to the image data in memory.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void TexImage3D<T9>(OpenTK.Graphics.ES20.TextureTarget3d target, Int32 level, Int32 internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, [InAttribute, OutAttribute] T9[] pixels)
                where T9 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T9& pinned", "pixels_pinned");
                        if(pixels != null && pixels.Length != 0)
                        {
                            Silk.Cil.Ldarg(9);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T9");
                            Silk.Cil.StoreByName("pixels_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("pixels_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.LoadByName("pixels_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(326);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget3d), typeof(Int32), typeof(OpenTK.Graphics.ES20.TextureComponentCount), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be one of Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level  is the n sup th mipmap reduction image.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
            /// </param>
            /// <param name="border"> 
            /// This value must be 0.
            /// </param>
            /// <param name="format"> 
            /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
            /// </param>
            /// <param name="type"> 
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
            /// </param>
            /// <param name="pixels">[length: format,type,width,height,depth] 
            /// Specifies a pointer to the image data in memory.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void TexImage3D<T9>(OpenTK.Graphics.ES20.TextureTarget3d target, Int32 level, Int32 internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, [InAttribute, OutAttribute] T9[,] pixels)
                where T9 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T9& pinned", "pixels_pinned");
                        if(pixels != null && pixels.Length != 0)
                        {
                            Silk.Cil.Ldarg(9);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T9[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("pixels_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("pixels_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.LoadByName("pixels_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(326);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget3d), typeof(Int32), typeof(OpenTK.Graphics.ES20.TextureComponentCount), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be one of Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level  is the n sup th mipmap reduction image.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
            /// </param>
            /// <param name="border"> 
            /// This value must be 0.
            /// </param>
            /// <param name="format"> 
            /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
            /// </param>
            /// <param name="type"> 
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
            /// </param>
            /// <param name="pixels">[length: format,type,width,height,depth] 
            /// Specifies a pointer to the image data in memory.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void TexImage3D<T9>(OpenTK.Graphics.ES20.TextureTarget3d target, Int32 level, Int32 internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, [InAttribute, OutAttribute] T9[,,] pixels)
                where T9 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T9& pinned", "pixels_pinned");
                        if(pixels != null && pixels.Length != 0)
                        {
                            Silk.Cil.Ldarg(9);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T9[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("pixels_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("pixels_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.LoadByName("pixels_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(326);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget3d), typeof(Int32), typeof(OpenTK.Graphics.ES20.TextureComponentCount), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be one of Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level  is the n sup th mipmap reduction image.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
            /// </param>
            /// <param name="border"> 
            /// This value must be 0.
            /// </param>
            /// <param name="format"> 
            /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
            /// </param>
            /// <param name="type"> 
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
            /// </param>
            /// <param name="pixels">[length: format,type,width,height,depth] 
            /// Specifies a pointer to the image data in memory.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            public static void TexImage3D<T9>(OpenTK.Graphics.ES20.TextureTarget3d target, Int32 level, Int32 internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, [InAttribute, OutAttribute] ref T9 pixels)
                where T9 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T9& pinned", "pixels_pinned");
                        Silk.Cil.Ldarg(9);
                        Silk.Cil.StoreByName("pixels_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.LoadByName("pixels_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(326);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget3d), typeof(Int32), typeof(OpenTK.Graphics.ES20.TextureComponentCount), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be one of Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level  is the n sup th mipmap reduction image.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
            /// </param>
            /// <param name="border"> 
            /// This value must be 0.
            /// </param>
            /// <param name="format"> 
            /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
            /// </param>
            /// <param name="type"> 
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
            /// </param>
            /// <param name="pixels">[length: format,type,width,height,depth] 
            /// Specifies a pointer to the image data in memory.
            /// </param>
            public static void TexImage3D(OpenTK.Graphics.ES20.TextureTarget3d target, Int32 level, OpenTK.Graphics.ES20.TextureComponentCount internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, IntPtr pixels)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldarg(9);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(326);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget3d), typeof(Int32), typeof(OpenTK.Graphics.ES20.TextureComponentCount), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be one of Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level  is the n sup th mipmap reduction image.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
            /// </param>
            /// <param name="border"> 
            /// This value must be 0.
            /// </param>
            /// <param name="format"> 
            /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
            /// </param>
            /// <param name="type"> 
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
            /// </param>
            /// <param name="pixels">[length: format,type,width,height,depth] 
            /// Specifies a pointer to the image data in memory.
            /// </param>
            [CLSCompliant(false)]
            public static void TexImage3D<T9>(OpenTK.Graphics.ES20.TextureTarget3d target, Int32 level, OpenTK.Graphics.ES20.TextureComponentCount internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, [InAttribute, OutAttribute] T9[] pixels)
                where T9 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T9& pinned", "pixels_pinned");
                        if(pixels != null && pixels.Length != 0)
                        {
                            Silk.Cil.Ldarg(9);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T9");
                            Silk.Cil.StoreByName("pixels_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("pixels_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.LoadByName("pixels_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(326);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget3d), typeof(Int32), typeof(OpenTK.Graphics.ES20.TextureComponentCount), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be one of Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level  is the n sup th mipmap reduction image.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
            /// </param>
            /// <param name="border"> 
            /// This value must be 0.
            /// </param>
            /// <param name="format"> 
            /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
            /// </param>
            /// <param name="type"> 
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
            /// </param>
            /// <param name="pixels">[length: format,type,width,height,depth] 
            /// Specifies a pointer to the image data in memory.
            /// </param>
            [CLSCompliant(false)]
            public static void TexImage3D<T9>(OpenTK.Graphics.ES20.TextureTarget3d target, Int32 level, OpenTK.Graphics.ES20.TextureComponentCount internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, [InAttribute, OutAttribute] T9[,] pixels)
                where T9 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T9& pinned", "pixels_pinned");
                        if(pixels != null && pixels.Length != 0)
                        {
                            Silk.Cil.Ldarg(9);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T9[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("pixels_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("pixels_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.LoadByName("pixels_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(326);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget3d), typeof(Int32), typeof(OpenTK.Graphics.ES20.TextureComponentCount), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be one of Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level  is the n sup th mipmap reduction image.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
            /// </param>
            /// <param name="border"> 
            /// This value must be 0.
            /// </param>
            /// <param name="format"> 
            /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
            /// </param>
            /// <param name="type"> 
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
            /// </param>
            /// <param name="pixels">[length: format,type,width,height,depth] 
            /// Specifies a pointer to the image data in memory.
            /// </param>
            [CLSCompliant(false)]
            public static void TexImage3D<T9>(OpenTK.Graphics.ES20.TextureTarget3d target, Int32 level, OpenTK.Graphics.ES20.TextureComponentCount internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, [InAttribute, OutAttribute] T9[,,] pixels)
                where T9 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T9& pinned", "pixels_pinned");
                        if(pixels != null && pixels.Length != 0)
                        {
                            Silk.Cil.Ldarg(9);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T9[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("pixels_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("pixels_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.LoadByName("pixels_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(326);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget3d), typeof(Int32), typeof(OpenTK.Graphics.ES20.TextureComponentCount), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be one of Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level  is the n sup th mipmap reduction image.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
            /// </param>
            /// <param name="border"> 
            /// This value must be 0.
            /// </param>
            /// <param name="format"> 
            /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
            /// </param>
            /// <param name="type"> 
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
            /// </param>
            /// <param name="pixels">[length: format,type,width,height,depth] 
            /// Specifies a pointer to the image data in memory.
            /// </param>
            public static void TexImage3D<T9>(OpenTK.Graphics.ES20.TextureTarget3d target, Int32 level, OpenTK.Graphics.ES20.TextureComponentCount internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, [InAttribute, OutAttribute] ref T9 pixels)
                where T9 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T9& pinned", "pixels_pinned");
                        Silk.Cil.Ldarg(9);
                        Silk.Cil.StoreByName("pixels_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.LoadByName("pixels_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(326);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget3d), typeof(Int32), typeof(OpenTK.Graphics.ES20.TextureComponentCount), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.PixelFormat), typeof(OpenTK.Graphics.ES20.PixelType), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_storage_multisample_2d_array]
            /// Specify storage for a two-dimensional multisample array texture
            /// </summary>
            /// <param name="target"> 
            /// Specify the target of the operation. target must be Texture2DMultisampleArray or ProxyTexture2DMultisampleMultisample.
            /// </param>
            /// <param name="samples"> 
            /// Specify the number of samples in the texture.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the sized internal format to be used to store texture image data.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture, in texels.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture, in texels.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture, in layers.
            /// </param>
            /// <param name="fixedsamplelocations"> 
            /// Specifies whether the image will use identical sample locations and the same number of samples for all texels in the image, and the sample locations will not depend on the internal format or size of the image.
            /// </param>
            public static void TexStorage3DMultisample(OpenTK.Graphics.ES20.All target, Int32 samples, OpenTK.Graphics.ES20.All internalformat, Int32 width, Int32 height, Int32 depth, bool fixedsamplelocations)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(336);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.All), typeof(Int32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32), typeof(Int32), typeof(Int32), typeof(bool));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture subimage
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be Texture3D or Texture2DArray.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="xoffset"> 
            /// Specifies a texel offset in the x direction within the texture array.
            /// </param>
            /// <param name="yoffset"> 
            /// Specifies a texel offset in the y direction within the texture array.
            /// </param>
            /// <param name="zoffset"> 
            /// Specifies a texel offset in the z direction within the texture array.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture subimage.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture subimage.
            /// </param>
            /// <param name="format"> 
            /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, DepthComponent, and StencilIndex.
            /// </param>
            /// <param name="type"> 
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
            /// </param>
            /// <param name="pixels">[length: format,type,width,height,depth] 
            /// Specifies a pointer to the image data in memory.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            public static void TexSubImage3D(OpenTK.Graphics.ES20.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, IntPtr pixels)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldarg(9);
                        Silk.Cil.Ldarg(10);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(338);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget3d), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.All), typeof(OpenTK.Graphics.ES20.All), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture subimage
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be Texture3D or Texture2DArray.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="xoffset"> 
            /// Specifies a texel offset in the x direction within the texture array.
            /// </param>
            /// <param name="yoffset"> 
            /// Specifies a texel offset in the y direction within the texture array.
            /// </param>
            /// <param name="zoffset"> 
            /// Specifies a texel offset in the z direction within the texture array.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture subimage.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture subimage.
            /// </param>
            /// <param name="format"> 
            /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, DepthComponent, and StencilIndex.
            /// </param>
            /// <param name="type"> 
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
            /// </param>
            /// <param name="pixels">[length: format,type,width,height,depth] 
            /// Specifies a pointer to the image data in memory.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void TexSubImage3D<T10>(OpenTK.Graphics.ES20.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, [InAttribute, OutAttribute] T10[] pixels)
                where T10 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T10& pinned", "pixels_pinned");
                        if(pixels != null && pixels.Length != 0)
                        {
                            Silk.Cil.Ldarg(10);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T10");
                            Silk.Cil.StoreByName("pixels_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("pixels_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldarg(9);
                        Silk.Cil.LoadByName("pixels_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(338);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget3d), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.All), typeof(OpenTK.Graphics.ES20.All), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture subimage
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be Texture3D or Texture2DArray.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="xoffset"> 
            /// Specifies a texel offset in the x direction within the texture array.
            /// </param>
            /// <param name="yoffset"> 
            /// Specifies a texel offset in the y direction within the texture array.
            /// </param>
            /// <param name="zoffset"> 
            /// Specifies a texel offset in the z direction within the texture array.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture subimage.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture subimage.
            /// </param>
            /// <param name="format"> 
            /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, DepthComponent, and StencilIndex.
            /// </param>
            /// <param name="type"> 
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
            /// </param>
            /// <param name="pixels">[length: format,type,width,height,depth] 
            /// Specifies a pointer to the image data in memory.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void TexSubImage3D<T10>(OpenTK.Graphics.ES20.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, [InAttribute, OutAttribute] T10[,] pixels)
                where T10 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T10& pinned", "pixels_pinned");
                        if(pixels != null && pixels.Length != 0)
                        {
                            Silk.Cil.Ldarg(10);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T10[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("pixels_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("pixels_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldarg(9);
                        Silk.Cil.LoadByName("pixels_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(338);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget3d), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.All), typeof(OpenTK.Graphics.ES20.All), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture subimage
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be Texture3D or Texture2DArray.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="xoffset"> 
            /// Specifies a texel offset in the x direction within the texture array.
            /// </param>
            /// <param name="yoffset"> 
            /// Specifies a texel offset in the y direction within the texture array.
            /// </param>
            /// <param name="zoffset"> 
            /// Specifies a texel offset in the z direction within the texture array.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture subimage.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture subimage.
            /// </param>
            /// <param name="format"> 
            /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, DepthComponent, and StencilIndex.
            /// </param>
            /// <param name="type"> 
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
            /// </param>
            /// <param name="pixels">[length: format,type,width,height,depth] 
            /// Specifies a pointer to the image data in memory.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [CLSCompliant(false)]
            public static void TexSubImage3D<T10>(OpenTK.Graphics.ES20.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, [InAttribute, OutAttribute] T10[,,] pixels)
                where T10 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T10& pinned", "pixels_pinned");
                        if(pixels != null && pixels.Length != 0)
                        {
                            Silk.Cil.Ldarg(10);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T10[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("pixels_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("pixels_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldarg(9);
                        Silk.Cil.LoadByName("pixels_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(338);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget3d), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.All), typeof(OpenTK.Graphics.ES20.All), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture subimage
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be Texture3D or Texture2DArray.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="xoffset"> 
            /// Specifies a texel offset in the x direction within the texture array.
            /// </param>
            /// <param name="yoffset"> 
            /// Specifies a texel offset in the y direction within the texture array.
            /// </param>
            /// <param name="zoffset"> 
            /// Specifies a texel offset in the z direction within the texture array.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture subimage.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture subimage.
            /// </param>
            /// <param name="format"> 
            /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, DepthComponent, and StencilIndex.
            /// </param>
            /// <param name="type"> 
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
            /// </param>
            /// <param name="pixels">[length: format,type,width,height,depth] 
            /// Specifies a pointer to the image data in memory.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            public static void TexSubImage3D<T10>(OpenTK.Graphics.ES20.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, [InAttribute, OutAttribute] ref T10 pixels)
                where T10 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T10& pinned", "pixels_pinned");
                        Silk.Cil.Ldarg(10);
                        Silk.Cil.StoreByName("pixels_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldarg(9);
                        Silk.Cil.LoadByName("pixels_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(338);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget3d), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.All), typeof(OpenTK.Graphics.ES20.All), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture subimage
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be Texture3D or Texture2DArray.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="xoffset"> 
            /// Specifies a texel offset in the x direction within the texture array.
            /// </param>
            /// <param name="yoffset"> 
            /// Specifies a texel offset in the y direction within the texture array.
            /// </param>
            /// <param name="zoffset"> 
            /// Specifies a texel offset in the z direction within the texture array.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture subimage.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture subimage.
            /// </param>
            /// <param name="format"> 
            /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, DepthComponent, and StencilIndex.
            /// </param>
            /// <param name="type"> 
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
            /// </param>
            /// <param name="pixels">[length: format,type,width,height,depth] 
            /// Specifies a pointer to the image data in memory.
            /// </param>
            public static void TexSubImage3D(OpenTK.Graphics.ES20.TextureTarget3d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, IntPtr pixels)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldarg(9);
                        Silk.Cil.Ldarg(10);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(338);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget3d), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.All), typeof(OpenTK.Graphics.ES20.All), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture subimage
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be Texture3D or Texture2DArray.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="xoffset"> 
            /// Specifies a texel offset in the x direction within the texture array.
            /// </param>
            /// <param name="yoffset"> 
            /// Specifies a texel offset in the y direction within the texture array.
            /// </param>
            /// <param name="zoffset"> 
            /// Specifies a texel offset in the z direction within the texture array.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture subimage.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture subimage.
            /// </param>
            /// <param name="format"> 
            /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, DepthComponent, and StencilIndex.
            /// </param>
            /// <param name="type"> 
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
            /// </param>
            /// <param name="pixels">[length: format,type,width,height,depth] 
            /// Specifies a pointer to the image data in memory.
            /// </param>
            [CLSCompliant(false)]
            public static void TexSubImage3D<T10>(OpenTK.Graphics.ES20.TextureTarget3d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, [InAttribute, OutAttribute] T10[] pixels)
                where T10 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T10& pinned", "pixels_pinned");
                        if(pixels != null && pixels.Length != 0)
                        {
                            Silk.Cil.Ldarg(10);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T10");
                            Silk.Cil.StoreByName("pixels_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("pixels_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldarg(9);
                        Silk.Cil.LoadByName("pixels_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(338);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget3d), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.All), typeof(OpenTK.Graphics.ES20.All), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture subimage
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be Texture3D or Texture2DArray.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="xoffset"> 
            /// Specifies a texel offset in the x direction within the texture array.
            /// </param>
            /// <param name="yoffset"> 
            /// Specifies a texel offset in the y direction within the texture array.
            /// </param>
            /// <param name="zoffset"> 
            /// Specifies a texel offset in the z direction within the texture array.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture subimage.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture subimage.
            /// </param>
            /// <param name="format"> 
            /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, DepthComponent, and StencilIndex.
            /// </param>
            /// <param name="type"> 
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
            /// </param>
            /// <param name="pixels">[length: format,type,width,height,depth] 
            /// Specifies a pointer to the image data in memory.
            /// </param>
            [CLSCompliant(false)]
            public static void TexSubImage3D<T10>(OpenTK.Graphics.ES20.TextureTarget3d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, [InAttribute, OutAttribute] T10[,] pixels)
                where T10 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T10& pinned", "pixels_pinned");
                        if(pixels != null && pixels.Length != 0)
                        {
                            Silk.Cil.Ldarg(10);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T10[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("pixels_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("pixels_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldarg(9);
                        Silk.Cil.LoadByName("pixels_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(338);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget3d), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.All), typeof(OpenTK.Graphics.ES20.All), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture subimage
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be Texture3D or Texture2DArray.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="xoffset"> 
            /// Specifies a texel offset in the x direction within the texture array.
            /// </param>
            /// <param name="yoffset"> 
            /// Specifies a texel offset in the y direction within the texture array.
            /// </param>
            /// <param name="zoffset"> 
            /// Specifies a texel offset in the z direction within the texture array.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture subimage.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture subimage.
            /// </param>
            /// <param name="format"> 
            /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, DepthComponent, and StencilIndex.
            /// </param>
            /// <param name="type"> 
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
            /// </param>
            /// <param name="pixels">[length: format,type,width,height,depth] 
            /// Specifies a pointer to the image data in memory.
            /// </param>
            [CLSCompliant(false)]
            public static void TexSubImage3D<T10>(OpenTK.Graphics.ES20.TextureTarget3d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, [InAttribute, OutAttribute] T10[,,] pixels)
                where T10 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T10& pinned", "pixels_pinned");
                        if(pixels != null && pixels.Length != 0)
                        {
                            Silk.Cil.Ldarg(10);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T10[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("pixels_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("pixels_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldarg(9);
                        Silk.Cil.LoadByName("pixels_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(338);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget3d), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.All), typeof(OpenTK.Graphics.ES20.All), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture subimage
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be Texture3D or Texture2DArray.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="xoffset"> 
            /// Specifies a texel offset in the x direction within the texture array.
            /// </param>
            /// <param name="yoffset"> 
            /// Specifies a texel offset in the y direction within the texture array.
            /// </param>
            /// <param name="zoffset"> 
            /// Specifies a texel offset in the z direction within the texture array.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture subimage.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture subimage.
            /// </param>
            /// <param name="format"> 
            /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, DepthComponent, and StencilIndex.
            /// </param>
            /// <param name="type"> 
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
            /// </param>
            /// <param name="pixels">[length: format,type,width,height,depth] 
            /// Specifies a pointer to the image data in memory.
            /// </param>
            public static void TexSubImage3D<T10>(OpenTK.Graphics.ES20.TextureTarget3d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, [InAttribute, OutAttribute] ref T10 pixels)
                where T10 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T10& pinned", "pixels_pinned");
                        Silk.Cil.Ldarg(10);
                        Silk.Cil.StoreByName("pixels_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldarg(9);
                        Silk.Cil.LoadByName("pixels_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(338);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.TextureTarget3d), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.All), typeof(OpenTK.Graphics.ES20.All), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_mapbuffer]</summary>
            /// <param name="target"></param>
            [Obsolete("Use strongly-typed overload instead")]
            public static bool UnmapBuffer(OpenTK.Graphics.ES20.All target)
            {
                unsafe
                {
                    bool __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(368);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(byte), typeof(OpenTK.Graphics.ES20.BufferTarget));
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: OES_mapbuffer]</summary>
            /// <param name="target"></param>
            public static bool UnmapBuffer(OpenTK.Graphics.ES20.BufferTarget target)
            {
                unsafe
                {
                    bool __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(368);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(byte), typeof(OpenTK.Graphics.ES20.BufferTarget));
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

        }

        public static partial class Qcom
        {
            /// <summary>[requires: QCOM_alpha_test]
            /// Specify the alpha test function
            /// </summary>
            /// <param name="func"> 
            /// Specifies the alpha comparison function. Symbolic constants Never, Less, Equal, Lequal, Greater, Notequal, Gequal, and Always are accepted. The initial value is Always.
            /// </param>
            /// <param name="@ref"> 
            /// Specifies the reference value that incoming alpha values are compared to. This value is clamped to the range [0,1], where 0 represents the lowest possible alpha value and 1 the highest possible value. The initial reference value is 0.
            /// </param>
            public static void AlphaFunc(OpenTK.Graphics.ES20.All func, Single @ref)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(3);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.All), typeof(Single));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_driver_control]</summary>
            /// <param name="driverControl"></param>
            [CLSCompliant(false)]
            public static void DisableDriverControl(Int32 driverControl)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(83);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_driver_control]</summary>
            /// <param name="driverControl"></param>
            [CLSCompliant(false)]
            public static void DisableDriverControl(UInt32 driverControl)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(83);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_driver_control]</summary>
            /// <param name="driverControl"></param>
            [CLSCompliant(false)]
            public static void EnableDriverControl(Int32 driverControl)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(101);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_driver_control]</summary>
            /// <param name="driverControl"></param>
            [CLSCompliant(false)]
            public static void EnableDriverControl(UInt32 driverControl)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(101);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_tiled_rendering]</summary>
            /// <param name="preserveMask"></param>
            [CLSCompliant(false)]
            public static void EndTiling(Int32 preserveMask)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(107);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_tiled_rendering]</summary>
            /// <param name="preserveMask"></param>
            [CLSCompliant(false)]
            public static void EndTiling(UInt32 preserveMask)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(107);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="target"></param>
            /// <param name="@params"></param>
            public static void ExtGetBufferPointer(OpenTK.Graphics.ES20.All target, [OutAttribute] IntPtr @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(108);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.All), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="target"></param>
            /// <param name="@params"></param>
            [CLSCompliant(false)]
            public static void ExtGetBufferPointer<T1>(OpenTK.Graphics.ES20.All target, [InAttribute, OutAttribute] T1[] @params)
                where T1 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T1& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T1");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(108);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.All), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="target"></param>
            /// <param name="@params"></param>
            [CLSCompliant(false)]
            public static void ExtGetBufferPointer<T1>(OpenTK.Graphics.ES20.All target, [InAttribute, OutAttribute] T1[,] @params)
                where T1 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T1& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T1[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(108);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.All), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="target"></param>
            /// <param name="@params"></param>
            [CLSCompliant(false)]
            public static void ExtGetBufferPointer<T1>(OpenTK.Graphics.ES20.All target, [InAttribute, OutAttribute] T1[,,] @params)
                where T1 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T1& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T1[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(108);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.All), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="target"></param>
            /// <param name="@params"></param>
            public static void ExtGetBufferPointer<T1>(OpenTK.Graphics.ES20.All target, [InAttribute, OutAttribute] ref T1 @params)
                where T1 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T1& pinned", "params_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(108);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.All), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="buffers">[length: maxBuffers]</param>
            /// <param name="maxBuffers"></param>
            /// <param name="numBuffers">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void ExtGetBuffers([OutAttribute] Int32[] buffers, Int32 maxBuffers, [OutAttribute] Int32[] numBuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "buffers_pinned");
                        if(buffers != null && buffers.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("buffers_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("buffers_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numBuffers_pinned");
                        if(numBuffers != null && numBuffers.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("numBuffers_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("numBuffers_pinned");
                        }
                        Silk.Cil.LoadByName("buffers_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numBuffers_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(109);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="buffers">[length: maxBuffers]</param>
            /// <param name="maxBuffers"></param>
            /// <param name="numBuffers">[length: 1]</param>
            [CLSCompliant(false)]
            public static void ExtGetBuffers([OutAttribute] Int32[] buffers, Int32 maxBuffers, [OutAttribute] out Int32 numBuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "buffers_pinned");
                        if(buffers != null && buffers.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("buffers_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("buffers_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numBuffers_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("numBuffers_pinned");
                        Silk.Cil.LoadByName("buffers_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numBuffers_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(109);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="buffers">[length: maxBuffers]</param>
            /// <param name="maxBuffers"></param>
            /// <param name="numBuffers">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void ExtGetBuffers([OutAttribute] out Int32 buffers, Int32 maxBuffers, [OutAttribute] out Int32 numBuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "buffers_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("buffers_pinned");
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numBuffers_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("numBuffers_pinned");
                        Silk.Cil.LoadByName("buffers_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numBuffers_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(109);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="buffers">[length: maxBuffers]</param>
            /// <param name="maxBuffers"></param>
            /// <param name="numBuffers">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static unsafe void ExtGetBuffers([OutAttribute] Int32* buffers, Int32 maxBuffers, [OutAttribute] Int32* numBuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(109);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="buffers">[length: maxBuffers]</param>
            /// <param name="maxBuffers"></param>
            /// <param name="numBuffers">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void ExtGetBuffers([OutAttribute] UInt32[] buffers, Int32 maxBuffers, [OutAttribute] Int32[] numBuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "buffers_pinned");
                        if(buffers != null && buffers.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("buffers_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("buffers_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numBuffers_pinned");
                        if(numBuffers != null && numBuffers.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("numBuffers_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("numBuffers_pinned");
                        }
                        Silk.Cil.LoadByName("buffers_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numBuffers_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(109);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="buffers">[length: maxBuffers]</param>
            /// <param name="maxBuffers"></param>
            /// <param name="numBuffers">[length: 1]</param>
            [CLSCompliant(false)]
            public static void ExtGetBuffers([OutAttribute] UInt32[] buffers, Int32 maxBuffers, [OutAttribute] out Int32 numBuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "buffers_pinned");
                        if(buffers != null && buffers.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("buffers_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("buffers_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numBuffers_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("numBuffers_pinned");
                        Silk.Cil.LoadByName("buffers_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numBuffers_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(109);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="buffers">[length: maxBuffers]</param>
            /// <param name="maxBuffers"></param>
            /// <param name="numBuffers">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void ExtGetBuffers([OutAttribute] out UInt32 buffers, Int32 maxBuffers, [OutAttribute] out Int32 numBuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "buffers_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("buffers_pinned");
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numBuffers_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("numBuffers_pinned");
                        Silk.Cil.LoadByName("buffers_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numBuffers_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(109);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="buffers">[length: maxBuffers]</param>
            /// <param name="maxBuffers"></param>
            /// <param name="numBuffers">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static unsafe void ExtGetBuffers([OutAttribute] UInt32* buffers, Int32 maxBuffers, [OutAttribute] Int32* numBuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(109);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="framebuffers">[length: maxFramebuffers]</param>
            /// <param name="maxFramebuffers"></param>
            /// <param name="numFramebuffers">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void ExtGetFramebuffers([OutAttribute] Int32[] framebuffers, Int32 maxFramebuffers, [OutAttribute] Int32[] numFramebuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "framebuffers_pinned");
                        if(framebuffers != null && framebuffers.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("framebuffers_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("framebuffers_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numFramebuffers_pinned");
                        if(numFramebuffers != null && numFramebuffers.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("numFramebuffers_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("numFramebuffers_pinned");
                        }
                        Silk.Cil.LoadByName("framebuffers_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numFramebuffers_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(110);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="framebuffers">[length: maxFramebuffers]</param>
            /// <param name="maxFramebuffers"></param>
            /// <param name="numFramebuffers">[length: 1]</param>
            [CLSCompliant(false)]
            public static void ExtGetFramebuffers([OutAttribute] Int32[] framebuffers, Int32 maxFramebuffers, [OutAttribute] out Int32 numFramebuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "framebuffers_pinned");
                        if(framebuffers != null && framebuffers.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("framebuffers_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("framebuffers_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numFramebuffers_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("numFramebuffers_pinned");
                        Silk.Cil.LoadByName("framebuffers_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numFramebuffers_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(110);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="framebuffers">[length: maxFramebuffers]</param>
            /// <param name="maxFramebuffers"></param>
            /// <param name="numFramebuffers">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void ExtGetFramebuffers([OutAttribute] out Int32 framebuffers, Int32 maxFramebuffers, [OutAttribute] out Int32 numFramebuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "framebuffers_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("framebuffers_pinned");
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numFramebuffers_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("numFramebuffers_pinned");
                        Silk.Cil.LoadByName("framebuffers_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numFramebuffers_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(110);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="framebuffers">[length: maxFramebuffers]</param>
            /// <param name="maxFramebuffers"></param>
            /// <param name="numFramebuffers">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static unsafe void ExtGetFramebuffers([OutAttribute] Int32* framebuffers, Int32 maxFramebuffers, [OutAttribute] Int32* numFramebuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(110);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="framebuffers">[length: maxFramebuffers]</param>
            /// <param name="maxFramebuffers"></param>
            /// <param name="numFramebuffers">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void ExtGetFramebuffers([OutAttribute] UInt32[] framebuffers, Int32 maxFramebuffers, [OutAttribute] Int32[] numFramebuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "framebuffers_pinned");
                        if(framebuffers != null && framebuffers.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("framebuffers_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("framebuffers_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numFramebuffers_pinned");
                        if(numFramebuffers != null && numFramebuffers.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("numFramebuffers_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("numFramebuffers_pinned");
                        }
                        Silk.Cil.LoadByName("framebuffers_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numFramebuffers_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(110);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="framebuffers">[length: maxFramebuffers]</param>
            /// <param name="maxFramebuffers"></param>
            /// <param name="numFramebuffers">[length: 1]</param>
            [CLSCompliant(false)]
            public static void ExtGetFramebuffers([OutAttribute] UInt32[] framebuffers, Int32 maxFramebuffers, [OutAttribute] out Int32 numFramebuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "framebuffers_pinned");
                        if(framebuffers != null && framebuffers.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("framebuffers_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("framebuffers_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numFramebuffers_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("numFramebuffers_pinned");
                        Silk.Cil.LoadByName("framebuffers_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numFramebuffers_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(110);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="framebuffers">[length: maxFramebuffers]</param>
            /// <param name="maxFramebuffers"></param>
            /// <param name="numFramebuffers">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void ExtGetFramebuffers([OutAttribute] out UInt32 framebuffers, Int32 maxFramebuffers, [OutAttribute] out Int32 numFramebuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "framebuffers_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("framebuffers_pinned");
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numFramebuffers_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("numFramebuffers_pinned");
                        Silk.Cil.LoadByName("framebuffers_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numFramebuffers_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(110);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="framebuffers">[length: maxFramebuffers]</param>
            /// <param name="maxFramebuffers"></param>
            /// <param name="numFramebuffers">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static unsafe void ExtGetFramebuffers([OutAttribute] UInt32* framebuffers, Int32 maxFramebuffers, [OutAttribute] Int32* numFramebuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(110);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="program"></param>
            /// <param name="shadertype"></param>
            /// <param name="source"></param>
            /// <param name="length"></param>
            [CLSCompliant(false)]
            public static void ExtGetProgramBinarySource(Int32 program, OpenTK.Graphics.ES20.All shadertype, [OutAttribute] StringBuilder source, [OutAttribute] Int32[] length)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr source_sb_ptr = IntPtr.Zero;
                        try
                        {
                            source_sb_ptr = Marshal.AllocHGlobal(source.Capacity + 1);
                            Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                            if(length != null && length.Length != 0)
                            {
                                Silk.Cil.Ldarg(3);
                                Silk.Cil.Ldc_I4(0);
                                Silk.Cil.Ldelema("System.Int32");
                                Silk.Cil.StoreByName("length_pinned");
                            }
                            else
                            {
                                Silk.Cil.Ldc_I4(0);
                                Silk.Cil.Conv_U();
                                Silk.Cil.StoreByName("length_pinned");
                            }
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Load(source_sb_ptr);
                            Silk.Cil.LoadByName("length_pinned");
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(111);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(IntPtr), typeof(Int32*));
                            MarshalPtrToStringBuilder(source_sb_ptr, source);
                        } finally {
                            Marshal.FreeHGlobal(source_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="program"></param>
            /// <param name="shadertype"></param>
            /// <param name="source"></param>
            /// <param name="length"></param>
            [CLSCompliant(false)]
            public static void ExtGetProgramBinarySource(Int32 program, OpenTK.Graphics.ES20.All shadertype, [OutAttribute] StringBuilder source, [OutAttribute] out Int32 length)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr source_sb_ptr = IntPtr.Zero;
                        try
                        {
                            source_sb_ptr = Marshal.AllocHGlobal(source.Capacity + 1);
                            Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.StoreByName("length_pinned");
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Load(source_sb_ptr);
                            Silk.Cil.LoadByName("length_pinned");
                            Silk.Cil.Conv_I();
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(111);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(IntPtr), typeof(Int32*));
                            MarshalPtrToStringBuilder(source_sb_ptr, source);
                        } finally {
                            Marshal.FreeHGlobal(source_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="program"></param>
            /// <param name="shadertype"></param>
            /// <param name="source"></param>
            /// <param name="length"></param>
            [CLSCompliant(false)]
            public static unsafe void ExtGetProgramBinarySource(Int32 program, OpenTK.Graphics.ES20.All shadertype, [OutAttribute] StringBuilder source, [OutAttribute] Int32* length)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr source_sb_ptr = IntPtr.Zero;
                        try
                        {
                            source_sb_ptr = Marshal.AllocHGlobal(source.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Load(source_sb_ptr);
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(111);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(IntPtr), typeof(Int32*));
                            MarshalPtrToStringBuilder(source_sb_ptr, source);
                        } finally {
                            Marshal.FreeHGlobal(source_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="program"></param>
            /// <param name="shadertype"></param>
            /// <param name="source"></param>
            /// <param name="length"></param>
            [CLSCompliant(false)]
            public static void ExtGetProgramBinarySource(UInt32 program, OpenTK.Graphics.ES20.All shadertype, [OutAttribute] StringBuilder source, [OutAttribute] Int32[] length)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr source_sb_ptr = IntPtr.Zero;
                        try
                        {
                            source_sb_ptr = Marshal.AllocHGlobal(source.Capacity + 1);
                            Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                            if(length != null && length.Length != 0)
                            {
                                Silk.Cil.Ldarg(3);
                                Silk.Cil.Ldc_I4(0);
                                Silk.Cil.Ldelema("System.Int32");
                                Silk.Cil.StoreByName("length_pinned");
                            }
                            else
                            {
                                Silk.Cil.Ldc_I4(0);
                                Silk.Cil.Conv_U();
                                Silk.Cil.StoreByName("length_pinned");
                            }
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Load(source_sb_ptr);
                            Silk.Cil.LoadByName("length_pinned");
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(111);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(IntPtr), typeof(Int32*));
                            MarshalPtrToStringBuilder(source_sb_ptr, source);
                        } finally {
                            Marshal.FreeHGlobal(source_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="program"></param>
            /// <param name="shadertype"></param>
            /// <param name="source"></param>
            /// <param name="length"></param>
            [CLSCompliant(false)]
            public static void ExtGetProgramBinarySource(UInt32 program, OpenTK.Graphics.ES20.All shadertype, [OutAttribute] StringBuilder source, [OutAttribute] out Int32 length)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr source_sb_ptr = IntPtr.Zero;
                        try
                        {
                            source_sb_ptr = Marshal.AllocHGlobal(source.Capacity + 1);
                            Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.StoreByName("length_pinned");
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Load(source_sb_ptr);
                            Silk.Cil.LoadByName("length_pinned");
                            Silk.Cil.Conv_I();
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(111);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(IntPtr), typeof(Int32*));
                            MarshalPtrToStringBuilder(source_sb_ptr, source);
                        } finally {
                            Marshal.FreeHGlobal(source_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="program"></param>
            /// <param name="shadertype"></param>
            /// <param name="source"></param>
            /// <param name="length"></param>
            [CLSCompliant(false)]
            public static unsafe void ExtGetProgramBinarySource(UInt32 program, OpenTK.Graphics.ES20.All shadertype, [OutAttribute] StringBuilder source, [OutAttribute] Int32* length)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr source_sb_ptr = IntPtr.Zero;
                        try
                        {
                            source_sb_ptr = Marshal.AllocHGlobal(source.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Load(source_sb_ptr);
                            Silk.Cil.Ldarg(3);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(111);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(IntPtr), typeof(Int32*));
                            MarshalPtrToStringBuilder(source_sb_ptr, source);
                        } finally {
                            Marshal.FreeHGlobal(source_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="programs">[length: maxPrograms]</param>
            /// <param name="maxPrograms"></param>
            /// <param name="numPrograms">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void ExtGetProgram([OutAttribute] Int32[] programs, Int32 maxPrograms, [OutAttribute] Int32[] numPrograms)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "programs_pinned");
                        if(programs != null && programs.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("programs_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("programs_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numPrograms_pinned");
                        if(numPrograms != null && numPrograms.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("numPrograms_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("numPrograms_pinned");
                        }
                        Silk.Cil.LoadByName("programs_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numPrograms_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(112);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="programs">[length: maxPrograms]</param>
            /// <param name="maxPrograms"></param>
            /// <param name="numPrograms">[length: 1]</param>
            [CLSCompliant(false)]
            public static void ExtGetProgram([OutAttribute] Int32[] programs, Int32 maxPrograms, [OutAttribute] out Int32 numPrograms)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "programs_pinned");
                        if(programs != null && programs.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("programs_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("programs_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numPrograms_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("numPrograms_pinned");
                        Silk.Cil.LoadByName("programs_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numPrograms_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(112);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="programs">[length: maxPrograms]</param>
            /// <param name="maxPrograms"></param>
            /// <param name="numPrograms">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void ExtGetProgram([OutAttribute] out Int32 programs, Int32 maxPrograms, [OutAttribute] out Int32 numPrograms)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "programs_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("programs_pinned");
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numPrograms_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("numPrograms_pinned");
                        Silk.Cil.LoadByName("programs_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numPrograms_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(112);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="programs">[length: maxPrograms]</param>
            /// <param name="maxPrograms"></param>
            /// <param name="numPrograms">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static unsafe void ExtGetProgram([OutAttribute] Int32* programs, Int32 maxPrograms, [OutAttribute] Int32* numPrograms)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(112);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="programs">[length: maxPrograms]</param>
            /// <param name="maxPrograms"></param>
            /// <param name="numPrograms">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void ExtGetProgram([OutAttribute] UInt32[] programs, Int32 maxPrograms, [OutAttribute] Int32[] numPrograms)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "programs_pinned");
                        if(programs != null && programs.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("programs_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("programs_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numPrograms_pinned");
                        if(numPrograms != null && numPrograms.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("numPrograms_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("numPrograms_pinned");
                        }
                        Silk.Cil.LoadByName("programs_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numPrograms_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(112);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="programs">[length: maxPrograms]</param>
            /// <param name="maxPrograms"></param>
            /// <param name="numPrograms">[length: 1]</param>
            [CLSCompliant(false)]
            public static void ExtGetProgram([OutAttribute] UInt32[] programs, Int32 maxPrograms, [OutAttribute] out Int32 numPrograms)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "programs_pinned");
                        if(programs != null && programs.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("programs_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("programs_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numPrograms_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("numPrograms_pinned");
                        Silk.Cil.LoadByName("programs_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numPrograms_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(112);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="programs">[length: maxPrograms]</param>
            /// <param name="maxPrograms"></param>
            /// <param name="numPrograms">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void ExtGetProgram([OutAttribute] out UInt32 programs, Int32 maxPrograms, [OutAttribute] out Int32 numPrograms)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "programs_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("programs_pinned");
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numPrograms_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("numPrograms_pinned");
                        Silk.Cil.LoadByName("programs_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numPrograms_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(112);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="programs">[length: maxPrograms]</param>
            /// <param name="maxPrograms"></param>
            /// <param name="numPrograms">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static unsafe void ExtGetProgram([OutAttribute] UInt32* programs, Int32 maxPrograms, [OutAttribute] Int32* numPrograms)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(112);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="renderbuffers">[length: maxRenderbuffers]</param>
            /// <param name="maxRenderbuffers"></param>
            /// <param name="numRenderbuffers">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void ExtGetRenderbuffers([OutAttribute] Int32[] renderbuffers, Int32 maxRenderbuffers, [OutAttribute] Int32[] numRenderbuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "renderbuffers_pinned");
                        if(renderbuffers != null && renderbuffers.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("renderbuffers_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("renderbuffers_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numRenderbuffers_pinned");
                        if(numRenderbuffers != null && numRenderbuffers.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("numRenderbuffers_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("numRenderbuffers_pinned");
                        }
                        Silk.Cil.LoadByName("renderbuffers_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numRenderbuffers_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(113);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="renderbuffers">[length: maxRenderbuffers]</param>
            /// <param name="maxRenderbuffers"></param>
            /// <param name="numRenderbuffers">[length: 1]</param>
            [CLSCompliant(false)]
            public static void ExtGetRenderbuffers([OutAttribute] Int32[] renderbuffers, Int32 maxRenderbuffers, [OutAttribute] out Int32 numRenderbuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "renderbuffers_pinned");
                        if(renderbuffers != null && renderbuffers.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("renderbuffers_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("renderbuffers_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numRenderbuffers_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("numRenderbuffers_pinned");
                        Silk.Cil.LoadByName("renderbuffers_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numRenderbuffers_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(113);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="renderbuffers">[length: maxRenderbuffers]</param>
            /// <param name="maxRenderbuffers"></param>
            /// <param name="numRenderbuffers">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void ExtGetRenderbuffers([OutAttribute] out Int32 renderbuffers, Int32 maxRenderbuffers, [OutAttribute] out Int32 numRenderbuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "renderbuffers_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("renderbuffers_pinned");
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numRenderbuffers_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("numRenderbuffers_pinned");
                        Silk.Cil.LoadByName("renderbuffers_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numRenderbuffers_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(113);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="renderbuffers">[length: maxRenderbuffers]</param>
            /// <param name="maxRenderbuffers"></param>
            /// <param name="numRenderbuffers">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static unsafe void ExtGetRenderbuffers([OutAttribute] Int32* renderbuffers, Int32 maxRenderbuffers, [OutAttribute] Int32* numRenderbuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(113);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="renderbuffers">[length: maxRenderbuffers]</param>
            /// <param name="maxRenderbuffers"></param>
            /// <param name="numRenderbuffers">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void ExtGetRenderbuffers([OutAttribute] UInt32[] renderbuffers, Int32 maxRenderbuffers, [OutAttribute] Int32[] numRenderbuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "renderbuffers_pinned");
                        if(renderbuffers != null && renderbuffers.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("renderbuffers_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("renderbuffers_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numRenderbuffers_pinned");
                        if(numRenderbuffers != null && numRenderbuffers.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("numRenderbuffers_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("numRenderbuffers_pinned");
                        }
                        Silk.Cil.LoadByName("renderbuffers_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numRenderbuffers_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(113);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="renderbuffers">[length: maxRenderbuffers]</param>
            /// <param name="maxRenderbuffers"></param>
            /// <param name="numRenderbuffers">[length: 1]</param>
            [CLSCompliant(false)]
            public static void ExtGetRenderbuffers([OutAttribute] UInt32[] renderbuffers, Int32 maxRenderbuffers, [OutAttribute] out Int32 numRenderbuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "renderbuffers_pinned");
                        if(renderbuffers != null && renderbuffers.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("renderbuffers_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("renderbuffers_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numRenderbuffers_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("numRenderbuffers_pinned");
                        Silk.Cil.LoadByName("renderbuffers_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numRenderbuffers_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(113);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="renderbuffers">[length: maxRenderbuffers]</param>
            /// <param name="maxRenderbuffers"></param>
            /// <param name="numRenderbuffers">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void ExtGetRenderbuffers([OutAttribute] out UInt32 renderbuffers, Int32 maxRenderbuffers, [OutAttribute] out Int32 numRenderbuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "renderbuffers_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("renderbuffers_pinned");
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numRenderbuffers_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("numRenderbuffers_pinned");
                        Silk.Cil.LoadByName("renderbuffers_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numRenderbuffers_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(113);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="renderbuffers">[length: maxRenderbuffers]</param>
            /// <param name="maxRenderbuffers"></param>
            /// <param name="numRenderbuffers">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static unsafe void ExtGetRenderbuffers([OutAttribute] UInt32* renderbuffers, Int32 maxRenderbuffers, [OutAttribute] Int32* numRenderbuffers)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(113);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="shaders">[length: maxShaders]</param>
            /// <param name="maxShaders"></param>
            /// <param name="numShaders">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void ExtGetShaders([OutAttribute] Int32[] shaders, Int32 maxShaders, [OutAttribute] Int32[] numShaders)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "shaders_pinned");
                        if(shaders != null && shaders.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("shaders_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("shaders_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numShaders_pinned");
                        if(numShaders != null && numShaders.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("numShaders_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("numShaders_pinned");
                        }
                        Silk.Cil.LoadByName("shaders_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numShaders_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(114);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="shaders">[length: maxShaders]</param>
            /// <param name="maxShaders"></param>
            /// <param name="numShaders">[length: 1]</param>
            [CLSCompliant(false)]
            public static void ExtGetShaders([OutAttribute] Int32[] shaders, Int32 maxShaders, [OutAttribute] out Int32 numShaders)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "shaders_pinned");
                        if(shaders != null && shaders.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("shaders_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("shaders_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numShaders_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("numShaders_pinned");
                        Silk.Cil.LoadByName("shaders_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numShaders_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(114);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="shaders">[length: maxShaders]</param>
            /// <param name="maxShaders"></param>
            /// <param name="numShaders">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void ExtGetShaders([OutAttribute] out Int32 shaders, Int32 maxShaders, [OutAttribute] out Int32 numShaders)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "shaders_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("shaders_pinned");
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numShaders_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("numShaders_pinned");
                        Silk.Cil.LoadByName("shaders_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numShaders_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(114);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="shaders">[length: maxShaders]</param>
            /// <param name="maxShaders"></param>
            /// <param name="numShaders">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static unsafe void ExtGetShaders([OutAttribute] Int32* shaders, Int32 maxShaders, [OutAttribute] Int32* numShaders)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(114);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="shaders">[length: maxShaders]</param>
            /// <param name="maxShaders"></param>
            /// <param name="numShaders">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void ExtGetShaders([OutAttribute] UInt32[] shaders, Int32 maxShaders, [OutAttribute] Int32[] numShaders)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "shaders_pinned");
                        if(shaders != null && shaders.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("shaders_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("shaders_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numShaders_pinned");
                        if(numShaders != null && numShaders.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("numShaders_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("numShaders_pinned");
                        }
                        Silk.Cil.LoadByName("shaders_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numShaders_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(114);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="shaders">[length: maxShaders]</param>
            /// <param name="maxShaders"></param>
            /// <param name="numShaders">[length: 1]</param>
            [CLSCompliant(false)]
            public static void ExtGetShaders([OutAttribute] UInt32[] shaders, Int32 maxShaders, [OutAttribute] out Int32 numShaders)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "shaders_pinned");
                        if(shaders != null && shaders.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("shaders_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("shaders_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numShaders_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("numShaders_pinned");
                        Silk.Cil.LoadByName("shaders_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numShaders_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(114);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="shaders">[length: maxShaders]</param>
            /// <param name="maxShaders"></param>
            /// <param name="numShaders">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static void ExtGetShaders([OutAttribute] out UInt32 shaders, Int32 maxShaders, [OutAttribute] out Int32 numShaders)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "shaders_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("shaders_pinned");
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numShaders_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("numShaders_pinned");
                        Silk.Cil.LoadByName("shaders_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numShaders_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(114);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="shaders">[length: maxShaders]</param>
            /// <param name="maxShaders"></param>
            /// <param name="numShaders">[length: 1]</param>
            [Obsolete("Use out overload instead")]
            [CLSCompliant(false)]
            public static unsafe void ExtGetShaders([OutAttribute] UInt32* shaders, Int32 maxShaders, [OutAttribute] Int32* numShaders)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(114);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="texture"></param>
            /// <param name="face"></param>
            /// <param name="level"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [CLSCompliant(false)]
            public static void ExtGetTexLevelParameter(Int32 texture, OpenTK.Graphics.ES20.All face, Int32 level, OpenTK.Graphics.ES20.All pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(115);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="texture"></param>
            /// <param name="face"></param>
            /// <param name="level"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [CLSCompliant(false)]
            public static void ExtGetTexLevelParameter(Int32 texture, OpenTK.Graphics.ES20.All face, Int32 level, OpenTK.Graphics.ES20.All pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(115);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="texture"></param>
            /// <param name="face"></param>
            /// <param name="level"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [CLSCompliant(false)]
            public static unsafe void ExtGetTexLevelParameter(Int32 texture, OpenTK.Graphics.ES20.All face, Int32 level, OpenTK.Graphics.ES20.All pname, [OutAttribute] Int32* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(115);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="texture"></param>
            /// <param name="face"></param>
            /// <param name="level"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [CLSCompliant(false)]
            public static void ExtGetTexLevelParameter(UInt32 texture, OpenTK.Graphics.ES20.All face, Int32 level, OpenTK.Graphics.ES20.All pname, [OutAttribute] Int32[] @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        if(@params != null && @params.Length != 0)
                        {
                            Silk.Cil.Ldarg(4);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("params_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(115);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="texture"></param>
            /// <param name="face"></param>
            /// <param name="level"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [CLSCompliant(false)]
            public static void ExtGetTexLevelParameter(UInt32 texture, OpenTK.Graphics.ES20.All face, Int32 level, OpenTK.Graphics.ES20.All pname, [OutAttribute] out Int32 @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "params_pinned");
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.StoreByName("params_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.LoadByName("params_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(115);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="texture"></param>
            /// <param name="face"></param>
            /// <param name="level"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [CLSCompliant(false)]
            public static unsafe void ExtGetTexLevelParameter(UInt32 texture, OpenTK.Graphics.ES20.All face, Int32 level, OpenTK.Graphics.ES20.All pname, [OutAttribute] Int32* @params)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(115);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32), typeof(OpenTK.Graphics.ES20.All), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="target"></param>
            /// <param name="level"></param>
            /// <param name="xoffset"></param>
            /// <param name="yoffset"></param>
            /// <param name="zoffset"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="depth"></param>
            /// <param name="format"></param>
            /// <param name="type"></param>
            /// <param name="texels"></param>
            public static void ExtGetTexSubImage(OpenTK.Graphics.ES20.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, [OutAttribute] IntPtr texels)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldarg(9);
                        Silk.Cil.Ldarg(10);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(116);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.All), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.All), typeof(OpenTK.Graphics.ES20.All), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="target"></param>
            /// <param name="level"></param>
            /// <param name="xoffset"></param>
            /// <param name="yoffset"></param>
            /// <param name="zoffset"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="depth"></param>
            /// <param name="format"></param>
            /// <param name="type"></param>
            /// <param name="texels"></param>
            [CLSCompliant(false)]
            public static void ExtGetTexSubImage<T10>(OpenTK.Graphics.ES20.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, [InAttribute, OutAttribute] T10[] texels)
                where T10 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T10& pinned", "texels_pinned");
                        if(texels != null && texels.Length != 0)
                        {
                            Silk.Cil.Ldarg(10);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("T10");
                            Silk.Cil.StoreByName("texels_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("texels_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldarg(9);
                        Silk.Cil.LoadByName("texels_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(116);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.All), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.All), typeof(OpenTK.Graphics.ES20.All), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="target"></param>
            /// <param name="level"></param>
            /// <param name="xoffset"></param>
            /// <param name="yoffset"></param>
            /// <param name="zoffset"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="depth"></param>
            /// <param name="format"></param>
            /// <param name="type"></param>
            /// <param name="texels"></param>
            [CLSCompliant(false)]
            public static void ExtGetTexSubImage<T10>(OpenTK.Graphics.ES20.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, [InAttribute, OutAttribute] T10[,] texels)
                where T10 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T10& pinned", "texels_pinned");
                        if(texels != null && texels.Length != 0)
                        {
                            Silk.Cil.Ldarg(10);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T10[,]::Address(System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("texels_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("texels_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldarg(9);
                        Silk.Cil.LoadByName("texels_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(116);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.All), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.All), typeof(OpenTK.Graphics.ES20.All), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="target"></param>
            /// <param name="level"></param>
            /// <param name="xoffset"></param>
            /// <param name="yoffset"></param>
            /// <param name="zoffset"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="depth"></param>
            /// <param name="format"></param>
            /// <param name="type"></param>
            /// <param name="texels"></param>
            [CLSCompliant(false)]
            public static void ExtGetTexSubImage<T10>(OpenTK.Graphics.ES20.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, [InAttribute, OutAttribute] T10[,,] texels)
                where T10 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T10& pinned", "texels_pinned");
                        if(texels != null && texels.Length != 0)
                        {
                            Silk.Cil.Ldarg(10);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Call("T10[,,]::Address(System.Int32,System.Int32,System.Int32)");
                            Silk.Cil.StoreByName("texels_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("texels_pinned");
                        }
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldarg(9);
                        Silk.Cil.LoadByName("texels_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(116);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.All), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.All), typeof(OpenTK.Graphics.ES20.All), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="target"></param>
            /// <param name="level"></param>
            /// <param name="xoffset"></param>
            /// <param name="yoffset"></param>
            /// <param name="zoffset"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="depth"></param>
            /// <param name="format"></param>
            /// <param name="type"></param>
            /// <param name="texels"></param>
            public static void ExtGetTexSubImage<T10>(OpenTK.Graphics.ES20.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, [InAttribute, OutAttribute] ref T10 texels)
                where T10 : struct

            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("T10& pinned", "texels_pinned");
                        Silk.Cil.Ldarg(10);
                        Silk.Cil.StoreByName("texels_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Ldarg(5);
                        Silk.Cil.Ldarg(6);
                        Silk.Cil.Ldarg(7);
                        Silk.Cil.Ldarg(8);
                        Silk.Cil.Ldarg(9);
                        Silk.Cil.LoadByName("texels_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(116);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.All), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(OpenTK.Graphics.ES20.All), typeof(OpenTK.Graphics.ES20.All), typeof(IntPtr));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="textures"></param>
            /// <param name="maxTextures"></param>
            /// <param name="numTextures"></param>
            [CLSCompliant(false)]
            public static void ExtGetTextures([OutAttribute] Int32[] textures, Int32 maxTextures, [OutAttribute] Int32[] numTextures)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "textures_pinned");
                        if(textures != null && textures.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("textures_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("textures_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numTextures_pinned");
                        if(numTextures != null && numTextures.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("numTextures_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("numTextures_pinned");
                        }
                        Silk.Cil.LoadByName("textures_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numTextures_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(117);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="textures"></param>
            /// <param name="maxTextures"></param>
            /// <param name="numTextures"></param>
            [CLSCompliant(false)]
            public static void ExtGetTextures([OutAttribute] out Int32 textures, Int32 maxTextures, [OutAttribute] out Int32 numTextures)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "textures_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("textures_pinned");
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numTextures_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("numTextures_pinned");
                        Silk.Cil.LoadByName("textures_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numTextures_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(117);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="textures"></param>
            /// <param name="maxTextures"></param>
            /// <param name="numTextures"></param>
            [CLSCompliant(false)]
            public static unsafe void ExtGetTextures([OutAttribute] Int32* textures, Int32 maxTextures, [OutAttribute] Int32* numTextures)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(117);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="textures"></param>
            /// <param name="maxTextures"></param>
            /// <param name="numTextures"></param>
            [CLSCompliant(false)]
            public static void ExtGetTextures([OutAttribute] UInt32[] textures, Int32 maxTextures, [OutAttribute] Int32[] numTextures)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "textures_pinned");
                        if(textures != null && textures.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("textures_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("textures_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numTextures_pinned");
                        if(numTextures != null && numTextures.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("numTextures_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("numTextures_pinned");
                        }
                        Silk.Cil.LoadByName("textures_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numTextures_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(117);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="textures"></param>
            /// <param name="maxTextures"></param>
            /// <param name="numTextures"></param>
            [CLSCompliant(false)]
            public static void ExtGetTextures([OutAttribute] out UInt32 textures, Int32 maxTextures, [OutAttribute] out Int32 numTextures)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "textures_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("textures_pinned");
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "numTextures_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("numTextures_pinned");
                        Silk.Cil.LoadByName("textures_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("numTextures_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(117);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="textures"></param>
            /// <param name="maxTextures"></param>
            /// <param name="numTextures"></param>
            [CLSCompliant(false)]
            public static unsafe void ExtGetTextures([OutAttribute] UInt32* textures, Int32 maxTextures, [OutAttribute] Int32* numTextures)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(117);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32*), typeof(Int32), typeof(Int32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="program"></param>
            [CLSCompliant(false)]
            public static bool ExtIsProgramBinary(Int32 program)
            {
                unsafe
                {
                    bool __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(118);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(byte), typeof(UInt32));
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            /// <param name="program"></param>
            [CLSCompliant(false)]
            public static bool ExtIsProgramBinary(UInt32 program)
            {
                unsafe
                {
                    bool __return_result;
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(118);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(byte), typeof(UInt32));
                        Silk.Cil.Store(out __return_result);
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Load(__return_result);
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_extended_get]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="param"></param>
            public static void ExtTexObjectStateOverride(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All pname, Int32 param)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(119);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(OpenTK.Graphics.ES20.All), typeof(OpenTK.Graphics.ES20.All), typeof(Int32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_driver_control]</summary>
            /// <param name="num"></param>
            /// <param name="size"></param>
            /// <param name="driverControls">[length: size]</param>
            [CLSCompliant(false)]
            public static void GetDriverControl([OutAttribute] Int32[] num, Int32 size, [OutAttribute] Int32[] driverControls)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "num_pinned");
                        if(num != null && num.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("num_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("num_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "driverControls_pinned");
                        if(driverControls != null && driverControls.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("driverControls_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("driverControls_pinned");
                        }
                        Silk.Cil.LoadByName("num_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("driverControls_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(151);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_driver_control]</summary>
            /// <param name="num"></param>
            /// <param name="size"></param>
            /// <param name="driverControls">[length: size]</param>
            [CLSCompliant(false)]
            public static void GetDriverControl([OutAttribute] Int32[] num, Int32 size, [OutAttribute] UInt32[] driverControls)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "num_pinned");
                        if(num != null && num.Length != 0)
                        {
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("num_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("num_pinned");
                        }
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "driverControls_pinned");
                        if(driverControls != null && driverControls.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.UInt32");
                            Silk.Cil.StoreByName("driverControls_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("driverControls_pinned");
                        }
                        Silk.Cil.LoadByName("num_pinned");
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("driverControls_pinned");
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(151);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_driver_control]</summary>
            /// <param name="num"></param>
            /// <param name="size"></param>
            /// <param name="driverControls">[length: size]</param>
            [CLSCompliant(false)]
            public static void GetDriverControl([OutAttribute] out Int32 num, Int32 size, [OutAttribute] out Int32 driverControls)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "num_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("num_pinned");
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "driverControls_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("driverControls_pinned");
                        Silk.Cil.LoadByName("num_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("driverControls_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(151);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_driver_control]</summary>
            /// <param name="num"></param>
            /// <param name="size"></param>
            /// <param name="driverControls">[length: size]</param>
            [CLSCompliant(false)]
            public static void GetDriverControl([OutAttribute] out Int32 num, Int32 size, [OutAttribute] out UInt32 driverControls)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "num_pinned");
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.StoreByName("num_pinned");
                        Silk.Cil.DeclareLocal("System.UInt32& pinned", "driverControls_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("driverControls_pinned");
                        Silk.Cil.LoadByName("num_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.LoadByName("driverControls_pinned");
                        Silk.Cil.Conv_I();
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(151);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_driver_control]</summary>
            /// <param name="num"></param>
            /// <param name="size"></param>
            /// <param name="driverControls">[length: size]</param>
            [CLSCompliant(false)]
            public static unsafe void GetDriverControl([OutAttribute] Int32* num, Int32 size, [OutAttribute] Int32* driverControls)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(151);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_driver_control]</summary>
            /// <param name="num"></param>
            /// <param name="size"></param>
            /// <param name="driverControls">[length: size]</param>
            [CLSCompliant(false)]
            public static unsafe void GetDriverControl([OutAttribute] Int32* num, Int32 size, [OutAttribute] UInt32* driverControls)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(151);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(Int32*), typeof(Int32), typeof(UInt32*));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_driver_control]</summary>
            /// <param name="driverControl"></param>
            /// <param name="bufSize"></param>
            /// <param name="length"></param>
            /// <param name="driverControlString">[length: bufSize]</param>
            [CLSCompliant(false)]
            public static void GetDriverControlString(Int32 driverControl, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder driverControlString)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        if(length != null && length.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        IntPtr driverControlString_sb_ptr = IntPtr.Zero;
                        try
                        {
                            driverControlString_sb_ptr = Marshal.AllocHGlobal(driverControlString.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.LoadByName("length_pinned");
                            Silk.Cil.Load(driverControlString_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(152);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(driverControlString_sb_ptr, driverControlString);
                        } finally {
                            Marshal.FreeHGlobal(driverControlString_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_driver_control]</summary>
            /// <param name="driverControl"></param>
            /// <param name="bufSize"></param>
            /// <param name="length"></param>
            /// <param name="driverControlString">[length: bufSize]</param>
            [CLSCompliant(false)]
            public static void GetDriverControlString(Int32 driverControl, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder driverControlString)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("length_pinned");
                        IntPtr driverControlString_sb_ptr = IntPtr.Zero;
                        try
                        {
                            driverControlString_sb_ptr = Marshal.AllocHGlobal(driverControlString.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.LoadByName("length_pinned");
                            Silk.Cil.Conv_I();
                            Silk.Cil.Load(driverControlString_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(152);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(driverControlString_sb_ptr, driverControlString);
                        } finally {
                            Marshal.FreeHGlobal(driverControlString_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_driver_control]</summary>
            /// <param name="driverControl"></param>
            /// <param name="bufSize"></param>
            /// <param name="length"></param>
            /// <param name="driverControlString">[length: bufSize]</param>
            [CLSCompliant(false)]
            public static unsafe void GetDriverControlString(Int32 driverControl, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder driverControlString)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr driverControlString_sb_ptr = IntPtr.Zero;
                        try
                        {
                            driverControlString_sb_ptr = Marshal.AllocHGlobal(driverControlString.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Load(driverControlString_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(152);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(driverControlString_sb_ptr, driverControlString);
                        } finally {
                            Marshal.FreeHGlobal(driverControlString_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_driver_control]</summary>
            /// <param name="driverControl"></param>
            /// <param name="bufSize"></param>
            /// <param name="length"></param>
            /// <param name="driverControlString">[length: bufSize]</param>
            [CLSCompliant(false)]
            public static void GetDriverControlString(UInt32 driverControl, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder driverControlString)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        if(length != null && length.Length != 0)
                        {
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Ldelema("System.Int32");
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        else
                        {
                            Silk.Cil.Ldc_I4(0);
                            Silk.Cil.Conv_U();
                            Silk.Cil.StoreByName("length_pinned");
                        }
                        IntPtr driverControlString_sb_ptr = IntPtr.Zero;
                        try
                        {
                            driverControlString_sb_ptr = Marshal.AllocHGlobal(driverControlString.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.LoadByName("length_pinned");
                            Silk.Cil.Load(driverControlString_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(152);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(driverControlString_sb_ptr, driverControlString);
                        } finally {
                            Marshal.FreeHGlobal(driverControlString_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_driver_control]</summary>
            /// <param name="driverControl"></param>
            /// <param name="bufSize"></param>
            /// <param name="length"></param>
            /// <param name="driverControlString">[length: bufSize]</param>
            [CLSCompliant(false)]
            public static void GetDriverControlString(UInt32 driverControl, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder driverControlString)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.DeclareLocal("System.Int32& pinned", "length_pinned");
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.StoreByName("length_pinned");
                        IntPtr driverControlString_sb_ptr = IntPtr.Zero;
                        try
                        {
                            driverControlString_sb_ptr = Marshal.AllocHGlobal(driverControlString.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.LoadByName("length_pinned");
                            Silk.Cil.Conv_I();
                            Silk.Cil.Load(driverControlString_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(152);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(driverControlString_sb_ptr, driverControlString);
                        } finally {
                            Marshal.FreeHGlobal(driverControlString_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_driver_control]</summary>
            /// <param name="driverControl"></param>
            /// <param name="bufSize"></param>
            /// <param name="length"></param>
            /// <param name="driverControlString">[length: bufSize]</param>
            [CLSCompliant(false)]
            public static unsafe void GetDriverControlString(UInt32 driverControl, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder driverControlString)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        IntPtr driverControlString_sb_ptr = IntPtr.Zero;
                        try
                        {
                            driverControlString_sb_ptr = Marshal.AllocHGlobal(driverControlString.Capacity + 1);
                            Silk.Cil.Ldarg(0);
                            Silk.Cil.Ldarg(1);
                            Silk.Cil.Ldarg(2);
                            Silk.Cil.Load(driverControlString_sb_ptr);
                            Silk.Cil.Load(EntryPoints);
                            Silk.Cil.Ldc_I4(152);
                            Silk.Cil.Ldelem_I();
                            Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(Int32), typeof(Int32*), typeof(IntPtr));
                            MarshalPtrToStringBuilder(driverControlString_sb_ptr, driverControlString);
                        } finally {
                            Marshal.FreeHGlobal(driverControlString_sb_ptr);
                        }
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_tiled_rendering]</summary>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="preserveMask"></param>
            [CLSCompliant(false)]
            public static void StartTiling(Int32 x, Int32 y, Int32 width, Int32 height, Int32 preserveMask)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(315);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(UInt32), typeof(UInt32), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

            /// <summary>[requires: QCOM_tiled_rendering]</summary>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="preserveMask"></param>
            [CLSCompliant(false)]
            public static void StartTiling(UInt32 x, UInt32 y, UInt32 width, UInt32 height, UInt32 preserveMask)
            {
                unsafe
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                        Silk.Cil.Ldarg(0);
                        Silk.Cil.Ldarg(1);
                        Silk.Cil.Ldarg(2);
                        Silk.Cil.Ldarg(3);
                        Silk.Cil.Ldarg(4);
                        Silk.Cil.Load(EntryPoints);
                        Silk.Cil.Ldc_I4(315);
                        Silk.Cil.Ldelem_I();
                        Silk.Cil.Calli(System.Runtime.InteropServices.CallingConvention.StdCall, typeof(void), typeof(UInt32), typeof(UInt32), typeof(UInt32), typeof(UInt32), typeof(UInt32));
                    #if DEBUG
                    }
                    #endif
                    Silk.Cil.Ret();
                    throw new InvalidProgramException();
                }
            }

        }

    }
}
